This is a list of details that have been noticed in the installation of ROSE by others.
(Please list most recent version on top (as is done in the ChangeLog).

Version 0.8.7a:
       1) For 64 bit machines you will need to set the CXXFLAGS and CFLAGS to "-fPIC".
          As I recall this is required for the PDFLib, but only for 64 bit systems.
          We will loop for a better way to handle this in the future.

Example of my .cshrc file:
# Required to force PDFLib to use -fPIC option when compiling for 64 bit machines
# (we need to figure out a better solution than this, ultimately).
setenv CXXFLAGS -fPIC
setenv CFLAGS -fPIC

       2)  Note that due to the
way that floating point number are unparsed currently we
run through "make check" with version 3.3.2. A different
number of trailing zeros are unparsed with different versions
of g++, and so this causes some version fo g++ to cause 
one of the internal tests to fail.  This is all being fixed,
but has been an oustanding problem for years.

Version 0.8.6c:
       1) Running build can report messages such as:
               Can't locate object method "path" via package "Autom4te::Request" at /usr/bin/autom4te line 81.
          The solution appears to be to remove the auto4te.cache directories.
          There are two of them in ROSE (so use):
              rm -r src/3rdPartyLibraries/PDFlib-Lite-6.0.2rv/autom4te.cache autom4te.cache

Version 0.8.6a:
    Problems noticed by others:
       1) The makefiles include "-lrt" because of the new performance monitors within ROSE.
          Any pre-existing project will also have to include this standard C library in the link
          line.

       2) GNU g++ version 3.3.x and 3.4.x handle the output of floating point differently.
          Using 3.3.x, the value 235.0 (for example) is output in ROSE as:
             235.000000000000000000000; // 21 trailing zeros
          but in 3.4.x as:
             235.00000000000000; // 14 trailing zeros
          In each case the code used to output the value is:
             stringstream  out;
             out << setiosflags(ios::showpoint) << setprecision(24) << num;
             (*this) << out.str();
          within the unparser (code generator for ROSE).
          It appears that the 3.4.x compiler does not handle the code properly
          (since 24 digits should appear as is correctly handled by the 3.3.x compiler).
          It is unclear at the moment how we should handle this, but as a result of it
          "make check" will fail for some tests (e.g. ROSE/tests/roseTests/loopProcessing).

       3) The usual ROSE rules apply, you should build a compile tree seperately from the 
          source tree.   We may at some point work on fixing this up better, but while it 
          can often be made to work this is not a tested configuration for ROSE and is 
          problematic in several ways (for example, make distclean will remove
          documentation).  One person didn't know this.

       4) Error with newest version of flex/bison (reported by Gabriel): Make failed on
          roseIndependentSupport/dot2gml, it complained that yylineno was defined twice 
          (one in lex.c). So I just removed that definition, and it worked. I did install 
          the latest versions of flex/bison, so it might be a bug on those tools.

       5) In the manual, where it explains how to build the documentation, it mentions 
          "make rose-docs", but the makefile does not seem to support that rule. Use
          "make docs" instead (part of GNU makefile standards).

       6) The distribution of ROSE containing binaries does not work well with g++ version
          3.4.x. This is because the binaries were compiled with g++ version 3.3.2 and 
          the binaries don't mix well.  Problem reported by:
               Changhao Jiang <cjiang@cs.uiuc.edu>
          The solution is to use the 3.3.2 vesion of g++.  The version of ROSE containing 
          all source code will work with g++ 3.4.x (except for floating point format
          problem mentioned above).

       7) Someone had a problem building rose-0.8.6a on  tux06 (linux) with g++ 3.3.2.
          He needed to #include <unistd.h> in
               .../rose-0.8.6a/ROSE/tests/roseTests/astPerformanceTests/testPerformance.C
          because that file uses sleep().  Dan noticed this problem, but only wirh using
          the g++ 3.2.3 compiler.  It is now fixed in what will be checked in next.


   Problems that I expect might be an issue for some people:

       1) Version 0.8.6a adds a few new IR nodes, so this could be a problem for some
          people if this requires additional cases to be handled.

          New IR nodes added in the last year (not all in this version 0.8.6a)
             SgNamespaceDeclarationStatement
             SgNamespaceDefinitionStatement
             SgNamespaceAliasDeclarationStatement
             SgUsingDirectiveStatement
             SgUsingDeclarationStatement
             SgNamespaceSymbol
             SgTemplateInstantiationDirectiveStatement
             SgClassSymbol
             SgFileList 
             SgDirectory
             SgDirectoryList
             SgClassType

       2) This version adds a few data members (e.g. scope is not stored explicitly
          within some declarations, required for subtle C++ reasons).  This data
          value must be set by an access function; both the AST tests and the unparser
          will notice any scopes that are not set properly (or are left to be NULL
          pointers).

       3) AST consistanty tests are much more strict.  The ability to unparse any
          generated code is no indication of the AST being correct.  The consistancy
          tests (e.g. "AstTests::runAllTests(SgNode* node)") are a much more aggressive
          test for the correctness of the AST.  These tests will be made more agressive
          in the future.  (running with -rose:verbose 2 will output the warnings from 
          testing the AST).




 

  


