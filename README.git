##################### How to use smgit #####################
 
git pull not as well supported as git fetch and get merge used directly:
   smgit fetch
   smgit merge origin/master

Alternative to smgit to checkin:
   cd to EDG dir
   git commit -a -m " "
   git push origin/<YOUR BRANCH>
   cd ..
 # NOTE: do not use: "git add EDG/"
   git add EDG
   cd TOPDIR
   git commit -a -m " "
   git push origin <YOUR BRANCH>


#################### Sources of information on git ####################

We will try to give you a fast introduction to git, but you should also consider looking up these documents
  http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html
  http://book.git-scm.com/
  http://www.sourcemage.org/Git_Guide ( more like a FAQ )
  http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide


The first step of using a ROSE git repository is to create a local copy 
    
     git clone /nfs/casc/overture/ROSE/git/ROSE.git git-dq-main-rc

     

on laptop use:
     git clone ssh://dquinlan@tux281.llnl.gov/nfs/casc/overture/ROSE/git/ROSE.git git-dq-main-rc



The next step is to list all the branches available in the central git repository
  
     git branch -a

Make a local branch for every branch in the central repository that you are interested in that tracks the central git repository branch with the same name. For the branch origin/cmake you would for example do:

     git branch cmake --track origin/cmake

Since you can not check in to the master branch, you have to checkout one of the branches. E.g

     git checkout cmake

Use this command to switch between branches. 

After doing some changes you can push those to the central git by doing

     git push origin branch-name

which in the case of the cmake branch would be

     git push cmake

########## Building a Branch for a development team member ################

X     git branch matt master
X     git push origin matt

  New instructions:
      git checkout master
      git pull

    < must edit /nfs/casc/overture/ROSE/git/ROSE.git/hooks/pre-receive 
      file (bottom) to uncomment access control. >

      git push origin master:refs/heads/dj-main-test

    < change back the file: /nfs/casc/overture/ROSE/git/ROSE.git/hooks/pre-receive >

############## Building a new cloned repository and branch using smgit ############

    60  15:47   smgit clone /nfs/casc/overture/ROSE/git/ROSE.git git-dq-java-rc
    62  15:59   cd git-dq-java-rc
  # 64  16:01   smgit branch dq-java-rc --track origin/dq-java-rc // This failed...I don't know why.
    65  16:02   smgit branch dq-java-rc
    66  16:02   smgit checkout dq-java-rc
    67  16:02   git branch

############## WE DESCRIBE HOW TO CREATE A NEW BRANCH  ####################

Suppose you want to do some experimental work on cmake, first checkout cmake
     git checkout cmake

Then create a branch of cmake
     git branch experiment

Then change to that branch

      git checkout experiment

When you want to merge back those changes if they are successful

     git checkout cmake
     git merge experiment

############## WE DESCRIBE HOW YOU MAKE CHANGES TO YOUR BRANCH #############

Given your experimental branch
   git checkout experiment

Create a new file and make git track it
    touch new-file.txt
    git add new-file.txt

Then commit it

     git commit -a

If you want these changes to be pushed to the central git repository type

    git push origin experiment

Since this branch did not exist before, git also created it. 

To get changes from the experiment branch on the central git repository type

    git pull origin experiment


After Peter runs: git fetch (on the git svn clone):
   Copy the changes from all branches in the origin repository to the local repository
   tracking branches:
      git fetch origin

   Merge the changes on the svn branch with my current branch:
      git merge origin/svn


How to add a file:
   git add <file name>


################# How to Test Git Commands ####################

Some Git commands like "reset --hard", "rebase", etc. can make changes
that you might not expect if you're new, and there's not always an easy,
intuitive way to recover if you make a mistake.  So here's what I do if
I want to just try out a command:

   $ git branch backup # create a "backup" branch of your current branch
   $ ... # live dangerously

If everything looks good, delete the backup:

   $ git branch -D backup

Otherwise to recover your original branch:

   $ git reset --hard backup
   $ git branch -d backup

A word of caution: this method doesn't make a backup of files that
aren't managed by Git. So do a "git status" first to see if you need
to be careful of any new files or changes that aren't committed yet.

Another word of caution: don't change history for what you've already
pushed to the central repo!  If you pushed something by mistake then
it's better to push a fix (see "git revert") than change history to make
it look like your bad commit never happened.


#################### Most form of common update ####################

Generally I am on my own branch, so the first step is to switch to "master"
   git checkout master

Get the updates from master to my local repository
   git pull

Check the status
   git status

Switch to my branch
   git checkout dan

Check that I am on the correct branch
   git branch -a

Now merge the changes from "master" into my branch
#  git merge master # Wrong
   git merge origin/master

Note that this will most likely go smoothly if all changes
are taken only from "master".  so it might be helpful (to
avoid conflicts) to NOT try to update using anyone else's
branch.

####################### How to update #######################

You situation might be different, but I update from origin/master.
These commands might be useful to you.

  $ git fetch

will grab all the content from the central repo and make your remote
"origin/*" branches up-to-date. It won't affect any of your local
branches and so is always safe to do. (It's actually the first half of
what a "git pull" does -- "git pull" is a fetch and then a merge.)

  $ git whatchanged origin/master ^dan

will show you what commits are in the "master" branch on the central
repo but aren't on your "dan" branch.  Add a "-p" to see the actual
patches. These are the things that would get merged if you did a "git
merge origin/master" into your "dan" branch.

  $ git whatchanged dan ^origin/dan

will show you changes in your local "dan" branch that you haven't pushed
to the central repo yet.  These are the changes that would get pushed by
a "git push" command.

BTW. the syntax "foo ^bar" is the same as "foo..bar" but I think the
former is more intuitive, especially when foo and bar have both diverged
from their common ancestor.

If you merge from master and then decide you shouldn't have, you can
easily undo the merge:

  $ git fetch   # update your remote branches; always safe to do
  $ git branch  # make sure you're on "dan"
  $ git branch backup # create a temporary backup branch
  $ git merge origin/master # merge changes from remote master

If you don't like that, undo with:

  $ git reset --hard backup  # undoes the merge
  $ git branch -d backup # deletes the "backup" branch

############# Build a new branch which is merged from two other branches ##############

   git checkout -b dan_andreas_merge_test


########### Build a new branch to test an merge with someone else's branch ################

Build a new brach to test a merge
   112  12:22   git checkout -b dan_andreas_merge_test

Pull the changes from the target of the test merge
   114  12:24   git pull origin andreas

Resolve conflict by checking in (git add) the new changed file
   122  12:25   git add tests/roseTests/binaryTests/Makefile.am

Commit the changes to the local repository
   123  12:26   git commit -a

Return to my original branch
   124  12:27   git checkout dan

Copy the changes from the test branch to my original branch
   125  12:27   git fetch dan_andreas_merge_test  // failed
   126  12:27   git pull dan_andreas_merge_test   // failed
   129  12:28   git merge dan_andreas_merge_test  // this worked!

Delete the test branch
   131  12:28   git branch -d dan_andreas_merge_test


#################### GITK ############################

gitk master HEAD andreas cmake dan jeff liao matt peter robb svn thomas windows yi

################ SHOW ###############################

To see what branches are tracked and the semantics of "git pull" use:
   $ git remote show origin


################### Updating to use the new GIT repository ####################

Directions for how to update to the new repository.
   We now have a new repository that splits off the EDG work into a 
"git" submodule.  As a result new local repositories must be built.
The new git repository has the same name and location as the old one
and the old one has been saved (and should be accessible for a short while).

   0) Rename your old local repository (for example, "mv git-rose-dan OLD_git-rose-dan")
      so that you can build a new one (that will use the submodule mechanism).

   1) Build a new local repository:
      a. build the local repository:
           "git clone /nfs/casc/overture/ROSE/git/ROSE.git git-dq-main-rc"
      a2. Build a branch on the remote repository:
         "git push origin origin:refs/heads/dq-<new branch>-rc"
      b. build a local branch to match a branch in the remote repository:
           "git branch dq-<new branch>-rc --track origin/dq-<new branch>-rc"
      c. checkout that local branch (switch to it):
           "git checkout dq-<new branch>-rc"

   2) One-time update the local branch to use git's submodule mechanism.
      a. merge your existing branch with master:
           "git merge origin/master"
         Note that I had to resolve a conflict in "configure.in" after this step.
      b. initialize the submodule mechanism:
           "git submodule init"
      c. update the git submodule:
           "git submodule update"

   3) Forever after, or until better support is available, use:
      a. To switch branches use BOTH:
           "git checkout <branch-name>"
           "git submodule update"
      b. To push:
           NOT CLEAR WHAT the SUBMODULE COMMAND IS.

################## Build a new GIT repository ####################

   Building a shared repository that would then be used to clone
from to generate local repositories:
   "git init --bare --shared=true"
However this must be done in an empty repository, I think.


initialize a repos: enter your working copy, e.g: scripts

 git init
 git add .
 git commit

# cd to parent directory
 cd ..

Cone a bare repository:
 git clone --bare scripts scripts.git

Remove the original
  rm -rf scripts

Now scripts.git is read to be used as remote origin repository.

*************************************************************

An example to build a git repository "Y" from a directory "X".
This example also builds a local git repository "localY".

   mkdir X
   cd X
   touch a.c
   git init
   git add .
   git commit -a
   cd ..
   git clone --bare --shared X Y
   git clone Y localY
   cd localY/
   #git branch dq-main-rc master
   #git push origin dq-main-rc
   #git checkout master
   #git branch -d dq-main-rc
   git branch dq-main-rc --track origin/dq-main-rc
   git branch -a
   git checkout dq-main-rc

Bash script:
#!/bin/sh -ex

# This is the script to build a git repository "Y" from a directory "X"
# and then build a local clone of the git repository "Y" and then build 
# the required branch (a local branch that tracks a non-local branch).

mkdir X
cd X
touch a.c
git init
git add .
git commit -a -m "Added a.c as a test."
cd ..
git clone --bare --shared X Y
git clone Y localY
cd localY/

# This will build a local branch 
# git branch dq-main-rc master
# This will build in in origin
# git push origin dq-main-rc
# This will delete the local branch so that we can call "git branch dq-main-rc --track origin/dq-main-rc"
# git branch -d dq-main-rc

# If we want to avoid building a local branch and then deleting it later then use:
git push origin origin:refs/heads/dq-main-rc

git branch dq-main-rc --track origin/dq-main-rc

git push origin dq-main-rc

git branch -a
git checkout dq-main-rc
 

