This directory hierarchy contains tests (checker + specimen pairs)
that fall into two categories: smoke tests and non-smoke tests.

=== Definitions ===

"Smoke tests" are the minimal set of small, fast, simple tests run by
end users via "make check" to test that ROSE basically functions. All
smoke tests _together_ should take no more than a couple minutes on
average hardware.

"Non-smoke tests" are everything else.

A "test" is a pair consisting of a "checker" (some program that
verifies some ROSE functionality) and an optional "specimen" (some
input to the checker). Specimens for source analysis checkers are
usually small source code files, and specimens for binary analysis
checkers are usually small executables. Another compatible definition
of test is: the basic unit of work done by a makefile, i.e., a make
target and its rules.

A "test" in this context is not the same as in "unit test". A checker
can implement a collection of related unit tests (or even related
function tests for that matter).


=== Directory organization ===

Smoke tests are housed in the $ROSE/tests/smoke directory while
non-smoke tests are house in $ROSE/tests/nonsmoke.  Note that when
"non-smoke" appears as a directory or variable name we always omit the
hyphen (this practice makes parallel concepts more parallel in name,
such as "foo_smoke_bar" vs. "foo_nonsmoke_bar", instead of an extra
understore in the second one).


=== Repository organization ===

Smoke tests (and their checkers and specimens) are housed in the same
repo as the ROSE library source code so they can always be distributed
with ROSE and do some basic, quick sanity checks when the user says
"make check".

Non-smoke tests (and their checkers and specimens), will eventually be
housed in a separate, optional repository which is expected to be
quite large.


=== FAQ ===

Q1. If I have a checker that runs on both smoke and non-smoke
specimens, where should I put it?

    Smoke trumps non-smoke.  If you have a specimen that's used by
    both, or a checker that runs in both then it must be stored in the
    smoke side.  This is because the definition of "smoke" is that
    it's something that happens when the user runs "make check"
    regardless of whether they've downloaded the optional non-smoke
    repo.  A non-smoke makefile is free to reference checkers and/or
    specimens stored in the smoke side, but not vice versa.


Q2. If I create a new specimen, where should I put it?

    The answer has two parts: whether to put the specimen on the smoke
    or non-smoke side, and whether to put the specimen in a directory
    with checkers or in a directory devoted to only specimens.

    Smoke trumps non-smoke.  If the specimen is used by any smoke
    checker (regardless of whether it's also used by a non-smoke
    checker) then it must be stored in the $ROSE/tests/smoke
    hierarchy.

    If you expect the specimen to be used by checkers in more than one
    directory, including the case when its used by both smoke and
    non-smoke checkers, then it must be stored in one of the
    specimen-only $ROSE/tests/*/specimens hierarchies (where "*" is
    either "smoke" or "nonsmoke"), otherwise you're free to store the
    specimen in the same (only) directory where it's used.

    Each of the tests/*/specimens subdirectory has its own organization
    that's up to the maintainer. However, most every directory will
    have a Specimens.inc file whose lists need to be updated.
   

Q3. I added a new specimen (no new checkers yet) and make
    check (or make check-all) already fails. What gives?

    Some makefile rules are written in a way such that they
    automatically create a test target for every specimen known to the
    system.  Furthermore, some of these rules compare the test's
    output with a known good answer. You'll need to contact the test
    author for guidance on how to compute the answer for your new
    specimen for that checker.


Q4. In my non-smoke directory, why do "make check" and "make
    check-smoke" build the non-smoke checkers?

    This is a limitation of automake: automake assumes that "make
    check" depends on all programs that the makefile could generate. A
    more precise approach would be to have each test target depend on
    its checker (which is already true in a correctly written
    makefile).


Q4. What if I have a project that uses non-smoke specimens?

    If a project depends on non-smoke tests, then the project's
    configuration step should verify that the depencency is present,
    the same as it would do for any other dependency.
