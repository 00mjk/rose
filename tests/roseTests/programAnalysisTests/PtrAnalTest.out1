1:func v:foo(v:foo-1-input) => (v:foo-0);
2:v:foo-1-q=&v:foo-1-m;
3:v:foo-1-r=v:foo-1-q;
4:v:foo-1-pp=&v:foo-1-p;
5:(*v:foo-1-pp)=v:foo-1-r
6:v:foo-1-2=(*v:foo-1-pp)
7:v:foo-1-p1=op(v:foo-1-2 c:2 );
8:v:foo-0=v:foo-1-input;
9:return-v:foo;
ctrl: 1->2 always
ctrl: 2->3 always
ctrl: 3->4 always
ctrl: 4->5 always
ctrl: 5->6 always
ctrl: 6->7 always
ctrl: 7->8 always
ctrl: 8->9 always
10:return-v:foo;
ctrl: 9->10 always

 Mapping 
SgBasicBlock:{char *p;char *q;char *r;char **pp;char m;q = &m;r = q;pp = &p;*pp = r;char *p1 =( *pp + 2);return input;}:2->9
SgExprStatement:q = &m;:2->2
SgAssignOp:q = &m:2v:foo-1-q
SgVarRefExp:q:2v:foo-1-q
SgAddressOfOp:&m:2v:foo-1-q
SgVarRefExp:m:2v:foo-1-m
SgExprStatement:r = q;:3->3
SgAssignOp:r = q:3v:foo-1-r
SgVarRefExp:r:3v:foo-1-r
SgVarRefExp:q:3v:foo-1-q
SgExprStatement:pp = &p;:4->4
SgAssignOp:pp = &p:4v:foo-1-pp
SgVarRefExp:pp:4v:foo-1-pp
SgAddressOfOp:&p:4v:foo-1-pp
SgVarRefExp:p:4v:foo-1-p
SgExprStatement:*pp = r;:5->5
SgAssignOp:*pp = r:5v:foo-1-r
SgPointerDerefExp:*pp:5v:foo-1-r
SgVarRefExp:pp:5v:foo-1-pp
SgVarRefExp:r:5v:foo-1-r
SgVariableDeclaration:char *p1 =( *pp + 2);:6->7
SgInitializedName:p1:7v:foo-1-p1
SgAddOp:( *pp + 2):7v:foo-1-p1
SgPointerDerefExp:*pp:7v:foo-1-2
SgVarRefExp:pp:6v:foo-1-pp
SgIntVal:2:7c:2
SgReturnStmt:return input;:8->9
SgVarRefExp:input:8v:foo-1-input
END Mapping 

11:func v:goo(v:goo-3-f) => (v:goo-0);
12:allocate v:goo-3-4;
13:v:goo-3-content=op(v:goo-3-4 );
14:() =v:goo-3-f(v:goo-3-content);
ctrl: 11->12 always
ctrl: 12->13 always
ctrl: 13->14 always

 Mapping 
SgBasicBlock:{char *content = "dklafj";( *f)(content);}:12->14
SgVariableDeclaration:char *content = "dklafj";:12->13
SgInitializedName:content:13v:goo-3-content
SgCastExp:"dklafj":13v:goo-3-content
SgStringVal:"dklafj":13v:goo-3-4
SgExprStatement:( *f)(content);:14->14
SgVarRefExp:f:14v:goo-3-f
SgVarRefExp:content:14v:goo-3-content
END Mapping 

15:func v:main() => (v:main-0);
16:allocate v:main-5-6;
17:v:main-5-content=op(v:main-5-6 );
18:allocate v:main-5-content2;
19:(v:main-5-output) =v:foo(v:main-5-content);
20:() =v:goo(v:foo);
21:v:main-0=c:0;
22:return-v:main;
ctrl: 15->16 always
ctrl: 16->17 always
ctrl: 17->18 always
ctrl: 18->19 always
ctrl: 19->20 always
ctrl: 20->21 always
ctrl: 21->22 always
23:return-v:main;
ctrl: 22->23 always

 Mapping 
SgBasicBlock:{char *content = "adlfkj";char *content2 = new char [4UL];char *output = ::foo(content);::goo(::foo);}:16->22
SgVariableDeclaration:char *content = "adlfkj";:16->17
SgInitializedName:content:17v:main-5-content
SgCastExp:"adlfkj":17v:main-5-content
SgStringVal:"adlfkj":17v:main-5-6
SgVariableDeclaration:char *content2 = new char [4UL];:18->18
SgInitializedName:content2:18v:main-5-content2
SgVariableDeclaration:char *output = foo(content);:19->19
SgInitializedName:output:19v:main-5-output
SgFunctionRefExp:foo:19v:foo
SgVarRefExp:content:19v:main-5-content
SgExprStatement:goo(foo);:20->20
SgFunctionRefExp:goo:20v:goo
SgFunctionRefExp:foo:20v:foo
SgReturnStmt:return 0;:21->22
SgIntVal:0:21c:0
END Mapping 

