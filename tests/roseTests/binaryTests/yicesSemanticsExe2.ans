=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
registers:
    ax      = { {defs={}, expr=v2[32]} }
    cx      = { {defs={}, expr=v3[32]} }
    dx      = { {defs={}, expr=v4[32]} }
    bx      = { {defs={}, expr=v5[32]} }
    sp      = { {defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} }
    bp      = { {defs={}, expr=v7[32]} }
    si      = { {defs={}, expr=v8[32]} }
    di      = { {defs={}, expr=v9[32]} }
    es      = { {defs={}, expr=v10[16]} }
    cs      = { {defs={}, expr=v11[16]} }
    ss      = { {defs={}, expr=v12[16]} }
    ds      = { {defs={}, expr=v13[16]} }
    fs      = { {defs={}, expr=v14[16]} }
    gs      = { {defs={}, expr=v15[16]} }
    cf      = { {defs={}, expr=v16[1]} }
    ?1      = { {defs={}, expr=v17[1]} }
    pf      = { {defs={}, expr=v18[1]} }
    ?3      = { {defs={}, expr=v19[1]} }
    af      = { {defs={}, expr=v20[1]} }
    ?5      = { {defs={}, expr=v21[1]} }
    zf      = { {defs={}, expr=v22[1]} }
    sf      = { {defs={}, expr=v23[1]} }
    tf      = { {defs={}, expr=v24[1]} }
    if      = { {defs={}, expr=v25[1]} }
    df      = { {defs={}, expr=v26[1]} }
    of      = { {defs={}, expr=v27[1]} }
    iopl0   = { {defs={}, expr=v28[1]} }
    iopl1   = { {defs={}, expr=v29[1]} }
    nt      = { {defs={}, expr=v30[1]} }
    ?15     = { {defs={}, expr=v31[1]} }
    rf      = { {defs={}, expr=v32[1]} }
    vm      = { {defs={}, expr=v33[1]} }
    ac      = { {defs={}, expr=v34[1]} }
    vif     = { {defs={}, expr=v35[1]} }
    vip     = { {defs={}, expr=v36[1]} }
    id      = { {defs={}, expr=v37[1]} }
    ?22     = { {defs={}, expr=v38[1]} }
    ?23     = { {defs={}, expr=v39[1]} }
    ?24     = { {defs={}, expr=v40[1]} }
    ?25     = { {defs={}, expr=v41[1]} }
    ?26     = { {defs={}, expr=v42[1]} }
    ?27     = { {defs={}, expr=v43[1]} }
    ?28     = { {defs={}, expr=v44[1]} }
    ?29     = { {defs={}, expr=v45[1]} }
    ?30     = { {defs={}, expr=v46[1]} }
    ?31     = { {defs={}, expr=v47[1]} }
    ip      = { {defs={0x080482c8}, expr=0x080482c9[32]} }
memory:
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 3[32])} value={defs={0x080482c8}, expr=(extract[8] 24[32] 32[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 2[32])} value={defs={0x080482c8}, expr=(extract[8] 16[32] 24[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 1[32])} value={defs={0x080482c8}, expr=(extract[8] 8[32] 16[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} value={defs={0x080482c8}, expr=(extract[8] 0[32] 8[32] v7[32])}
0x80482c9:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v2[32]} }
    cx      = { {defs={}, expr=v3[32]} }
    dx      = { {defs={}, expr=v4[32]} }
    bx      = { {defs={}, expr=v5[32]} }
    sp      = { {defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} }
    bp      = { {defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} }
    si      = { {defs={}, expr=v8[32]} }
    di      = { {defs={}, expr=v9[32]} }
    es      = { {defs={}, expr=v10[16]} }
    cs      = { {defs={}, expr=v11[16]} }
    ss      = { {defs={}, expr=v12[16]} }
    ds      = { {defs={}, expr=v13[16]} }
    fs      = { {defs={}, expr=v14[16]} }
    gs      = { {defs={}, expr=v15[16]} }
    cf      = { {defs={}, expr=v16[1]} }
    ?1      = { {defs={}, expr=v17[1]} }
    pf      = { {defs={}, expr=v18[1]} }
    ?3      = { {defs={}, expr=v19[1]} }
    af      = { {defs={}, expr=v20[1]} }
    ?5      = { {defs={}, expr=v21[1]} }
    zf      = { {defs={}, expr=v22[1]} }
    sf      = { {defs={}, expr=v23[1]} }
    tf      = { {defs={}, expr=v24[1]} }
    if      = { {defs={}, expr=v25[1]} }
    df      = { {defs={}, expr=v26[1]} }
    of      = { {defs={}, expr=v27[1]} }
    iopl0   = { {defs={}, expr=v28[1]} }
    iopl1   = { {defs={}, expr=v29[1]} }
    nt      = { {defs={}, expr=v30[1]} }
    ?15     = { {defs={}, expr=v31[1]} }
    rf      = { {defs={}, expr=v32[1]} }
    vm      = { {defs={}, expr=v33[1]} }
    ac      = { {defs={}, expr=v34[1]} }
    vif     = { {defs={}, expr=v35[1]} }
    vip     = { {defs={}, expr=v36[1]} }
    id      = { {defs={}, expr=v37[1]} }
    ?22     = { {defs={}, expr=v38[1]} }
    ?23     = { {defs={}, expr=v39[1]} }
    ?24     = { {defs={}, expr=v40[1]} }
    ?25     = { {defs={}, expr=v41[1]} }
    ?26     = { {defs={}, expr=v42[1]} }
    ?27     = { {defs={}, expr=v43[1]} }
    ?28     = { {defs={}, expr=v44[1]} }
    ?29     = { {defs={}, expr=v45[1]} }
    ?30     = { {defs={}, expr=v46[1]} }
    ?31     = { {defs={}, expr=v47[1]} }
    ip      = { {defs={0x080482c9}, expr=0x080482cb[32]} }
memory:
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 3[32])} value={defs={0x080482c8}, expr=(extract[8] 24[32] 32[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 2[32])} value={defs={0x080482c8}, expr=(extract[8] 16[32] 24[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 1[32])} value={defs={0x080482c8}, expr=(extract[8] 8[32] 16[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} value={defs={0x080482c8}, expr=(extract[8] 0[32] 8[32] v7[32])}
0x80482cb:sub    esp, 0x08
registers:
    ax      = { {defs={}, expr=v2[32]} }
    cx      = { {defs={}, expr=v3[32]} }
    dx      = { {defs={}, expr=v4[32]} }
    bx      = { {defs={}, expr=v5[32]} }
    sp      = { {defs={0x080482c8,0x080482cb}, expr=(add[32] (add[32] v6[32] -4[32]) -8[32])} }
    bp      = { {defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} }
    si      = { {defs={}, expr=v8[32]} }
    di      = { {defs={}, expr=v9[32]} }
    es      = { {defs={}, expr=v10[16]} }
    cs      = { {defs={}, expr=v11[16]} }
    ss      = { {defs={}, expr=v12[16]} }
    ds      = { {defs={}, expr=v13[16]} }
    fs      = { {defs={}, expr=v14[16]} }
    gs      = { {defs={}, expr=v15[16]} }
    cf      = { {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v17[1]} }
    pf      = { {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v19[1]} }
    af      = { {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v21[1]} }
    zf      = { {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] (add[32] v6[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v24[1]} }
    if      = { {defs={}, expr=v25[1]} }
    df      = { {defs={}, expr=v26[1]} }
    of      = { {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v28[1]} }
    iopl1   = { {defs={}, expr=v29[1]} }
    nt      = { {defs={}, expr=v30[1]} }
    ?15     = { {defs={}, expr=v31[1]} }
    rf      = { {defs={}, expr=v32[1]} }
    vm      = { {defs={}, expr=v33[1]} }
    ac      = { {defs={}, expr=v34[1]} }
    vif     = { {defs={}, expr=v35[1]} }
    vip     = { {defs={}, expr=v36[1]} }
    id      = { {defs={}, expr=v37[1]} }
    ?22     = { {defs={}, expr=v38[1]} }
    ?23     = { {defs={}, expr=v39[1]} }
    ?24     = { {defs={}, expr=v40[1]} }
    ?25     = { {defs={}, expr=v41[1]} }
    ?26     = { {defs={}, expr=v42[1]} }
    ?27     = { {defs={}, expr=v43[1]} }
    ?28     = { {defs={}, expr=v44[1]} }
    ?29     = { {defs={}, expr=v45[1]} }
    ?30     = { {defs={}, expr=v46[1]} }
    ?31     = { {defs={}, expr=v47[1]} }
    ip      = { {defs={0x080482cb}, expr=0x080482ce[32]} }
memory:
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 3[32])} value={defs={0x080482c8}, expr=(extract[8] 24[32] 32[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 2[32])} value={defs={0x080482c8}, expr=(extract[8] 16[32] 24[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 1[32])} value={defs={0x080482c8}, expr=(extract[8] 8[32] 16[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} value={defs={0x080482c8}, expr=(extract[8] 0[32] 8[32] v7[32])}
0x80482ce:call   0x08048364<call_gmon_start>
registers:
    ax      = { {defs={}, expr=v2[32]} }
    cx      = { {defs={}, expr=v3[32]} }
    dx      = { {defs={}, expr=v4[32]} }
    bx      = { {defs={}, expr=v5[32]} }
    sp      = { {defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] v6[32] -4[32]) -8[32]) -4[32])} }
    bp      = { {defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} }
    si      = { {defs={}, expr=v8[32]} }
    di      = { {defs={}, expr=v9[32]} }
    es      = { {defs={}, expr=v10[16]} }
    cs      = { {defs={}, expr=v11[16]} }
    ss      = { {defs={}, expr=v12[16]} }
    ds      = { {defs={}, expr=v13[16]} }
    fs      = { {defs={}, expr=v14[16]} }
    gs      = { {defs={}, expr=v15[16]} }
    cf      = { {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v17[1]} }
    pf      = { {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v6[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v19[1]} }
    af      = { {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v21[1]} }
    zf      = { {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] (add[32] v6[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v6[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v24[1]} }
    if      = { {defs={}, expr=v25[1]} }
    df      = { {defs={}, expr=v26[1]} }
    of      = { {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v6[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v28[1]} }
    iopl1   = { {defs={}, expr=v29[1]} }
    nt      = { {defs={}, expr=v30[1]} }
    ?15     = { {defs={}, expr=v31[1]} }
    rf      = { {defs={}, expr=v32[1]} }
    vm      = { {defs={}, expr=v33[1]} }
    ac      = { {defs={}, expr=v34[1]} }
    vif     = { {defs={}, expr=v35[1]} }
    vip     = { {defs={}, expr=v36[1]} }
    id      = { {defs={}, expr=v37[1]} }
    ?22     = { {defs={}, expr=v38[1]} }
    ?23     = { {defs={}, expr=v39[1]} }
    ?24     = { {defs={}, expr=v40[1]} }
    ?25     = { {defs={}, expr=v41[1]} }
    ?26     = { {defs={}, expr=v42[1]} }
    ?27     = { {defs={}, expr=v43[1]} }
    ?28     = { {defs={}, expr=v44[1]} }
    ?29     = { {defs={}, expr=v45[1]} }
    ?30     = { {defs={}, expr=v46[1]} }
    ?31     = { {defs={}, expr=v47[1]} }
    ip      = { {defs={0x080482ce}, expr=0x08048364[32]} }
memory:
    addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] (add[32] v6[32] -4[32]) -8[32]) -4[32]) 3[32])} value={defs={0x080482ce}, expr=8[8]}
    addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] (add[32] v6[32] -4[32]) -8[32]) -4[32]) 2[32])} value={defs={0x080482ce}, expr=4[8]}
    addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] (add[32] v6[32] -4[32]) -8[32]) -4[32]) 1[32])} value={defs={0x080482ce}, expr=-126[8]}
    addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] v6[32] -4[32]) -8[32]) -4[32])} value={defs={0x080482ce}, expr=-45[8]}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 3[32])} value={defs={0x080482c8}, expr=(extract[8] 24[32] 32[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 2[32])} value={defs={0x080482c8}, expr=(extract[8] 16[32] 24[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v6[32] -4[32]) 1[32])} value={defs={0x080482c8}, expr=(extract[8] 8[32] 16[32] v7[32])}
    addr={defs={0x080482c8}, expr=(add[32] v6[32] -4[32])} value={defs={0x080482c8}, expr=(extract[8] 0[32] 8[32] v7[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
registers:
    ax      = { {defs={}, expr=v50[32]} }
    cx      = { {defs={}, expr=v51[32]} }
    dx      = { {defs={}, expr=v52[32]} }
    bx      = { {defs={}, expr=v53[32]} }
    sp      = { {defs={0x080482d3}, expr=(add[32] v54[32] -4[32])} }
    bp      = { {defs={}, expr=v55[32]} }
    si      = { {defs={}, expr=v56[32]} }
    di      = { {defs={}, expr=v57[32]} }
    es      = { {defs={}, expr=v58[16]} }
    cs      = { {defs={}, expr=v59[16]} }
    ss      = { {defs={}, expr=v60[16]} }
    ds      = { {defs={}, expr=v61[16]} }
    fs      = { {defs={}, expr=v62[16]} }
    gs      = { {defs={}, expr=v63[16]} }
    cf      = { {defs={}, expr=v64[1]} }
    ?1      = { {defs={}, expr=v65[1]} }
    pf      = { {defs={}, expr=v66[1]} }
    ?3      = { {defs={}, expr=v67[1]} }
    af      = { {defs={}, expr=v68[1]} }
    ?5      = { {defs={}, expr=v69[1]} }
    zf      = { {defs={}, expr=v70[1]} }
    sf      = { {defs={}, expr=v71[1]} }
    tf      = { {defs={}, expr=v72[1]} }
    if      = { {defs={}, expr=v73[1]} }
    df      = { {defs={}, expr=v74[1]} }
    of      = { {defs={}, expr=v75[1]} }
    iopl0   = { {defs={}, expr=v76[1]} }
    iopl1   = { {defs={}, expr=v77[1]} }
    nt      = { {defs={}, expr=v78[1]} }
    ?15     = { {defs={}, expr=v79[1]} }
    rf      = { {defs={}, expr=v80[1]} }
    vm      = { {defs={}, expr=v81[1]} }
    ac      = { {defs={}, expr=v82[1]} }
    vif     = { {defs={}, expr=v83[1]} }
    vip     = { {defs={}, expr=v84[1]} }
    id      = { {defs={}, expr=v85[1]} }
    ?22     = { {defs={}, expr=v86[1]} }
    ?23     = { {defs={}, expr=v87[1]} }
    ?24     = { {defs={}, expr=v88[1]} }
    ?25     = { {defs={}, expr=v89[1]} }
    ?26     = { {defs={}, expr=v90[1]} }
    ?27     = { {defs={}, expr=v91[1]} }
    ?28     = { {defs={}, expr=v92[1]} }
    ?29     = { {defs={}, expr=v93[1]} }
    ?30     = { {defs={}, expr=v94[1]} }
    ?31     = { {defs={}, expr=v95[1]} }
    ip      = { {defs={0x080482d3}, expr=0x080483d0[32]} }
memory:
    addr={defs={0x080482d3}, expr=(add[32] (add[32] v54[32] -4[32]) 3[32])} value={defs={0x080482d3}, expr=8[8]}
    addr={defs={0x080482d3}, expr=(add[32] (add[32] v54[32] -4[32]) 2[32])} value={defs={0x080482d3}, expr=4[8]}
    addr={defs={0x080482d3}, expr=(add[32] (add[32] v54[32] -4[32]) 1[32])} value={defs={0x080482d3}, expr=-126[8]}
    addr={defs={0x080482d3}, expr=(add[32] v54[32] -4[32])} value={defs={0x080482d3}, expr=-40[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
registers:
    ax      = { {defs={}, expr=v98[32]} }
    cx      = { {defs={}, expr=v99[32]} }
    dx      = { {defs={}, expr=v100[32]} }
    bx      = { {defs={}, expr=v101[32]} }
    sp      = { {defs={0x080482d8}, expr=(add[32] v102[32] -4[32])} }
    bp      = { {defs={}, expr=v103[32]} }
    si      = { {defs={}, expr=v104[32]} }
    di      = { {defs={}, expr=v105[32]} }
    es      = { {defs={}, expr=v106[16]} }
    cs      = { {defs={}, expr=v107[16]} }
    ss      = { {defs={}, expr=v108[16]} }
    ds      = { {defs={}, expr=v109[16]} }
    fs      = { {defs={}, expr=v110[16]} }
    gs      = { {defs={}, expr=v111[16]} }
    cf      = { {defs={}, expr=v112[1]} }
    ?1      = { {defs={}, expr=v113[1]} }
    pf      = { {defs={}, expr=v114[1]} }
    ?3      = { {defs={}, expr=v115[1]} }
    af      = { {defs={}, expr=v116[1]} }
    ?5      = { {defs={}, expr=v117[1]} }
    zf      = { {defs={}, expr=v118[1]} }
    sf      = { {defs={}, expr=v119[1]} }
    tf      = { {defs={}, expr=v120[1]} }
    if      = { {defs={}, expr=v121[1]} }
    df      = { {defs={}, expr=v122[1]} }
    of      = { {defs={}, expr=v123[1]} }
    iopl0   = { {defs={}, expr=v124[1]} }
    iopl1   = { {defs={}, expr=v125[1]} }
    nt      = { {defs={}, expr=v126[1]} }
    ?15     = { {defs={}, expr=v127[1]} }
    rf      = { {defs={}, expr=v128[1]} }
    vm      = { {defs={}, expr=v129[1]} }
    ac      = { {defs={}, expr=v130[1]} }
    vif     = { {defs={}, expr=v131[1]} }
    vip     = { {defs={}, expr=v132[1]} }
    id      = { {defs={}, expr=v133[1]} }
    ?22     = { {defs={}, expr=v134[1]} }
    ?23     = { {defs={}, expr=v135[1]} }
    ?24     = { {defs={}, expr=v136[1]} }
    ?25     = { {defs={}, expr=v137[1]} }
    ?26     = { {defs={}, expr=v138[1]} }
    ?27     = { {defs={}, expr=v139[1]} }
    ?28     = { {defs={}, expr=v140[1]} }
    ?29     = { {defs={}, expr=v141[1]} }
    ?30     = { {defs={}, expr=v142[1]} }
    ?31     = { {defs={}, expr=v143[1]} }
    ip      = { {defs={0x080482d8}, expr=0x08048580[32]} }
memory:
    addr={defs={0x080482d8}, expr=(add[32] (add[32] v102[32] -4[32]) 3[32])} value={defs={0x080482d8}, expr=8[8]}
    addr={defs={0x080482d8}, expr=(add[32] (add[32] v102[32] -4[32]) 2[32])} value={defs={0x080482d8}, expr=4[8]}
    addr={defs={0x080482d8}, expr=(add[32] (add[32] v102[32] -4[32]) 1[32])} value={defs={0x080482d8}, expr=-126[8]}
    addr={defs={0x080482d8}, expr=(add[32] v102[32] -4[32])} value={defs={0x080482d8}, expr=-35[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
registers:
    ax      = { {defs={}, expr=v146[32]} }
    cx      = { {defs={}, expr=v147[32]} }
    dx      = { {defs={}, expr=v148[32]} }
    bx      = { {defs={}, expr=v149[32]} }
    sp      = { {defs={0x080482dd}, expr=(add[32] v151[32] 4[32])} }
    bp      = { {defs={0x080482dd}, expr=v192[32]} }
    si      = { {defs={}, expr=v152[32]} }
    di      = { {defs={}, expr=v153[32]} }
    es      = { {defs={}, expr=v154[16]} }
    cs      = { {defs={}, expr=v155[16]} }
    ss      = { {defs={}, expr=v156[16]} }
    ds      = { {defs={}, expr=v157[16]} }
    fs      = { {defs={}, expr=v158[16]} }
    gs      = { {defs={}, expr=v159[16]} }
    cf      = { {defs={}, expr=v160[1]} }
    ?1      = { {defs={}, expr=v161[1]} }
    pf      = { {defs={}, expr=v162[1]} }
    ?3      = { {defs={}, expr=v163[1]} }
    af      = { {defs={}, expr=v164[1]} }
    ?5      = { {defs={}, expr=v165[1]} }
    zf      = { {defs={}, expr=v166[1]} }
    sf      = { {defs={}, expr=v167[1]} }
    tf      = { {defs={}, expr=v168[1]} }
    if      = { {defs={}, expr=v169[1]} }
    df      = { {defs={}, expr=v170[1]} }
    of      = { {defs={}, expr=v171[1]} }
    iopl0   = { {defs={}, expr=v172[1]} }
    iopl1   = { {defs={}, expr=v173[1]} }
    nt      = { {defs={}, expr=v174[1]} }
    ?15     = { {defs={}, expr=v175[1]} }
    rf      = { {defs={}, expr=v176[1]} }
    vm      = { {defs={}, expr=v177[1]} }
    ac      = { {defs={}, expr=v178[1]} }
    vif     = { {defs={}, expr=v179[1]} }
    vip     = { {defs={}, expr=v180[1]} }
    id      = { {defs={}, expr=v181[1]} }
    ?22     = { {defs={}, expr=v182[1]} }
    ?23     = { {defs={}, expr=v183[1]} }
    ?24     = { {defs={}, expr=v184[1]} }
    ?25     = { {defs={}, expr=v185[1]} }
    ?26     = { {defs={}, expr=v186[1]} }
    ?27     = { {defs={}, expr=v187[1]} }
    ?28     = { {defs={}, expr=v188[1]} }
    ?29     = { {defs={}, expr=v189[1]} }
    ?30     = { {defs={}, expr=v190[1]} }
    ?31     = { {defs={}, expr=v191[1]} }
    ip      = { {defs={0x080482dd}, expr=0x080482de[32]} }
memory:
    addr={defs={0x080482dd}, expr=(add[32] v151[32] 3[32])} value={defs={0x080482dd}, expr=(extract[8] 24[32] 32[32] v192[32])}
    addr={defs={0x080482dd}, expr=(add[32] v151[32] 2[32])} value={defs={0x080482dd}, expr=(extract[8] 16[32] 24[32] v192[32])}
    addr={defs={0x080482dd}, expr=(add[32] v151[32] 1[32])} value={defs={0x080482dd}, expr=(extract[8] 8[32] 16[32] v192[32])}
    addr={defs={}, expr=v151[32]} value={defs={0x080482dd}, expr=(extract[8] 0[32] 8[32] v192[32])}
0x80482de:ret    
registers:
    ax      = { {defs={}, expr=v146[32]} }
    cx      = { {defs={}, expr=v147[32]} }
    dx      = { {defs={}, expr=v148[32]} }
    bx      = { {defs={}, expr=v149[32]} }
    sp      = { {defs={0x080482dd,0x080482de}, expr=(add[32] (add[32] v151[32] 4[32]) 4[32])} }
    bp      = { {defs={0x080482dd}, expr=v192[32]} }
    si      = { {defs={}, expr=v152[32]} }
    di      = { {defs={}, expr=v153[32]} }
    es      = { {defs={}, expr=v154[16]} }
    cs      = { {defs={}, expr=v155[16]} }
    ss      = { {defs={}, expr=v156[16]} }
    ds      = { {defs={}, expr=v157[16]} }
    fs      = { {defs={}, expr=v158[16]} }
    gs      = { {defs={}, expr=v159[16]} }
    cf      = { {defs={}, expr=v160[1]} }
    ?1      = { {defs={}, expr=v161[1]} }
    pf      = { {defs={}, expr=v162[1]} }
    ?3      = { {defs={}, expr=v163[1]} }
    af      = { {defs={}, expr=v164[1]} }
    ?5      = { {defs={}, expr=v165[1]} }
    zf      = { {defs={}, expr=v166[1]} }
    sf      = { {defs={}, expr=v167[1]} }
    tf      = { {defs={}, expr=v168[1]} }
    if      = { {defs={}, expr=v169[1]} }
    df      = { {defs={}, expr=v170[1]} }
    of      = { {defs={}, expr=v171[1]} }
    iopl0   = { {defs={}, expr=v172[1]} }
    iopl1   = { {defs={}, expr=v173[1]} }
    nt      = { {defs={}, expr=v174[1]} }
    ?15     = { {defs={}, expr=v175[1]} }
    rf      = { {defs={}, expr=v176[1]} }
    vm      = { {defs={}, expr=v177[1]} }
    ac      = { {defs={}, expr=v178[1]} }
    vif     = { {defs={}, expr=v179[1]} }
    vip     = { {defs={}, expr=v180[1]} }
    id      = { {defs={}, expr=v181[1]} }
    ?22     = { {defs={}, expr=v182[1]} }
    ?23     = { {defs={}, expr=v183[1]} }
    ?24     = { {defs={}, expr=v184[1]} }
    ?25     = { {defs={}, expr=v185[1]} }
    ?26     = { {defs={}, expr=v186[1]} }
    ?27     = { {defs={}, expr=v187[1]} }
    ?28     = { {defs={}, expr=v188[1]} }
    ?29     = { {defs={}, expr=v189[1]} }
    ?30     = { {defs={}, expr=v190[1]} }
    ?31     = { {defs={}, expr=v191[1]} }
    ip      = { {defs={0x080482de}, expr=v197[32]} }
memory:
    addr={defs={0x080482dd,0x080482de}, expr=(add[32] (add[32] v151[32] 4[32]) 3[32])} value={defs={0x080482de}, expr=(extract[8] 24[32] 32[32] v197[32])}
    addr={defs={0x080482dd,0x080482de}, expr=(add[32] (add[32] v151[32] 4[32]) 2[32])} value={defs={0x080482de}, expr=(extract[8] 16[32] 24[32] v197[32])}
    addr={defs={0x080482dd,0x080482de}, expr=(add[32] (add[32] v151[32] 4[32]) 1[32])} value={defs={0x080482de}, expr=(extract[8] 8[32] 16[32] v197[32])}
    addr={defs={0x080482dd}, expr=(add[32] v151[32] 4[32])} value={defs={0x080482de}, expr=(extract[8] 0[32] 8[32] v197[32])}
    addr={defs={0x080482dd}, expr=(add[32] v151[32] 3[32])} value={defs={0x080482dd}, expr=(extract[8] 24[32] 32[32] v192[32])}
    addr={defs={0x080482dd}, expr=(add[32] v151[32] 2[32])} value={defs={0x080482dd}, expr=(extract[8] 16[32] 24[32] v192[32])}
    addr={defs={0x080482dd}, expr=(add[32] v151[32] 1[32])} value={defs={0x080482dd}, expr=(extract[8] 8[32] 16[32] v192[32])}
    addr={defs={}, expr=v151[32]} value={defs={0x080482dd}, expr=(extract[8] 0[32] 8[32] v192[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
registers:
    ax      = { {defs={}, expr=v204[32]} }
    cx      = { {defs={}, expr=v205[32]} }
    dx      = { {defs={}, expr=v206[32]} }
    bx      = { {defs={}, expr=v207[32]} }
    sp      = { {defs={}, expr=v208[32]} }
    bp      = { {defs={}, expr=v209[32]} }
    si      = { {defs={}, expr=v210[32]} }
    di      = { {defs={}, expr=v211[32]} }
    es      = { {defs={}, expr=v212[16]} }
    cs      = { {defs={}, expr=v213[16]} }
    ss      = { {defs={}, expr=v214[16]} }
    ds      = { {defs={}, expr=v215[16]} }
    fs      = { {defs={}, expr=v216[16]} }
    gs      = { {defs={}, expr=v217[16]} }
    cf      = { {defs={}, expr=v218[1]} }
    ?1      = { {defs={}, expr=v219[1]} }
    pf      = { {defs={}, expr=v220[1]} }
    ?3      = { {defs={}, expr=v221[1]} }
    af      = { {defs={}, expr=v222[1]} }
    ?5      = { {defs={}, expr=v223[1]} }
    zf      = { {defs={}, expr=v224[1]} }
    sf      = { {defs={}, expr=v225[1]} }
    tf      = { {defs={}, expr=v226[1]} }
    if      = { {defs={}, expr=v227[1]} }
    df      = { {defs={}, expr=v228[1]} }
    of      = { {defs={}, expr=v229[1]} }
    iopl0   = { {defs={}, expr=v230[1]} }
    iopl1   = { {defs={}, expr=v231[1]} }
    nt      = { {defs={}, expr=v232[1]} }
    ?15     = { {defs={}, expr=v233[1]} }
    rf      = { {defs={}, expr=v234[1]} }
    vm      = { {defs={}, expr=v235[1]} }
    ac      = { {defs={}, expr=v236[1]} }
    vif     = { {defs={}, expr=v237[1]} }
    vip     = { {defs={}, expr=v238[1]} }
    id      = { {defs={}, expr=v239[1]} }
    ?22     = { {defs={}, expr=v240[1]} }
    ?23     = { {defs={}, expr=v241[1]} }
    ?24     = { {defs={}, expr=v242[1]} }
    ?25     = { {defs={}, expr=v243[1]} }
    ?26     = { {defs={}, expr=v244[1]} }
    ?27     = { {defs={}, expr=v245[1]} }
    ?28     = { {defs={}, expr=v246[1]} }
    ?29     = { {defs={}, expr=v247[1]} }
    ?30     = { {defs={}, expr=v248[1]} }
    ?31     = { {defs={}, expr=v249[1]} }
    ip      = { {defs={0x080482f0}, expr=v250[32]} }
memory:
    addr={defs={0x080482f0}, expr=0x080496d7[32]} value={defs={0x080482f0}, expr=(extract[8] 24[32] 32[32] v250[32])}
    addr={defs={0x080482f0}, expr=0x080496d6[32]} value={defs={0x080482f0}, expr=(extract[8] 16[32] 24[32] v250[32])}
    addr={defs={0x080482f0}, expr=0x080496d5[32]} value={defs={0x080482f0}, expr=(extract[8] 8[32] 16[32] v250[32])}
    addr={defs={0x080482f0}, expr=0x080496d4[32]} value={defs={0x080482f0}, expr=(extract[8] 0[32] 8[32] v250[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
registers:
    ax      = { {defs={}, expr=v257[32]} }
    cx      = { {defs={}, expr=v258[32]} }
    dx      = { {defs={}, expr=v259[32]} }
    bx      = { {defs={}, expr=v260[32]} }
    sp      = { {defs={}, expr=v261[32]} }
    bp      = { {defs={}, expr=v262[32]} }
    si      = { {defs={}, expr=v263[32]} }
    di      = { {defs={}, expr=v264[32]} }
    es      = { {defs={}, expr=v265[16]} }
    cs      = { {defs={}, expr=v266[16]} }
    ss      = { {defs={}, expr=v267[16]} }
    ds      = { {defs={}, expr=v268[16]} }
    fs      = { {defs={}, expr=v269[16]} }
    gs      = { {defs={}, expr=v270[16]} }
    cf      = { {defs={}, expr=v271[1]} }
    ?1      = { {defs={}, expr=v272[1]} }
    pf      = { {defs={}, expr=v273[1]} }
    ?3      = { {defs={}, expr=v274[1]} }
    af      = { {defs={}, expr=v275[1]} }
    ?5      = { {defs={}, expr=v276[1]} }
    zf      = { {defs={}, expr=v277[1]} }
    sf      = { {defs={}, expr=v278[1]} }
    tf      = { {defs={}, expr=v279[1]} }
    if      = { {defs={}, expr=v280[1]} }
    df      = { {defs={}, expr=v281[1]} }
    of      = { {defs={}, expr=v282[1]} }
    iopl0   = { {defs={}, expr=v283[1]} }
    iopl1   = { {defs={}, expr=v284[1]} }
    nt      = { {defs={}, expr=v285[1]} }
    ?15     = { {defs={}, expr=v286[1]} }
    rf      = { {defs={}, expr=v287[1]} }
    vm      = { {defs={}, expr=v288[1]} }
    ac      = { {defs={}, expr=v289[1]} }
    vif     = { {defs={}, expr=v290[1]} }
    vip     = { {defs={}, expr=v291[1]} }
    id      = { {defs={}, expr=v292[1]} }
    ?22     = { {defs={}, expr=v293[1]} }
    ?23     = { {defs={}, expr=v294[1]} }
    ?24     = { {defs={}, expr=v295[1]} }
    ?25     = { {defs={}, expr=v296[1]} }
    ?26     = { {defs={}, expr=v297[1]} }
    ?27     = { {defs={}, expr=v298[1]} }
    ?28     = { {defs={}, expr=v299[1]} }
    ?29     = { {defs={}, expr=v300[1]} }
    ?30     = { {defs={}, expr=v301[1]} }
    ?31     = { {defs={}, expr=v302[1]} }
    ip      = { {defs={0x08048300}, expr=v303[32]} }
memory:
    addr={defs={0x08048300}, expr=0x080496db[32]} value={defs={0x08048300}, expr=(extract[8] 24[32] 32[32] v303[32])}
    addr={defs={0x08048300}, expr=0x080496da[32]} value={defs={0x08048300}, expr=(extract[8] 16[32] 24[32] v303[32])}
    addr={defs={0x08048300}, expr=0x080496d9[32]} value={defs={0x08048300}, expr=(extract[8] 8[32] 16[32] v303[32])}
    addr={defs={0x08048300}, expr=0x080496d8[32]} value={defs={0x08048300}, expr=(extract[8] 0[32] 8[32] v303[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
registers:
    ax      = { {defs={}, expr=v310[32]} }
    cx      = { {defs={}, expr=v311[32]} }
    dx      = { {defs={}, expr=v312[32]} }
    bx      = { {defs={}, expr=v313[32]} }
    sp      = { {defs={}, expr=v314[32]} }
    bp      = { {defs={}, expr=v315[32]} }
    si      = { {defs={}, expr=v316[32]} }
    di      = { {defs={}, expr=v317[32]} }
    es      = { {defs={}, expr=v318[16]} }
    cs      = { {defs={}, expr=v319[16]} }
    ss      = { {defs={}, expr=v320[16]} }
    ds      = { {defs={}, expr=v321[16]} }
    fs      = { {defs={}, expr=v322[16]} }
    gs      = { {defs={}, expr=v323[16]} }
    cf      = { {defs={}, expr=v324[1]} }
    ?1      = { {defs={}, expr=v325[1]} }
    pf      = { {defs={}, expr=v326[1]} }
    ?3      = { {defs={}, expr=v327[1]} }
    af      = { {defs={}, expr=v328[1]} }
    ?5      = { {defs={}, expr=v329[1]} }
    zf      = { {defs={}, expr=v330[1]} }
    sf      = { {defs={}, expr=v331[1]} }
    tf      = { {defs={}, expr=v332[1]} }
    if      = { {defs={}, expr=v333[1]} }
    df      = { {defs={}, expr=v334[1]} }
    of      = { {defs={}, expr=v335[1]} }
    iopl0   = { {defs={}, expr=v336[1]} }
    iopl1   = { {defs={}, expr=v337[1]} }
    nt      = { {defs={}, expr=v338[1]} }
    ?15     = { {defs={}, expr=v339[1]} }
    rf      = { {defs={}, expr=v340[1]} }
    vm      = { {defs={}, expr=v341[1]} }
    ac      = { {defs={}, expr=v342[1]} }
    vif     = { {defs={}, expr=v343[1]} }
    vip     = { {defs={}, expr=v344[1]} }
    id      = { {defs={}, expr=v345[1]} }
    ?22     = { {defs={}, expr=v346[1]} }
    ?23     = { {defs={}, expr=v347[1]} }
    ?24     = { {defs={}, expr=v348[1]} }
    ?25     = { {defs={}, expr=v349[1]} }
    ?26     = { {defs={}, expr=v350[1]} }
    ?27     = { {defs={}, expr=v351[1]} }
    ?28     = { {defs={}, expr=v352[1]} }
    ?29     = { {defs={}, expr=v353[1]} }
    ?30     = { {defs={}, expr=v354[1]} }
    ?31     = { {defs={}, expr=v355[1]} }
    ip      = { {defs={0x08048310}, expr=v356[32]} }
memory:
    addr={defs={0x08048310}, expr=0x080496df[32]} value={defs={0x08048310}, expr=(extract[8] 24[32] 32[32] v356[32])}
    addr={defs={0x08048310}, expr=0x080496de[32]} value={defs={0x08048310}, expr=(extract[8] 16[32] 24[32] v356[32])}
    addr={defs={0x08048310}, expr=0x080496dd[32]} value={defs={0x08048310}, expr=(extract[8] 8[32] 16[32] v356[32])}
    addr={defs={0x08048310}, expr=0x080496dc[32]} value={defs={0x08048310}, expr=(extract[8] 0[32] 8[32] v356[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
registers:
    ax      = { {defs={}, expr=v363[32]} }
    cx      = { {defs={}, expr=v364[32]} }
    dx      = { {defs={}, expr=v365[32]} }
    bx      = { {defs={}, expr=v366[32]} }
    sp      = { {defs={}, expr=v367[32]} }
    bp      = { {defs={}, expr=v368[32]} }
    si      = { {defs={}, expr=v369[32]} }
    di      = { {defs={}, expr=v370[32]} }
    es      = { {defs={}, expr=v371[16]} }
    cs      = { {defs={}, expr=v372[16]} }
    ss      = { {defs={}, expr=v373[16]} }
    ds      = { {defs={}, expr=v374[16]} }
    fs      = { {defs={}, expr=v375[16]} }
    gs      = { {defs={}, expr=v376[16]} }
    cf      = { {defs={}, expr=v377[1]} }
    ?1      = { {defs={}, expr=v378[1]} }
    pf      = { {defs={}, expr=v379[1]} }
    ?3      = { {defs={}, expr=v380[1]} }
    af      = { {defs={}, expr=v381[1]} }
    ?5      = { {defs={}, expr=v382[1]} }
    zf      = { {defs={}, expr=v383[1]} }
    sf      = { {defs={}, expr=v384[1]} }
    tf      = { {defs={}, expr=v385[1]} }
    if      = { {defs={}, expr=v386[1]} }
    df      = { {defs={}, expr=v387[1]} }
    of      = { {defs={}, expr=v388[1]} }
    iopl0   = { {defs={}, expr=v389[1]} }
    iopl1   = { {defs={}, expr=v390[1]} }
    nt      = { {defs={}, expr=v391[1]} }
    ?15     = { {defs={}, expr=v392[1]} }
    rf      = { {defs={}, expr=v393[1]} }
    vm      = { {defs={}, expr=v394[1]} }
    ac      = { {defs={}, expr=v395[1]} }
    vif     = { {defs={}, expr=v396[1]} }
    vip     = { {defs={}, expr=v397[1]} }
    id      = { {defs={}, expr=v398[1]} }
    ?22     = { {defs={}, expr=v399[1]} }
    ?23     = { {defs={}, expr=v400[1]} }
    ?24     = { {defs={}, expr=v401[1]} }
    ?25     = { {defs={}, expr=v402[1]} }
    ?26     = { {defs={}, expr=v403[1]} }
    ?27     = { {defs={}, expr=v404[1]} }
    ?28     = { {defs={}, expr=v405[1]} }
    ?29     = { {defs={}, expr=v406[1]} }
    ?30     = { {defs={}, expr=v407[1]} }
    ?31     = { {defs={}, expr=v408[1]} }
    ip      = { {defs={0x08048320}, expr=v409[32]} }
memory:
    addr={defs={0x08048320}, expr=0x080496e3[32]} value={defs={0x08048320}, expr=(extract[8] 24[32] 32[32] v409[32])}
    addr={defs={0x08048320}, expr=0x080496e2[32]} value={defs={0x08048320}, expr=(extract[8] 16[32] 24[32] v409[32])}
    addr={defs={0x08048320}, expr=0x080496e1[32]} value={defs={0x08048320}, expr=(extract[8] 8[32] 16[32] v409[32])}
    addr={defs={0x08048320}, expr=0x080496e0[32]} value={defs={0x08048320}, expr=(extract[8] 0[32] 8[32] v409[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
registers:
    ax      = { {defs={}, expr=v416[32]} }
    cx      = { {defs={}, expr=v417[32]} }
    dx      = { {defs={}, expr=v418[32]} }
    bx      = { {defs={}, expr=v419[32]} }
    sp      = { {defs={}, expr=v420[32]} }
    bp      = { {defs={}, expr=v421[32]} }
    si      = { {defs={}, expr=v422[32]} }
    di      = { {defs={}, expr=v423[32]} }
    es      = { {defs={}, expr=v424[16]} }
    cs      = { {defs={}, expr=v425[16]} }
    ss      = { {defs={}, expr=v426[16]} }
    ds      = { {defs={}, expr=v427[16]} }
    fs      = { {defs={}, expr=v428[16]} }
    gs      = { {defs={}, expr=v429[16]} }
    cf      = { {defs={}, expr=v430[1]} }
    ?1      = { {defs={}, expr=v431[1]} }
    pf      = { {defs={}, expr=v432[1]} }
    ?3      = { {defs={}, expr=v433[1]} }
    af      = { {defs={}, expr=v434[1]} }
    ?5      = { {defs={}, expr=v435[1]} }
    zf      = { {defs={}, expr=v436[1]} }
    sf      = { {defs={}, expr=v437[1]} }
    tf      = { {defs={}, expr=v438[1]} }
    if      = { {defs={}, expr=v439[1]} }
    df      = { {defs={}, expr=v440[1]} }
    of      = { {defs={}, expr=v441[1]} }
    iopl0   = { {defs={}, expr=v442[1]} }
    iopl1   = { {defs={}, expr=v443[1]} }
    nt      = { {defs={}, expr=v444[1]} }
    ?15     = { {defs={}, expr=v445[1]} }
    rf      = { {defs={}, expr=v446[1]} }
    vm      = { {defs={}, expr=v447[1]} }
    ac      = { {defs={}, expr=v448[1]} }
    vif     = { {defs={}, expr=v449[1]} }
    vip     = { {defs={}, expr=v450[1]} }
    id      = { {defs={}, expr=v451[1]} }
    ?22     = { {defs={}, expr=v452[1]} }
    ?23     = { {defs={}, expr=v453[1]} }
    ?24     = { {defs={}, expr=v454[1]} }
    ?25     = { {defs={}, expr=v455[1]} }
    ?26     = { {defs={}, expr=v456[1]} }
    ?27     = { {defs={}, expr=v457[1]} }
    ?28     = { {defs={}, expr=v458[1]} }
    ?29     = { {defs={}, expr=v459[1]} }
    ?30     = { {defs={}, expr=v460[1]} }
    ?31     = { {defs={}, expr=v461[1]} }
    ip      = { {defs={0x08048330}, expr=v462[32]} }
memory:
    addr={defs={0x08048330}, expr=0x080496e7[32]} value={defs={0x08048330}, expr=(extract[8] 24[32] 32[32] v462[32])}
    addr={defs={0x08048330}, expr=0x080496e6[32]} value={defs={0x08048330}, expr=(extract[8] 16[32] 24[32] v462[32])}
    addr={defs={0x08048330}, expr=0x080496e5[32]} value={defs={0x08048330}, expr=(extract[8] 8[32] 16[32] v462[32])}
    addr={defs={0x08048330}, expr=0x080496e4[32]} value={defs={0x08048330}, expr=(extract[8] 0[32] 8[32] v462[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={}, expr=v470[32]} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={}, expr=v473[32]} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={}, expr=v475[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048340}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048340}, expr=1[1]} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v515[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048340}, expr=1[1]} }
    sf      = { {defs={0x08048340}, expr=0[1]} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048340}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048340}, expr=0x08048342[32]} }
memory:
0x8048342:pop    esi
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={}, expr=v470[32]} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048340}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048340}, expr=1[1]} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v515[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048340}, expr=1[1]} }
    sf      = { {defs={0x08048340}, expr=0[1]} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048340}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048342}, expr=0x08048343[32]} }
memory:
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x8048343:mov    ecx, esp
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048340}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048340}, expr=1[1]} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v515[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048340}, expr=1[1]} }
    sf      = { {defs={0x08048340}, expr=0[1]} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048340}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048343}, expr=0x08048345[32]} }
memory:
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x8048345:and    esp, 0xf0<-0x10>
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] v473[32] 4[32]) -16[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048345}, expr=0x08048348[32]} }
memory:
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x8048348:push   eax
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048348}, expr=0x08048349[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x8048349:push   esp
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048349}, expr=0x0804834a[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x804834a:push   edx
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x0804834a}, expr=0x0804834b[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x804834b:push   0x08048520<__libc_csu_fini>
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x0804834b}, expr=0x08048350[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x8048350:push   0x080484b0<__libc_csu_init>
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048350}, expr=0x08048355[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x8048355:push   ecx
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048355}, expr=0x08048356[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 24[32] 32[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 16[32] 24[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 8[32] 16[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 0[32] 8[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x8048356:push   esi
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048356}, expr=0x08048357[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 0[32] 8[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 24[32] 32[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 16[32] 24[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 8[32] 16[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 0[32] 8[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x8048357:push   0x08048410<main>
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x08048357}, expr=0x0804835c[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048357}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048357}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048357}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048357}, expr=16[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 0[32] 8[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 24[32] 32[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 16[32] 24[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 8[32] 16[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 0[32] 8[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
0x804835c:call   0x08048310<__libc_start_main@plt>
registers:
    ax      = { {defs={}, expr=v469[32]} }
    cx      = { {defs={0x08048342}, expr=(add[32] v473[32] 4[32])} }
    dx      = { {defs={}, expr=v471[32]} }
    bx      = { {defs={}, expr=v472[32]} }
    sp      = { {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048340}, expr=0[32]} }
    si      = { {defs={0x08048342}, expr=v516[32]} }
    di      = { {defs={}, expr=v476[32]} }
    es      = { {defs={}, expr=v477[16]} }
    cs      = { {defs={}, expr=v478[16]} }
    ss      = { {defs={}, expr=v479[16]} }
    ds      = { {defs={}, expr=v480[16]} }
    fs      = { {defs={}, expr=v481[16]} }
    gs      = { {defs={}, expr=v482[16]} }
    cf      = { {defs={0x08048345}, expr=0[1]} }
    ?1      = { {defs={}, expr=v484[1]} }
    pf      = { {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v486[1]} }
    af      = { {defs={}, expr=v521[1]} }
    ?5      = { {defs={}, expr=v488[1]} }
    zf      = { {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    sf      = { {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]))} }
    tf      = { {defs={}, expr=v491[1]} }
    if      = { {defs={}, expr=v492[1]} }
    df      = { {defs={}, expr=v493[1]} }
    of      = { {defs={0x08048345}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v495[1]} }
    iopl1   = { {defs={}, expr=v496[1]} }
    nt      = { {defs={}, expr=v497[1]} }
    ?15     = { {defs={}, expr=v498[1]} }
    rf      = { {defs={}, expr=v499[1]} }
    vm      = { {defs={}, expr=v500[1]} }
    ac      = { {defs={}, expr=v501[1]} }
    vif     = { {defs={}, expr=v502[1]} }
    vip     = { {defs={}, expr=v503[1]} }
    id      = { {defs={}, expr=v504[1]} }
    ?22     = { {defs={}, expr=v505[1]} }
    ?23     = { {defs={}, expr=v506[1]} }
    ?24     = { {defs={}, expr=v507[1]} }
    ?25     = { {defs={}, expr=v508[1]} }
    ?26     = { {defs={}, expr=v509[1]} }
    ?27     = { {defs={}, expr=v510[1]} }
    ?28     = { {defs={}, expr=v511[1]} }
    ?29     = { {defs={}, expr=v512[1]} }
    ?30     = { {defs={}, expr=v513[1]} }
    ?31     = { {defs={}, expr=v514[1]} }
    ip      = { {defs={0x0804835c}, expr=0x08048310[32]} }
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804835c}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804835c}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804835c}, expr=-125[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804835c}, expr=97[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048357}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048357}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048357}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048357}, expr=16[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 0[32] 8[32] v516[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 24[32] 32[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 16[32] 24[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 8[32] 16[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 0[32] 8[32] (add[32] v473[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v471[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v469[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v473[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v469[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v516[32])}
    addr={defs={0x08048342}, expr=(add[32] v473[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v516[32])}
    addr={defs={}, expr=v473[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v516[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
registers:
    ax      = { {defs={}, expr=v524[32]} }
    cx      = { {defs={}, expr=v525[32]} }
    dx      = { {defs={}, expr=v526[32]} }
    bx      = { {defs={}, expr=v527[32]} }
    sp      = { {defs={}, expr=v528[32]} }
    bp      = { {defs={}, expr=v529[32]} }
    si      = { {defs={}, expr=v530[32]} }
    di      = { {defs={}, expr=v531[32]} }
    es      = { {defs={}, expr=v532[16]} }
    cs      = { {defs={}, expr=v533[16]} }
    ss      = { {defs={}, expr=v534[16]} }
    ds      = { {defs={}, expr=v535[16]} }
    fs      = { {defs={}, expr=v536[16]} }
    gs      = { {defs={}, expr=v537[16]} }
    cf      = { {defs={}, expr=v538[1]} }
    ?1      = { {defs={}, expr=v539[1]} }
    pf      = { {defs={}, expr=v540[1]} }
    ?3      = { {defs={}, expr=v541[1]} }
    af      = { {defs={}, expr=v542[1]} }
    ?5      = { {defs={}, expr=v543[1]} }
    zf      = { {defs={}, expr=v544[1]} }
    sf      = { {defs={}, expr=v545[1]} }
    tf      = { {defs={}, expr=v546[1]} }
    if      = { {defs={}, expr=v547[1]} }
    df      = { {defs={}, expr=v548[1]} }
    of      = { {defs={}, expr=v549[1]} }
    iopl0   = { {defs={}, expr=v550[1]} }
    iopl1   = { {defs={}, expr=v551[1]} }
    nt      = { {defs={}, expr=v552[1]} }
    ?15     = { {defs={}, expr=v553[1]} }
    rf      = { {defs={}, expr=v554[1]} }
    vm      = { {defs={}, expr=v555[1]} }
    ac      = { {defs={}, expr=v556[1]} }
    vif     = { {defs={}, expr=v557[1]} }
    vip     = { {defs={}, expr=v558[1]} }
    id      = { {defs={}, expr=v559[1]} }
    ?22     = { {defs={}, expr=v560[1]} }
    ?23     = { {defs={}, expr=v561[1]} }
    ?24     = { {defs={}, expr=v562[1]} }
    ?25     = { {defs={}, expr=v563[1]} }
    ?26     = { {defs={}, expr=v564[1]} }
    ?27     = { {defs={}, expr=v565[1]} }
    ?28     = { {defs={}, expr=v566[1]} }
    ?29     = { {defs={}, expr=v567[1]} }
    ?30     = { {defs={}, expr=v568[1]} }
    ?31     = { {defs={}, expr=v569[1]} }
    ip      = { {defs={0x08048361}, expr=0x08048361[32]} }
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
registers:
    ax      = { {defs={}, expr=v572[32]} }
    cx      = { {defs={}, expr=v573[32]} }
    dx      = { {defs={}, expr=v574[32]} }
    bx      = { {defs={}, expr=v575[32]} }
    sp      = { {defs={0x08048364}, expr=(add[32] v576[32] -4[32])} }
    bp      = { {defs={}, expr=v577[32]} }
    si      = { {defs={}, expr=v578[32]} }
    di      = { {defs={}, expr=v579[32]} }
    es      = { {defs={}, expr=v580[16]} }
    cs      = { {defs={}, expr=v581[16]} }
    ss      = { {defs={}, expr=v582[16]} }
    ds      = { {defs={}, expr=v583[16]} }
    fs      = { {defs={}, expr=v584[16]} }
    gs      = { {defs={}, expr=v585[16]} }
    cf      = { {defs={}, expr=v586[1]} }
    ?1      = { {defs={}, expr=v587[1]} }
    pf      = { {defs={}, expr=v588[1]} }
    ?3      = { {defs={}, expr=v589[1]} }
    af      = { {defs={}, expr=v590[1]} }
    ?5      = { {defs={}, expr=v591[1]} }
    zf      = { {defs={}, expr=v592[1]} }
    sf      = { {defs={}, expr=v593[1]} }
    tf      = { {defs={}, expr=v594[1]} }
    if      = { {defs={}, expr=v595[1]} }
    df      = { {defs={}, expr=v596[1]} }
    of      = { {defs={}, expr=v597[1]} }
    iopl0   = { {defs={}, expr=v598[1]} }
    iopl1   = { {defs={}, expr=v599[1]} }
    nt      = { {defs={}, expr=v600[1]} }
    ?15     = { {defs={}, expr=v601[1]} }
    rf      = { {defs={}, expr=v602[1]} }
    vm      = { {defs={}, expr=v603[1]} }
    ac      = { {defs={}, expr=v604[1]} }
    vif     = { {defs={}, expr=v605[1]} }
    vip     = { {defs={}, expr=v606[1]} }
    id      = { {defs={}, expr=v607[1]} }
    ?22     = { {defs={}, expr=v608[1]} }
    ?23     = { {defs={}, expr=v609[1]} }
    ?24     = { {defs={}, expr=v610[1]} }
    ?25     = { {defs={}, expr=v611[1]} }
    ?26     = { {defs={}, expr=v612[1]} }
    ?27     = { {defs={}, expr=v613[1]} }
    ?28     = { {defs={}, expr=v614[1]} }
    ?29     = { {defs={}, expr=v615[1]} }
    ?30     = { {defs={}, expr=v616[1]} }
    ?31     = { {defs={}, expr=v617[1]} }
    ip      = { {defs={0x08048364}, expr=0x08048365[32]} }
memory:
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] v576[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v577[32])}
0x8048365:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v572[32]} }
    cx      = { {defs={}, expr=v573[32]} }
    dx      = { {defs={}, expr=v574[32]} }
    bx      = { {defs={}, expr=v575[32]} }
    sp      = { {defs={0x08048364}, expr=(add[32] v576[32] -4[32])} }
    bp      = { {defs={0x08048364}, expr=(add[32] v576[32] -4[32])} }
    si      = { {defs={}, expr=v578[32]} }
    di      = { {defs={}, expr=v579[32]} }
    es      = { {defs={}, expr=v580[16]} }
    cs      = { {defs={}, expr=v581[16]} }
    ss      = { {defs={}, expr=v582[16]} }
    ds      = { {defs={}, expr=v583[16]} }
    fs      = { {defs={}, expr=v584[16]} }
    gs      = { {defs={}, expr=v585[16]} }
    cf      = { {defs={}, expr=v586[1]} }
    ?1      = { {defs={}, expr=v587[1]} }
    pf      = { {defs={}, expr=v588[1]} }
    ?3      = { {defs={}, expr=v589[1]} }
    af      = { {defs={}, expr=v590[1]} }
    ?5      = { {defs={}, expr=v591[1]} }
    zf      = { {defs={}, expr=v592[1]} }
    sf      = { {defs={}, expr=v593[1]} }
    tf      = { {defs={}, expr=v594[1]} }
    if      = { {defs={}, expr=v595[1]} }
    df      = { {defs={}, expr=v596[1]} }
    of      = { {defs={}, expr=v597[1]} }
    iopl0   = { {defs={}, expr=v598[1]} }
    iopl1   = { {defs={}, expr=v599[1]} }
    nt      = { {defs={}, expr=v600[1]} }
    ?15     = { {defs={}, expr=v601[1]} }
    rf      = { {defs={}, expr=v602[1]} }
    vm      = { {defs={}, expr=v603[1]} }
    ac      = { {defs={}, expr=v604[1]} }
    vif     = { {defs={}, expr=v605[1]} }
    vip     = { {defs={}, expr=v606[1]} }
    id      = { {defs={}, expr=v607[1]} }
    ?22     = { {defs={}, expr=v608[1]} }
    ?23     = { {defs={}, expr=v609[1]} }
    ?24     = { {defs={}, expr=v610[1]} }
    ?25     = { {defs={}, expr=v611[1]} }
    ?26     = { {defs={}, expr=v612[1]} }
    ?27     = { {defs={}, expr=v613[1]} }
    ?28     = { {defs={}, expr=v614[1]} }
    ?29     = { {defs={}, expr=v615[1]} }
    ?30     = { {defs={}, expr=v616[1]} }
    ?31     = { {defs={}, expr=v617[1]} }
    ip      = { {defs={0x08048365}, expr=0x08048367[32]} }
memory:
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] v576[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v577[32])}
0x8048367:push   ebx
registers:
    ax      = { {defs={}, expr=v572[32]} }
    cx      = { {defs={}, expr=v573[32]} }
    dx      = { {defs={}, expr=v574[32]} }
    bx      = { {defs={}, expr=v575[32]} }
    sp      = { {defs={0x08048364,0x08048367}, expr=(add[32] (add[32] v576[32] -4[32]) -4[32])} }
    bp      = { {defs={0x08048364}, expr=(add[32] v576[32] -4[32])} }
    si      = { {defs={}, expr=v578[32]} }
    di      = { {defs={}, expr=v579[32]} }
    es      = { {defs={}, expr=v580[16]} }
    cs      = { {defs={}, expr=v581[16]} }
    ss      = { {defs={}, expr=v582[16]} }
    ds      = { {defs={}, expr=v583[16]} }
    fs      = { {defs={}, expr=v584[16]} }
    gs      = { {defs={}, expr=v585[16]} }
    cf      = { {defs={}, expr=v586[1]} }
    ?1      = { {defs={}, expr=v587[1]} }
    pf      = { {defs={}, expr=v588[1]} }
    ?3      = { {defs={}, expr=v589[1]} }
    af      = { {defs={}, expr=v590[1]} }
    ?5      = { {defs={}, expr=v591[1]} }
    zf      = { {defs={}, expr=v592[1]} }
    sf      = { {defs={}, expr=v593[1]} }
    tf      = { {defs={}, expr=v594[1]} }
    if      = { {defs={}, expr=v595[1]} }
    df      = { {defs={}, expr=v596[1]} }
    of      = { {defs={}, expr=v597[1]} }
    iopl0   = { {defs={}, expr=v598[1]} }
    iopl1   = { {defs={}, expr=v599[1]} }
    nt      = { {defs={}, expr=v600[1]} }
    ?15     = { {defs={}, expr=v601[1]} }
    rf      = { {defs={}, expr=v602[1]} }
    vm      = { {defs={}, expr=v603[1]} }
    ac      = { {defs={}, expr=v604[1]} }
    vif     = { {defs={}, expr=v605[1]} }
    vip     = { {defs={}, expr=v606[1]} }
    id      = { {defs={}, expr=v607[1]} }
    ?22     = { {defs={}, expr=v608[1]} }
    ?23     = { {defs={}, expr=v609[1]} }
    ?24     = { {defs={}, expr=v610[1]} }
    ?25     = { {defs={}, expr=v611[1]} }
    ?26     = { {defs={}, expr=v612[1]} }
    ?27     = { {defs={}, expr=v613[1]} }
    ?28     = { {defs={}, expr=v614[1]} }
    ?29     = { {defs={}, expr=v615[1]} }
    ?30     = { {defs={}, expr=v616[1]} }
    ?31     = { {defs={}, expr=v617[1]} }
    ip      = { {defs={0x08048367}, expr=0x08048368[32]} }
memory:
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048367}, expr=(extract[8] 24[32] 32[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048367}, expr=(extract[8] 16[32] 24[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048367}, expr=(extract[8] 8[32] 16[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] v576[32] -4[32]) -4[32])} value={defs={0x08048367}, expr=(extract[8] 0[32] 8[32] v575[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] v576[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v577[32])}
0x8048368:push   ecx
registers:
    ax      = { {defs={}, expr=v572[32]} }
    cx      = { {defs={}, expr=v573[32]} }
    dx      = { {defs={}, expr=v574[32]} }
    bx      = { {defs={}, expr=v575[32]} }
    sp      = { {defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048364}, expr=(add[32] v576[32] -4[32])} }
    si      = { {defs={}, expr=v578[32]} }
    di      = { {defs={}, expr=v579[32]} }
    es      = { {defs={}, expr=v580[16]} }
    cs      = { {defs={}, expr=v581[16]} }
    ss      = { {defs={}, expr=v582[16]} }
    ds      = { {defs={}, expr=v583[16]} }
    fs      = { {defs={}, expr=v584[16]} }
    gs      = { {defs={}, expr=v585[16]} }
    cf      = { {defs={}, expr=v586[1]} }
    ?1      = { {defs={}, expr=v587[1]} }
    pf      = { {defs={}, expr=v588[1]} }
    ?3      = { {defs={}, expr=v589[1]} }
    af      = { {defs={}, expr=v590[1]} }
    ?5      = { {defs={}, expr=v591[1]} }
    zf      = { {defs={}, expr=v592[1]} }
    sf      = { {defs={}, expr=v593[1]} }
    tf      = { {defs={}, expr=v594[1]} }
    if      = { {defs={}, expr=v595[1]} }
    df      = { {defs={}, expr=v596[1]} }
    of      = { {defs={}, expr=v597[1]} }
    iopl0   = { {defs={}, expr=v598[1]} }
    iopl1   = { {defs={}, expr=v599[1]} }
    nt      = { {defs={}, expr=v600[1]} }
    ?15     = { {defs={}, expr=v601[1]} }
    rf      = { {defs={}, expr=v602[1]} }
    vm      = { {defs={}, expr=v603[1]} }
    ac      = { {defs={}, expr=v604[1]} }
    vif     = { {defs={}, expr=v605[1]} }
    vip     = { {defs={}, expr=v606[1]} }
    id      = { {defs={}, expr=v607[1]} }
    ?22     = { {defs={}, expr=v608[1]} }
    ?23     = { {defs={}, expr=v609[1]} }
    ?24     = { {defs={}, expr=v610[1]} }
    ?25     = { {defs={}, expr=v611[1]} }
    ?26     = { {defs={}, expr=v612[1]} }
    ?27     = { {defs={}, expr=v613[1]} }
    ?28     = { {defs={}, expr=v614[1]} }
    ?29     = { {defs={}, expr=v615[1]} }
    ?30     = { {defs={}, expr=v616[1]} }
    ?31     = { {defs={}, expr=v617[1]} }
    ip      = { {defs={0x08048368}, expr=0x08048369[32]} }
memory:
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048368}, expr=(extract[8] 24[32] 32[32] v573[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048368}, expr=(extract[8] 16[32] 24[32] v573[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048368}, expr=(extract[8] 8[32] 16[32] v573[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048368}, expr=(extract[8] 0[32] 8[32] v573[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048367}, expr=(extract[8] 24[32] 32[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048367}, expr=(extract[8] 16[32] 24[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048367}, expr=(extract[8] 8[32] 16[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] v576[32] -4[32]) -4[32])} value={defs={0x08048367}, expr=(extract[8] 0[32] 8[32] v575[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] v576[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v577[32])}
0x8048369:call   0x0804836e<<Insn>>
registers:
    ax      = { {defs={}, expr=v572[32]} }
    cx      = { {defs={}, expr=v573[32]} }
    dx      = { {defs={}, expr=v574[32]} }
    bx      = { {defs={}, expr=v575[32]} }
    sp      = { {defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048364}, expr=(add[32] v576[32] -4[32])} }
    si      = { {defs={}, expr=v578[32]} }
    di      = { {defs={}, expr=v579[32]} }
    es      = { {defs={}, expr=v580[16]} }
    cs      = { {defs={}, expr=v581[16]} }
    ss      = { {defs={}, expr=v582[16]} }
    ds      = { {defs={}, expr=v583[16]} }
    fs      = { {defs={}, expr=v584[16]} }
    gs      = { {defs={}, expr=v585[16]} }
    cf      = { {defs={}, expr=v586[1]} }
    ?1      = { {defs={}, expr=v587[1]} }
    pf      = { {defs={}, expr=v588[1]} }
    ?3      = { {defs={}, expr=v589[1]} }
    af      = { {defs={}, expr=v590[1]} }
    ?5      = { {defs={}, expr=v591[1]} }
    zf      = { {defs={}, expr=v592[1]} }
    sf      = { {defs={}, expr=v593[1]} }
    tf      = { {defs={}, expr=v594[1]} }
    if      = { {defs={}, expr=v595[1]} }
    df      = { {defs={}, expr=v596[1]} }
    of      = { {defs={}, expr=v597[1]} }
    iopl0   = { {defs={}, expr=v598[1]} }
    iopl1   = { {defs={}, expr=v599[1]} }
    nt      = { {defs={}, expr=v600[1]} }
    ?15     = { {defs={}, expr=v601[1]} }
    rf      = { {defs={}, expr=v602[1]} }
    vm      = { {defs={}, expr=v603[1]} }
    ac      = { {defs={}, expr=v604[1]} }
    vif     = { {defs={}, expr=v605[1]} }
    vip     = { {defs={}, expr=v606[1]} }
    id      = { {defs={}, expr=v607[1]} }
    ?22     = { {defs={}, expr=v608[1]} }
    ?23     = { {defs={}, expr=v609[1]} }
    ?24     = { {defs={}, expr=v610[1]} }
    ?25     = { {defs={}, expr=v611[1]} }
    ?26     = { {defs={}, expr=v612[1]} }
    ?27     = { {defs={}, expr=v613[1]} }
    ?28     = { {defs={}, expr=v614[1]} }
    ?29     = { {defs={}, expr=v615[1]} }
    ?30     = { {defs={}, expr=v616[1]} }
    ?31     = { {defs={}, expr=v617[1]} }
    ip      = { {defs={0x08048369}, expr=0x0804836e[32]} }
memory:
    addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048369}, expr=8[8]}
    addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048369}, expr=4[8]}
    addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048369}, expr=-125[8]}
    addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048369}, expr=110[8]}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048368}, expr=(extract[8] 24[32] 32[32] v573[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048368}, expr=(extract[8] 16[32] 24[32] v573[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048368}, expr=(extract[8] 8[32] 16[32] v573[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048368}, expr=(extract[8] 0[32] 8[32] v573[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048367}, expr=(extract[8] 24[32] 32[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048367}, expr=(extract[8] 16[32] 24[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v576[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048367}, expr=(extract[8] 8[32] 16[32] v575[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] v576[32] -4[32]) -4[32])} value={defs={0x08048367}, expr=(extract[8] 0[32] 8[32] v575[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v576[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v577[32])}
    addr={defs={0x08048364}, expr=(add[32] v576[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v577[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
registers:
    ax      = { {defs={}, expr=v620[32]} }
    cx      = { {defs={}, expr=v621[32]} }
    dx      = { {defs={}, expr=v622[32]} }
    bx      = { {defs={0x0804836e}, expr=v666[32]} }
    sp      = { {defs={0x0804836e}, expr=(add[32] v624[32] 4[32])} }
    bp      = { {defs={}, expr=v625[32]} }
    si      = { {defs={}, expr=v626[32]} }
    di      = { {defs={}, expr=v627[32]} }
    es      = { {defs={}, expr=v628[16]} }
    cs      = { {defs={}, expr=v629[16]} }
    ss      = { {defs={}, expr=v630[16]} }
    ds      = { {defs={}, expr=v631[16]} }
    fs      = { {defs={}, expr=v632[16]} }
    gs      = { {defs={}, expr=v633[16]} }
    cf      = { {defs={}, expr=v634[1]} }
    ?1      = { {defs={}, expr=v635[1]} }
    pf      = { {defs={}, expr=v636[1]} }
    ?3      = { {defs={}, expr=v637[1]} }
    af      = { {defs={}, expr=v638[1]} }
    ?5      = { {defs={}, expr=v639[1]} }
    zf      = { {defs={}, expr=v640[1]} }
    sf      = { {defs={}, expr=v641[1]} }
    tf      = { {defs={}, expr=v642[1]} }
    if      = { {defs={}, expr=v643[1]} }
    df      = { {defs={}, expr=v644[1]} }
    of      = { {defs={}, expr=v645[1]} }
    iopl0   = { {defs={}, expr=v646[1]} }
    iopl1   = { {defs={}, expr=v647[1]} }
    nt      = { {defs={}, expr=v648[1]} }
    ?15     = { {defs={}, expr=v649[1]} }
    rf      = { {defs={}, expr=v650[1]} }
    vm      = { {defs={}, expr=v651[1]} }
    ac      = { {defs={}, expr=v652[1]} }
    vif     = { {defs={}, expr=v653[1]} }
    vip     = { {defs={}, expr=v654[1]} }
    id      = { {defs={}, expr=v655[1]} }
    ?22     = { {defs={}, expr=v656[1]} }
    ?23     = { {defs={}, expr=v657[1]} }
    ?24     = { {defs={}, expr=v658[1]} }
    ?25     = { {defs={}, expr=v659[1]} }
    ?26     = { {defs={}, expr=v660[1]} }
    ?27     = { {defs={}, expr=v661[1]} }
    ?28     = { {defs={}, expr=v662[1]} }
    ?29     = { {defs={}, expr=v663[1]} }
    ?30     = { {defs={}, expr=v664[1]} }
    ?31     = { {defs={}, expr=v665[1]} }
    ip      = { {defs={0x0804836e}, expr=0x0804836f[32]} }
memory:
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v666[32])}
    addr={defs={}, expr=v624[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v666[32])}
0x804836f:add    ebx, 0x0000135a
registers:
    ax      = { {defs={}, expr=v620[32]} }
    cx      = { {defs={}, expr=v621[32]} }
    dx      = { {defs={}, expr=v622[32]} }
    bx      = { {defs={0x0804836e,0x0804836f}, expr=(add[32] v666[32] 4954[32])} }
    sp      = { {defs={0x0804836e}, expr=(add[32] v624[32] 4[32])} }
    bp      = { {defs={}, expr=v625[32]} }
    si      = { {defs={}, expr=v626[32]} }
    di      = { {defs={}, expr=v627[32]} }
    es      = { {defs={}, expr=v628[16]} }
    cs      = { {defs={}, expr=v629[16]} }
    ss      = { {defs={}, expr=v630[16]} }
    ds      = { {defs={}, expr=v631[16]} }
    fs      = { {defs={}, expr=v632[16]} }
    gs      = { {defs={}, expr=v633[16]} }
    cf      = { {defs={0x0804836e,0x0804836f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v666[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v666[32]) 4954[33])))))} }
    ?1      = { {defs={}, expr=v635[1]} }
    pf      = { {defs={0x0804836e,0x0804836f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32])))))))} }
    ?3      = { {defs={}, expr=v637[1]} }
    af      = { {defs={0x0804836e,0x0804836f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v666[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v666[32]) 4954[33])))))} }
    ?5      = { {defs={}, expr=v639[1]} }
    zf      = { {defs={0x0804836e,0x0804836f}, expr=(zerop[1] (add[32] v666[32] 4954[32]))} }
    sf      = { {defs={0x0804836e,0x0804836f}, expr=(extract[1] 31[32] 32[32] (add[32] v666[32] 4954[32]))} }
    tf      = { {defs={}, expr=v642[1]} }
    if      = { {defs={}, expr=v643[1]} }
    df      = { {defs={}, expr=v644[1]} }
    of      = { {defs={0x0804836e,0x0804836f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v666[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v666[32]) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v666[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v666[32]) 4954[33]))))))} }
    iopl0   = { {defs={}, expr=v646[1]} }
    iopl1   = { {defs={}, expr=v647[1]} }
    nt      = { {defs={}, expr=v648[1]} }
    ?15     = { {defs={}, expr=v649[1]} }
    rf      = { {defs={}, expr=v650[1]} }
    vm      = { {defs={}, expr=v651[1]} }
    ac      = { {defs={}, expr=v652[1]} }
    vif     = { {defs={}, expr=v653[1]} }
    vip     = { {defs={}, expr=v654[1]} }
    id      = { {defs={}, expr=v655[1]} }
    ?22     = { {defs={}, expr=v656[1]} }
    ?23     = { {defs={}, expr=v657[1]} }
    ?24     = { {defs={}, expr=v658[1]} }
    ?25     = { {defs={}, expr=v659[1]} }
    ?26     = { {defs={}, expr=v660[1]} }
    ?27     = { {defs={}, expr=v661[1]} }
    ?28     = { {defs={}, expr=v662[1]} }
    ?29     = { {defs={}, expr=v663[1]} }
    ?30     = { {defs={}, expr=v664[1]} }
    ?31     = { {defs={}, expr=v665[1]} }
    ip      = { {defs={0x0804836f}, expr=0x08048375[32]} }
memory:
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v666[32])}
    addr={defs={}, expr=v624[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v666[32])}
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
registers:
    ax      = { {defs={}, expr=v620[32]} }
    cx      = { {defs={}, expr=v621[32]} }
    dx      = { {defs={0x0804836e,0x08048375}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))} }
    bx      = { {defs={0x0804836e,0x0804836f}, expr=(add[32] v666[32] 4954[32])} }
    sp      = { {defs={0x0804836e}, expr=(add[32] v624[32] 4[32])} }
    bp      = { {defs={}, expr=v625[32]} }
    si      = { {defs={}, expr=v626[32]} }
    di      = { {defs={}, expr=v627[32]} }
    es      = { {defs={}, expr=v628[16]} }
    cs      = { {defs={}, expr=v629[16]} }
    ss      = { {defs={}, expr=v630[16]} }
    ds      = { {defs={}, expr=v631[16]} }
    fs      = { {defs={}, expr=v632[16]} }
    gs      = { {defs={}, expr=v633[16]} }
    cf      = { {defs={0x0804836e,0x0804836f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v666[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v666[32]) 4954[33])))))} }
    ?1      = { {defs={}, expr=v635[1]} }
    pf      = { {defs={0x0804836e,0x0804836f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v666[32] 4954[32])))))))} }
    ?3      = { {defs={}, expr=v637[1]} }
    af      = { {defs={0x0804836e,0x0804836f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v666[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v666[32]) 4954[33])))))} }
    ?5      = { {defs={}, expr=v639[1]} }
    zf      = { {defs={0x0804836e,0x0804836f}, expr=(zerop[1] (add[32] v666[32] 4954[32]))} }
    sf      = { {defs={0x0804836e,0x0804836f}, expr=(extract[1] 31[32] 32[32] (add[32] v666[32] 4954[32]))} }
    tf      = { {defs={}, expr=v642[1]} }
    if      = { {defs={}, expr=v643[1]} }
    df      = { {defs={}, expr=v644[1]} }
    of      = { {defs={0x0804836e,0x0804836f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v666[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v666[32]) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v666[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v666[32]) 4954[33]))))))} }
    iopl0   = { {defs={}, expr=v646[1]} }
    iopl1   = { {defs={}, expr=v647[1]} }
    nt      = { {defs={}, expr=v648[1]} }
    ?15     = { {defs={}, expr=v649[1]} }
    rf      = { {defs={}, expr=v650[1]} }
    vm      = { {defs={}, expr=v651[1]} }
    ac      = { {defs={}, expr=v652[1]} }
    vif     = { {defs={}, expr=v653[1]} }
    vip     = { {defs={}, expr=v654[1]} }
    id      = { {defs={}, expr=v655[1]} }
    ?22     = { {defs={}, expr=v656[1]} }
    ?23     = { {defs={}, expr=v657[1]} }
    ?24     = { {defs={}, expr=v658[1]} }
    ?25     = { {defs={}, expr=v659[1]} }
    ?26     = { {defs={}, expr=v660[1]} }
    ?27     = { {defs={}, expr=v661[1]} }
    ?28     = { {defs={}, expr=v662[1]} }
    ?29     = { {defs={}, expr=v663[1]} }
    ?30     = { {defs={}, expr=v664[1]} }
    ?31     = { {defs={}, expr=v665[1]} }
    ip      = { {defs={0x08048375}, expr=0x0804837b[32]} }
memory:
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])} value={defs={0x08048375}, expr=(extract[8] 24[32] 32[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32])} value={defs={0x08048375}, expr=(extract[8] 16[32] 24[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32])} value={defs={0x08048375}, expr=(extract[8] 8[32] 16[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] v666[32] 4954[32]) -4[32])} value={defs={0x08048375}, expr=(extract[8] 0[32] 8[32] v671[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v666[32])}
    addr={defs={}, expr=v624[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v666[32])}
0x804837b:test   edx, edx
registers:
    ax      = { {defs={}, expr=v620[32]} }
    cx      = { {defs={}, expr=v621[32]} }
    dx      = { {defs={0x0804836e,0x08048375}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))} }
    bx      = { {defs={0x0804836e,0x0804836f}, expr=(add[32] v666[32] 4954[32])} }
    sp      = { {defs={0x0804836e}, expr=(add[32] v624[32] 4[32])} }
    bp      = { {defs={}, expr=v625[32]} }
    si      = { {defs={}, expr=v626[32]} }
    di      = { {defs={}, expr=v627[32]} }
    es      = { {defs={}, expr=v628[16]} }
    cs      = { {defs={}, expr=v629[16]} }
    ss      = { {defs={}, expr=v630[16]} }
    ds      = { {defs={}, expr=v631[16]} }
    fs      = { {defs={}, expr=v632[16]} }
    gs      = { {defs={}, expr=v633[16]} }
    cf      = { {defs={0x0804837b}, expr=0[1]} }
    ?1      = { {defs={}, expr=v635[1]} }
    pf      = { {defs={0x0804836e,0x08048375,0x0804837b}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))))))))))} }
    ?3      = { {defs={}, expr=v637[1]} }
    af      = { {defs={}, expr=v680[1]} }
    ?5      = { {defs={}, expr=v639[1]} }
    zf      = { {defs={0x0804836e,0x08048375,0x0804837b}, expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))} }
    sf      = { {defs={0x0804836e,0x08048375,0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))} }
    tf      = { {defs={}, expr=v642[1]} }
    if      = { {defs={}, expr=v643[1]} }
    df      = { {defs={}, expr=v644[1]} }
    of      = { {defs={0x0804837b}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v646[1]} }
    iopl1   = { {defs={}, expr=v647[1]} }
    nt      = { {defs={}, expr=v648[1]} }
    ?15     = { {defs={}, expr=v649[1]} }
    rf      = { {defs={}, expr=v650[1]} }
    vm      = { {defs={}, expr=v651[1]} }
    ac      = { {defs={}, expr=v652[1]} }
    vif     = { {defs={}, expr=v653[1]} }
    vip     = { {defs={}, expr=v654[1]} }
    id      = { {defs={}, expr=v655[1]} }
    ?22     = { {defs={}, expr=v656[1]} }
    ?23     = { {defs={}, expr=v657[1]} }
    ?24     = { {defs={}, expr=v658[1]} }
    ?25     = { {defs={}, expr=v659[1]} }
    ?26     = { {defs={}, expr=v660[1]} }
    ?27     = { {defs={}, expr=v661[1]} }
    ?28     = { {defs={}, expr=v662[1]} }
    ?29     = { {defs={}, expr=v663[1]} }
    ?30     = { {defs={}, expr=v664[1]} }
    ?31     = { {defs={}, expr=v665[1]} }
    ip      = { {defs={0x0804837b}, expr=0x0804837d[32]} }
memory:
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])} value={defs={0x08048375}, expr=(extract[8] 24[32] 32[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32])} value={defs={0x08048375}, expr=(extract[8] 16[32] 24[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32])} value={defs={0x08048375}, expr=(extract[8] 8[32] 16[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] v666[32] 4954[32]) -4[32])} value={defs={0x08048375}, expr=(extract[8] 0[32] 8[32] v671[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v666[32])}
    addr={defs={}, expr=v624[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v666[32])}
0x804837d:je     0x08048384<<Insn>>
registers:
    ax      = { {defs={}, expr=v620[32]} }
    cx      = { {defs={}, expr=v621[32]} }
    dx      = { {defs={0x0804836e,0x08048375}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))} }
    bx      = { {defs={0x0804836e,0x0804836f}, expr=(add[32] v666[32] 4954[32])} }
    sp      = { {defs={0x0804836e}, expr=(add[32] v624[32] 4[32])} }
    bp      = { {defs={}, expr=v625[32]} }
    si      = { {defs={}, expr=v626[32]} }
    di      = { {defs={}, expr=v627[32]} }
    es      = { {defs={}, expr=v628[16]} }
    cs      = { {defs={}, expr=v629[16]} }
    ss      = { {defs={}, expr=v630[16]} }
    ds      = { {defs={}, expr=v631[16]} }
    fs      = { {defs={}, expr=v632[16]} }
    gs      = { {defs={}, expr=v633[16]} }
    cf      = { {defs={0x0804837b}, expr=0[1]} }
    ?1      = { {defs={}, expr=v635[1]} }
    pf      = { {defs={0x0804836e,0x08048375,0x0804837b}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))))))))))} }
    ?3      = { {defs={}, expr=v637[1]} }
    af      = { {defs={}, expr=v680[1]} }
    ?5      = { {defs={}, expr=v639[1]} }
    zf      = { {defs={0x0804836e,0x08048375,0x0804837b}, expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))} }
    sf      = { {defs={0x0804836e,0x08048375,0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])))))))} }
    tf      = { {defs={}, expr=v642[1]} }
    if      = { {defs={}, expr=v643[1]} }
    df      = { {defs={}, expr=v644[1]} }
    of      = { {defs={0x0804837b}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v646[1]} }
    iopl1   = { {defs={}, expr=v647[1]} }
    nt      = { {defs={}, expr=v648[1]} }
    ?15     = { {defs={}, expr=v649[1]} }
    rf      = { {defs={}, expr=v650[1]} }
    vm      = { {defs={}, expr=v651[1]} }
    ac      = { {defs={}, expr=v652[1]} }
    vif     = { {defs={}, expr=v653[1]} }
    vip     = { {defs={}, expr=v654[1]} }
    id      = { {defs={}, expr=v655[1]} }
    ?22     = { {defs={}, expr=v656[1]} }
    ?23     = { {defs={}, expr=v657[1]} }
    ?24     = { {defs={}, expr=v658[1]} }
    ?25     = { {defs={}, expr=v659[1]} }
    ?26     = { {defs={}, expr=v660[1]} }
    ?27     = { {defs={}, expr=v661[1]} }
    ?28     = { {defs={}, expr=v662[1]} }
    ?29     = { {defs={}, expr=v663[1]} }
    ?30     = { {defs={}, expr=v664[1]} }
    ?31     = { {defs={}, expr=v665[1]} }
    ip      = { {defs={0x0804836e,0x08048375,0x0804837b,0x0804837d}, expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m673[8] (add[32] (add[32] v666[32] 4954[32]) -4[32]) (extract[8] 0[32] 8[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] v666[32] 4954[32]) -4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m675[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m677[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m679[8] (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v671[32])) v624[32] (extract[8] 0[32] 8[32] v666[32])) (add[32] v624[32] 1[32]) (extract[8] 8[32] 16[32] v666[32])) (add[32] v624[32] 2[32]) (extract[8] 16[32] 24[32] v666[32])) (add[32] v624[32] 3[32]) (extract[8] 24[32] 32[32] v666[32])) (add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32]))))))) 0x08048384[32] 0x0804837f[32])} }
memory:
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 3[32])} value={defs={0x08048375}, expr=(extract[8] 24[32] 32[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 2[32])} value={defs={0x08048375}, expr=(extract[8] 16[32] 24[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v666[32] 4954[32]) -4[32]) 1[32])} value={defs={0x08048375}, expr=(extract[8] 8[32] 16[32] v671[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] v666[32] 4954[32]) -4[32])} value={defs={0x08048375}, expr=(extract[8] 0[32] 8[32] v671[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v666[32])}
    addr={defs={0x0804836e}, expr=(add[32] v624[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v666[32])}
    addr={defs={}, expr=v624[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v666[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
registers:
    ax      = { {defs={}, expr=v683[32]} }
    cx      = { {defs={}, expr=v684[32]} }
    dx      = { {defs={}, expr=v685[32]} }
    bx      = { {defs={}, expr=v686[32]} }
    sp      = { {defs={0x0804837f}, expr=(add[32] v687[32] -4[32])} }
    bp      = { {defs={}, expr=v688[32]} }
    si      = { {defs={}, expr=v689[32]} }
    di      = { {defs={}, expr=v690[32]} }
    es      = { {defs={}, expr=v691[16]} }
    cs      = { {defs={}, expr=v692[16]} }
    ss      = { {defs={}, expr=v693[16]} }
    ds      = { {defs={}, expr=v694[16]} }
    fs      = { {defs={}, expr=v695[16]} }
    gs      = { {defs={}, expr=v696[16]} }
    cf      = { {defs={}, expr=v697[1]} }
    ?1      = { {defs={}, expr=v698[1]} }
    pf      = { {defs={}, expr=v699[1]} }
    ?3      = { {defs={}, expr=v700[1]} }
    af      = { {defs={}, expr=v701[1]} }
    ?5      = { {defs={}, expr=v702[1]} }
    zf      = { {defs={}, expr=v703[1]} }
    sf      = { {defs={}, expr=v704[1]} }
    tf      = { {defs={}, expr=v705[1]} }
    if      = { {defs={}, expr=v706[1]} }
    df      = { {defs={}, expr=v707[1]} }
    of      = { {defs={}, expr=v708[1]} }
    iopl0   = { {defs={}, expr=v709[1]} }
    iopl1   = { {defs={}, expr=v710[1]} }
    nt      = { {defs={}, expr=v711[1]} }
    ?15     = { {defs={}, expr=v712[1]} }
    rf      = { {defs={}, expr=v713[1]} }
    vm      = { {defs={}, expr=v714[1]} }
    ac      = { {defs={}, expr=v715[1]} }
    vif     = { {defs={}, expr=v716[1]} }
    vip     = { {defs={}, expr=v717[1]} }
    id      = { {defs={}, expr=v718[1]} }
    ?22     = { {defs={}, expr=v719[1]} }
    ?23     = { {defs={}, expr=v720[1]} }
    ?24     = { {defs={}, expr=v721[1]} }
    ?25     = { {defs={}, expr=v722[1]} }
    ?26     = { {defs={}, expr=v723[1]} }
    ?27     = { {defs={}, expr=v724[1]} }
    ?28     = { {defs={}, expr=v725[1]} }
    ?29     = { {defs={}, expr=v726[1]} }
    ?30     = { {defs={}, expr=v727[1]} }
    ?31     = { {defs={}, expr=v728[1]} }
    ip      = { {defs={0x0804837f}, expr=0x08048330[32]} }
memory:
    addr={defs={0x0804837f}, expr=(add[32] (add[32] v687[32] -4[32]) 3[32])} value={defs={0x0804837f}, expr=8[8]}
    addr={defs={0x0804837f}, expr=(add[32] (add[32] v687[32] -4[32]) 2[32])} value={defs={0x0804837f}, expr=4[8]}
    addr={defs={0x0804837f}, expr=(add[32] (add[32] v687[32] -4[32]) 1[32])} value={defs={0x0804837f}, expr=-125[8]}
    addr={defs={0x0804837f}, expr=(add[32] v687[32] -4[32])} value={defs={0x0804837f}, expr=-124[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
registers:
    ax      = { {defs={0x08048384}, expr=v777[32]} }
    cx      = { {defs={}, expr=v732[32]} }
    dx      = { {defs={}, expr=v733[32]} }
    bx      = { {defs={}, expr=v734[32]} }
    sp      = { {defs={0x08048384}, expr=(add[32] v735[32] 4[32])} }
    bp      = { {defs={}, expr=v736[32]} }
    si      = { {defs={}, expr=v737[32]} }
    di      = { {defs={}, expr=v738[32]} }
    es      = { {defs={}, expr=v739[16]} }
    cs      = { {defs={}, expr=v740[16]} }
    ss      = { {defs={}, expr=v741[16]} }
    ds      = { {defs={}, expr=v742[16]} }
    fs      = { {defs={}, expr=v743[16]} }
    gs      = { {defs={}, expr=v744[16]} }
    cf      = { {defs={}, expr=v745[1]} }
    ?1      = { {defs={}, expr=v746[1]} }
    pf      = { {defs={}, expr=v747[1]} }
    ?3      = { {defs={}, expr=v748[1]} }
    af      = { {defs={}, expr=v749[1]} }
    ?5      = { {defs={}, expr=v750[1]} }
    zf      = { {defs={}, expr=v751[1]} }
    sf      = { {defs={}, expr=v752[1]} }
    tf      = { {defs={}, expr=v753[1]} }
    if      = { {defs={}, expr=v754[1]} }
    df      = { {defs={}, expr=v755[1]} }
    of      = { {defs={}, expr=v756[1]} }
    iopl0   = { {defs={}, expr=v757[1]} }
    iopl1   = { {defs={}, expr=v758[1]} }
    nt      = { {defs={}, expr=v759[1]} }
    ?15     = { {defs={}, expr=v760[1]} }
    rf      = { {defs={}, expr=v761[1]} }
    vm      = { {defs={}, expr=v762[1]} }
    ac      = { {defs={}, expr=v763[1]} }
    vif     = { {defs={}, expr=v764[1]} }
    vip     = { {defs={}, expr=v765[1]} }
    id      = { {defs={}, expr=v766[1]} }
    ?22     = { {defs={}, expr=v767[1]} }
    ?23     = { {defs={}, expr=v768[1]} }
    ?24     = { {defs={}, expr=v769[1]} }
    ?25     = { {defs={}, expr=v770[1]} }
    ?26     = { {defs={}, expr=v771[1]} }
    ?27     = { {defs={}, expr=v772[1]} }
    ?28     = { {defs={}, expr=v773[1]} }
    ?29     = { {defs={}, expr=v774[1]} }
    ?30     = { {defs={}, expr=v775[1]} }
    ?31     = { {defs={}, expr=v776[1]} }
    ip      = { {defs={0x08048384}, expr=0x08048385[32]} }
memory:
    addr={defs={0x08048384}, expr=(add[32] v735[32] 3[32])} value={defs={0x08048384}, expr=(extract[8] 24[32] 32[32] v777[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 2[32])} value={defs={0x08048384}, expr=(extract[8] 16[32] 24[32] v777[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 1[32])} value={defs={0x08048384}, expr=(extract[8] 8[32] 16[32] v777[32])}
    addr={defs={}, expr=v735[32]} value={defs={0x08048384}, expr=(extract[8] 0[32] 8[32] v777[32])}
0x8048385:pop    ebx
registers:
    ax      = { {defs={0x08048384}, expr=v777[32]} }
    cx      = { {defs={}, expr=v732[32]} }
    dx      = { {defs={}, expr=v733[32]} }
    bx      = { {defs={0x08048385}, expr=v782[32]} }
    sp      = { {defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 4[32])} }
    bp      = { {defs={}, expr=v736[32]} }
    si      = { {defs={}, expr=v737[32]} }
    di      = { {defs={}, expr=v738[32]} }
    es      = { {defs={}, expr=v739[16]} }
    cs      = { {defs={}, expr=v740[16]} }
    ss      = { {defs={}, expr=v741[16]} }
    ds      = { {defs={}, expr=v742[16]} }
    fs      = { {defs={}, expr=v743[16]} }
    gs      = { {defs={}, expr=v744[16]} }
    cf      = { {defs={}, expr=v745[1]} }
    ?1      = { {defs={}, expr=v746[1]} }
    pf      = { {defs={}, expr=v747[1]} }
    ?3      = { {defs={}, expr=v748[1]} }
    af      = { {defs={}, expr=v749[1]} }
    ?5      = { {defs={}, expr=v750[1]} }
    zf      = { {defs={}, expr=v751[1]} }
    sf      = { {defs={}, expr=v752[1]} }
    tf      = { {defs={}, expr=v753[1]} }
    if      = { {defs={}, expr=v754[1]} }
    df      = { {defs={}, expr=v755[1]} }
    of      = { {defs={}, expr=v756[1]} }
    iopl0   = { {defs={}, expr=v757[1]} }
    iopl1   = { {defs={}, expr=v758[1]} }
    nt      = { {defs={}, expr=v759[1]} }
    ?15     = { {defs={}, expr=v760[1]} }
    rf      = { {defs={}, expr=v761[1]} }
    vm      = { {defs={}, expr=v762[1]} }
    ac      = { {defs={}, expr=v763[1]} }
    vif     = { {defs={}, expr=v764[1]} }
    vip     = { {defs={}, expr=v765[1]} }
    id      = { {defs={}, expr=v766[1]} }
    ?22     = { {defs={}, expr=v767[1]} }
    ?23     = { {defs={}, expr=v768[1]} }
    ?24     = { {defs={}, expr=v769[1]} }
    ?25     = { {defs={}, expr=v770[1]} }
    ?26     = { {defs={}, expr=v771[1]} }
    ?27     = { {defs={}, expr=v772[1]} }
    ?28     = { {defs={}, expr=v773[1]} }
    ?29     = { {defs={}, expr=v774[1]} }
    ?30     = { {defs={}, expr=v775[1]} }
    ?31     = { {defs={}, expr=v776[1]} }
    ip      = { {defs={0x08048385}, expr=0x08048386[32]} }
memory:
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 3[32])} value={defs={0x08048385}, expr=(extract[8] 24[32] 32[32] v782[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 2[32])} value={defs={0x08048385}, expr=(extract[8] 16[32] 24[32] v782[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 1[32])} value={defs={0x08048385}, expr=(extract[8] 8[32] 16[32] v782[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 4[32])} value={defs={0x08048385}, expr=(extract[8] 0[32] 8[32] v782[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 3[32])} value={defs={0x08048384}, expr=(extract[8] 24[32] 32[32] v777[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 2[32])} value={defs={0x08048384}, expr=(extract[8] 16[32] 24[32] v777[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 1[32])} value={defs={0x08048384}, expr=(extract[8] 8[32] 16[32] v777[32])}
    addr={defs={}, expr=v735[32]} value={defs={0x08048384}, expr=(extract[8] 0[32] 8[32] v777[32])}
0x8048386:leave  
registers:
    ax      = { {defs={0x08048384}, expr=v777[32]} }
    cx      = { {defs={}, expr=v732[32]} }
    dx      = { {defs={}, expr=v733[32]} }
    bx      = { {defs={0x08048385}, expr=v782[32]} }
    sp      = { {defs={0x08048386}, expr=(add[32] v736[32] 4[32])} }
    bp      = { {defs={0x08048384,0x08048385,0x08048386}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m789[8] v736[32] (extract[8] 0[32] 8[32] v787[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) v736[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m791[8] (add[32] v736[32] 1[32]) (extract[8] 8[32] 16[32] v787[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] v736[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m793[8] (add[32] v736[32] 2[32]) (extract[8] 16[32] 24[32] v787[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] v736[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m795[8] (add[32] v736[32] 3[32]) (extract[8] 24[32] 32[32] v787[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] v736[32] 3[32])))))} }
    si      = { {defs={}, expr=v737[32]} }
    di      = { {defs={}, expr=v738[32]} }
    es      = { {defs={}, expr=v739[16]} }
    cs      = { {defs={}, expr=v740[16]} }
    ss      = { {defs={}, expr=v741[16]} }
    ds      = { {defs={}, expr=v742[16]} }
    fs      = { {defs={}, expr=v743[16]} }
    gs      = { {defs={}, expr=v744[16]} }
    cf      = { {defs={}, expr=v745[1]} }
    ?1      = { {defs={}, expr=v746[1]} }
    pf      = { {defs={}, expr=v747[1]} }
    ?3      = { {defs={}, expr=v748[1]} }
    af      = { {defs={}, expr=v749[1]} }
    ?5      = { {defs={}, expr=v750[1]} }
    zf      = { {defs={}, expr=v751[1]} }
    sf      = { {defs={}, expr=v752[1]} }
    tf      = { {defs={}, expr=v753[1]} }
    if      = { {defs={}, expr=v754[1]} }
    df      = { {defs={}, expr=v755[1]} }
    of      = { {defs={}, expr=v756[1]} }
    iopl0   = { {defs={}, expr=v757[1]} }
    iopl1   = { {defs={}, expr=v758[1]} }
    nt      = { {defs={}, expr=v759[1]} }
    ?15     = { {defs={}, expr=v760[1]} }
    rf      = { {defs={}, expr=v761[1]} }
    vm      = { {defs={}, expr=v762[1]} }
    ac      = { {defs={}, expr=v763[1]} }
    vif     = { {defs={}, expr=v764[1]} }
    vip     = { {defs={}, expr=v765[1]} }
    id      = { {defs={}, expr=v766[1]} }
    ?22     = { {defs={}, expr=v767[1]} }
    ?23     = { {defs={}, expr=v768[1]} }
    ?24     = { {defs={}, expr=v769[1]} }
    ?25     = { {defs={}, expr=v770[1]} }
    ?26     = { {defs={}, expr=v771[1]} }
    ?27     = { {defs={}, expr=v772[1]} }
    ?28     = { {defs={}, expr=v773[1]} }
    ?29     = { {defs={}, expr=v774[1]} }
    ?30     = { {defs={}, expr=v775[1]} }
    ?31     = { {defs={}, expr=v776[1]} }
    ip      = { {defs={0x08048386}, expr=0x08048387[32]} }
memory:
    addr={defs={0x08048386}, expr=(add[32] v736[32] 3[32])} value={defs={0x08048386}, expr=(extract[8] 24[32] 32[32] v787[32])}
    addr={defs={0x08048386}, expr=(add[32] v736[32] 2[32])} value={defs={0x08048386}, expr=(extract[8] 16[32] 24[32] v787[32])}
    addr={defs={0x08048386}, expr=(add[32] v736[32] 1[32])} value={defs={0x08048386}, expr=(extract[8] 8[32] 16[32] v787[32])}
    addr={defs={}, expr=v736[32]} value={defs={0x08048386}, expr=(extract[8] 0[32] 8[32] v787[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 3[32])} value={defs={0x08048385}, expr=(extract[8] 24[32] 32[32] v782[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 2[32])} value={defs={0x08048385}, expr=(extract[8] 16[32] 24[32] v782[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 1[32])} value={defs={0x08048385}, expr=(extract[8] 8[32] 16[32] v782[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 4[32])} value={defs={0x08048385}, expr=(extract[8] 0[32] 8[32] v782[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 3[32])} value={defs={0x08048384}, expr=(extract[8] 24[32] 32[32] v777[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 2[32])} value={defs={0x08048384}, expr=(extract[8] 16[32] 24[32] v777[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 1[32])} value={defs={0x08048384}, expr=(extract[8] 8[32] 16[32] v777[32])}
    addr={defs={}, expr=v735[32]} value={defs={0x08048384}, expr=(extract[8] 0[32] 8[32] v777[32])}
0x8048387:ret    
registers:
    ax      = { {defs={0x08048384}, expr=v777[32]} }
    cx      = { {defs={}, expr=v732[32]} }
    dx      = { {defs={}, expr=v733[32]} }
    bx      = { {defs={0x08048385}, expr=v782[32]} }
    sp      = { {defs={0x08048386,0x08048387}, expr=(add[32] (add[32] v736[32] 4[32]) 4[32])} }
    bp      = { {defs={0x08048384,0x08048385,0x08048386}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m789[8] v736[32] (extract[8] 0[32] 8[32] v787[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) v736[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m791[8] (add[32] v736[32] 1[32]) (extract[8] 8[32] 16[32] v787[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] v736[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m793[8] (add[32] v736[32] 2[32]) (extract[8] 16[32] 24[32] v787[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] v736[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m795[8] (add[32] v736[32] 3[32]) (extract[8] 24[32] 32[32] v787[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] v736[32] 3[32])))))} }
    si      = { {defs={}, expr=v737[32]} }
    di      = { {defs={}, expr=v738[32]} }
    es      = { {defs={}, expr=v739[16]} }
    cs      = { {defs={}, expr=v740[16]} }
    ss      = { {defs={}, expr=v741[16]} }
    ds      = { {defs={}, expr=v742[16]} }
    fs      = { {defs={}, expr=v743[16]} }
    gs      = { {defs={}, expr=v744[16]} }
    cf      = { {defs={}, expr=v745[1]} }
    ?1      = { {defs={}, expr=v746[1]} }
    pf      = { {defs={}, expr=v747[1]} }
    ?3      = { {defs={}, expr=v748[1]} }
    af      = { {defs={}, expr=v749[1]} }
    ?5      = { {defs={}, expr=v750[1]} }
    zf      = { {defs={}, expr=v751[1]} }
    sf      = { {defs={}, expr=v752[1]} }
    tf      = { {defs={}, expr=v753[1]} }
    if      = { {defs={}, expr=v754[1]} }
    df      = { {defs={}, expr=v755[1]} }
    of      = { {defs={}, expr=v756[1]} }
    iopl0   = { {defs={}, expr=v757[1]} }
    iopl1   = { {defs={}, expr=v758[1]} }
    nt      = { {defs={}, expr=v759[1]} }
    ?15     = { {defs={}, expr=v760[1]} }
    rf      = { {defs={}, expr=v761[1]} }
    vm      = { {defs={}, expr=v762[1]} }
    ac      = { {defs={}, expr=v763[1]} }
    vif     = { {defs={}, expr=v764[1]} }
    vip     = { {defs={}, expr=v765[1]} }
    id      = { {defs={}, expr=v766[1]} }
    ?22     = { {defs={}, expr=v767[1]} }
    ?23     = { {defs={}, expr=v768[1]} }
    ?24     = { {defs={}, expr=v769[1]} }
    ?25     = { {defs={}, expr=v770[1]} }
    ?26     = { {defs={}, expr=v771[1]} }
    ?27     = { {defs={}, expr=v772[1]} }
    ?28     = { {defs={}, expr=v773[1]} }
    ?29     = { {defs={}, expr=v774[1]} }
    ?30     = { {defs={}, expr=v775[1]} }
    ?31     = { {defs={}, expr=v776[1]} }
    ip      = { {defs={0x08048384,0x08048385,0x08048387}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m798[8] (add[32] v736[32] 4[32]) (extract[8] 0[32] 8[32] v796[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] v736[32] 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m800[8] (add[32] (add[32] v736[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v796[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] (add[32] v736[32] 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m802[8] (add[32] (add[32] v736[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v796[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] (add[32] v736[32] 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m804[8] (add[32] (add[32] v736[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v796[32])) v735[32] (extract[8] 0[32] 8[32] v777[32])) (add[32] v735[32] 1[32]) (extract[8] 8[32] 16[32] v777[32])) (add[32] v735[32] 2[32]) (extract[8] 16[32] 24[32] v777[32])) (add[32] v735[32] 3[32]) (extract[8] 24[32] 32[32] v777[32])) (add[32] v735[32] 4[32]) (extract[8] 0[32] 8[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v782[32])) (add[32] (add[32] v735[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v782[32])) (add[32] (add[32] v736[32] 4[32]) 3[32])))))} }
memory:
    addr={defs={0x08048386,0x08048387}, expr=(add[32] (add[32] v736[32] 4[32]) 3[32])} value={defs={0x08048387}, expr=(extract[8] 24[32] 32[32] v796[32])}
    addr={defs={0x08048386,0x08048387}, expr=(add[32] (add[32] v736[32] 4[32]) 2[32])} value={defs={0x08048387}, expr=(extract[8] 16[32] 24[32] v796[32])}
    addr={defs={0x08048386,0x08048387}, expr=(add[32] (add[32] v736[32] 4[32]) 1[32])} value={defs={0x08048387}, expr=(extract[8] 8[32] 16[32] v796[32])}
    addr={defs={0x08048386}, expr=(add[32] v736[32] 4[32])} value={defs={0x08048387}, expr=(extract[8] 0[32] 8[32] v796[32])}
    addr={defs={0x08048386}, expr=(add[32] v736[32] 3[32])} value={defs={0x08048386}, expr=(extract[8] 24[32] 32[32] v787[32])}
    addr={defs={0x08048386}, expr=(add[32] v736[32] 2[32])} value={defs={0x08048386}, expr=(extract[8] 16[32] 24[32] v787[32])}
    addr={defs={0x08048386}, expr=(add[32] v736[32] 1[32])} value={defs={0x08048386}, expr=(extract[8] 8[32] 16[32] v787[32])}
    addr={defs={}, expr=v736[32]} value={defs={0x08048386}, expr=(extract[8] 0[32] 8[32] v787[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 3[32])} value={defs={0x08048385}, expr=(extract[8] 24[32] 32[32] v782[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 2[32])} value={defs={0x08048385}, expr=(extract[8] 16[32] 24[32] v782[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v735[32] 4[32]) 1[32])} value={defs={0x08048385}, expr=(extract[8] 8[32] 16[32] v782[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 4[32])} value={defs={0x08048385}, expr=(extract[8] 0[32] 8[32] v782[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 3[32])} value={defs={0x08048384}, expr=(extract[8] 24[32] 32[32] v777[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 2[32])} value={defs={0x08048384}, expr=(extract[8] 16[32] 24[32] v777[32])}
    addr={defs={0x08048384}, expr=(add[32] v735[32] 1[32])} value={defs={0x08048384}, expr=(extract[8] 8[32] 16[32] v777[32])}
    addr={defs={}, expr=v735[32]} value={defs={0x08048384}, expr=(extract[8] 0[32] 8[32] v777[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
registers:
    ax      = { {defs={}, expr=v807[32]} }
    cx      = { {defs={}, expr=v808[32]} }
    dx      = { {defs={}, expr=v809[32]} }
    bx      = { {defs={}, expr=v810[32]} }
    sp      = { {defs={0x08048390}, expr=(add[32] v811[32] -4[32])} }
    bp      = { {defs={}, expr=v812[32]} }
    si      = { {defs={}, expr=v813[32]} }
    di      = { {defs={}, expr=v814[32]} }
    es      = { {defs={}, expr=v815[16]} }
    cs      = { {defs={}, expr=v816[16]} }
    ss      = { {defs={}, expr=v817[16]} }
    ds      = { {defs={}, expr=v818[16]} }
    fs      = { {defs={}, expr=v819[16]} }
    gs      = { {defs={}, expr=v820[16]} }
    cf      = { {defs={}, expr=v821[1]} }
    ?1      = { {defs={}, expr=v822[1]} }
    pf      = { {defs={}, expr=v823[1]} }
    ?3      = { {defs={}, expr=v824[1]} }
    af      = { {defs={}, expr=v825[1]} }
    ?5      = { {defs={}, expr=v826[1]} }
    zf      = { {defs={}, expr=v827[1]} }
    sf      = { {defs={}, expr=v828[1]} }
    tf      = { {defs={}, expr=v829[1]} }
    if      = { {defs={}, expr=v830[1]} }
    df      = { {defs={}, expr=v831[1]} }
    of      = { {defs={}, expr=v832[1]} }
    iopl0   = { {defs={}, expr=v833[1]} }
    iopl1   = { {defs={}, expr=v834[1]} }
    nt      = { {defs={}, expr=v835[1]} }
    ?15     = { {defs={}, expr=v836[1]} }
    rf      = { {defs={}, expr=v837[1]} }
    vm      = { {defs={}, expr=v838[1]} }
    ac      = { {defs={}, expr=v839[1]} }
    vif     = { {defs={}, expr=v840[1]} }
    vip     = { {defs={}, expr=v841[1]} }
    id      = { {defs={}, expr=v842[1]} }
    ?22     = { {defs={}, expr=v843[1]} }
    ?23     = { {defs={}, expr=v844[1]} }
    ?24     = { {defs={}, expr=v845[1]} }
    ?25     = { {defs={}, expr=v846[1]} }
    ?26     = { {defs={}, expr=v847[1]} }
    ?27     = { {defs={}, expr=v848[1]} }
    ?28     = { {defs={}, expr=v849[1]} }
    ?29     = { {defs={}, expr=v850[1]} }
    ?30     = { {defs={}, expr=v851[1]} }
    ?31     = { {defs={}, expr=v852[1]} }
    ip      = { {defs={0x08048390}, expr=0x08048391[32]} }
memory:
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] v811[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v812[32])}
0x8048391:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v807[32]} }
    cx      = { {defs={}, expr=v808[32]} }
    dx      = { {defs={}, expr=v809[32]} }
    bx      = { {defs={}, expr=v810[32]} }
    sp      = { {defs={0x08048390}, expr=(add[32] v811[32] -4[32])} }
    bp      = { {defs={0x08048390}, expr=(add[32] v811[32] -4[32])} }
    si      = { {defs={}, expr=v813[32]} }
    di      = { {defs={}, expr=v814[32]} }
    es      = { {defs={}, expr=v815[16]} }
    cs      = { {defs={}, expr=v816[16]} }
    ss      = { {defs={}, expr=v817[16]} }
    ds      = { {defs={}, expr=v818[16]} }
    fs      = { {defs={}, expr=v819[16]} }
    gs      = { {defs={}, expr=v820[16]} }
    cf      = { {defs={}, expr=v821[1]} }
    ?1      = { {defs={}, expr=v822[1]} }
    pf      = { {defs={}, expr=v823[1]} }
    ?3      = { {defs={}, expr=v824[1]} }
    af      = { {defs={}, expr=v825[1]} }
    ?5      = { {defs={}, expr=v826[1]} }
    zf      = { {defs={}, expr=v827[1]} }
    sf      = { {defs={}, expr=v828[1]} }
    tf      = { {defs={}, expr=v829[1]} }
    if      = { {defs={}, expr=v830[1]} }
    df      = { {defs={}, expr=v831[1]} }
    of      = { {defs={}, expr=v832[1]} }
    iopl0   = { {defs={}, expr=v833[1]} }
    iopl1   = { {defs={}, expr=v834[1]} }
    nt      = { {defs={}, expr=v835[1]} }
    ?15     = { {defs={}, expr=v836[1]} }
    rf      = { {defs={}, expr=v837[1]} }
    vm      = { {defs={}, expr=v838[1]} }
    ac      = { {defs={}, expr=v839[1]} }
    vif     = { {defs={}, expr=v840[1]} }
    vip     = { {defs={}, expr=v841[1]} }
    id      = { {defs={}, expr=v842[1]} }
    ?22     = { {defs={}, expr=v843[1]} }
    ?23     = { {defs={}, expr=v844[1]} }
    ?24     = { {defs={}, expr=v845[1]} }
    ?25     = { {defs={}, expr=v846[1]} }
    ?26     = { {defs={}, expr=v847[1]} }
    ?27     = { {defs={}, expr=v848[1]} }
    ?28     = { {defs={}, expr=v849[1]} }
    ?29     = { {defs={}, expr=v850[1]} }
    ?30     = { {defs={}, expr=v851[1]} }
    ?31     = { {defs={}, expr=v852[1]} }
    ip      = { {defs={0x08048391}, expr=0x08048393[32]} }
memory:
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] v811[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v812[32])}
0x8048393:sub    esp, 0x08
registers:
    ax      = { {defs={}, expr=v807[32]} }
    cx      = { {defs={}, expr=v808[32]} }
    dx      = { {defs={}, expr=v809[32]} }
    bx      = { {defs={}, expr=v810[32]} }
    sp      = { {defs={0x08048390,0x08048393}, expr=(add[32] (add[32] v811[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048390}, expr=(add[32] v811[32] -4[32])} }
    si      = { {defs={}, expr=v813[32]} }
    di      = { {defs={}, expr=v814[32]} }
    es      = { {defs={}, expr=v815[16]} }
    cs      = { {defs={}, expr=v816[16]} }
    ss      = { {defs={}, expr=v817[16]} }
    ds      = { {defs={}, expr=v818[16]} }
    fs      = { {defs={}, expr=v819[16]} }
    gs      = { {defs={}, expr=v820[16]} }
    cf      = { {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v811[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v811[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v822[1]} }
    pf      = { {defs={0x08048390,0x08048393}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v811[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v811[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v811[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v811[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v811[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v811[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v811[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v811[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v824[1]} }
    af      = { {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v811[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v811[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v826[1]} }
    zf      = { {defs={0x08048390,0x08048393}, expr=(zerop[1] (add[32] (add[32] v811[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048390,0x08048393}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v811[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v829[1]} }
    if      = { {defs={}, expr=v830[1]} }
    df      = { {defs={}, expr=v831[1]} }
    of      = { {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v811[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v811[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v811[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v811[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v833[1]} }
    iopl1   = { {defs={}, expr=v834[1]} }
    nt      = { {defs={}, expr=v835[1]} }
    ?15     = { {defs={}, expr=v836[1]} }
    rf      = { {defs={}, expr=v837[1]} }
    vm      = { {defs={}, expr=v838[1]} }
    ac      = { {defs={}, expr=v839[1]} }
    vif     = { {defs={}, expr=v840[1]} }
    vip     = { {defs={}, expr=v841[1]} }
    id      = { {defs={}, expr=v842[1]} }
    ?22     = { {defs={}, expr=v843[1]} }
    ?23     = { {defs={}, expr=v844[1]} }
    ?24     = { {defs={}, expr=v845[1]} }
    ?25     = { {defs={}, expr=v846[1]} }
    ?26     = { {defs={}, expr=v847[1]} }
    ?27     = { {defs={}, expr=v848[1]} }
    ?28     = { {defs={}, expr=v849[1]} }
    ?29     = { {defs={}, expr=v850[1]} }
    ?30     = { {defs={}, expr=v851[1]} }
    ?31     = { {defs={}, expr=v852[1]} }
    ip      = { {defs={0x08048393}, expr=0x08048396[32]} }
memory:
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] v811[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v812[32])}
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
registers:
    ax      = { {defs={}, expr=v807[32]} }
    cx      = { {defs={}, expr=v808[32]} }
    dx      = { {defs={}, expr=v809[32]} }
    bx      = { {defs={}, expr=v810[32]} }
    sp      = { {defs={0x08048390,0x08048393}, expr=(add[32] (add[32] v811[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048390}, expr=(add[32] v811[32] -4[32])} }
    si      = { {defs={}, expr=v813[32]} }
    di      = { {defs={}, expr=v814[32]} }
    es      = { {defs={}, expr=v815[16]} }
    cs      = { {defs={}, expr=v816[16]} }
    ss      = { {defs={}, expr=v817[16]} }
    ds      = { {defs={}, expr=v818[16]} }
    fs      = { {defs={}, expr=v819[16]} }
    gs      = { {defs={}, expr=v820[16]} }
    cf      = { {defs={0x08048390,0x08048396}, expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) -256[9]))))))} }
    ?1      = { {defs={}, expr=v822[1]} }
    pf      = { {defs={0x08048390,0x08048396}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (extract[1] 1[32] 2[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (extract[1] 3[32] 4[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (extract[1] 5[32] 6[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))))))} }
    ?3      = { {defs={}, expr=v824[1]} }
    af      = { {defs={0x08048390,0x08048396}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) -256[9]))))))} }
    ?5      = { {defs={}, expr=v826[1]} }
    zf      = { {defs={0x08048390,0x08048396}, expr=(zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))} }
    sf      = { {defs={0x08048390,0x08048396}, expr=(extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))} }
    tf      = { {defs={}, expr=v829[1]} }
    if      = { {defs={}, expr=v830[1]} }
    df      = { {defs={}, expr=v831[1]} }
    of      = { {defs={0x08048390,0x08048396}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v833[1]} }
    iopl1   = { {defs={}, expr=v834[1]} }
    nt      = { {defs={}, expr=v835[1]} }
    ?15     = { {defs={}, expr=v836[1]} }
    rf      = { {defs={}, expr=v837[1]} }
    vm      = { {defs={}, expr=v838[1]} }
    ac      = { {defs={}, expr=v839[1]} }
    vif     = { {defs={}, expr=v840[1]} }
    vip     = { {defs={}, expr=v841[1]} }
    id      = { {defs={}, expr=v842[1]} }
    ?22     = { {defs={}, expr=v843[1]} }
    ?23     = { {defs={}, expr=v844[1]} }
    ?24     = { {defs={}, expr=v845[1]} }
    ?25     = { {defs={}, expr=v846[1]} }
    ?26     = { {defs={}, expr=v847[1]} }
    ?27     = { {defs={}, expr=v848[1]} }
    ?28     = { {defs={}, expr=v849[1]} }
    ?29     = { {defs={}, expr=v850[1]} }
    ?30     = { {defs={}, expr=v851[1]} }
    ?31     = { {defs={}, expr=v852[1]} }
    ip      = { {defs={0x08048396}, expr=0x0804839d[32]} }
memory:
    addr={defs={0x08048396}, expr=0x080496f4[32]} value={defs={}, expr=v853[8]}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] v811[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v812[32])}
0x804839d:jne    0x080483cc<<Insn>>
registers:
    ax      = { {defs={}, expr=v807[32]} }
    cx      = { {defs={}, expr=v808[32]} }
    dx      = { {defs={}, expr=v809[32]} }
    bx      = { {defs={}, expr=v810[32]} }
    sp      = { {defs={0x08048390,0x08048393}, expr=(add[32] (add[32] v811[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048390}, expr=(add[32] v811[32] -4[32])} }
    si      = { {defs={}, expr=v813[32]} }
    di      = { {defs={}, expr=v814[32]} }
    es      = { {defs={}, expr=v815[16]} }
    cs      = { {defs={}, expr=v816[16]} }
    ss      = { {defs={}, expr=v817[16]} }
    ds      = { {defs={}, expr=v818[16]} }
    fs      = { {defs={}, expr=v819[16]} }
    gs      = { {defs={}, expr=v820[16]} }
    cf      = { {defs={0x08048390,0x08048396}, expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) -256[9]))))))} }
    ?1      = { {defs={}, expr=v822[1]} }
    pf      = { {defs={0x08048390,0x08048396}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (extract[1] 1[32] 2[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (extract[1] 3[32] 4[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (extract[1] 5[32] 6[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))))))} }
    ?3      = { {defs={}, expr=v824[1]} }
    af      = { {defs={0x08048390,0x08048396}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32])) -256[9]))))))} }
    ?5      = { {defs={}, expr=v826[1]} }
    zf      = { {defs={0x08048390,0x08048396}, expr=(zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))} }
    sf      = { {defs={0x08048390,0x08048396}, expr=(extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))} }
    tf      = { {defs={}, expr=v829[1]} }
    if      = { {defs={}, expr=v830[1]} }
    df      = { {defs={}, expr=v831[1]} }
    of      = { {defs={0x08048390,0x08048396}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v833[1]} }
    iopl1   = { {defs={}, expr=v834[1]} }
    nt      = { {defs={}, expr=v835[1]} }
    ?15     = { {defs={}, expr=v836[1]} }
    rf      = { {defs={}, expr=v837[1]} }
    vm      = { {defs={}, expr=v838[1]} }
    ac      = { {defs={}, expr=v839[1]} }
    vif     = { {defs={}, expr=v840[1]} }
    vip     = { {defs={}, expr=v841[1]} }
    id      = { {defs={}, expr=v842[1]} }
    ?22     = { {defs={}, expr=v843[1]} }
    ?23     = { {defs={}, expr=v844[1]} }
    ?24     = { {defs={}, expr=v845[1]} }
    ?25     = { {defs={}, expr=v846[1]} }
    ?26     = { {defs={}, expr=v847[1]} }
    ?27     = { {defs={}, expr=v848[1]} }
    ?28     = { {defs={}, expr=v849[1]} }
    ?29     = { {defs={}, expr=v850[1]} }
    ?30     = { {defs={}, expr=v851[1]} }
    ?31     = { {defs={}, expr=v852[1]} }
    ip      = { {defs={0x08048390,0x08048396,0x0804839d}, expr=(ite[32] (invert[1] (zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m855[8] 0x080496f4[32] v853[8]) (add[32] v811[32] -4[32]) (extract[8] 0[32] 8[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v812[32])) (add[32] (add[32] v811[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v812[32])) 0x080496f4[32]))) 0x080483cc[32] 0x0804839f[32])} }
memory:
    addr={defs={0x08048396}, expr=0x080496f4[32]} value={defs={}, expr=v853[8]}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v811[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v812[32])}
    addr={defs={0x08048390}, expr=(add[32] v811[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v812[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
registers:
    ax      = { {defs={0x0804839f}, expr=v904[32]} }
    cx      = { {defs={}, expr=v859[32]} }
    dx      = { {defs={}, expr=v860[32]} }
    bx      = { {defs={}, expr=v861[32]} }
    sp      = { {defs={}, expr=v862[32]} }
    bp      = { {defs={}, expr=v863[32]} }
    si      = { {defs={}, expr=v864[32]} }
    di      = { {defs={}, expr=v865[32]} }
    es      = { {defs={}, expr=v866[16]} }
    cs      = { {defs={}, expr=v867[16]} }
    ss      = { {defs={}, expr=v868[16]} }
    ds      = { {defs={}, expr=v869[16]} }
    fs      = { {defs={}, expr=v870[16]} }
    gs      = { {defs={}, expr=v871[16]} }
    cf      = { {defs={}, expr=v872[1]} }
    ?1      = { {defs={}, expr=v873[1]} }
    pf      = { {defs={}, expr=v874[1]} }
    ?3      = { {defs={}, expr=v875[1]} }
    af      = { {defs={}, expr=v876[1]} }
    ?5      = { {defs={}, expr=v877[1]} }
    zf      = { {defs={}, expr=v878[1]} }
    sf      = { {defs={}, expr=v879[1]} }
    tf      = { {defs={}, expr=v880[1]} }
    if      = { {defs={}, expr=v881[1]} }
    df      = { {defs={}, expr=v882[1]} }
    of      = { {defs={}, expr=v883[1]} }
    iopl0   = { {defs={}, expr=v884[1]} }
    iopl1   = { {defs={}, expr=v885[1]} }
    nt      = { {defs={}, expr=v886[1]} }
    ?15     = { {defs={}, expr=v887[1]} }
    rf      = { {defs={}, expr=v888[1]} }
    vm      = { {defs={}, expr=v889[1]} }
    ac      = { {defs={}, expr=v890[1]} }
    vif     = { {defs={}, expr=v891[1]} }
    vip     = { {defs={}, expr=v892[1]} }
    id      = { {defs={}, expr=v893[1]} }
    ?22     = { {defs={}, expr=v894[1]} }
    ?23     = { {defs={}, expr=v895[1]} }
    ?24     = { {defs={}, expr=v896[1]} }
    ?25     = { {defs={}, expr=v897[1]} }
    ?26     = { {defs={}, expr=v898[1]} }
    ?27     = { {defs={}, expr=v899[1]} }
    ?28     = { {defs={}, expr=v900[1]} }
    ?29     = { {defs={}, expr=v901[1]} }
    ?30     = { {defs={}, expr=v902[1]} }
    ?31     = { {defs={}, expr=v903[1]} }
    ip      = { {defs={0x0804839f}, expr=0x080483a4[32]} }
memory:
    addr={defs={0x0804839f}, expr=0x080496f3[32]} value={defs={0x0804839f}, expr=(extract[8] 24[32] 32[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f2[32]} value={defs={0x0804839f}, expr=(extract[8] 16[32] 24[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f1[32]} value={defs={0x0804839f}, expr=(extract[8] 8[32] 16[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f0[32]} value={defs={0x0804839f}, expr=(extract[8] 0[32] 8[32] v904[32])}
0x80483a4:mov    edx, DWORD PTR ds:[eax]
registers:
    ax      = { {defs={0x0804839f}, expr=v904[32]} }
    cx      = { {defs={}, expr=v859[32]} }
    dx      = { {defs={0x0804839f,0x080483a4}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))} }
    bx      = { {defs={}, expr=v861[32]} }
    sp      = { {defs={}, expr=v862[32]} }
    bp      = { {defs={}, expr=v863[32]} }
    si      = { {defs={}, expr=v864[32]} }
    di      = { {defs={}, expr=v865[32]} }
    es      = { {defs={}, expr=v866[16]} }
    cs      = { {defs={}, expr=v867[16]} }
    ss      = { {defs={}, expr=v868[16]} }
    ds      = { {defs={}, expr=v869[16]} }
    fs      = { {defs={}, expr=v870[16]} }
    gs      = { {defs={}, expr=v871[16]} }
    cf      = { {defs={}, expr=v872[1]} }
    ?1      = { {defs={}, expr=v873[1]} }
    pf      = { {defs={}, expr=v874[1]} }
    ?3      = { {defs={}, expr=v875[1]} }
    af      = { {defs={}, expr=v876[1]} }
    ?5      = { {defs={}, expr=v877[1]} }
    zf      = { {defs={}, expr=v878[1]} }
    sf      = { {defs={}, expr=v879[1]} }
    tf      = { {defs={}, expr=v880[1]} }
    if      = { {defs={}, expr=v881[1]} }
    df      = { {defs={}, expr=v882[1]} }
    of      = { {defs={}, expr=v883[1]} }
    iopl0   = { {defs={}, expr=v884[1]} }
    iopl1   = { {defs={}, expr=v885[1]} }
    nt      = { {defs={}, expr=v886[1]} }
    ?15     = { {defs={}, expr=v887[1]} }
    rf      = { {defs={}, expr=v888[1]} }
    vm      = { {defs={}, expr=v889[1]} }
    ac      = { {defs={}, expr=v890[1]} }
    vif     = { {defs={}, expr=v891[1]} }
    vip     = { {defs={}, expr=v892[1]} }
    id      = { {defs={}, expr=v893[1]} }
    ?22     = { {defs={}, expr=v894[1]} }
    ?23     = { {defs={}, expr=v895[1]} }
    ?24     = { {defs={}, expr=v896[1]} }
    ?25     = { {defs={}, expr=v897[1]} }
    ?26     = { {defs={}, expr=v898[1]} }
    ?27     = { {defs={}, expr=v899[1]} }
    ?28     = { {defs={}, expr=v900[1]} }
    ?29     = { {defs={}, expr=v901[1]} }
    ?30     = { {defs={}, expr=v902[1]} }
    ?31     = { {defs={}, expr=v903[1]} }
    ip      = { {defs={0x080483a4}, expr=0x080483a6[32]} }
memory:
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 3[32])} value={defs={0x080483a4}, expr=(extract[8] 24[32] 32[32] v909[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 2[32])} value={defs={0x080483a4}, expr=(extract[8] 16[32] 24[32] v909[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 1[32])} value={defs={0x080483a4}, expr=(extract[8] 8[32] 16[32] v909[32])}
    addr={defs={0x0804839f}, expr=v904[32]} value={defs={0x080483a4}, expr=(extract[8] 0[32] 8[32] v909[32])}
    addr={defs={0x0804839f}, expr=0x080496f3[32]} value={defs={0x0804839f}, expr=(extract[8] 24[32] 32[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f2[32]} value={defs={0x0804839f}, expr=(extract[8] 16[32] 24[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f1[32]} value={defs={0x0804839f}, expr=(extract[8] 8[32] 16[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f0[32]} value={defs={0x0804839f}, expr=(extract[8] 0[32] 8[32] v904[32])}
0x80483a6:test   edx, edx
registers:
    ax      = { {defs={0x0804839f}, expr=v904[32]} }
    cx      = { {defs={}, expr=v859[32]} }
    dx      = { {defs={0x0804839f,0x080483a4}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))} }
    bx      = { {defs={}, expr=v861[32]} }
    sp      = { {defs={}, expr=v862[32]} }
    bp      = { {defs={}, expr=v863[32]} }
    si      = { {defs={}, expr=v864[32]} }
    di      = { {defs={}, expr=v865[32]} }
    es      = { {defs={}, expr=v866[16]} }
    cs      = { {defs={}, expr=v867[16]} }
    ss      = { {defs={}, expr=v868[16]} }
    ds      = { {defs={}, expr=v869[16]} }
    fs      = { {defs={}, expr=v870[16]} }
    gs      = { {defs={}, expr=v871[16]} }
    cf      = { {defs={0x080483a6}, expr=0[1]} }
    ?1      = { {defs={}, expr=v873[1]} }
    pf      = { {defs={0x0804839f,0x080483a4,0x080483a6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))))))))))} }
    ?3      = { {defs={}, expr=v875[1]} }
    af      = { {defs={}, expr=v918[1]} }
    ?5      = { {defs={}, expr=v877[1]} }
    zf      = { {defs={0x0804839f,0x080483a4,0x080483a6}, expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))} }
    sf      = { {defs={0x0804839f,0x080483a4,0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))} }
    tf      = { {defs={}, expr=v880[1]} }
    if      = { {defs={}, expr=v881[1]} }
    df      = { {defs={}, expr=v882[1]} }
    of      = { {defs={0x080483a6}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v884[1]} }
    iopl1   = { {defs={}, expr=v885[1]} }
    nt      = { {defs={}, expr=v886[1]} }
    ?15     = { {defs={}, expr=v887[1]} }
    rf      = { {defs={}, expr=v888[1]} }
    vm      = { {defs={}, expr=v889[1]} }
    ac      = { {defs={}, expr=v890[1]} }
    vif     = { {defs={}, expr=v891[1]} }
    vip     = { {defs={}, expr=v892[1]} }
    id      = { {defs={}, expr=v893[1]} }
    ?22     = { {defs={}, expr=v894[1]} }
    ?23     = { {defs={}, expr=v895[1]} }
    ?24     = { {defs={}, expr=v896[1]} }
    ?25     = { {defs={}, expr=v897[1]} }
    ?26     = { {defs={}, expr=v898[1]} }
    ?27     = { {defs={}, expr=v899[1]} }
    ?28     = { {defs={}, expr=v900[1]} }
    ?29     = { {defs={}, expr=v901[1]} }
    ?30     = { {defs={}, expr=v902[1]} }
    ?31     = { {defs={}, expr=v903[1]} }
    ip      = { {defs={0x080483a6}, expr=0x080483a8[32]} }
memory:
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 3[32])} value={defs={0x080483a4}, expr=(extract[8] 24[32] 32[32] v909[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 2[32])} value={defs={0x080483a4}, expr=(extract[8] 16[32] 24[32] v909[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 1[32])} value={defs={0x080483a4}, expr=(extract[8] 8[32] 16[32] v909[32])}
    addr={defs={0x0804839f}, expr=v904[32]} value={defs={0x080483a4}, expr=(extract[8] 0[32] 8[32] v909[32])}
    addr={defs={0x0804839f}, expr=0x080496f3[32]} value={defs={0x0804839f}, expr=(extract[8] 24[32] 32[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f2[32]} value={defs={0x0804839f}, expr=(extract[8] 16[32] 24[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f1[32]} value={defs={0x0804839f}, expr=(extract[8] 8[32] 16[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f0[32]} value={defs={0x0804839f}, expr=(extract[8] 0[32] 8[32] v904[32])}
0x80483a8:je     0x080483c5<<Insn>>
registers:
    ax      = { {defs={0x0804839f}, expr=v904[32]} }
    cx      = { {defs={}, expr=v859[32]} }
    dx      = { {defs={0x0804839f,0x080483a4}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))} }
    bx      = { {defs={}, expr=v861[32]} }
    sp      = { {defs={}, expr=v862[32]} }
    bp      = { {defs={}, expr=v863[32]} }
    si      = { {defs={}, expr=v864[32]} }
    di      = { {defs={}, expr=v865[32]} }
    es      = { {defs={}, expr=v866[16]} }
    cs      = { {defs={}, expr=v867[16]} }
    ss      = { {defs={}, expr=v868[16]} }
    ds      = { {defs={}, expr=v869[16]} }
    fs      = { {defs={}, expr=v870[16]} }
    gs      = { {defs={}, expr=v871[16]} }
    cf      = { {defs={0x080483a6}, expr=0[1]} }
    ?1      = { {defs={}, expr=v873[1]} }
    pf      = { {defs={0x0804839f,0x080483a4,0x080483a6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))))))))))} }
    ?3      = { {defs={}, expr=v875[1]} }
    af      = { {defs={}, expr=v918[1]} }
    ?5      = { {defs={}, expr=v877[1]} }
    zf      = { {defs={0x0804839f,0x080483a4,0x080483a6}, expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))} }
    sf      = { {defs={0x0804839f,0x080483a4,0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32])))))))} }
    tf      = { {defs={}, expr=v880[1]} }
    if      = { {defs={}, expr=v881[1]} }
    df      = { {defs={}, expr=v882[1]} }
    of      = { {defs={0x080483a6}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v884[1]} }
    iopl1   = { {defs={}, expr=v885[1]} }
    nt      = { {defs={}, expr=v886[1]} }
    ?15     = { {defs={}, expr=v887[1]} }
    rf      = { {defs={}, expr=v888[1]} }
    vm      = { {defs={}, expr=v889[1]} }
    ac      = { {defs={}, expr=v890[1]} }
    vif     = { {defs={}, expr=v891[1]} }
    vip     = { {defs={}, expr=v892[1]} }
    id      = { {defs={}, expr=v893[1]} }
    ?22     = { {defs={}, expr=v894[1]} }
    ?23     = { {defs={}, expr=v895[1]} }
    ?24     = { {defs={}, expr=v896[1]} }
    ?25     = { {defs={}, expr=v897[1]} }
    ?26     = { {defs={}, expr=v898[1]} }
    ?27     = { {defs={}, expr=v899[1]} }
    ?28     = { {defs={}, expr=v900[1]} }
    ?29     = { {defs={}, expr=v901[1]} }
    ?30     = { {defs={}, expr=v902[1]} }
    ?31     = { {defs={}, expr=v903[1]} }
    ip      = { {defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8}, expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m911[8] v904[32] (extract[8] 0[32] 8[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) v904[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m913[8] (add[32] v904[32] 1[32]) (extract[8] 8[32] 16[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m915[8] (add[32] v904[32] 2[32]) (extract[8] 16[32] 24[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m917[8] (add[32] v904[32] 3[32]) (extract[8] 24[32] 32[32] v909[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v904[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v904[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v904[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v904[32])) (add[32] v904[32] 3[32]))))))) 0x080483c5[32] 0x080483aa[32])} }
memory:
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 3[32])} value={defs={0x080483a4}, expr=(extract[8] 24[32] 32[32] v909[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 2[32])} value={defs={0x080483a4}, expr=(extract[8] 16[32] 24[32] v909[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v904[32] 1[32])} value={defs={0x080483a4}, expr=(extract[8] 8[32] 16[32] v909[32])}
    addr={defs={0x0804839f}, expr=v904[32]} value={defs={0x080483a4}, expr=(extract[8] 0[32] 8[32] v909[32])}
    addr={defs={0x0804839f}, expr=0x080496f3[32]} value={defs={0x0804839f}, expr=(extract[8] 24[32] 32[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f2[32]} value={defs={0x0804839f}, expr=(extract[8] 16[32] 24[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f1[32]} value={defs={0x0804839f}, expr=(extract[8] 8[32] 16[32] v904[32])}
    addr={defs={0x0804839f}, expr=0x080496f0[32]} value={defs={0x0804839f}, expr=(extract[8] 0[32] 8[32] v904[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
registers:
    ax      = { {defs={}, expr=v921[32]} }
    cx      = { {defs={}, expr=v922[32]} }
    dx      = { {defs={}, expr=v923[32]} }
    bx      = { {defs={}, expr=v924[32]} }
    sp      = { {defs={}, expr=v925[32]} }
    bp      = { {defs={}, expr=v926[32]} }
    si      = { {defs={}, expr=v927[32]} }
    di      = { {defs={}, expr=v928[32]} }
    es      = { {defs={}, expr=v929[16]} }
    cs      = { {defs={}, expr=v930[16]} }
    ss      = { {defs={}, expr=v931[16]} }
    ds      = { {defs={}, expr=v932[16]} }
    fs      = { {defs={}, expr=v933[16]} }
    gs      = { {defs={}, expr=v934[16]} }
    cf      = { {defs={}, expr=v935[1]} }
    ?1      = { {defs={}, expr=v936[1]} }
    pf      = { {defs={}, expr=v937[1]} }
    ?3      = { {defs={}, expr=v938[1]} }
    af      = { {defs={}, expr=v939[1]} }
    ?5      = { {defs={}, expr=v940[1]} }
    zf      = { {defs={}, expr=v941[1]} }
    sf      = { {defs={}, expr=v942[1]} }
    tf      = { {defs={}, expr=v943[1]} }
    if      = { {defs={}, expr=v944[1]} }
    df      = { {defs={}, expr=v945[1]} }
    of      = { {defs={}, expr=v946[1]} }
    iopl0   = { {defs={}, expr=v947[1]} }
    iopl1   = { {defs={}, expr=v948[1]} }
    nt      = { {defs={}, expr=v949[1]} }
    ?15     = { {defs={}, expr=v950[1]} }
    rf      = { {defs={}, expr=v951[1]} }
    vm      = { {defs={}, expr=v952[1]} }
    ac      = { {defs={}, expr=v953[1]} }
    vif     = { {defs={}, expr=v954[1]} }
    vip     = { {defs={}, expr=v955[1]} }
    id      = { {defs={}, expr=v956[1]} }
    ?22     = { {defs={}, expr=v957[1]} }
    ?23     = { {defs={}, expr=v958[1]} }
    ?24     = { {defs={}, expr=v959[1]} }
    ?25     = { {defs={}, expr=v960[1]} }
    ?26     = { {defs={}, expr=v961[1]} }
    ?27     = { {defs={}, expr=v962[1]} }
    ?28     = { {defs={}, expr=v963[1]} }
    ?29     = { {defs={}, expr=v964[1]} }
    ?30     = { {defs={}, expr=v965[1]} }
    ?31     = { {defs={}, expr=v966[1]} }
    ip      = { {defs={0x080483aa}, expr=0x080483b0[32]} }
memory:
0x80483b0:add    eax, 0x04
registers:
    ax      = { {defs={0x080483b0}, expr=(add[32] v921[32] 4[32])} }
    cx      = { {defs={}, expr=v922[32]} }
    dx      = { {defs={}, expr=v923[32]} }
    bx      = { {defs={}, expr=v924[32]} }
    sp      = { {defs={}, expr=v925[32]} }
    bp      = { {defs={}, expr=v926[32]} }
    si      = { {defs={}, expr=v927[32]} }
    di      = { {defs={}, expr=v928[32]} }
    es      = { {defs={}, expr=v929[16]} }
    cs      = { {defs={}, expr=v930[16]} }
    ss      = { {defs={}, expr=v931[16]} }
    ds      = { {defs={}, expr=v932[16]} }
    fs      = { {defs={}, expr=v933[16]} }
    gs      = { {defs={}, expr=v934[16]} }
    cf      = { {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33])))))} }
    ?1      = { {defs={}, expr=v936[1]} }
    pf      = { {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))))))} }
    ?3      = { {defs={}, expr=v938[1]} }
    af      = { {defs={0x080483b0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33])))))} }
    ?5      = { {defs={}, expr=v940[1]} }
    zf      = { {defs={0x080483b0}, expr=(zerop[1] (add[32] v921[32] 4[32]))} }
    sf      = { {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] v921[32] 4[32]))} }
    tf      = { {defs={}, expr=v943[1]} }
    if      = { {defs={}, expr=v944[1]} }
    df      = { {defs={}, expr=v945[1]} }
    of      = { {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33]))))))} }
    iopl0   = { {defs={}, expr=v947[1]} }
    iopl1   = { {defs={}, expr=v948[1]} }
    nt      = { {defs={}, expr=v949[1]} }
    ?15     = { {defs={}, expr=v950[1]} }
    rf      = { {defs={}, expr=v951[1]} }
    vm      = { {defs={}, expr=v952[1]} }
    ac      = { {defs={}, expr=v953[1]} }
    vif     = { {defs={}, expr=v954[1]} }
    vip     = { {defs={}, expr=v955[1]} }
    id      = { {defs={}, expr=v956[1]} }
    ?22     = { {defs={}, expr=v957[1]} }
    ?23     = { {defs={}, expr=v958[1]} }
    ?24     = { {defs={}, expr=v959[1]} }
    ?25     = { {defs={}, expr=v960[1]} }
    ?26     = { {defs={}, expr=v961[1]} }
    ?27     = { {defs={}, expr=v962[1]} }
    ?28     = { {defs={}, expr=v963[1]} }
    ?29     = { {defs={}, expr=v964[1]} }
    ?30     = { {defs={}, expr=v965[1]} }
    ?31     = { {defs={}, expr=v966[1]} }
    ip      = { {defs={0x080483b0}, expr=0x080483b3[32]} }
memory:
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
registers:
    ax      = { {defs={0x080483b0}, expr=(add[32] v921[32] 4[32])} }
    cx      = { {defs={}, expr=v922[32]} }
    dx      = { {defs={}, expr=v923[32]} }
    bx      = { {defs={}, expr=v924[32]} }
    sp      = { {defs={}, expr=v925[32]} }
    bp      = { {defs={}, expr=v926[32]} }
    si      = { {defs={}, expr=v927[32]} }
    di      = { {defs={}, expr=v928[32]} }
    es      = { {defs={}, expr=v929[16]} }
    cs      = { {defs={}, expr=v930[16]} }
    ss      = { {defs={}, expr=v931[16]} }
    ds      = { {defs={}, expr=v932[16]} }
    fs      = { {defs={}, expr=v933[16]} }
    gs      = { {defs={}, expr=v934[16]} }
    cf      = { {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33])))))} }
    ?1      = { {defs={}, expr=v936[1]} }
    pf      = { {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))))))} }
    ?3      = { {defs={}, expr=v938[1]} }
    af      = { {defs={0x080483b0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33])))))} }
    ?5      = { {defs={}, expr=v940[1]} }
    zf      = { {defs={0x080483b0}, expr=(zerop[1] (add[32] v921[32] 4[32]))} }
    sf      = { {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] v921[32] 4[32]))} }
    tf      = { {defs={}, expr=v943[1]} }
    if      = { {defs={}, expr=v944[1]} }
    df      = { {defs={}, expr=v945[1]} }
    of      = { {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33]))))))} }
    iopl0   = { {defs={}, expr=v947[1]} }
    iopl1   = { {defs={}, expr=v948[1]} }
    nt      = { {defs={}, expr=v949[1]} }
    ?15     = { {defs={}, expr=v950[1]} }
    rf      = { {defs={}, expr=v951[1]} }
    vm      = { {defs={}, expr=v952[1]} }
    ac      = { {defs={}, expr=v953[1]} }
    vif     = { {defs={}, expr=v954[1]} }
    vip     = { {defs={}, expr=v955[1]} }
    id      = { {defs={}, expr=v956[1]} }
    ?22     = { {defs={}, expr=v957[1]} }
    ?23     = { {defs={}, expr=v958[1]} }
    ?24     = { {defs={}, expr=v959[1]} }
    ?25     = { {defs={}, expr=v960[1]} }
    ?26     = { {defs={}, expr=v961[1]} }
    ?27     = { {defs={}, expr=v962[1]} }
    ?28     = { {defs={}, expr=v963[1]} }
    ?29     = { {defs={}, expr=v964[1]} }
    ?30     = { {defs={}, expr=v965[1]} }
    ?31     = { {defs={}, expr=v966[1]} }
    ip      = { {defs={0x080483b3}, expr=0x080483b8[32]} }
memory:
    addr={defs={0x080483b3}, expr=0x080496f3[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 24[32] 32[32] (add[32] v921[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f2[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 16[32] 24[32] (add[32] v921[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f1[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 8[32] 16[32] (add[32] v921[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f0[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))}
0x80483b8:call   edx
registers:
    ax      = { {defs={0x080483b0}, expr=(add[32] v921[32] 4[32])} }
    cx      = { {defs={}, expr=v922[32]} }
    dx      = { {defs={}, expr=v923[32]} }
    bx      = { {defs={}, expr=v924[32]} }
    sp      = { {defs={0x080483b8}, expr=(add[32] v925[32] -4[32])} }
    bp      = { {defs={}, expr=v926[32]} }
    si      = { {defs={}, expr=v927[32]} }
    di      = { {defs={}, expr=v928[32]} }
    es      = { {defs={}, expr=v929[16]} }
    cs      = { {defs={}, expr=v930[16]} }
    ss      = { {defs={}, expr=v931[16]} }
    ds      = { {defs={}, expr=v932[16]} }
    fs      = { {defs={}, expr=v933[16]} }
    gs      = { {defs={}, expr=v934[16]} }
    cf      = { {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33])))))} }
    ?1      = { {defs={}, expr=v936[1]} }
    pf      = { {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v921[32] 4[32])))))))} }
    ?3      = { {defs={}, expr=v938[1]} }
    af      = { {defs={0x080483b0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33])))))} }
    ?5      = { {defs={}, expr=v940[1]} }
    zf      = { {defs={0x080483b0}, expr=(zerop[1] (add[32] v921[32] 4[32]))} }
    sf      = { {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] v921[32] 4[32]))} }
    tf      = { {defs={}, expr=v943[1]} }
    if      = { {defs={}, expr=v944[1]} }
    df      = { {defs={}, expr=v945[1]} }
    of      = { {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v921[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v921[32]) 4[33]))))))} }
    iopl0   = { {defs={}, expr=v947[1]} }
    iopl1   = { {defs={}, expr=v948[1]} }
    nt      = { {defs={}, expr=v949[1]} }
    ?15     = { {defs={}, expr=v950[1]} }
    rf      = { {defs={}, expr=v951[1]} }
    vm      = { {defs={}, expr=v952[1]} }
    ac      = { {defs={}, expr=v953[1]} }
    vif     = { {defs={}, expr=v954[1]} }
    vip     = { {defs={}, expr=v955[1]} }
    id      = { {defs={}, expr=v956[1]} }
    ?22     = { {defs={}, expr=v957[1]} }
    ?23     = { {defs={}, expr=v958[1]} }
    ?24     = { {defs={}, expr=v959[1]} }
    ?25     = { {defs={}, expr=v960[1]} }
    ?26     = { {defs={}, expr=v961[1]} }
    ?27     = { {defs={}, expr=v962[1]} }
    ?28     = { {defs={}, expr=v963[1]} }
    ?29     = { {defs={}, expr=v964[1]} }
    ?30     = { {defs={}, expr=v965[1]} }
    ?31     = { {defs={}, expr=v966[1]} }
    ip      = { {defs={}, expr=v923[32]} }
memory:
    addr={defs={0x080483b8}, expr=(add[32] (add[32] v925[32] -4[32]) 3[32])} value={defs={0x080483b8}, expr=8[8]}
    addr={defs={0x080483b8}, expr=(add[32] (add[32] v925[32] -4[32]) 2[32])} value={defs={0x080483b8}, expr=4[8]}
    addr={defs={0x080483b8}, expr=(add[32] (add[32] v925[32] -4[32]) 1[32])} value={defs={0x080483b8}, expr=-125[8]}
    addr={defs={0x080483b8}, expr=(add[32] v925[32] -4[32])} value={defs={0x080483b8}, expr=-70[8]}
    addr={defs={0x080483b3}, expr=0x080496f3[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 24[32] 32[32] (add[32] v921[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f2[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 16[32] 24[32] (add[32] v921[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f1[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 8[32] 16[32] (add[32] v921[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f0[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 0[32] 8[32] (add[32] v921[32] 4[32]))}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
registers:
    ax      = { {defs={0x080483ba}, expr=v1015[32]} }
    cx      = { {defs={}, expr=v970[32]} }
    dx      = { {defs={}, expr=v971[32]} }
    bx      = { {defs={}, expr=v972[32]} }
    sp      = { {defs={}, expr=v973[32]} }
    bp      = { {defs={}, expr=v974[32]} }
    si      = { {defs={}, expr=v975[32]} }
    di      = { {defs={}, expr=v976[32]} }
    es      = { {defs={}, expr=v977[16]} }
    cs      = { {defs={}, expr=v978[16]} }
    ss      = { {defs={}, expr=v979[16]} }
    ds      = { {defs={}, expr=v980[16]} }
    fs      = { {defs={}, expr=v981[16]} }
    gs      = { {defs={}, expr=v982[16]} }
    cf      = { {defs={}, expr=v983[1]} }
    ?1      = { {defs={}, expr=v984[1]} }
    pf      = { {defs={}, expr=v985[1]} }
    ?3      = { {defs={}, expr=v986[1]} }
    af      = { {defs={}, expr=v987[1]} }
    ?5      = { {defs={}, expr=v988[1]} }
    zf      = { {defs={}, expr=v989[1]} }
    sf      = { {defs={}, expr=v990[1]} }
    tf      = { {defs={}, expr=v991[1]} }
    if      = { {defs={}, expr=v992[1]} }
    df      = { {defs={}, expr=v993[1]} }
    of      = { {defs={}, expr=v994[1]} }
    iopl0   = { {defs={}, expr=v995[1]} }
    iopl1   = { {defs={}, expr=v996[1]} }
    nt      = { {defs={}, expr=v997[1]} }
    ?15     = { {defs={}, expr=v998[1]} }
    rf      = { {defs={}, expr=v999[1]} }
    vm      = { {defs={}, expr=v1000[1]} }
    ac      = { {defs={}, expr=v1001[1]} }
    vif     = { {defs={}, expr=v1002[1]} }
    vip     = { {defs={}, expr=v1003[1]} }
    id      = { {defs={}, expr=v1004[1]} }
    ?22     = { {defs={}, expr=v1005[1]} }
    ?23     = { {defs={}, expr=v1006[1]} }
    ?24     = { {defs={}, expr=v1007[1]} }
    ?25     = { {defs={}, expr=v1008[1]} }
    ?26     = { {defs={}, expr=v1009[1]} }
    ?27     = { {defs={}, expr=v1010[1]} }
    ?28     = { {defs={}, expr=v1011[1]} }
    ?29     = { {defs={}, expr=v1012[1]} }
    ?30     = { {defs={}, expr=v1013[1]} }
    ?31     = { {defs={}, expr=v1014[1]} }
    ip      = { {defs={0x080483ba}, expr=0x080483bf[32]} }
memory:
    addr={defs={0x080483ba}, expr=0x080496f3[32]} value={defs={0x080483ba}, expr=(extract[8] 24[32] 32[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f2[32]} value={defs={0x080483ba}, expr=(extract[8] 16[32] 24[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f1[32]} value={defs={0x080483ba}, expr=(extract[8] 8[32] 16[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f0[32]} value={defs={0x080483ba}, expr=(extract[8] 0[32] 8[32] v1015[32])}
0x80483bf:mov    edx, DWORD PTR ds:[eax]
registers:
    ax      = { {defs={0x080483ba}, expr=v1015[32]} }
    cx      = { {defs={}, expr=v970[32]} }
    dx      = { {defs={0x080483ba,0x080483bf}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))} }
    bx      = { {defs={}, expr=v972[32]} }
    sp      = { {defs={}, expr=v973[32]} }
    bp      = { {defs={}, expr=v974[32]} }
    si      = { {defs={}, expr=v975[32]} }
    di      = { {defs={}, expr=v976[32]} }
    es      = { {defs={}, expr=v977[16]} }
    cs      = { {defs={}, expr=v978[16]} }
    ss      = { {defs={}, expr=v979[16]} }
    ds      = { {defs={}, expr=v980[16]} }
    fs      = { {defs={}, expr=v981[16]} }
    gs      = { {defs={}, expr=v982[16]} }
    cf      = { {defs={}, expr=v983[1]} }
    ?1      = { {defs={}, expr=v984[1]} }
    pf      = { {defs={}, expr=v985[1]} }
    ?3      = { {defs={}, expr=v986[1]} }
    af      = { {defs={}, expr=v987[1]} }
    ?5      = { {defs={}, expr=v988[1]} }
    zf      = { {defs={}, expr=v989[1]} }
    sf      = { {defs={}, expr=v990[1]} }
    tf      = { {defs={}, expr=v991[1]} }
    if      = { {defs={}, expr=v992[1]} }
    df      = { {defs={}, expr=v993[1]} }
    of      = { {defs={}, expr=v994[1]} }
    iopl0   = { {defs={}, expr=v995[1]} }
    iopl1   = { {defs={}, expr=v996[1]} }
    nt      = { {defs={}, expr=v997[1]} }
    ?15     = { {defs={}, expr=v998[1]} }
    rf      = { {defs={}, expr=v999[1]} }
    vm      = { {defs={}, expr=v1000[1]} }
    ac      = { {defs={}, expr=v1001[1]} }
    vif     = { {defs={}, expr=v1002[1]} }
    vip     = { {defs={}, expr=v1003[1]} }
    id      = { {defs={}, expr=v1004[1]} }
    ?22     = { {defs={}, expr=v1005[1]} }
    ?23     = { {defs={}, expr=v1006[1]} }
    ?24     = { {defs={}, expr=v1007[1]} }
    ?25     = { {defs={}, expr=v1008[1]} }
    ?26     = { {defs={}, expr=v1009[1]} }
    ?27     = { {defs={}, expr=v1010[1]} }
    ?28     = { {defs={}, expr=v1011[1]} }
    ?29     = { {defs={}, expr=v1012[1]} }
    ?30     = { {defs={}, expr=v1013[1]} }
    ?31     = { {defs={}, expr=v1014[1]} }
    ip      = { {defs={0x080483bf}, expr=0x080483c1[32]} }
memory:
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 3[32])} value={defs={0x080483bf}, expr=(extract[8] 24[32] 32[32] v1020[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 2[32])} value={defs={0x080483bf}, expr=(extract[8] 16[32] 24[32] v1020[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 1[32])} value={defs={0x080483bf}, expr=(extract[8] 8[32] 16[32] v1020[32])}
    addr={defs={0x080483ba}, expr=v1015[32]} value={defs={0x080483bf}, expr=(extract[8] 0[32] 8[32] v1020[32])}
    addr={defs={0x080483ba}, expr=0x080496f3[32]} value={defs={0x080483ba}, expr=(extract[8] 24[32] 32[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f2[32]} value={defs={0x080483ba}, expr=(extract[8] 16[32] 24[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f1[32]} value={defs={0x080483ba}, expr=(extract[8] 8[32] 16[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f0[32]} value={defs={0x080483ba}, expr=(extract[8] 0[32] 8[32] v1015[32])}
0x80483c1:test   edx, edx
registers:
    ax      = { {defs={0x080483ba}, expr=v1015[32]} }
    cx      = { {defs={}, expr=v970[32]} }
    dx      = { {defs={0x080483ba,0x080483bf}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))} }
    bx      = { {defs={}, expr=v972[32]} }
    sp      = { {defs={}, expr=v973[32]} }
    bp      = { {defs={}, expr=v974[32]} }
    si      = { {defs={}, expr=v975[32]} }
    di      = { {defs={}, expr=v976[32]} }
    es      = { {defs={}, expr=v977[16]} }
    cs      = { {defs={}, expr=v978[16]} }
    ss      = { {defs={}, expr=v979[16]} }
    ds      = { {defs={}, expr=v980[16]} }
    fs      = { {defs={}, expr=v981[16]} }
    gs      = { {defs={}, expr=v982[16]} }
    cf      = { {defs={0x080483c1}, expr=0[1]} }
    ?1      = { {defs={}, expr=v984[1]} }
    pf      = { {defs={0x080483ba,0x080483bf,0x080483c1}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))))))))))} }
    ?3      = { {defs={}, expr=v986[1]} }
    af      = { {defs={}, expr=v1029[1]} }
    ?5      = { {defs={}, expr=v988[1]} }
    zf      = { {defs={0x080483ba,0x080483bf,0x080483c1}, expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))} }
    sf      = { {defs={0x080483ba,0x080483bf,0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))} }
    tf      = { {defs={}, expr=v991[1]} }
    if      = { {defs={}, expr=v992[1]} }
    df      = { {defs={}, expr=v993[1]} }
    of      = { {defs={0x080483c1}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v995[1]} }
    iopl1   = { {defs={}, expr=v996[1]} }
    nt      = { {defs={}, expr=v997[1]} }
    ?15     = { {defs={}, expr=v998[1]} }
    rf      = { {defs={}, expr=v999[1]} }
    vm      = { {defs={}, expr=v1000[1]} }
    ac      = { {defs={}, expr=v1001[1]} }
    vif     = { {defs={}, expr=v1002[1]} }
    vip     = { {defs={}, expr=v1003[1]} }
    id      = { {defs={}, expr=v1004[1]} }
    ?22     = { {defs={}, expr=v1005[1]} }
    ?23     = { {defs={}, expr=v1006[1]} }
    ?24     = { {defs={}, expr=v1007[1]} }
    ?25     = { {defs={}, expr=v1008[1]} }
    ?26     = { {defs={}, expr=v1009[1]} }
    ?27     = { {defs={}, expr=v1010[1]} }
    ?28     = { {defs={}, expr=v1011[1]} }
    ?29     = { {defs={}, expr=v1012[1]} }
    ?30     = { {defs={}, expr=v1013[1]} }
    ?31     = { {defs={}, expr=v1014[1]} }
    ip      = { {defs={0x080483c1}, expr=0x080483c3[32]} }
memory:
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 3[32])} value={defs={0x080483bf}, expr=(extract[8] 24[32] 32[32] v1020[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 2[32])} value={defs={0x080483bf}, expr=(extract[8] 16[32] 24[32] v1020[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 1[32])} value={defs={0x080483bf}, expr=(extract[8] 8[32] 16[32] v1020[32])}
    addr={defs={0x080483ba}, expr=v1015[32]} value={defs={0x080483bf}, expr=(extract[8] 0[32] 8[32] v1020[32])}
    addr={defs={0x080483ba}, expr=0x080496f3[32]} value={defs={0x080483ba}, expr=(extract[8] 24[32] 32[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f2[32]} value={defs={0x080483ba}, expr=(extract[8] 16[32] 24[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f1[32]} value={defs={0x080483ba}, expr=(extract[8] 8[32] 16[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f0[32]} value={defs={0x080483ba}, expr=(extract[8] 0[32] 8[32] v1015[32])}
0x80483c3:jne    0x080483b0<<Insn>>
registers:
    ax      = { {defs={0x080483ba}, expr=v1015[32]} }
    cx      = { {defs={}, expr=v970[32]} }
    dx      = { {defs={0x080483ba,0x080483bf}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))} }
    bx      = { {defs={}, expr=v972[32]} }
    sp      = { {defs={}, expr=v973[32]} }
    bp      = { {defs={}, expr=v974[32]} }
    si      = { {defs={}, expr=v975[32]} }
    di      = { {defs={}, expr=v976[32]} }
    es      = { {defs={}, expr=v977[16]} }
    cs      = { {defs={}, expr=v978[16]} }
    ss      = { {defs={}, expr=v979[16]} }
    ds      = { {defs={}, expr=v980[16]} }
    fs      = { {defs={}, expr=v981[16]} }
    gs      = { {defs={}, expr=v982[16]} }
    cf      = { {defs={0x080483c1}, expr=0[1]} }
    ?1      = { {defs={}, expr=v984[1]} }
    pf      = { {defs={0x080483ba,0x080483bf,0x080483c1}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))))))))))} }
    ?3      = { {defs={}, expr=v986[1]} }
    af      = { {defs={}, expr=v1029[1]} }
    ?5      = { {defs={}, expr=v988[1]} }
    zf      = { {defs={0x080483ba,0x080483bf,0x080483c1}, expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))} }
    sf      = { {defs={0x080483ba,0x080483bf,0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))} }
    tf      = { {defs={}, expr=v991[1]} }
    if      = { {defs={}, expr=v992[1]} }
    df      = { {defs={}, expr=v993[1]} }
    of      = { {defs={0x080483c1}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v995[1]} }
    iopl1   = { {defs={}, expr=v996[1]} }
    nt      = { {defs={}, expr=v997[1]} }
    ?15     = { {defs={}, expr=v998[1]} }
    rf      = { {defs={}, expr=v999[1]} }
    vm      = { {defs={}, expr=v1000[1]} }
    ac      = { {defs={}, expr=v1001[1]} }
    vif     = { {defs={}, expr=v1002[1]} }
    vip     = { {defs={}, expr=v1003[1]} }
    id      = { {defs={}, expr=v1004[1]} }
    ?22     = { {defs={}, expr=v1005[1]} }
    ?23     = { {defs={}, expr=v1006[1]} }
    ?24     = { {defs={}, expr=v1007[1]} }
    ?25     = { {defs={}, expr=v1008[1]} }
    ?26     = { {defs={}, expr=v1009[1]} }
    ?27     = { {defs={}, expr=v1010[1]} }
    ?28     = { {defs={}, expr=v1011[1]} }
    ?29     = { {defs={}, expr=v1012[1]} }
    ?30     = { {defs={}, expr=v1013[1]} }
    ?31     = { {defs={}, expr=v1014[1]} }
    ip      = { {defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3}, expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1022[8] v1015[32] (extract[8] 0[32] 8[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) v1015[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1024[8] (add[32] v1015[32] 1[32]) (extract[8] 8[32] 16[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1026[8] (add[32] v1015[32] 2[32]) (extract[8] 16[32] 24[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1028[8] (add[32] v1015[32] 3[32]) (extract[8] 24[32] 32[32] v1020[32])) 0x080496f0[32] (extract[8] 0[32] 8[32] v1015[32])) 0x080496f1[32] (extract[8] 8[32] 16[32] v1015[32])) 0x080496f2[32] (extract[8] 16[32] 24[32] v1015[32])) 0x080496f3[32] (extract[8] 24[32] 32[32] v1015[32])) (add[32] v1015[32] 3[32])))))))) 0x080483b0[32] 0x080483c5[32])} }
memory:
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 3[32])} value={defs={0x080483bf}, expr=(extract[8] 24[32] 32[32] v1020[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 2[32])} value={defs={0x080483bf}, expr=(extract[8] 16[32] 24[32] v1020[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v1015[32] 1[32])} value={defs={0x080483bf}, expr=(extract[8] 8[32] 16[32] v1020[32])}
    addr={defs={0x080483ba}, expr=v1015[32]} value={defs={0x080483bf}, expr=(extract[8] 0[32] 8[32] v1020[32])}
    addr={defs={0x080483ba}, expr=0x080496f3[32]} value={defs={0x080483ba}, expr=(extract[8] 24[32] 32[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f2[32]} value={defs={0x080483ba}, expr=(extract[8] 16[32] 24[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f1[32]} value={defs={0x080483ba}, expr=(extract[8] 8[32] 16[32] v1015[32])}
    addr={defs={0x080483ba}, expr=0x080496f0[32]} value={defs={0x080483ba}, expr=(extract[8] 0[32] 8[32] v1015[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
registers:
    ax      = { {defs={}, expr=v1032[32]} }
    cx      = { {defs={}, expr=v1033[32]} }
    dx      = { {defs={}, expr=v1034[32]} }
    bx      = { {defs={}, expr=v1035[32]} }
    sp      = { {defs={}, expr=v1036[32]} }
    bp      = { {defs={}, expr=v1037[32]} }
    si      = { {defs={}, expr=v1038[32]} }
    di      = { {defs={}, expr=v1039[32]} }
    es      = { {defs={}, expr=v1040[16]} }
    cs      = { {defs={}, expr=v1041[16]} }
    ss      = { {defs={}, expr=v1042[16]} }
    ds      = { {defs={}, expr=v1043[16]} }
    fs      = { {defs={}, expr=v1044[16]} }
    gs      = { {defs={}, expr=v1045[16]} }
    cf      = { {defs={}, expr=v1046[1]} }
    ?1      = { {defs={}, expr=v1047[1]} }
    pf      = { {defs={}, expr=v1048[1]} }
    ?3      = { {defs={}, expr=v1049[1]} }
    af      = { {defs={}, expr=v1050[1]} }
    ?5      = { {defs={}, expr=v1051[1]} }
    zf      = { {defs={}, expr=v1052[1]} }
    sf      = { {defs={}, expr=v1053[1]} }
    tf      = { {defs={}, expr=v1054[1]} }
    if      = { {defs={}, expr=v1055[1]} }
    df      = { {defs={}, expr=v1056[1]} }
    of      = { {defs={}, expr=v1057[1]} }
    iopl0   = { {defs={}, expr=v1058[1]} }
    iopl1   = { {defs={}, expr=v1059[1]} }
    nt      = { {defs={}, expr=v1060[1]} }
    ?15     = { {defs={}, expr=v1061[1]} }
    rf      = { {defs={}, expr=v1062[1]} }
    vm      = { {defs={}, expr=v1063[1]} }
    ac      = { {defs={}, expr=v1064[1]} }
    vif     = { {defs={}, expr=v1065[1]} }
    vip     = { {defs={}, expr=v1066[1]} }
    id      = { {defs={}, expr=v1067[1]} }
    ?22     = { {defs={}, expr=v1068[1]} }
    ?23     = { {defs={}, expr=v1069[1]} }
    ?24     = { {defs={}, expr=v1070[1]} }
    ?25     = { {defs={}, expr=v1071[1]} }
    ?26     = { {defs={}, expr=v1072[1]} }
    ?27     = { {defs={}, expr=v1073[1]} }
    ?28     = { {defs={}, expr=v1074[1]} }
    ?29     = { {defs={}, expr=v1075[1]} }
    ?30     = { {defs={}, expr=v1076[1]} }
    ?31     = { {defs={}, expr=v1077[1]} }
    ip      = { {defs={0x080483c5}, expr=0x080483cc[32]} }
memory:
    addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={0x080483c5}, expr=1[8]}
0x80483cc:leave  
registers:
    ax      = { {defs={}, expr=v1032[32]} }
    cx      = { {defs={}, expr=v1033[32]} }
    dx      = { {defs={}, expr=v1034[32]} }
    bx      = { {defs={}, expr=v1035[32]} }
    sp      = { {defs={0x080483cc}, expr=(add[32] v1037[32] 4[32])} }
    bp      = { {defs={0x080483c5,0x080483cc}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1080[8] v1037[32] (extract[8] 0[32] 8[32] v1078[32])) 0x080496f4[32] 1[8]) v1037[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1082[8] (add[32] v1037[32] 1[32]) (extract[8] 8[32] 16[32] v1078[32])) 0x080496f4[32] 1[8]) (add[32] v1037[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1084[8] (add[32] v1037[32] 2[32]) (extract[8] 16[32] 24[32] v1078[32])) 0x080496f4[32] 1[8]) (add[32] v1037[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1086[8] (add[32] v1037[32] 3[32]) (extract[8] 24[32] 32[32] v1078[32])) 0x080496f4[32] 1[8]) (add[32] v1037[32] 3[32])))))} }
    si      = { {defs={}, expr=v1038[32]} }
    di      = { {defs={}, expr=v1039[32]} }
    es      = { {defs={}, expr=v1040[16]} }
    cs      = { {defs={}, expr=v1041[16]} }
    ss      = { {defs={}, expr=v1042[16]} }
    ds      = { {defs={}, expr=v1043[16]} }
    fs      = { {defs={}, expr=v1044[16]} }
    gs      = { {defs={}, expr=v1045[16]} }
    cf      = { {defs={}, expr=v1046[1]} }
    ?1      = { {defs={}, expr=v1047[1]} }
    pf      = { {defs={}, expr=v1048[1]} }
    ?3      = { {defs={}, expr=v1049[1]} }
    af      = { {defs={}, expr=v1050[1]} }
    ?5      = { {defs={}, expr=v1051[1]} }
    zf      = { {defs={}, expr=v1052[1]} }
    sf      = { {defs={}, expr=v1053[1]} }
    tf      = { {defs={}, expr=v1054[1]} }
    if      = { {defs={}, expr=v1055[1]} }
    df      = { {defs={}, expr=v1056[1]} }
    of      = { {defs={}, expr=v1057[1]} }
    iopl0   = { {defs={}, expr=v1058[1]} }
    iopl1   = { {defs={}, expr=v1059[1]} }
    nt      = { {defs={}, expr=v1060[1]} }
    ?15     = { {defs={}, expr=v1061[1]} }
    rf      = { {defs={}, expr=v1062[1]} }
    vm      = { {defs={}, expr=v1063[1]} }
    ac      = { {defs={}, expr=v1064[1]} }
    vif     = { {defs={}, expr=v1065[1]} }
    vip     = { {defs={}, expr=v1066[1]} }
    id      = { {defs={}, expr=v1067[1]} }
    ?22     = { {defs={}, expr=v1068[1]} }
    ?23     = { {defs={}, expr=v1069[1]} }
    ?24     = { {defs={}, expr=v1070[1]} }
    ?25     = { {defs={}, expr=v1071[1]} }
    ?26     = { {defs={}, expr=v1072[1]} }
    ?27     = { {defs={}, expr=v1073[1]} }
    ?28     = { {defs={}, expr=v1074[1]} }
    ?29     = { {defs={}, expr=v1075[1]} }
    ?30     = { {defs={}, expr=v1076[1]} }
    ?31     = { {defs={}, expr=v1077[1]} }
    ip      = { {defs={0x080483cc}, expr=0x080483cd[32]} }
memory:
    addr={defs={0x080483cc}, expr=(add[32] v1037[32] 3[32])} value={defs={0x080483cc}, expr=(extract[8] 24[32] 32[32] v1078[32])}
    addr={defs={0x080483cc}, expr=(add[32] v1037[32] 2[32])} value={defs={0x080483cc}, expr=(extract[8] 16[32] 24[32] v1078[32])}
    addr={defs={0x080483cc}, expr=(add[32] v1037[32] 1[32])} value={defs={0x080483cc}, expr=(extract[8] 8[32] 16[32] v1078[32])}
    addr={defs={}, expr=v1037[32]} value={defs={0x080483cc}, expr=(extract[8] 0[32] 8[32] v1078[32])}
    addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={0x080483c5}, expr=1[8]}
0x80483cd:ret    
registers:
    ax      = { {defs={}, expr=v1032[32]} }
    cx      = { {defs={}, expr=v1033[32]} }
    dx      = { {defs={}, expr=v1034[32]} }
    bx      = { {defs={}, expr=v1035[32]} }
    sp      = { {defs={0x080483cc,0x080483cd}, expr=(add[32] (add[32] v1037[32] 4[32]) 4[32])} }
    bp      = { {defs={0x080483c5,0x080483cc}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1080[8] v1037[32] (extract[8] 0[32] 8[32] v1078[32])) 0x080496f4[32] 1[8]) v1037[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1082[8] (add[32] v1037[32] 1[32]) (extract[8] 8[32] 16[32] v1078[32])) 0x080496f4[32] 1[8]) (add[32] v1037[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1084[8] (add[32] v1037[32] 2[32]) (extract[8] 16[32] 24[32] v1078[32])) 0x080496f4[32] 1[8]) (add[32] v1037[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1086[8] (add[32] v1037[32] 3[32]) (extract[8] 24[32] 32[32] v1078[32])) 0x080496f4[32] 1[8]) (add[32] v1037[32] 3[32])))))} }
    si      = { {defs={}, expr=v1038[32]} }
    di      = { {defs={}, expr=v1039[32]} }
    es      = { {defs={}, expr=v1040[16]} }
    cs      = { {defs={}, expr=v1041[16]} }
    ss      = { {defs={}, expr=v1042[16]} }
    ds      = { {defs={}, expr=v1043[16]} }
    fs      = { {defs={}, expr=v1044[16]} }
    gs      = { {defs={}, expr=v1045[16]} }
    cf      = { {defs={}, expr=v1046[1]} }
    ?1      = { {defs={}, expr=v1047[1]} }
    pf      = { {defs={}, expr=v1048[1]} }
    ?3      = { {defs={}, expr=v1049[1]} }
    af      = { {defs={}, expr=v1050[1]} }
    ?5      = { {defs={}, expr=v1051[1]} }
    zf      = { {defs={}, expr=v1052[1]} }
    sf      = { {defs={}, expr=v1053[1]} }
    tf      = { {defs={}, expr=v1054[1]} }
    if      = { {defs={}, expr=v1055[1]} }
    df      = { {defs={}, expr=v1056[1]} }
    of      = { {defs={}, expr=v1057[1]} }
    iopl0   = { {defs={}, expr=v1058[1]} }
    iopl1   = { {defs={}, expr=v1059[1]} }
    nt      = { {defs={}, expr=v1060[1]} }
    ?15     = { {defs={}, expr=v1061[1]} }
    rf      = { {defs={}, expr=v1062[1]} }
    vm      = { {defs={}, expr=v1063[1]} }
    ac      = { {defs={}, expr=v1064[1]} }
    vif     = { {defs={}, expr=v1065[1]} }
    vip     = { {defs={}, expr=v1066[1]} }
    id      = { {defs={}, expr=v1067[1]} }
    ?22     = { {defs={}, expr=v1068[1]} }
    ?23     = { {defs={}, expr=v1069[1]} }
    ?24     = { {defs={}, expr=v1070[1]} }
    ?25     = { {defs={}, expr=v1071[1]} }
    ?26     = { {defs={}, expr=v1072[1]} }
    ?27     = { {defs={}, expr=v1073[1]} }
    ?28     = { {defs={}, expr=v1074[1]} }
    ?29     = { {defs={}, expr=v1075[1]} }
    ?30     = { {defs={}, expr=v1076[1]} }
    ?31     = { {defs={}, expr=v1077[1]} }
    ip      = { {defs={0x080483c5,0x080483cd}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1089[8] (add[32] v1037[32] 4[32]) (extract[8] 0[32] 8[32] v1087[32])) 0x080496f4[32] 1[8]) (add[32] v1037[32] 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1091[8] (add[32] (add[32] v1037[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1087[32])) 0x080496f4[32] 1[8]) (add[32] (add[32] v1037[32] 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1093[8] (add[32] (add[32] v1037[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1087[32])) 0x080496f4[32] 1[8]) (add[32] (add[32] v1037[32] 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] m1095[8] (add[32] (add[32] v1037[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1087[32])) 0x080496f4[32] 1[8]) (add[32] (add[32] v1037[32] 4[32]) 3[32])))))} }
memory:
    addr={defs={0x080483cc,0x080483cd}, expr=(add[32] (add[32] v1037[32] 4[32]) 3[32])} value={defs={0x080483cd}, expr=(extract[8] 24[32] 32[32] v1087[32])}
    addr={defs={0x080483cc,0x080483cd}, expr=(add[32] (add[32] v1037[32] 4[32]) 2[32])} value={defs={0x080483cd}, expr=(extract[8] 16[32] 24[32] v1087[32])}
    addr={defs={0x080483cc,0x080483cd}, expr=(add[32] (add[32] v1037[32] 4[32]) 1[32])} value={defs={0x080483cd}, expr=(extract[8] 8[32] 16[32] v1087[32])}
    addr={defs={0x080483cc}, expr=(add[32] v1037[32] 4[32])} value={defs={0x080483cd}, expr=(extract[8] 0[32] 8[32] v1087[32])}
    addr={defs={0x080483cc}, expr=(add[32] v1037[32] 3[32])} value={defs={0x080483cc}, expr=(extract[8] 24[32] 32[32] v1078[32])}
    addr={defs={0x080483cc}, expr=(add[32] v1037[32] 2[32])} value={defs={0x080483cc}, expr=(extract[8] 16[32] 24[32] v1078[32])}
    addr={defs={0x080483cc}, expr=(add[32] v1037[32] 1[32])} value={defs={0x080483cc}, expr=(extract[8] 8[32] 16[32] v1078[32])}
    addr={defs={}, expr=v1037[32]} value={defs={0x080483cc}, expr=(extract[8] 0[32] 8[32] v1078[32])}
    addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={0x080483c5}, expr=1[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
registers:
    ax      = { {defs={}, expr=v1098[32]} }
    cx      = { {defs={}, expr=v1099[32]} }
    dx      = { {defs={}, expr=v1100[32]} }
    bx      = { {defs={}, expr=v1101[32]} }
    sp      = { {defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} }
    bp      = { {defs={}, expr=v1103[32]} }
    si      = { {defs={}, expr=v1104[32]} }
    di      = { {defs={}, expr=v1105[32]} }
    es      = { {defs={}, expr=v1106[16]} }
    cs      = { {defs={}, expr=v1107[16]} }
    ss      = { {defs={}, expr=v1108[16]} }
    ds      = { {defs={}, expr=v1109[16]} }
    fs      = { {defs={}, expr=v1110[16]} }
    gs      = { {defs={}, expr=v1111[16]} }
    cf      = { {defs={}, expr=v1112[1]} }
    ?1      = { {defs={}, expr=v1113[1]} }
    pf      = { {defs={}, expr=v1114[1]} }
    ?3      = { {defs={}, expr=v1115[1]} }
    af      = { {defs={}, expr=v1116[1]} }
    ?5      = { {defs={}, expr=v1117[1]} }
    zf      = { {defs={}, expr=v1118[1]} }
    sf      = { {defs={}, expr=v1119[1]} }
    tf      = { {defs={}, expr=v1120[1]} }
    if      = { {defs={}, expr=v1121[1]} }
    df      = { {defs={}, expr=v1122[1]} }
    of      = { {defs={}, expr=v1123[1]} }
    iopl0   = { {defs={}, expr=v1124[1]} }
    iopl1   = { {defs={}, expr=v1125[1]} }
    nt      = { {defs={}, expr=v1126[1]} }
    ?15     = { {defs={}, expr=v1127[1]} }
    rf      = { {defs={}, expr=v1128[1]} }
    vm      = { {defs={}, expr=v1129[1]} }
    ac      = { {defs={}, expr=v1130[1]} }
    vif     = { {defs={}, expr=v1131[1]} }
    vip     = { {defs={}, expr=v1132[1]} }
    id      = { {defs={}, expr=v1133[1]} }
    ?22     = { {defs={}, expr=v1134[1]} }
    ?23     = { {defs={}, expr=v1135[1]} }
    ?24     = { {defs={}, expr=v1136[1]} }
    ?25     = { {defs={}, expr=v1137[1]} }
    ?26     = { {defs={}, expr=v1138[1]} }
    ?27     = { {defs={}, expr=v1139[1]} }
    ?28     = { {defs={}, expr=v1140[1]} }
    ?29     = { {defs={}, expr=v1141[1]} }
    ?30     = { {defs={}, expr=v1142[1]} }
    ?31     = { {defs={}, expr=v1143[1]} }
    ip      = { {defs={0x080483d0}, expr=0x080483d1[32]} }
memory:
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v1103[32])}
0x80483d1:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v1098[32]} }
    cx      = { {defs={}, expr=v1099[32]} }
    dx      = { {defs={}, expr=v1100[32]} }
    bx      = { {defs={}, expr=v1101[32]} }
    sp      = { {defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} }
    bp      = { {defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} }
    si      = { {defs={}, expr=v1104[32]} }
    di      = { {defs={}, expr=v1105[32]} }
    es      = { {defs={}, expr=v1106[16]} }
    cs      = { {defs={}, expr=v1107[16]} }
    ss      = { {defs={}, expr=v1108[16]} }
    ds      = { {defs={}, expr=v1109[16]} }
    fs      = { {defs={}, expr=v1110[16]} }
    gs      = { {defs={}, expr=v1111[16]} }
    cf      = { {defs={}, expr=v1112[1]} }
    ?1      = { {defs={}, expr=v1113[1]} }
    pf      = { {defs={}, expr=v1114[1]} }
    ?3      = { {defs={}, expr=v1115[1]} }
    af      = { {defs={}, expr=v1116[1]} }
    ?5      = { {defs={}, expr=v1117[1]} }
    zf      = { {defs={}, expr=v1118[1]} }
    sf      = { {defs={}, expr=v1119[1]} }
    tf      = { {defs={}, expr=v1120[1]} }
    if      = { {defs={}, expr=v1121[1]} }
    df      = { {defs={}, expr=v1122[1]} }
    of      = { {defs={}, expr=v1123[1]} }
    iopl0   = { {defs={}, expr=v1124[1]} }
    iopl1   = { {defs={}, expr=v1125[1]} }
    nt      = { {defs={}, expr=v1126[1]} }
    ?15     = { {defs={}, expr=v1127[1]} }
    rf      = { {defs={}, expr=v1128[1]} }
    vm      = { {defs={}, expr=v1129[1]} }
    ac      = { {defs={}, expr=v1130[1]} }
    vif     = { {defs={}, expr=v1131[1]} }
    vip     = { {defs={}, expr=v1132[1]} }
    id      = { {defs={}, expr=v1133[1]} }
    ?22     = { {defs={}, expr=v1134[1]} }
    ?23     = { {defs={}, expr=v1135[1]} }
    ?24     = { {defs={}, expr=v1136[1]} }
    ?25     = { {defs={}, expr=v1137[1]} }
    ?26     = { {defs={}, expr=v1138[1]} }
    ?27     = { {defs={}, expr=v1139[1]} }
    ?28     = { {defs={}, expr=v1140[1]} }
    ?29     = { {defs={}, expr=v1141[1]} }
    ?30     = { {defs={}, expr=v1142[1]} }
    ?31     = { {defs={}, expr=v1143[1]} }
    ip      = { {defs={0x080483d1}, expr=0x080483d3[32]} }
memory:
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v1103[32])}
0x80483d3:sub    esp, 0x08
registers:
    ax      = { {defs={}, expr=v1098[32]} }
    cx      = { {defs={}, expr=v1099[32]} }
    dx      = { {defs={}, expr=v1100[32]} }
    bx      = { {defs={}, expr=v1101[32]} }
    sp      = { {defs={0x080483d0,0x080483d3}, expr=(add[32] (add[32] v1102[32] -4[32]) -8[32])} }
    bp      = { {defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} }
    si      = { {defs={}, expr=v1104[32]} }
    di      = { {defs={}, expr=v1105[32]} }
    es      = { {defs={}, expr=v1106[16]} }
    cs      = { {defs={}, expr=v1107[16]} }
    ss      = { {defs={}, expr=v1108[16]} }
    ds      = { {defs={}, expr=v1109[16]} }
    fs      = { {defs={}, expr=v1110[16]} }
    gs      = { {defs={}, expr=v1111[16]} }
    cf      = { {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1113[1]} }
    pf      = { {defs={0x080483d0,0x080483d3}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1115[1]} }
    af      = { {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1117[1]} }
    zf      = { {defs={0x080483d0,0x080483d3}, expr=(zerop[1] (add[32] (add[32] v1102[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1120[1]} }
    if      = { {defs={}, expr=v1121[1]} }
    df      = { {defs={}, expr=v1122[1]} }
    of      = { {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1124[1]} }
    iopl1   = { {defs={}, expr=v1125[1]} }
    nt      = { {defs={}, expr=v1126[1]} }
    ?15     = { {defs={}, expr=v1127[1]} }
    rf      = { {defs={}, expr=v1128[1]} }
    vm      = { {defs={}, expr=v1129[1]} }
    ac      = { {defs={}, expr=v1130[1]} }
    vif     = { {defs={}, expr=v1131[1]} }
    vip     = { {defs={}, expr=v1132[1]} }
    id      = { {defs={}, expr=v1133[1]} }
    ?22     = { {defs={}, expr=v1134[1]} }
    ?23     = { {defs={}, expr=v1135[1]} }
    ?24     = { {defs={}, expr=v1136[1]} }
    ?25     = { {defs={}, expr=v1137[1]} }
    ?26     = { {defs={}, expr=v1138[1]} }
    ?27     = { {defs={}, expr=v1139[1]} }
    ?28     = { {defs={}, expr=v1140[1]} }
    ?29     = { {defs={}, expr=v1141[1]} }
    ?30     = { {defs={}, expr=v1142[1]} }
    ?31     = { {defs={}, expr=v1143[1]} }
    ip      = { {defs={0x080483d3}, expr=0x080483d6[32]} }
memory:
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v1103[32])}
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
registers:
    ax      = { {defs={0x080483d0,0x080483d6}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))} }
    cx      = { {defs={}, expr=v1099[32]} }
    dx      = { {defs={}, expr=v1100[32]} }
    bx      = { {defs={}, expr=v1101[32]} }
    sp      = { {defs={0x080483d0,0x080483d3}, expr=(add[32] (add[32] v1102[32] -4[32]) -8[32])} }
    bp      = { {defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} }
    si      = { {defs={}, expr=v1104[32]} }
    di      = { {defs={}, expr=v1105[32]} }
    es      = { {defs={}, expr=v1106[16]} }
    cs      = { {defs={}, expr=v1107[16]} }
    ss      = { {defs={}, expr=v1108[16]} }
    ds      = { {defs={}, expr=v1109[16]} }
    fs      = { {defs={}, expr=v1110[16]} }
    gs      = { {defs={}, expr=v1111[16]} }
    cf      = { {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1113[1]} }
    pf      = { {defs={0x080483d0,0x080483d3}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1102[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1115[1]} }
    af      = { {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1117[1]} }
    zf      = { {defs={0x080483d0,0x080483d3}, expr=(zerop[1] (add[32] (add[32] v1102[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1102[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1120[1]} }
    if      = { {defs={}, expr=v1121[1]} }
    df      = { {defs={}, expr=v1122[1]} }
    of      = { {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1102[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1124[1]} }
    iopl1   = { {defs={}, expr=v1125[1]} }
    nt      = { {defs={}, expr=v1126[1]} }
    ?15     = { {defs={}, expr=v1127[1]} }
    rf      = { {defs={}, expr=v1128[1]} }
    vm      = { {defs={}, expr=v1129[1]} }
    ac      = { {defs={}, expr=v1130[1]} }
    vif     = { {defs={}, expr=v1131[1]} }
    vip     = { {defs={}, expr=v1132[1]} }
    id      = { {defs={}, expr=v1133[1]} }
    ?22     = { {defs={}, expr=v1134[1]} }
    ?23     = { {defs={}, expr=v1135[1]} }
    ?24     = { {defs={}, expr=v1136[1]} }
    ?25     = { {defs={}, expr=v1137[1]} }
    ?26     = { {defs={}, expr=v1138[1]} }
    ?27     = { {defs={}, expr=v1139[1]} }
    ?28     = { {defs={}, expr=v1140[1]} }
    ?29     = { {defs={}, expr=v1141[1]} }
    ?30     = { {defs={}, expr=v1142[1]} }
    ?31     = { {defs={}, expr=v1143[1]} }
    ip      = { {defs={0x080483d6}, expr=0x080483db[32]} }
memory:
    addr={defs={0x080483d6}, expr=0x080495fb[32]} value={defs={0x080483d6}, expr=(extract[8] 24[32] 32[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495fa[32]} value={defs={0x080483d6}, expr=(extract[8] 16[32] 24[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495f9[32]} value={defs={0x080483d6}, expr=(extract[8] 8[32] 16[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495f8[32]} value={defs={0x080483d6}, expr=(extract[8] 0[32] 8[32] v1144[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v1103[32])}
0x80483db:test   eax, eax
registers:
    ax      = { {defs={0x080483d0,0x080483d6}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))} }
    cx      = { {defs={}, expr=v1099[32]} }
    dx      = { {defs={}, expr=v1100[32]} }
    bx      = { {defs={}, expr=v1101[32]} }
    sp      = { {defs={0x080483d0,0x080483d3}, expr=(add[32] (add[32] v1102[32] -4[32]) -8[32])} }
    bp      = { {defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} }
    si      = { {defs={}, expr=v1104[32]} }
    di      = { {defs={}, expr=v1105[32]} }
    es      = { {defs={}, expr=v1106[16]} }
    cs      = { {defs={}, expr=v1107[16]} }
    ss      = { {defs={}, expr=v1108[16]} }
    ds      = { {defs={}, expr=v1109[16]} }
    fs      = { {defs={}, expr=v1110[16]} }
    gs      = { {defs={}, expr=v1111[16]} }
    cf      = { {defs={0x080483db}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1113[1]} }
    pf      = { {defs={0x080483d0,0x080483d6,0x080483db}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))))))))))} }
    ?3      = { {defs={}, expr=v1115[1]} }
    af      = { {defs={}, expr=v1153[1]} }
    ?5      = { {defs={}, expr=v1117[1]} }
    zf      = { {defs={0x080483d0,0x080483d6,0x080483db}, expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))} }
    sf      = { {defs={0x080483d0,0x080483d6,0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))} }
    tf      = { {defs={}, expr=v1120[1]} }
    if      = { {defs={}, expr=v1121[1]} }
    df      = { {defs={}, expr=v1122[1]} }
    of      = { {defs={0x080483db}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1124[1]} }
    iopl1   = { {defs={}, expr=v1125[1]} }
    nt      = { {defs={}, expr=v1126[1]} }
    ?15     = { {defs={}, expr=v1127[1]} }
    rf      = { {defs={}, expr=v1128[1]} }
    vm      = { {defs={}, expr=v1129[1]} }
    ac      = { {defs={}, expr=v1130[1]} }
    vif     = { {defs={}, expr=v1131[1]} }
    vip     = { {defs={}, expr=v1132[1]} }
    id      = { {defs={}, expr=v1133[1]} }
    ?22     = { {defs={}, expr=v1134[1]} }
    ?23     = { {defs={}, expr=v1135[1]} }
    ?24     = { {defs={}, expr=v1136[1]} }
    ?25     = { {defs={}, expr=v1137[1]} }
    ?26     = { {defs={}, expr=v1138[1]} }
    ?27     = { {defs={}, expr=v1139[1]} }
    ?28     = { {defs={}, expr=v1140[1]} }
    ?29     = { {defs={}, expr=v1141[1]} }
    ?30     = { {defs={}, expr=v1142[1]} }
    ?31     = { {defs={}, expr=v1143[1]} }
    ip      = { {defs={0x080483db}, expr=0x080483dd[32]} }
memory:
    addr={defs={0x080483d6}, expr=0x080495fb[32]} value={defs={0x080483d6}, expr=(extract[8] 24[32] 32[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495fa[32]} value={defs={0x080483d6}, expr=(extract[8] 16[32] 24[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495f9[32]} value={defs={0x080483d6}, expr=(extract[8] 8[32] 16[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495f8[32]} value={defs={0x080483d6}, expr=(extract[8] 0[32] 8[32] v1144[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v1103[32])}
0x80483dd:je     0x08048400<<Insn>>
registers:
    ax      = { {defs={0x080483d0,0x080483d6}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))} }
    cx      = { {defs={}, expr=v1099[32]} }
    dx      = { {defs={}, expr=v1100[32]} }
    bx      = { {defs={}, expr=v1101[32]} }
    sp      = { {defs={0x080483d0,0x080483d3}, expr=(add[32] (add[32] v1102[32] -4[32]) -8[32])} }
    bp      = { {defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} }
    si      = { {defs={}, expr=v1104[32]} }
    di      = { {defs={}, expr=v1105[32]} }
    es      = { {defs={}, expr=v1106[16]} }
    cs      = { {defs={}, expr=v1107[16]} }
    ss      = { {defs={}, expr=v1108[16]} }
    ds      = { {defs={}, expr=v1109[16]} }
    fs      = { {defs={}, expr=v1110[16]} }
    gs      = { {defs={}, expr=v1111[16]} }
    cf      = { {defs={0x080483db}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1113[1]} }
    pf      = { {defs={0x080483d0,0x080483d6,0x080483db}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))))))))))} }
    ?3      = { {defs={}, expr=v1115[1]} }
    af      = { {defs={}, expr=v1153[1]} }
    ?5      = { {defs={}, expr=v1117[1]} }
    zf      = { {defs={0x080483d0,0x080483d6,0x080483db}, expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))} }
    sf      = { {defs={0x080483d0,0x080483d6,0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32]))))))} }
    tf      = { {defs={}, expr=v1120[1]} }
    if      = { {defs={}, expr=v1121[1]} }
    df      = { {defs={}, expr=v1122[1]} }
    of      = { {defs={0x080483db}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1124[1]} }
    iopl1   = { {defs={}, expr=v1125[1]} }
    nt      = { {defs={}, expr=v1126[1]} }
    ?15     = { {defs={}, expr=v1127[1]} }
    rf      = { {defs={}, expr=v1128[1]} }
    vm      = { {defs={}, expr=v1129[1]} }
    ac      = { {defs={}, expr=v1130[1]} }
    vif     = { {defs={}, expr=v1131[1]} }
    vip     = { {defs={}, expr=v1132[1]} }
    id      = { {defs={}, expr=v1133[1]} }
    ?22     = { {defs={}, expr=v1134[1]} }
    ?23     = { {defs={}, expr=v1135[1]} }
    ?24     = { {defs={}, expr=v1136[1]} }
    ?25     = { {defs={}, expr=v1137[1]} }
    ?26     = { {defs={}, expr=v1138[1]} }
    ?27     = { {defs={}, expr=v1139[1]} }
    ?28     = { {defs={}, expr=v1140[1]} }
    ?29     = { {defs={}, expr=v1141[1]} }
    ?30     = { {defs={}, expr=v1142[1]} }
    ?31     = { {defs={}, expr=v1143[1]} }
    ip      = { {defs={0x080483d0,0x080483d6,0x080483db,0x080483dd}, expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1146[8] 0x080495f8[32] (extract[8] 0[32] 8[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1148[8] 0x080495f9[32] (extract[8] 8[32] 16[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1150[8] 0x080495fa[32] (extract[8] 16[32] 24[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1152[8] 0x080495fb[32] (extract[8] 24[32] 32[32] v1144[32])) (add[32] v1102[32] -4[32]) (extract[8] 0[32] 8[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1103[32])) (add[32] (add[32] v1102[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1103[32])) 0x080495fb[32])))))) 0x08048400[32] 0x080483df[32])} }
memory:
    addr={defs={0x080483d6}, expr=0x080495fb[32]} value={defs={0x080483d6}, expr=(extract[8] 24[32] 32[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495fa[32]} value={defs={0x080483d6}, expr=(extract[8] 16[32] 24[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495f9[32]} value={defs={0x080483d6}, expr=(extract[8] 8[32] 16[32] v1144[32])}
    addr={defs={0x080483d6}, expr=0x080495f8[32]} value={defs={0x080483d6}, expr=(extract[8] 0[32] 8[32] v1144[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v1102[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v1103[32])}
    addr={defs={0x080483d0}, expr=(add[32] v1102[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v1103[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
registers:
    ax      = { {defs={0x080483df}, expr=0[32]} }
    cx      = { {defs={}, expr=v1157[32]} }
    dx      = { {defs={}, expr=v1158[32]} }
    bx      = { {defs={}, expr=v1159[32]} }
    sp      = { {defs={}, expr=v1160[32]} }
    bp      = { {defs={}, expr=v1161[32]} }
    si      = { {defs={}, expr=v1162[32]} }
    di      = { {defs={}, expr=v1163[32]} }
    es      = { {defs={}, expr=v1164[16]} }
    cs      = { {defs={}, expr=v1165[16]} }
    ss      = { {defs={}, expr=v1166[16]} }
    ds      = { {defs={}, expr=v1167[16]} }
    fs      = { {defs={}, expr=v1168[16]} }
    gs      = { {defs={}, expr=v1169[16]} }
    cf      = { {defs={}, expr=v1170[1]} }
    ?1      = { {defs={}, expr=v1171[1]} }
    pf      = { {defs={}, expr=v1172[1]} }
    ?3      = { {defs={}, expr=v1173[1]} }
    af      = { {defs={}, expr=v1174[1]} }
    ?5      = { {defs={}, expr=v1175[1]} }
    zf      = { {defs={}, expr=v1176[1]} }
    sf      = { {defs={}, expr=v1177[1]} }
    tf      = { {defs={}, expr=v1178[1]} }
    if      = { {defs={}, expr=v1179[1]} }
    df      = { {defs={}, expr=v1180[1]} }
    of      = { {defs={}, expr=v1181[1]} }
    iopl0   = { {defs={}, expr=v1182[1]} }
    iopl1   = { {defs={}, expr=v1183[1]} }
    nt      = { {defs={}, expr=v1184[1]} }
    ?15     = { {defs={}, expr=v1185[1]} }
    rf      = { {defs={}, expr=v1186[1]} }
    vm      = { {defs={}, expr=v1187[1]} }
    ac      = { {defs={}, expr=v1188[1]} }
    vif     = { {defs={}, expr=v1189[1]} }
    vip     = { {defs={}, expr=v1190[1]} }
    id      = { {defs={}, expr=v1191[1]} }
    ?22     = { {defs={}, expr=v1192[1]} }
    ?23     = { {defs={}, expr=v1193[1]} }
    ?24     = { {defs={}, expr=v1194[1]} }
    ?25     = { {defs={}, expr=v1195[1]} }
    ?26     = { {defs={}, expr=v1196[1]} }
    ?27     = { {defs={}, expr=v1197[1]} }
    ?28     = { {defs={}, expr=v1198[1]} }
    ?29     = { {defs={}, expr=v1199[1]} }
    ?30     = { {defs={}, expr=v1200[1]} }
    ?31     = { {defs={}, expr=v1201[1]} }
    ip      = { {defs={0x080483df}, expr=0x080483e4[32]} }
memory:
0x80483e4:test   eax, eax
registers:
    ax      = { {defs={0x080483df}, expr=0[32]} }
    cx      = { {defs={}, expr=v1157[32]} }
    dx      = { {defs={}, expr=v1158[32]} }
    bx      = { {defs={}, expr=v1159[32]} }
    sp      = { {defs={}, expr=v1160[32]} }
    bp      = { {defs={}, expr=v1161[32]} }
    si      = { {defs={}, expr=v1162[32]} }
    di      = { {defs={}, expr=v1163[32]} }
    es      = { {defs={}, expr=v1164[16]} }
    cs      = { {defs={}, expr=v1165[16]} }
    ss      = { {defs={}, expr=v1166[16]} }
    ds      = { {defs={}, expr=v1167[16]} }
    fs      = { {defs={}, expr=v1168[16]} }
    gs      = { {defs={}, expr=v1169[16]} }
    cf      = { {defs={0x080483e4}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1171[1]} }
    pf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1173[1]} }
    af      = { {defs={}, expr=v1202[1]} }
    ?5      = { {defs={}, expr=v1175[1]} }
    zf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    sf      = { {defs={0x080483df,0x080483e4}, expr=0[1]} }
    tf      = { {defs={}, expr=v1178[1]} }
    if      = { {defs={}, expr=v1179[1]} }
    df      = { {defs={}, expr=v1180[1]} }
    of      = { {defs={0x080483e4}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1182[1]} }
    iopl1   = { {defs={}, expr=v1183[1]} }
    nt      = { {defs={}, expr=v1184[1]} }
    ?15     = { {defs={}, expr=v1185[1]} }
    rf      = { {defs={}, expr=v1186[1]} }
    vm      = { {defs={}, expr=v1187[1]} }
    ac      = { {defs={}, expr=v1188[1]} }
    vif     = { {defs={}, expr=v1189[1]} }
    vip     = { {defs={}, expr=v1190[1]} }
    id      = { {defs={}, expr=v1191[1]} }
    ?22     = { {defs={}, expr=v1192[1]} }
    ?23     = { {defs={}, expr=v1193[1]} }
    ?24     = { {defs={}, expr=v1194[1]} }
    ?25     = { {defs={}, expr=v1195[1]} }
    ?26     = { {defs={}, expr=v1196[1]} }
    ?27     = { {defs={}, expr=v1197[1]} }
    ?28     = { {defs={}, expr=v1198[1]} }
    ?29     = { {defs={}, expr=v1199[1]} }
    ?30     = { {defs={}, expr=v1200[1]} }
    ?31     = { {defs={}, expr=v1201[1]} }
    ip      = { {defs={0x080483e4}, expr=0x080483e6[32]} }
memory:
0x80483e6:je     0x08048400<<Insn>>
registers:
    ax      = { {defs={0x080483df}, expr=0[32]} }
    cx      = { {defs={}, expr=v1157[32]} }
    dx      = { {defs={}, expr=v1158[32]} }
    bx      = { {defs={}, expr=v1159[32]} }
    sp      = { {defs={}, expr=v1160[32]} }
    bp      = { {defs={}, expr=v1161[32]} }
    si      = { {defs={}, expr=v1162[32]} }
    di      = { {defs={}, expr=v1163[32]} }
    es      = { {defs={}, expr=v1164[16]} }
    cs      = { {defs={}, expr=v1165[16]} }
    ss      = { {defs={}, expr=v1166[16]} }
    ds      = { {defs={}, expr=v1167[16]} }
    fs      = { {defs={}, expr=v1168[16]} }
    gs      = { {defs={}, expr=v1169[16]} }
    cf      = { {defs={0x080483e4}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1171[1]} }
    pf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1173[1]} }
    af      = { {defs={}, expr=v1202[1]} }
    ?5      = { {defs={}, expr=v1175[1]} }
    zf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    sf      = { {defs={0x080483df,0x080483e4}, expr=0[1]} }
    tf      = { {defs={}, expr=v1178[1]} }
    if      = { {defs={}, expr=v1179[1]} }
    df      = { {defs={}, expr=v1180[1]} }
    of      = { {defs={0x080483e4}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1182[1]} }
    iopl1   = { {defs={}, expr=v1183[1]} }
    nt      = { {defs={}, expr=v1184[1]} }
    ?15     = { {defs={}, expr=v1185[1]} }
    rf      = { {defs={}, expr=v1186[1]} }
    vm      = { {defs={}, expr=v1187[1]} }
    ac      = { {defs={}, expr=v1188[1]} }
    vif     = { {defs={}, expr=v1189[1]} }
    vip     = { {defs={}, expr=v1190[1]} }
    id      = { {defs={}, expr=v1191[1]} }
    ?22     = { {defs={}, expr=v1192[1]} }
    ?23     = { {defs={}, expr=v1193[1]} }
    ?24     = { {defs={}, expr=v1194[1]} }
    ?25     = { {defs={}, expr=v1195[1]} }
    ?26     = { {defs={}, expr=v1196[1]} }
    ?27     = { {defs={}, expr=v1197[1]} }
    ?28     = { {defs={}, expr=v1198[1]} }
    ?29     = { {defs={}, expr=v1199[1]} }
    ?30     = { {defs={}, expr=v1200[1]} }
    ?31     = { {defs={}, expr=v1201[1]} }
    ip      = { {defs={0x080483df,0x080483e4,0x080483e6}, expr=0x08048400[32]} }
memory:
0x8048400:mov    esp, ebp
registers:
    ax      = { {defs={0x080483df}, expr=0[32]} }
    cx      = { {defs={}, expr=v1157[32]} }
    dx      = { {defs={}, expr=v1158[32]} }
    bx      = { {defs={}, expr=v1159[32]} }
    sp      = { {defs={}, expr=v1161[32]} }
    bp      = { {defs={}, expr=v1161[32]} }
    si      = { {defs={}, expr=v1162[32]} }
    di      = { {defs={}, expr=v1163[32]} }
    es      = { {defs={}, expr=v1164[16]} }
    cs      = { {defs={}, expr=v1165[16]} }
    ss      = { {defs={}, expr=v1166[16]} }
    ds      = { {defs={}, expr=v1167[16]} }
    fs      = { {defs={}, expr=v1168[16]} }
    gs      = { {defs={}, expr=v1169[16]} }
    cf      = { {defs={0x080483e4}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1171[1]} }
    pf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1173[1]} }
    af      = { {defs={}, expr=v1202[1]} }
    ?5      = { {defs={}, expr=v1175[1]} }
    zf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    sf      = { {defs={0x080483df,0x080483e4}, expr=0[1]} }
    tf      = { {defs={}, expr=v1178[1]} }
    if      = { {defs={}, expr=v1179[1]} }
    df      = { {defs={}, expr=v1180[1]} }
    of      = { {defs={0x080483e4}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1182[1]} }
    iopl1   = { {defs={}, expr=v1183[1]} }
    nt      = { {defs={}, expr=v1184[1]} }
    ?15     = { {defs={}, expr=v1185[1]} }
    rf      = { {defs={}, expr=v1186[1]} }
    vm      = { {defs={}, expr=v1187[1]} }
    ac      = { {defs={}, expr=v1188[1]} }
    vif     = { {defs={}, expr=v1189[1]} }
    vip     = { {defs={}, expr=v1190[1]} }
    id      = { {defs={}, expr=v1191[1]} }
    ?22     = { {defs={}, expr=v1192[1]} }
    ?23     = { {defs={}, expr=v1193[1]} }
    ?24     = { {defs={}, expr=v1194[1]} }
    ?25     = { {defs={}, expr=v1195[1]} }
    ?26     = { {defs={}, expr=v1196[1]} }
    ?27     = { {defs={}, expr=v1197[1]} }
    ?28     = { {defs={}, expr=v1198[1]} }
    ?29     = { {defs={}, expr=v1199[1]} }
    ?30     = { {defs={}, expr=v1200[1]} }
    ?31     = { {defs={}, expr=v1201[1]} }
    ip      = { {defs={0x08048400}, expr=0x08048402[32]} }
memory:
0x8048402:pop    ebp
registers:
    ax      = { {defs={0x080483df}, expr=0[32]} }
    cx      = { {defs={}, expr=v1157[32]} }
    dx      = { {defs={}, expr=v1158[32]} }
    bx      = { {defs={}, expr=v1159[32]} }
    sp      = { {defs={0x08048402}, expr=(add[32] v1161[32] 4[32])} }
    bp      = { {defs={0x08048402}, expr=v1203[32]} }
    si      = { {defs={}, expr=v1162[32]} }
    di      = { {defs={}, expr=v1163[32]} }
    es      = { {defs={}, expr=v1164[16]} }
    cs      = { {defs={}, expr=v1165[16]} }
    ss      = { {defs={}, expr=v1166[16]} }
    ds      = { {defs={}, expr=v1167[16]} }
    fs      = { {defs={}, expr=v1168[16]} }
    gs      = { {defs={}, expr=v1169[16]} }
    cf      = { {defs={0x080483e4}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1171[1]} }
    pf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1173[1]} }
    af      = { {defs={}, expr=v1202[1]} }
    ?5      = { {defs={}, expr=v1175[1]} }
    zf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    sf      = { {defs={0x080483df,0x080483e4}, expr=0[1]} }
    tf      = { {defs={}, expr=v1178[1]} }
    if      = { {defs={}, expr=v1179[1]} }
    df      = { {defs={}, expr=v1180[1]} }
    of      = { {defs={0x080483e4}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1182[1]} }
    iopl1   = { {defs={}, expr=v1183[1]} }
    nt      = { {defs={}, expr=v1184[1]} }
    ?15     = { {defs={}, expr=v1185[1]} }
    rf      = { {defs={}, expr=v1186[1]} }
    vm      = { {defs={}, expr=v1187[1]} }
    ac      = { {defs={}, expr=v1188[1]} }
    vif     = { {defs={}, expr=v1189[1]} }
    vip     = { {defs={}, expr=v1190[1]} }
    id      = { {defs={}, expr=v1191[1]} }
    ?22     = { {defs={}, expr=v1192[1]} }
    ?23     = { {defs={}, expr=v1193[1]} }
    ?24     = { {defs={}, expr=v1194[1]} }
    ?25     = { {defs={}, expr=v1195[1]} }
    ?26     = { {defs={}, expr=v1196[1]} }
    ?27     = { {defs={}, expr=v1197[1]} }
    ?28     = { {defs={}, expr=v1198[1]} }
    ?29     = { {defs={}, expr=v1199[1]} }
    ?30     = { {defs={}, expr=v1200[1]} }
    ?31     = { {defs={}, expr=v1201[1]} }
    ip      = { {defs={0x08048402}, expr=0x08048403[32]} }
memory:
    addr={defs={0x08048402}, expr=(add[32] v1161[32] 3[32])} value={defs={0x08048402}, expr=(extract[8] 24[32] 32[32] v1203[32])}
    addr={defs={0x08048402}, expr=(add[32] v1161[32] 2[32])} value={defs={0x08048402}, expr=(extract[8] 16[32] 24[32] v1203[32])}
    addr={defs={0x08048402}, expr=(add[32] v1161[32] 1[32])} value={defs={0x08048402}, expr=(extract[8] 8[32] 16[32] v1203[32])}
    addr={defs={}, expr=v1161[32]} value={defs={0x08048402}, expr=(extract[8] 0[32] 8[32] v1203[32])}
0x8048403:ret    
registers:
    ax      = { {defs={0x080483df}, expr=0[32]} }
    cx      = { {defs={}, expr=v1157[32]} }
    dx      = { {defs={}, expr=v1158[32]} }
    bx      = { {defs={}, expr=v1159[32]} }
    sp      = { {defs={0x08048402,0x08048403}, expr=(add[32] (add[32] v1161[32] 4[32]) 4[32])} }
    bp      = { {defs={0x08048402}, expr=v1203[32]} }
    si      = { {defs={}, expr=v1162[32]} }
    di      = { {defs={}, expr=v1163[32]} }
    es      = { {defs={}, expr=v1164[16]} }
    cs      = { {defs={}, expr=v1165[16]} }
    ss      = { {defs={}, expr=v1166[16]} }
    ds      = { {defs={}, expr=v1167[16]} }
    fs      = { {defs={}, expr=v1168[16]} }
    gs      = { {defs={}, expr=v1169[16]} }
    cf      = { {defs={0x080483e4}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1171[1]} }
    pf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1173[1]} }
    af      = { {defs={}, expr=v1202[1]} }
    ?5      = { {defs={}, expr=v1175[1]} }
    zf      = { {defs={0x080483df,0x080483e4}, expr=1[1]} }
    sf      = { {defs={0x080483df,0x080483e4}, expr=0[1]} }
    tf      = { {defs={}, expr=v1178[1]} }
    if      = { {defs={}, expr=v1179[1]} }
    df      = { {defs={}, expr=v1180[1]} }
    of      = { {defs={0x080483e4}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1182[1]} }
    iopl1   = { {defs={}, expr=v1183[1]} }
    nt      = { {defs={}, expr=v1184[1]} }
    ?15     = { {defs={}, expr=v1185[1]} }
    rf      = { {defs={}, expr=v1186[1]} }
    vm      = { {defs={}, expr=v1187[1]} }
    ac      = { {defs={}, expr=v1188[1]} }
    vif     = { {defs={}, expr=v1189[1]} }
    vip     = { {defs={}, expr=v1190[1]} }
    id      = { {defs={}, expr=v1191[1]} }
    ?22     = { {defs={}, expr=v1192[1]} }
    ?23     = { {defs={}, expr=v1193[1]} }
    ?24     = { {defs={}, expr=v1194[1]} }
    ?25     = { {defs={}, expr=v1195[1]} }
    ?26     = { {defs={}, expr=v1196[1]} }
    ?27     = { {defs={}, expr=v1197[1]} }
    ?28     = { {defs={}, expr=v1198[1]} }
    ?29     = { {defs={}, expr=v1199[1]} }
    ?30     = { {defs={}, expr=v1200[1]} }
    ?31     = { {defs={}, expr=v1201[1]} }
    ip      = { {defs={0x08048403}, expr=v1208[32]} }
memory:
    addr={defs={0x08048402,0x08048403}, expr=(add[32] (add[32] v1161[32] 4[32]) 3[32])} value={defs={0x08048403}, expr=(extract[8] 24[32] 32[32] v1208[32])}
    addr={defs={0x08048402,0x08048403}, expr=(add[32] (add[32] v1161[32] 4[32]) 2[32])} value={defs={0x08048403}, expr=(extract[8] 16[32] 24[32] v1208[32])}
    addr={defs={0x08048402,0x08048403}, expr=(add[32] (add[32] v1161[32] 4[32]) 1[32])} value={defs={0x08048403}, expr=(extract[8] 8[32] 16[32] v1208[32])}
    addr={defs={0x08048402}, expr=(add[32] v1161[32] 4[32])} value={defs={0x08048403}, expr=(extract[8] 0[32] 8[32] v1208[32])}
    addr={defs={0x08048402}, expr=(add[32] v1161[32] 3[32])} value={defs={0x08048402}, expr=(extract[8] 24[32] 32[32] v1203[32])}
    addr={defs={0x08048402}, expr=(add[32] v1161[32] 2[32])} value={defs={0x08048402}, expr=(extract[8] 16[32] 24[32] v1203[32])}
    addr={defs={0x08048402}, expr=(add[32] v1161[32] 1[32])} value={defs={0x08048402}, expr=(extract[8] 8[32] 16[32] v1203[32])}
    addr={defs={}, expr=v1161[32]} value={defs={0x08048402}, expr=(extract[8] 0[32] 8[32] v1203[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
registers:
    ax      = { {defs={}, expr=v1215[32]} }
    cx      = { {defs={}, expr=v1216[32]} }
    dx      = { {defs={}, expr=v1217[32]} }
    bx      = { {defs={}, expr=v1218[32]} }
    sp      = { {defs={}, expr=v1219[32]} }
    bp      = { {defs={}, expr=v1220[32]} }
    si      = { {defs={}, expr=v1221[32]} }
    di      = { {defs={}, expr=v1222[32]} }
    es      = { {defs={}, expr=v1223[16]} }
    cs      = { {defs={}, expr=v1224[16]} }
    ss      = { {defs={}, expr=v1225[16]} }
    ds      = { {defs={}, expr=v1226[16]} }
    fs      = { {defs={}, expr=v1227[16]} }
    gs      = { {defs={}, expr=v1228[16]} }
    cf      = { {defs={}, expr=v1229[1]} }
    ?1      = { {defs={}, expr=v1230[1]} }
    pf      = { {defs={}, expr=v1231[1]} }
    ?3      = { {defs={}, expr=v1232[1]} }
    af      = { {defs={}, expr=v1233[1]} }
    ?5      = { {defs={}, expr=v1234[1]} }
    zf      = { {defs={}, expr=v1235[1]} }
    sf      = { {defs={}, expr=v1236[1]} }
    tf      = { {defs={}, expr=v1237[1]} }
    if      = { {defs={}, expr=v1238[1]} }
    df      = { {defs={}, expr=v1239[1]} }
    of      = { {defs={}, expr=v1240[1]} }
    iopl0   = { {defs={}, expr=v1241[1]} }
    iopl1   = { {defs={}, expr=v1242[1]} }
    nt      = { {defs={}, expr=v1243[1]} }
    ?15     = { {defs={}, expr=v1244[1]} }
    rf      = { {defs={}, expr=v1245[1]} }
    vm      = { {defs={}, expr=v1246[1]} }
    ac      = { {defs={}, expr=v1247[1]} }
    vif     = { {defs={}, expr=v1248[1]} }
    vip     = { {defs={}, expr=v1249[1]} }
    id      = { {defs={}, expr=v1250[1]} }
    ?22     = { {defs={}, expr=v1251[1]} }
    ?23     = { {defs={}, expr=v1252[1]} }
    ?24     = { {defs={}, expr=v1253[1]} }
    ?25     = { {defs={}, expr=v1254[1]} }
    ?26     = { {defs={}, expr=v1255[1]} }
    ?27     = { {defs={}, expr=v1256[1]} }
    ?28     = { {defs={}, expr=v1257[1]} }
    ?29     = { {defs={}, expr=v1258[1]} }
    ?30     = { {defs={}, expr=v1259[1]} }
    ?31     = { {defs={}, expr=v1260[1]} }
    ip      = { {defs={0x080483e8}, expr=0x080483ef[32]} }
memory:
    addr={defs={0x080483e8}, expr=(add[32] v1219[32] 3[32])} value={defs={0x080483e8}, expr=8[8]}
    addr={defs={0x080483e8}, expr=(add[32] v1219[32] 2[32])} value={defs={0x080483e8}, expr=4[8]}
    addr={defs={0x080483e8}, expr=(add[32] v1219[32] 1[32])} value={defs={0x080483e8}, expr=-107[8]}
    addr={defs={}, expr=v1219[32]} value={defs={0x080483e8}, expr=-8[8]}
0x80483ef:call   0x00000000
registers:
    ax      = { {defs={}, expr=v1215[32]} }
    cx      = { {defs={}, expr=v1216[32]} }
    dx      = { {defs={}, expr=v1217[32]} }
    bx      = { {defs={}, expr=v1218[32]} }
    sp      = { {defs={0x080483ef}, expr=(add[32] v1219[32] -4[32])} }
    bp      = { {defs={}, expr=v1220[32]} }
    si      = { {defs={}, expr=v1221[32]} }
    di      = { {defs={}, expr=v1222[32]} }
    es      = { {defs={}, expr=v1223[16]} }
    cs      = { {defs={}, expr=v1224[16]} }
    ss      = { {defs={}, expr=v1225[16]} }
    ds      = { {defs={}, expr=v1226[16]} }
    fs      = { {defs={}, expr=v1227[16]} }
    gs      = { {defs={}, expr=v1228[16]} }
    cf      = { {defs={}, expr=v1229[1]} }
    ?1      = { {defs={}, expr=v1230[1]} }
    pf      = { {defs={}, expr=v1231[1]} }
    ?3      = { {defs={}, expr=v1232[1]} }
    af      = { {defs={}, expr=v1233[1]} }
    ?5      = { {defs={}, expr=v1234[1]} }
    zf      = { {defs={}, expr=v1235[1]} }
    sf      = { {defs={}, expr=v1236[1]} }
    tf      = { {defs={}, expr=v1237[1]} }
    if      = { {defs={}, expr=v1238[1]} }
    df      = { {defs={}, expr=v1239[1]} }
    of      = { {defs={}, expr=v1240[1]} }
    iopl0   = { {defs={}, expr=v1241[1]} }
    iopl1   = { {defs={}, expr=v1242[1]} }
    nt      = { {defs={}, expr=v1243[1]} }
    ?15     = { {defs={}, expr=v1244[1]} }
    rf      = { {defs={}, expr=v1245[1]} }
    vm      = { {defs={}, expr=v1246[1]} }
    ac      = { {defs={}, expr=v1247[1]} }
    vif     = { {defs={}, expr=v1248[1]} }
    vip     = { {defs={}, expr=v1249[1]} }
    id      = { {defs={}, expr=v1250[1]} }
    ?22     = { {defs={}, expr=v1251[1]} }
    ?23     = { {defs={}, expr=v1252[1]} }
    ?24     = { {defs={}, expr=v1253[1]} }
    ?25     = { {defs={}, expr=v1254[1]} }
    ?26     = { {defs={}, expr=v1255[1]} }
    ?27     = { {defs={}, expr=v1256[1]} }
    ?28     = { {defs={}, expr=v1257[1]} }
    ?29     = { {defs={}, expr=v1258[1]} }
    ?30     = { {defs={}, expr=v1259[1]} }
    ?31     = { {defs={}, expr=v1260[1]} }
    ip      = { {defs={0x080483ef}, expr=0[32]} }
memory:
    addr={defs={0x080483ef}, expr=(add[32] (add[32] v1219[32] -4[32]) 3[32])} value={defs={0x080483ef}, expr=8[8]}
    addr={defs={0x080483ef}, expr=(add[32] (add[32] v1219[32] -4[32]) 2[32])} value={defs={0x080483ef}, expr=4[8]}
    addr={defs={0x080483ef}, expr=(add[32] (add[32] v1219[32] -4[32]) 1[32])} value={defs={0x080483ef}, expr=-125[8]}
    addr={defs={0x080483ef}, expr=(add[32] v1219[32] -4[32])} value={defs={0x080483ef}, expr=-12[8]}
    addr={defs={0x080483e8}, expr=(add[32] v1219[32] 3[32])} value={defs={0x080483e8}, expr=8[8]}
    addr={defs={0x080483e8}, expr=(add[32] v1219[32] 2[32])} value={defs={0x080483e8}, expr=4[8]}
    addr={defs={0x080483e8}, expr=(add[32] v1219[32] 1[32])} value={defs={0x080483e8}, expr=-107[8]}
    addr={defs={}, expr=v1219[32]} value={defs={0x080483e8}, expr=-8[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
registers:
    ax      = { {defs={}, expr=v1263[32]} }
    cx      = { {defs={}, expr=v1264[32]} }
    dx      = { {defs={}, expr=v1265[32]} }
    bx      = { {defs={}, expr=v1266[32]} }
    sp      = { {defs={}, expr=v1267[32]} }
    bp      = { {defs={}, expr=v1268[32]} }
    si      = { {defs={}, expr=v1269[32]} }
    di      = { {defs={}, expr=v1270[32]} }
    es      = { {defs={}, expr=v1271[16]} }
    cs      = { {defs={}, expr=v1272[16]} }
    ss      = { {defs={}, expr=v1273[16]} }
    ds      = { {defs={}, expr=v1274[16]} }
    fs      = { {defs={}, expr=v1275[16]} }
    gs      = { {defs={}, expr=v1276[16]} }
    cf      = { {defs={}, expr=v1277[1]} }
    ?1      = { {defs={}, expr=v1278[1]} }
    pf      = { {defs={}, expr=v1279[1]} }
    ?3      = { {defs={}, expr=v1280[1]} }
    af      = { {defs={}, expr=v1281[1]} }
    ?5      = { {defs={}, expr=v1282[1]} }
    zf      = { {defs={}, expr=v1283[1]} }
    sf      = { {defs={}, expr=v1284[1]} }
    tf      = { {defs={}, expr=v1285[1]} }
    if      = { {defs={}, expr=v1286[1]} }
    df      = { {defs={}, expr=v1287[1]} }
    of      = { {defs={}, expr=v1288[1]} }
    iopl0   = { {defs={}, expr=v1289[1]} }
    iopl1   = { {defs={}, expr=v1290[1]} }
    nt      = { {defs={}, expr=v1291[1]} }
    ?15     = { {defs={}, expr=v1292[1]} }
    rf      = { {defs={}, expr=v1293[1]} }
    vm      = { {defs={}, expr=v1294[1]} }
    ac      = { {defs={}, expr=v1295[1]} }
    vif     = { {defs={}, expr=v1296[1]} }
    vip     = { {defs={}, expr=v1297[1]} }
    id      = { {defs={}, expr=v1298[1]} }
    ?22     = { {defs={}, expr=v1299[1]} }
    ?23     = { {defs={}, expr=v1300[1]} }
    ?24     = { {defs={}, expr=v1301[1]} }
    ?25     = { {defs={}, expr=v1302[1]} }
    ?26     = { {defs={}, expr=v1303[1]} }
    ?27     = { {defs={}, expr=v1304[1]} }
    ?28     = { {defs={}, expr=v1305[1]} }
    ?29     = { {defs={}, expr=v1306[1]} }
    ?30     = { {defs={}, expr=v1307[1]} }
    ?31     = { {defs={}, expr=v1308[1]} }
    ip      = { {defs={0x080483f4}, expr=0x080483fa[32]} }
memory:
0x80483fa:lea    edi, [edi + 0x00000000]
registers:
    ax      = { {defs={}, expr=v1263[32]} }
    cx      = { {defs={}, expr=v1264[32]} }
    dx      = { {defs={}, expr=v1265[32]} }
    bx      = { {defs={}, expr=v1266[32]} }
    sp      = { {defs={}, expr=v1267[32]} }
    bp      = { {defs={}, expr=v1268[32]} }
    si      = { {defs={}, expr=v1269[32]} }
    di      = { {defs={}, expr=v1270[32]} }
    es      = { {defs={}, expr=v1271[16]} }
    cs      = { {defs={}, expr=v1272[16]} }
    ss      = { {defs={}, expr=v1273[16]} }
    ds      = { {defs={}, expr=v1274[16]} }
    fs      = { {defs={}, expr=v1275[16]} }
    gs      = { {defs={}, expr=v1276[16]} }
    cf      = { {defs={}, expr=v1277[1]} }
    ?1      = { {defs={}, expr=v1278[1]} }
    pf      = { {defs={}, expr=v1279[1]} }
    ?3      = { {defs={}, expr=v1280[1]} }
    af      = { {defs={}, expr=v1281[1]} }
    ?5      = { {defs={}, expr=v1282[1]} }
    zf      = { {defs={}, expr=v1283[1]} }
    sf      = { {defs={}, expr=v1284[1]} }
    tf      = { {defs={}, expr=v1285[1]} }
    if      = { {defs={}, expr=v1286[1]} }
    df      = { {defs={}, expr=v1287[1]} }
    of      = { {defs={}, expr=v1288[1]} }
    iopl0   = { {defs={}, expr=v1289[1]} }
    iopl1   = { {defs={}, expr=v1290[1]} }
    nt      = { {defs={}, expr=v1291[1]} }
    ?15     = { {defs={}, expr=v1292[1]} }
    rf      = { {defs={}, expr=v1293[1]} }
    vm      = { {defs={}, expr=v1294[1]} }
    ac      = { {defs={}, expr=v1295[1]} }
    vif     = { {defs={}, expr=v1296[1]} }
    vip     = { {defs={}, expr=v1297[1]} }
    id      = { {defs={}, expr=v1298[1]} }
    ?22     = { {defs={}, expr=v1299[1]} }
    ?23     = { {defs={}, expr=v1300[1]} }
    ?24     = { {defs={}, expr=v1301[1]} }
    ?25     = { {defs={}, expr=v1302[1]} }
    ?26     = { {defs={}, expr=v1303[1]} }
    ?27     = { {defs={}, expr=v1304[1]} }
    ?28     = { {defs={}, expr=v1305[1]} }
    ?29     = { {defs={}, expr=v1306[1]} }
    ?30     = { {defs={}, expr=v1307[1]} }
    ?31     = { {defs={}, expr=v1308[1]} }
    ip      = { {defs={0x080483fa}, expr=0x08048400[32]} }
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
registers:
    ax      = { {defs={}, expr=v1311[32]} }
    cx      = { {defs={}, expr=v1312[32]} }
    dx      = { {defs={}, expr=v1313[32]} }
    bx      = { {defs={}, expr=v1314[32]} }
    sp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    bp      = { {defs={}, expr=v1316[32]} }
    si      = { {defs={}, expr=v1317[32]} }
    di      = { {defs={}, expr=v1318[32]} }
    es      = { {defs={}, expr=v1319[16]} }
    cs      = { {defs={}, expr=v1320[16]} }
    ss      = { {defs={}, expr=v1321[16]} }
    ds      = { {defs={}, expr=v1322[16]} }
    fs      = { {defs={}, expr=v1323[16]} }
    gs      = { {defs={}, expr=v1324[16]} }
    cf      = { {defs={}, expr=v1325[1]} }
    ?1      = { {defs={}, expr=v1326[1]} }
    pf      = { {defs={}, expr=v1327[1]} }
    ?3      = { {defs={}, expr=v1328[1]} }
    af      = { {defs={}, expr=v1329[1]} }
    ?5      = { {defs={}, expr=v1330[1]} }
    zf      = { {defs={}, expr=v1331[1]} }
    sf      = { {defs={}, expr=v1332[1]} }
    tf      = { {defs={}, expr=v1333[1]} }
    if      = { {defs={}, expr=v1334[1]} }
    df      = { {defs={}, expr=v1335[1]} }
    of      = { {defs={}, expr=v1336[1]} }
    iopl0   = { {defs={}, expr=v1337[1]} }
    iopl1   = { {defs={}, expr=v1338[1]} }
    nt      = { {defs={}, expr=v1339[1]} }
    ?15     = { {defs={}, expr=v1340[1]} }
    rf      = { {defs={}, expr=v1341[1]} }
    vm      = { {defs={}, expr=v1342[1]} }
    ac      = { {defs={}, expr=v1343[1]} }
    vif     = { {defs={}, expr=v1344[1]} }
    vip     = { {defs={}, expr=v1345[1]} }
    id      = { {defs={}, expr=v1346[1]} }
    ?22     = { {defs={}, expr=v1347[1]} }
    ?23     = { {defs={}, expr=v1348[1]} }
    ?24     = { {defs={}, expr=v1349[1]} }
    ?25     = { {defs={}, expr=v1350[1]} }
    ?26     = { {defs={}, expr=v1351[1]} }
    ?27     = { {defs={}, expr=v1352[1]} }
    ?28     = { {defs={}, expr=v1353[1]} }
    ?29     = { {defs={}, expr=v1354[1]} }
    ?30     = { {defs={}, expr=v1355[1]} }
    ?31     = { {defs={}, expr=v1356[1]} }
    ip      = { {defs={0x08048410}, expr=0x08048411[32]} }
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v1316[32])}
0x8048411:mov    edx, 0x08048480<handler>
registers:
    ax      = { {defs={}, expr=v1311[32]} }
    cx      = { {defs={}, expr=v1312[32]} }
    dx      = { {defs={0x08048411}, expr=0x08048480[32]} }
    bx      = { {defs={}, expr=v1314[32]} }
    sp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    bp      = { {defs={}, expr=v1316[32]} }
    si      = { {defs={}, expr=v1317[32]} }
    di      = { {defs={}, expr=v1318[32]} }
    es      = { {defs={}, expr=v1319[16]} }
    cs      = { {defs={}, expr=v1320[16]} }
    ss      = { {defs={}, expr=v1321[16]} }
    ds      = { {defs={}, expr=v1322[16]} }
    fs      = { {defs={}, expr=v1323[16]} }
    gs      = { {defs={}, expr=v1324[16]} }
    cf      = { {defs={}, expr=v1325[1]} }
    ?1      = { {defs={}, expr=v1326[1]} }
    pf      = { {defs={}, expr=v1327[1]} }
    ?3      = { {defs={}, expr=v1328[1]} }
    af      = { {defs={}, expr=v1329[1]} }
    ?5      = { {defs={}, expr=v1330[1]} }
    zf      = { {defs={}, expr=v1331[1]} }
    sf      = { {defs={}, expr=v1332[1]} }
    tf      = { {defs={}, expr=v1333[1]} }
    if      = { {defs={}, expr=v1334[1]} }
    df      = { {defs={}, expr=v1335[1]} }
    of      = { {defs={}, expr=v1336[1]} }
    iopl0   = { {defs={}, expr=v1337[1]} }
    iopl1   = { {defs={}, expr=v1338[1]} }
    nt      = { {defs={}, expr=v1339[1]} }
    ?15     = { {defs={}, expr=v1340[1]} }
    rf      = { {defs={}, expr=v1341[1]} }
    vm      = { {defs={}, expr=v1342[1]} }
    ac      = { {defs={}, expr=v1343[1]} }
    vif     = { {defs={}, expr=v1344[1]} }
    vip     = { {defs={}, expr=v1345[1]} }
    id      = { {defs={}, expr=v1346[1]} }
    ?22     = { {defs={}, expr=v1347[1]} }
    ?23     = { {defs={}, expr=v1348[1]} }
    ?24     = { {defs={}, expr=v1349[1]} }
    ?25     = { {defs={}, expr=v1350[1]} }
    ?26     = { {defs={}, expr=v1351[1]} }
    ?27     = { {defs={}, expr=v1352[1]} }
    ?28     = { {defs={}, expr=v1353[1]} }
    ?29     = { {defs={}, expr=v1354[1]} }
    ?30     = { {defs={}, expr=v1355[1]} }
    ?31     = { {defs={}, expr=v1356[1]} }
    ip      = { {defs={0x08048411}, expr=0x08048416[32]} }
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v1316[32])}
0x8048416:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v1311[32]} }
    cx      = { {defs={}, expr=v1312[32]} }
    dx      = { {defs={0x08048411}, expr=0x08048480[32]} }
    bx      = { {defs={}, expr=v1314[32]} }
    sp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    bp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    si      = { {defs={}, expr=v1317[32]} }
    di      = { {defs={}, expr=v1318[32]} }
    es      = { {defs={}, expr=v1319[16]} }
    cs      = { {defs={}, expr=v1320[16]} }
    ss      = { {defs={}, expr=v1321[16]} }
    ds      = { {defs={}, expr=v1322[16]} }
    fs      = { {defs={}, expr=v1323[16]} }
    gs      = { {defs={}, expr=v1324[16]} }
    cf      = { {defs={}, expr=v1325[1]} }
    ?1      = { {defs={}, expr=v1326[1]} }
    pf      = { {defs={}, expr=v1327[1]} }
    ?3      = { {defs={}, expr=v1328[1]} }
    af      = { {defs={}, expr=v1329[1]} }
    ?5      = { {defs={}, expr=v1330[1]} }
    zf      = { {defs={}, expr=v1331[1]} }
    sf      = { {defs={}, expr=v1332[1]} }
    tf      = { {defs={}, expr=v1333[1]} }
    if      = { {defs={}, expr=v1334[1]} }
    df      = { {defs={}, expr=v1335[1]} }
    of      = { {defs={}, expr=v1336[1]} }
    iopl0   = { {defs={}, expr=v1337[1]} }
    iopl1   = { {defs={}, expr=v1338[1]} }
    nt      = { {defs={}, expr=v1339[1]} }
    ?15     = { {defs={}, expr=v1340[1]} }
    rf      = { {defs={}, expr=v1341[1]} }
    vm      = { {defs={}, expr=v1342[1]} }
    ac      = { {defs={}, expr=v1343[1]} }
    vif     = { {defs={}, expr=v1344[1]} }
    vip     = { {defs={}, expr=v1345[1]} }
    id      = { {defs={}, expr=v1346[1]} }
    ?22     = { {defs={}, expr=v1347[1]} }
    ?23     = { {defs={}, expr=v1348[1]} }
    ?24     = { {defs={}, expr=v1349[1]} }
    ?25     = { {defs={}, expr=v1350[1]} }
    ?26     = { {defs={}, expr=v1351[1]} }
    ?27     = { {defs={}, expr=v1352[1]} }
    ?28     = { {defs={}, expr=v1353[1]} }
    ?29     = { {defs={}, expr=v1354[1]} }
    ?30     = { {defs={}, expr=v1355[1]} }
    ?31     = { {defs={}, expr=v1356[1]} }
    ip      = { {defs={0x08048416}, expr=0x08048418[32]} }
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v1316[32])}
0x8048418:sub    esp, 0x08
registers:
    ax      = { {defs={}, expr=v1311[32]} }
    cx      = { {defs={}, expr=v1312[32]} }
    dx      = { {defs={0x08048411}, expr=0x08048480[32]} }
    bx      = { {defs={}, expr=v1314[32]} }
    sp      = { {defs={0x08048410,0x08048418}, expr=(add[32] (add[32] v1315[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    si      = { {defs={}, expr=v1317[32]} }
    di      = { {defs={}, expr=v1318[32]} }
    es      = { {defs={}, expr=v1319[16]} }
    cs      = { {defs={}, expr=v1320[16]} }
    ss      = { {defs={}, expr=v1321[16]} }
    ds      = { {defs={}, expr=v1322[16]} }
    fs      = { {defs={}, expr=v1323[16]} }
    gs      = { {defs={}, expr=v1324[16]} }
    cf      = { {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1315[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1315[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1326[1]} }
    pf      = { {defs={0x08048410,0x08048418}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1315[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1315[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1315[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1328[1]} }
    af      = { {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1315[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1315[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1330[1]} }
    zf      = { {defs={0x08048410,0x08048418}, expr=(zerop[1] (add[32] (add[32] v1315[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048410,0x08048418}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1333[1]} }
    if      = { {defs={}, expr=v1334[1]} }
    df      = { {defs={}, expr=v1335[1]} }
    of      = { {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1315[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1315[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1315[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1315[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1337[1]} }
    iopl1   = { {defs={}, expr=v1338[1]} }
    nt      = { {defs={}, expr=v1339[1]} }
    ?15     = { {defs={}, expr=v1340[1]} }
    rf      = { {defs={}, expr=v1341[1]} }
    vm      = { {defs={}, expr=v1342[1]} }
    ac      = { {defs={}, expr=v1343[1]} }
    vif     = { {defs={}, expr=v1344[1]} }
    vip     = { {defs={}, expr=v1345[1]} }
    id      = { {defs={}, expr=v1346[1]} }
    ?22     = { {defs={}, expr=v1347[1]} }
    ?23     = { {defs={}, expr=v1348[1]} }
    ?24     = { {defs={}, expr=v1349[1]} }
    ?25     = { {defs={}, expr=v1350[1]} }
    ?26     = { {defs={}, expr=v1351[1]} }
    ?27     = { {defs={}, expr=v1352[1]} }
    ?28     = { {defs={}, expr=v1353[1]} }
    ?29     = { {defs={}, expr=v1354[1]} }
    ?30     = { {defs={}, expr=v1355[1]} }
    ?31     = { {defs={}, expr=v1356[1]} }
    ip      = { {defs={0x08048418}, expr=0x0804841b[32]} }
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v1316[32])}
0x804841b:and    esp, 0xf0<-0x10>
registers:
    ax      = { {defs={}, expr=v1311[32]} }
    cx      = { {defs={}, expr=v1312[32]} }
    dx      = { {defs={0x08048411}, expr=0x08048480[32]} }
    bx      = { {defs={}, expr=v1314[32]} }
    sp      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])} }
    bp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    si      = { {defs={}, expr=v1317[32]} }
    di      = { {defs={}, expr=v1318[32]} }
    es      = { {defs={}, expr=v1319[16]} }
    cs      = { {defs={}, expr=v1320[16]} }
    ss      = { {defs={}, expr=v1321[16]} }
    ds      = { {defs={}, expr=v1322[16]} }
    fs      = { {defs={}, expr=v1323[16]} }
    gs      = { {defs={}, expr=v1324[16]} }
    cf      = { {defs={0x0804841b}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1326[1]} }
    pf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v1328[1]} }
    af      = { {defs={}, expr=v1357[1]} }
    ?5      = { {defs={}, expr=v1330[1]} }
    zf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))} }
    sf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))} }
    tf      = { {defs={}, expr=v1333[1]} }
    if      = { {defs={}, expr=v1334[1]} }
    df      = { {defs={}, expr=v1335[1]} }
    of      = { {defs={0x0804841b}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1337[1]} }
    iopl1   = { {defs={}, expr=v1338[1]} }
    nt      = { {defs={}, expr=v1339[1]} }
    ?15     = { {defs={}, expr=v1340[1]} }
    rf      = { {defs={}, expr=v1341[1]} }
    vm      = { {defs={}, expr=v1342[1]} }
    ac      = { {defs={}, expr=v1343[1]} }
    vif     = { {defs={}, expr=v1344[1]} }
    vip     = { {defs={}, expr=v1345[1]} }
    id      = { {defs={}, expr=v1346[1]} }
    ?22     = { {defs={}, expr=v1347[1]} }
    ?23     = { {defs={}, expr=v1348[1]} }
    ?24     = { {defs={}, expr=v1349[1]} }
    ?25     = { {defs={}, expr=v1350[1]} }
    ?26     = { {defs={}, expr=v1351[1]} }
    ?27     = { {defs={}, expr=v1352[1]} }
    ?28     = { {defs={}, expr=v1353[1]} }
    ?29     = { {defs={}, expr=v1354[1]} }
    ?30     = { {defs={}, expr=v1355[1]} }
    ?31     = { {defs={}, expr=v1356[1]} }
    ip      = { {defs={0x0804841b}, expr=0x0804841e[32]} }
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v1316[32])}
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
registers:
    ax      = { {defs={}, expr=v1311[32]} }
    cx      = { {defs={}, expr=v1312[32]} }
    dx      = { {defs={0x08048411}, expr=0x08048480[32]} }
    bx      = { {defs={}, expr=v1314[32]} }
    sp      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])} }
    bp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    si      = { {defs={}, expr=v1317[32]} }
    di      = { {defs={}, expr=v1318[32]} }
    es      = { {defs={}, expr=v1319[16]} }
    cs      = { {defs={}, expr=v1320[16]} }
    ss      = { {defs={}, expr=v1321[16]} }
    ds      = { {defs={}, expr=v1322[16]} }
    fs      = { {defs={}, expr=v1323[16]} }
    gs      = { {defs={}, expr=v1324[16]} }
    cf      = { {defs={0x0804841b}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1326[1]} }
    pf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v1328[1]} }
    af      = { {defs={}, expr=v1357[1]} }
    ?5      = { {defs={}, expr=v1330[1]} }
    zf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))} }
    sf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))} }
    tf      = { {defs={}, expr=v1333[1]} }
    if      = { {defs={}, expr=v1334[1]} }
    df      = { {defs={}, expr=v1335[1]} }
    of      = { {defs={0x0804841b}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1337[1]} }
    iopl1   = { {defs={}, expr=v1338[1]} }
    nt      = { {defs={}, expr=v1339[1]} }
    ?15     = { {defs={}, expr=v1340[1]} }
    rf      = { {defs={}, expr=v1341[1]} }
    vm      = { {defs={}, expr=v1342[1]} }
    ac      = { {defs={}, expr=v1343[1]} }
    vif     = { {defs={}, expr=v1344[1]} }
    vip     = { {defs={}, expr=v1345[1]} }
    id      = { {defs={}, expr=v1346[1]} }
    ?22     = { {defs={}, expr=v1347[1]} }
    ?23     = { {defs={}, expr=v1348[1]} }
    ?24     = { {defs={}, expr=v1349[1]} }
    ?25     = { {defs={}, expr=v1350[1]} }
    ?26     = { {defs={}, expr=v1351[1]} }
    ?27     = { {defs={}, expr=v1352[1]} }
    ?28     = { {defs={}, expr=v1353[1]} }
    ?29     = { {defs={}, expr=v1354[1]} }
    ?30     = { {defs={}, expr=v1355[1]} }
    ?31     = { {defs={}, expr=v1356[1]} }
    ip      = { {defs={0x0804841e}, expr=0x08048422[32]} }
memory:
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32])} value={defs={0x08048411,0x0804841e}, expr=8[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32])} value={defs={0x08048411,0x0804841e}, expr=4[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32])} value={defs={0x08048411,0x0804841e}, expr=-124[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32])} value={defs={0x08048411,0x0804841e}, expr=-128[8]}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v1316[32])}
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
registers:
    ax      = { {defs={}, expr=v1311[32]} }
    cx      = { {defs={}, expr=v1312[32]} }
    dx      = { {defs={0x08048411}, expr=0x08048480[32]} }
    bx      = { {defs={}, expr=v1314[32]} }
    sp      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])} }
    bp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    si      = { {defs={}, expr=v1317[32]} }
    di      = { {defs={}, expr=v1318[32]} }
    es      = { {defs={}, expr=v1319[16]} }
    cs      = { {defs={}, expr=v1320[16]} }
    ss      = { {defs={}, expr=v1321[16]} }
    ds      = { {defs={}, expr=v1322[16]} }
    fs      = { {defs={}, expr=v1323[16]} }
    gs      = { {defs={}, expr=v1324[16]} }
    cf      = { {defs={0x0804841b}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1326[1]} }
    pf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v1328[1]} }
    af      = { {defs={}, expr=v1357[1]} }
    ?5      = { {defs={}, expr=v1330[1]} }
    zf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))} }
    sf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))} }
    tf      = { {defs={}, expr=v1333[1]} }
    if      = { {defs={}, expr=v1334[1]} }
    df      = { {defs={}, expr=v1335[1]} }
    of      = { {defs={0x0804841b}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1337[1]} }
    iopl1   = { {defs={}, expr=v1338[1]} }
    nt      = { {defs={}, expr=v1339[1]} }
    ?15     = { {defs={}, expr=v1340[1]} }
    rf      = { {defs={}, expr=v1341[1]} }
    vm      = { {defs={}, expr=v1342[1]} }
    ac      = { {defs={}, expr=v1343[1]} }
    vif     = { {defs={}, expr=v1344[1]} }
    vip     = { {defs={}, expr=v1345[1]} }
    id      = { {defs={}, expr=v1346[1]} }
    ?22     = { {defs={}, expr=v1347[1]} }
    ?23     = { {defs={}, expr=v1348[1]} }
    ?24     = { {defs={}, expr=v1349[1]} }
    ?25     = { {defs={}, expr=v1350[1]} }
    ?26     = { {defs={}, expr=v1351[1]} }
    ?27     = { {defs={}, expr=v1352[1]} }
    ?28     = { {defs={}, expr=v1353[1]} }
    ?29     = { {defs={}, expr=v1354[1]} }
    ?30     = { {defs={}, expr=v1355[1]} }
    ?31     = { {defs={}, expr=v1356[1]} }
    ip      = { {defs={0x08048422}, expr=0x08048429[32]} }
memory:
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 3[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 2[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 1[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])} value={defs={0x08048422}, expr=10[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32])} value={defs={0x08048411,0x0804841e}, expr=8[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32])} value={defs={0x08048411,0x0804841e}, expr=4[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32])} value={defs={0x08048411,0x0804841e}, expr=-124[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32])} value={defs={0x08048411,0x0804841e}, expr=-128[8]}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v1316[32])}
0x8048429:call   0x080482f0<signal@plt>
registers:
    ax      = { {defs={}, expr=v1311[32]} }
    cx      = { {defs={}, expr=v1312[32]} }
    dx      = { {defs={0x08048411}, expr=0x08048480[32]} }
    bx      = { {defs={}, expr=v1314[32]} }
    sp      = { {defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) -4[32])} }
    bp      = { {defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} }
    si      = { {defs={}, expr=v1317[32]} }
    di      = { {defs={}, expr=v1318[32]} }
    es      = { {defs={}, expr=v1319[16]} }
    cs      = { {defs={}, expr=v1320[16]} }
    ss      = { {defs={}, expr=v1321[16]} }
    ds      = { {defs={}, expr=v1322[16]} }
    fs      = { {defs={}, expr=v1323[16]} }
    gs      = { {defs={}, expr=v1324[16]} }
    cf      = { {defs={0x0804841b}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1326[1]} }
    pf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])))))))} }
    ?3      = { {defs={}, expr=v1328[1]} }
    af      = { {defs={}, expr=v1357[1]} }
    ?5      = { {defs={}, expr=v1330[1]} }
    zf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))} }
    sf      = { {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]))} }
    tf      = { {defs={}, expr=v1333[1]} }
    if      = { {defs={}, expr=v1334[1]} }
    df      = { {defs={}, expr=v1335[1]} }
    of      = { {defs={0x0804841b}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1337[1]} }
    iopl1   = { {defs={}, expr=v1338[1]} }
    nt      = { {defs={}, expr=v1339[1]} }
    ?15     = { {defs={}, expr=v1340[1]} }
    rf      = { {defs={}, expr=v1341[1]} }
    vm      = { {defs={}, expr=v1342[1]} }
    ac      = { {defs={}, expr=v1343[1]} }
    vif     = { {defs={}, expr=v1344[1]} }
    vip     = { {defs={}, expr=v1345[1]} }
    id      = { {defs={}, expr=v1346[1]} }
    ?22     = { {defs={}, expr=v1347[1]} }
    ?23     = { {defs={}, expr=v1348[1]} }
    ?24     = { {defs={}, expr=v1349[1]} }
    ?25     = { {defs={}, expr=v1350[1]} }
    ?26     = { {defs={}, expr=v1351[1]} }
    ?27     = { {defs={}, expr=v1352[1]} }
    ?28     = { {defs={}, expr=v1353[1]} }
    ?29     = { {defs={}, expr=v1354[1]} }
    ?30     = { {defs={}, expr=v1355[1]} }
    ?31     = { {defs={}, expr=v1356[1]} }
    ip      = { {defs={0x08048429}, expr=0x080482f0[32]} }
memory:
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048429}, expr=8[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048429}, expr=4[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048429}, expr=-124[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) -4[32])} value={defs={0x08048429}, expr=46[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 3[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 2[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 1[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32])} value={defs={0x08048422}, expr=10[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32])} value={defs={0x08048411,0x0804841e}, expr=8[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32])} value={defs={0x08048411,0x0804841e}, expr=4[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32])} value={defs={0x08048411,0x0804841e}, expr=-124[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] (add[32] v1315[32] -4[32]) -8[32]) -16[32]) 4[32])} value={defs={0x08048411,0x0804841e}, expr=-128[8]}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v1315[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v1316[32])}
    addr={defs={0x08048410}, expr=(add[32] v1315[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v1316[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
registers:
    ax      = { {defs={}, expr=v1360[32]} }
    cx      = { {defs={}, expr=v1361[32]} }
    dx      = { {defs={}, expr=v1362[32]} }
    bx      = { {defs={}, expr=v1363[32]} }
    sp      = { {defs={}, expr=v1365[32]} }
    bp      = { {defs={}, expr=v1365[32]} }
    si      = { {defs={}, expr=v1366[32]} }
    di      = { {defs={}, expr=v1367[32]} }
    es      = { {defs={}, expr=v1368[16]} }
    cs      = { {defs={}, expr=v1369[16]} }
    ss      = { {defs={}, expr=v1370[16]} }
    ds      = { {defs={}, expr=v1371[16]} }
    fs      = { {defs={}, expr=v1372[16]} }
    gs      = { {defs={}, expr=v1373[16]} }
    cf      = { {defs={}, expr=v1374[1]} }
    ?1      = { {defs={}, expr=v1375[1]} }
    pf      = { {defs={}, expr=v1376[1]} }
    ?3      = { {defs={}, expr=v1377[1]} }
    af      = { {defs={}, expr=v1378[1]} }
    ?5      = { {defs={}, expr=v1379[1]} }
    zf      = { {defs={}, expr=v1380[1]} }
    sf      = { {defs={}, expr=v1381[1]} }
    tf      = { {defs={}, expr=v1382[1]} }
    if      = { {defs={}, expr=v1383[1]} }
    df      = { {defs={}, expr=v1384[1]} }
    of      = { {defs={}, expr=v1385[1]} }
    iopl0   = { {defs={}, expr=v1386[1]} }
    iopl1   = { {defs={}, expr=v1387[1]} }
    nt      = { {defs={}, expr=v1388[1]} }
    ?15     = { {defs={}, expr=v1389[1]} }
    rf      = { {defs={}, expr=v1390[1]} }
    vm      = { {defs={}, expr=v1391[1]} }
    ac      = { {defs={}, expr=v1392[1]} }
    vif     = { {defs={}, expr=v1393[1]} }
    vip     = { {defs={}, expr=v1394[1]} }
    id      = { {defs={}, expr=v1395[1]} }
    ?22     = { {defs={}, expr=v1396[1]} }
    ?23     = { {defs={}, expr=v1397[1]} }
    ?24     = { {defs={}, expr=v1398[1]} }
    ?25     = { {defs={}, expr=v1399[1]} }
    ?26     = { {defs={}, expr=v1400[1]} }
    ?27     = { {defs={}, expr=v1401[1]} }
    ?28     = { {defs={}, expr=v1402[1]} }
    ?29     = { {defs={}, expr=v1403[1]} }
    ?30     = { {defs={}, expr=v1404[1]} }
    ?31     = { {defs={}, expr=v1405[1]} }
    ip      = { {defs={0x0804842e}, expr=0x08048430[32]} }
memory:
0x8048430:xor    eax, eax
registers:
    ax      = { {defs={0x08048430}, expr=0[32]} }
    cx      = { {defs={}, expr=v1361[32]} }
    dx      = { {defs={}, expr=v1362[32]} }
    bx      = { {defs={}, expr=v1363[32]} }
    sp      = { {defs={}, expr=v1365[32]} }
    bp      = { {defs={}, expr=v1365[32]} }
    si      = { {defs={}, expr=v1366[32]} }
    di      = { {defs={}, expr=v1367[32]} }
    es      = { {defs={}, expr=v1368[16]} }
    cs      = { {defs={}, expr=v1369[16]} }
    ss      = { {defs={}, expr=v1370[16]} }
    ds      = { {defs={}, expr=v1371[16]} }
    fs      = { {defs={}, expr=v1372[16]} }
    gs      = { {defs={}, expr=v1373[16]} }
    cf      = { {defs={0x08048430}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1375[1]} }
    pf      = { {defs={0x08048430}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1377[1]} }
    af      = { {defs={}, expr=v1406[1]} }
    ?5      = { {defs={}, expr=v1379[1]} }
    zf      = { {defs={0x08048430}, expr=1[1]} }
    sf      = { {defs={0x08048430}, expr=0[1]} }
    tf      = { {defs={}, expr=v1382[1]} }
    if      = { {defs={}, expr=v1383[1]} }
    df      = { {defs={}, expr=v1384[1]} }
    of      = { {defs={0x08048430}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1386[1]} }
    iopl1   = { {defs={}, expr=v1387[1]} }
    nt      = { {defs={}, expr=v1388[1]} }
    ?15     = { {defs={}, expr=v1389[1]} }
    rf      = { {defs={}, expr=v1390[1]} }
    vm      = { {defs={}, expr=v1391[1]} }
    ac      = { {defs={}, expr=v1392[1]} }
    vif     = { {defs={}, expr=v1393[1]} }
    vip     = { {defs={}, expr=v1394[1]} }
    id      = { {defs={}, expr=v1395[1]} }
    ?22     = { {defs={}, expr=v1396[1]} }
    ?23     = { {defs={}, expr=v1397[1]} }
    ?24     = { {defs={}, expr=v1398[1]} }
    ?25     = { {defs={}, expr=v1399[1]} }
    ?26     = { {defs={}, expr=v1400[1]} }
    ?27     = { {defs={}, expr=v1401[1]} }
    ?28     = { {defs={}, expr=v1402[1]} }
    ?29     = { {defs={}, expr=v1403[1]} }
    ?30     = { {defs={}, expr=v1404[1]} }
    ?31     = { {defs={}, expr=v1405[1]} }
    ip      = { {defs={0x08048430}, expr=0x08048432[32]} }
memory:
0x8048432:pop    ebp
registers:
    ax      = { {defs={0x08048430}, expr=0[32]} }
    cx      = { {defs={}, expr=v1361[32]} }
    dx      = { {defs={}, expr=v1362[32]} }
    bx      = { {defs={}, expr=v1363[32]} }
    sp      = { {defs={0x08048432}, expr=(add[32] v1365[32] 4[32])} }
    bp      = { {defs={0x08048432}, expr=v1407[32]} }
    si      = { {defs={}, expr=v1366[32]} }
    di      = { {defs={}, expr=v1367[32]} }
    es      = { {defs={}, expr=v1368[16]} }
    cs      = { {defs={}, expr=v1369[16]} }
    ss      = { {defs={}, expr=v1370[16]} }
    ds      = { {defs={}, expr=v1371[16]} }
    fs      = { {defs={}, expr=v1372[16]} }
    gs      = { {defs={}, expr=v1373[16]} }
    cf      = { {defs={0x08048430}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1375[1]} }
    pf      = { {defs={0x08048430}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1377[1]} }
    af      = { {defs={}, expr=v1406[1]} }
    ?5      = { {defs={}, expr=v1379[1]} }
    zf      = { {defs={0x08048430}, expr=1[1]} }
    sf      = { {defs={0x08048430}, expr=0[1]} }
    tf      = { {defs={}, expr=v1382[1]} }
    if      = { {defs={}, expr=v1383[1]} }
    df      = { {defs={}, expr=v1384[1]} }
    of      = { {defs={0x08048430}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1386[1]} }
    iopl1   = { {defs={}, expr=v1387[1]} }
    nt      = { {defs={}, expr=v1388[1]} }
    ?15     = { {defs={}, expr=v1389[1]} }
    rf      = { {defs={}, expr=v1390[1]} }
    vm      = { {defs={}, expr=v1391[1]} }
    ac      = { {defs={}, expr=v1392[1]} }
    vif     = { {defs={}, expr=v1393[1]} }
    vip     = { {defs={}, expr=v1394[1]} }
    id      = { {defs={}, expr=v1395[1]} }
    ?22     = { {defs={}, expr=v1396[1]} }
    ?23     = { {defs={}, expr=v1397[1]} }
    ?24     = { {defs={}, expr=v1398[1]} }
    ?25     = { {defs={}, expr=v1399[1]} }
    ?26     = { {defs={}, expr=v1400[1]} }
    ?27     = { {defs={}, expr=v1401[1]} }
    ?28     = { {defs={}, expr=v1402[1]} }
    ?29     = { {defs={}, expr=v1403[1]} }
    ?30     = { {defs={}, expr=v1404[1]} }
    ?31     = { {defs={}, expr=v1405[1]} }
    ip      = { {defs={0x08048432}, expr=0x08048433[32]} }
memory:
    addr={defs={0x08048432}, expr=(add[32] v1365[32] 3[32])} value={defs={0x08048432}, expr=(extract[8] 24[32] 32[32] v1407[32])}
    addr={defs={0x08048432}, expr=(add[32] v1365[32] 2[32])} value={defs={0x08048432}, expr=(extract[8] 16[32] 24[32] v1407[32])}
    addr={defs={0x08048432}, expr=(add[32] v1365[32] 1[32])} value={defs={0x08048432}, expr=(extract[8] 8[32] 16[32] v1407[32])}
    addr={defs={}, expr=v1365[32]} value={defs={0x08048432}, expr=(extract[8] 0[32] 8[32] v1407[32])}
0x8048433:ret    
registers:
    ax      = { {defs={0x08048430}, expr=0[32]} }
    cx      = { {defs={}, expr=v1361[32]} }
    dx      = { {defs={}, expr=v1362[32]} }
    bx      = { {defs={}, expr=v1363[32]} }
    sp      = { {defs={0x08048432,0x08048433}, expr=(add[32] (add[32] v1365[32] 4[32]) 4[32])} }
    bp      = { {defs={0x08048432}, expr=v1407[32]} }
    si      = { {defs={}, expr=v1366[32]} }
    di      = { {defs={}, expr=v1367[32]} }
    es      = { {defs={}, expr=v1368[16]} }
    cs      = { {defs={}, expr=v1369[16]} }
    ss      = { {defs={}, expr=v1370[16]} }
    ds      = { {defs={}, expr=v1371[16]} }
    fs      = { {defs={}, expr=v1372[16]} }
    gs      = { {defs={}, expr=v1373[16]} }
    cf      = { {defs={0x08048430}, expr=0[1]} }
    ?1      = { {defs={}, expr=v1375[1]} }
    pf      = { {defs={0x08048430}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1377[1]} }
    af      = { {defs={}, expr=v1406[1]} }
    ?5      = { {defs={}, expr=v1379[1]} }
    zf      = { {defs={0x08048430}, expr=1[1]} }
    sf      = { {defs={0x08048430}, expr=0[1]} }
    tf      = { {defs={}, expr=v1382[1]} }
    if      = { {defs={}, expr=v1383[1]} }
    df      = { {defs={}, expr=v1384[1]} }
    of      = { {defs={0x08048430}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1386[1]} }
    iopl1   = { {defs={}, expr=v1387[1]} }
    nt      = { {defs={}, expr=v1388[1]} }
    ?15     = { {defs={}, expr=v1389[1]} }
    rf      = { {defs={}, expr=v1390[1]} }
    vm      = { {defs={}, expr=v1391[1]} }
    ac      = { {defs={}, expr=v1392[1]} }
    vif     = { {defs={}, expr=v1393[1]} }
    vip     = { {defs={}, expr=v1394[1]} }
    id      = { {defs={}, expr=v1395[1]} }
    ?22     = { {defs={}, expr=v1396[1]} }
    ?23     = { {defs={}, expr=v1397[1]} }
    ?24     = { {defs={}, expr=v1398[1]} }
    ?25     = { {defs={}, expr=v1399[1]} }
    ?26     = { {defs={}, expr=v1400[1]} }
    ?27     = { {defs={}, expr=v1401[1]} }
    ?28     = { {defs={}, expr=v1402[1]} }
    ?29     = { {defs={}, expr=v1403[1]} }
    ?30     = { {defs={}, expr=v1404[1]} }
    ?31     = { {defs={}, expr=v1405[1]} }
    ip      = { {defs={0x08048433}, expr=v1412[32]} }
memory:
    addr={defs={0x08048432,0x08048433}, expr=(add[32] (add[32] v1365[32] 4[32]) 3[32])} value={defs={0x08048433}, expr=(extract[8] 24[32] 32[32] v1412[32])}
    addr={defs={0x08048432,0x08048433}, expr=(add[32] (add[32] v1365[32] 4[32]) 2[32])} value={defs={0x08048433}, expr=(extract[8] 16[32] 24[32] v1412[32])}
    addr={defs={0x08048432,0x08048433}, expr=(add[32] (add[32] v1365[32] 4[32]) 1[32])} value={defs={0x08048433}, expr=(extract[8] 8[32] 16[32] v1412[32])}
    addr={defs={0x08048432}, expr=(add[32] v1365[32] 4[32])} value={defs={0x08048433}, expr=(extract[8] 0[32] 8[32] v1412[32])}
    addr={defs={0x08048432}, expr=(add[32] v1365[32] 3[32])} value={defs={0x08048432}, expr=(extract[8] 24[32] 32[32] v1407[32])}
    addr={defs={0x08048432}, expr=(add[32] v1365[32] 2[32])} value={defs={0x08048432}, expr=(extract[8] 16[32] 24[32] v1407[32])}
    addr={defs={0x08048432}, expr=(add[32] v1365[32] 1[32])} value={defs={0x08048432}, expr=(extract[8] 8[32] 16[32] v1407[32])}
    addr={defs={}, expr=v1365[32]} value={defs={0x08048432}, expr=(extract[8] 0[32] 8[32] v1407[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
registers:
    ax      = { {defs={}, expr=v1419[32]} }
    cx      = { {defs={}, expr=v1420[32]} }
    dx      = { {defs={}, expr=v1421[32]} }
    bx      = { {defs={}, expr=v1422[32]} }
    sp      = { {defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} }
    bp      = { {defs={}, expr=v1424[32]} }
    si      = { {defs={}, expr=v1425[32]} }
    di      = { {defs={}, expr=v1426[32]} }
    es      = { {defs={}, expr=v1427[16]} }
    cs      = { {defs={}, expr=v1428[16]} }
    ss      = { {defs={}, expr=v1429[16]} }
    ds      = { {defs={}, expr=v1430[16]} }
    fs      = { {defs={}, expr=v1431[16]} }
    gs      = { {defs={}, expr=v1432[16]} }
    cf      = { {defs={}, expr=v1433[1]} }
    ?1      = { {defs={}, expr=v1434[1]} }
    pf      = { {defs={}, expr=v1435[1]} }
    ?3      = { {defs={}, expr=v1436[1]} }
    af      = { {defs={}, expr=v1437[1]} }
    ?5      = { {defs={}, expr=v1438[1]} }
    zf      = { {defs={}, expr=v1439[1]} }
    sf      = { {defs={}, expr=v1440[1]} }
    tf      = { {defs={}, expr=v1441[1]} }
    if      = { {defs={}, expr=v1442[1]} }
    df      = { {defs={}, expr=v1443[1]} }
    of      = { {defs={}, expr=v1444[1]} }
    iopl0   = { {defs={}, expr=v1445[1]} }
    iopl1   = { {defs={}, expr=v1446[1]} }
    nt      = { {defs={}, expr=v1447[1]} }
    ?15     = { {defs={}, expr=v1448[1]} }
    rf      = { {defs={}, expr=v1449[1]} }
    vm      = { {defs={}, expr=v1450[1]} }
    ac      = { {defs={}, expr=v1451[1]} }
    vif     = { {defs={}, expr=v1452[1]} }
    vip     = { {defs={}, expr=v1453[1]} }
    id      = { {defs={}, expr=v1454[1]} }
    ?22     = { {defs={}, expr=v1455[1]} }
    ?23     = { {defs={}, expr=v1456[1]} }
    ?24     = { {defs={}, expr=v1457[1]} }
    ?25     = { {defs={}, expr=v1458[1]} }
    ?26     = { {defs={}, expr=v1459[1]} }
    ?27     = { {defs={}, expr=v1460[1]} }
    ?28     = { {defs={}, expr=v1461[1]} }
    ?29     = { {defs={}, expr=v1462[1]} }
    ?30     = { {defs={}, expr=v1463[1]} }
    ?31     = { {defs={}, expr=v1464[1]} }
    ip      = { {defs={0x08048440}, expr=0x08048441[32]} }
memory:
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v1424[32])}
0x8048441:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v1419[32]} }
    cx      = { {defs={}, expr=v1420[32]} }
    dx      = { {defs={}, expr=v1421[32]} }
    bx      = { {defs={}, expr=v1422[32]} }
    sp      = { {defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} }
    bp      = { {defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} }
    si      = { {defs={}, expr=v1425[32]} }
    di      = { {defs={}, expr=v1426[32]} }
    es      = { {defs={}, expr=v1427[16]} }
    cs      = { {defs={}, expr=v1428[16]} }
    ss      = { {defs={}, expr=v1429[16]} }
    ds      = { {defs={}, expr=v1430[16]} }
    fs      = { {defs={}, expr=v1431[16]} }
    gs      = { {defs={}, expr=v1432[16]} }
    cf      = { {defs={}, expr=v1433[1]} }
    ?1      = { {defs={}, expr=v1434[1]} }
    pf      = { {defs={}, expr=v1435[1]} }
    ?3      = { {defs={}, expr=v1436[1]} }
    af      = { {defs={}, expr=v1437[1]} }
    ?5      = { {defs={}, expr=v1438[1]} }
    zf      = { {defs={}, expr=v1439[1]} }
    sf      = { {defs={}, expr=v1440[1]} }
    tf      = { {defs={}, expr=v1441[1]} }
    if      = { {defs={}, expr=v1442[1]} }
    df      = { {defs={}, expr=v1443[1]} }
    of      = { {defs={}, expr=v1444[1]} }
    iopl0   = { {defs={}, expr=v1445[1]} }
    iopl1   = { {defs={}, expr=v1446[1]} }
    nt      = { {defs={}, expr=v1447[1]} }
    ?15     = { {defs={}, expr=v1448[1]} }
    rf      = { {defs={}, expr=v1449[1]} }
    vm      = { {defs={}, expr=v1450[1]} }
    ac      = { {defs={}, expr=v1451[1]} }
    vif     = { {defs={}, expr=v1452[1]} }
    vip     = { {defs={}, expr=v1453[1]} }
    id      = { {defs={}, expr=v1454[1]} }
    ?22     = { {defs={}, expr=v1455[1]} }
    ?23     = { {defs={}, expr=v1456[1]} }
    ?24     = { {defs={}, expr=v1457[1]} }
    ?25     = { {defs={}, expr=v1458[1]} }
    ?26     = { {defs={}, expr=v1459[1]} }
    ?27     = { {defs={}, expr=v1460[1]} }
    ?28     = { {defs={}, expr=v1461[1]} }
    ?29     = { {defs={}, expr=v1462[1]} }
    ?30     = { {defs={}, expr=v1463[1]} }
    ?31     = { {defs={}, expr=v1464[1]} }
    ip      = { {defs={0x08048441}, expr=0x08048443[32]} }
memory:
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v1424[32])}
0x8048443:sub    esp, 0x08
registers:
    ax      = { {defs={}, expr=v1419[32]} }
    cx      = { {defs={}, expr=v1420[32]} }
    dx      = { {defs={}, expr=v1421[32]} }
    bx      = { {defs={}, expr=v1422[32]} }
    sp      = { {defs={0x08048440,0x08048443}, expr=(add[32] (add[32] v1423[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} }
    si      = { {defs={}, expr=v1425[32]} }
    di      = { {defs={}, expr=v1426[32]} }
    es      = { {defs={}, expr=v1427[16]} }
    cs      = { {defs={}, expr=v1428[16]} }
    ss      = { {defs={}, expr=v1429[16]} }
    ds      = { {defs={}, expr=v1430[16]} }
    fs      = { {defs={}, expr=v1431[16]} }
    gs      = { {defs={}, expr=v1432[16]} }
    cf      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1434[1]} }
    pf      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1436[1]} }
    af      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1438[1]} }
    zf      = { {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] (add[32] v1423[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1441[1]} }
    if      = { {defs={}, expr=v1442[1]} }
    df      = { {defs={}, expr=v1443[1]} }
    of      = { {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1445[1]} }
    iopl1   = { {defs={}, expr=v1446[1]} }
    nt      = { {defs={}, expr=v1447[1]} }
    ?15     = { {defs={}, expr=v1448[1]} }
    rf      = { {defs={}, expr=v1449[1]} }
    vm      = { {defs={}, expr=v1450[1]} }
    ac      = { {defs={}, expr=v1451[1]} }
    vif     = { {defs={}, expr=v1452[1]} }
    vip     = { {defs={}, expr=v1453[1]} }
    id      = { {defs={}, expr=v1454[1]} }
    ?22     = { {defs={}, expr=v1455[1]} }
    ?23     = { {defs={}, expr=v1456[1]} }
    ?24     = { {defs={}, expr=v1457[1]} }
    ?25     = { {defs={}, expr=v1458[1]} }
    ?26     = { {defs={}, expr=v1459[1]} }
    ?27     = { {defs={}, expr=v1460[1]} }
    ?28     = { {defs={}, expr=v1461[1]} }
    ?29     = { {defs={}, expr=v1462[1]} }
    ?30     = { {defs={}, expr=v1463[1]} }
    ?31     = { {defs={}, expr=v1464[1]} }
    ip      = { {defs={0x08048443}, expr=0x08048446[32]} }
memory:
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v1424[32])}
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { {defs={}, expr=v1419[32]} }
    cx      = { {defs={}, expr=v1420[32]} }
    dx      = { {defs={}, expr=v1421[32]} }
    bx      = { {defs={}, expr=v1422[32]} }
    sp      = { {defs={0x08048440,0x08048443}, expr=(add[32] (add[32] v1423[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} }
    si      = { {defs={}, expr=v1425[32]} }
    di      = { {defs={}, expr=v1426[32]} }
    es      = { {defs={}, expr=v1427[16]} }
    cs      = { {defs={}, expr=v1428[16]} }
    ss      = { {defs={}, expr=v1429[16]} }
    ds      = { {defs={}, expr=v1430[16]} }
    fs      = { {defs={}, expr=v1431[16]} }
    gs      = { {defs={}, expr=v1432[16]} }
    cf      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1434[1]} }
    pf      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1436[1]} }
    af      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1438[1]} }
    zf      = { {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] (add[32] v1423[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1441[1]} }
    if      = { {defs={}, expr=v1442[1]} }
    df      = { {defs={}, expr=v1443[1]} }
    of      = { {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1445[1]} }
    iopl1   = { {defs={}, expr=v1446[1]} }
    nt      = { {defs={}, expr=v1447[1]} }
    ?15     = { {defs={}, expr=v1448[1]} }
    rf      = { {defs={}, expr=v1449[1]} }
    vm      = { {defs={}, expr=v1450[1]} }
    ac      = { {defs={}, expr=v1451[1]} }
    vif     = { {defs={}, expr=v1452[1]} }
    vip     = { {defs={}, expr=v1453[1]} }
    id      = { {defs={}, expr=v1454[1]} }
    ?22     = { {defs={}, expr=v1455[1]} }
    ?23     = { {defs={}, expr=v1456[1]} }
    ?24     = { {defs={}, expr=v1457[1]} }
    ?25     = { {defs={}, expr=v1458[1]} }
    ?26     = { {defs={}, expr=v1459[1]} }
    ?27     = { {defs={}, expr=v1460[1]} }
    ?28     = { {defs={}, expr=v1461[1]} }
    ?29     = { {defs={}, expr=v1462[1]} }
    ?30     = { {defs={}, expr=v1463[1]} }
    ?31     = { {defs={}, expr=v1464[1]} }
    ip      = { {defs={0x08048446}, expr=0x0804844d[32]} }
memory:
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) 3[32])} value={defs={0x08048446}, expr=8[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) 2[32])} value={defs={0x08048446}, expr=4[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) 1[32])} value={defs={0x08048446}, expr=-123[8]}
    addr={defs={0x08048440,0x08048443}, expr=(add[32] (add[32] v1423[32] -4[32]) -8[32])} value={defs={0x08048446}, expr=-44[8]}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v1424[32])}
0x804844d:call   0x08048300<puts@plt>
registers:
    ax      = { {defs={}, expr=v1419[32]} }
    cx      = { {defs={}, expr=v1420[32]} }
    dx      = { {defs={}, expr=v1421[32]} }
    bx      = { {defs={}, expr=v1422[32]} }
    sp      = { {defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) -4[32])} }
    bp      = { {defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} }
    si      = { {defs={}, expr=v1425[32]} }
    di      = { {defs={}, expr=v1426[32]} }
    es      = { {defs={}, expr=v1427[16]} }
    cs      = { {defs={}, expr=v1428[16]} }
    ss      = { {defs={}, expr=v1429[16]} }
    ds      = { {defs={}, expr=v1430[16]} }
    fs      = { {defs={}, expr=v1431[16]} }
    gs      = { {defs={}, expr=v1432[16]} }
    cf      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1434[1]} }
    pf      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1423[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1436[1]} }
    af      = { {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1438[1]} }
    zf      = { {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] (add[32] v1423[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1441[1]} }
    if      = { {defs={}, expr=v1442[1]} }
    df      = { {defs={}, expr=v1443[1]} }
    of      = { {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1423[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1445[1]} }
    iopl1   = { {defs={}, expr=v1446[1]} }
    nt      = { {defs={}, expr=v1447[1]} }
    ?15     = { {defs={}, expr=v1448[1]} }
    rf      = { {defs={}, expr=v1449[1]} }
    vm      = { {defs={}, expr=v1450[1]} }
    ac      = { {defs={}, expr=v1451[1]} }
    vif     = { {defs={}, expr=v1452[1]} }
    vip     = { {defs={}, expr=v1453[1]} }
    id      = { {defs={}, expr=v1454[1]} }
    ?22     = { {defs={}, expr=v1455[1]} }
    ?23     = { {defs={}, expr=v1456[1]} }
    ?24     = { {defs={}, expr=v1457[1]} }
    ?25     = { {defs={}, expr=v1458[1]} }
    ?26     = { {defs={}, expr=v1459[1]} }
    ?27     = { {defs={}, expr=v1460[1]} }
    ?28     = { {defs={}, expr=v1461[1]} }
    ?29     = { {defs={}, expr=v1462[1]} }
    ?30     = { {defs={}, expr=v1463[1]} }
    ?31     = { {defs={}, expr=v1464[1]} }
    ip      = { {defs={0x0804844d}, expr=0x08048300[32]} }
memory:
    addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) -4[32]) 3[32])} value={defs={0x0804844d}, expr=8[8]}
    addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) -4[32]) 2[32])} value={defs={0x0804844d}, expr=4[8]}
    addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) -4[32]) 1[32])} value={defs={0x0804844d}, expr=-124[8]}
    addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) -4[32])} value={defs={0x0804844d}, expr=82[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) 3[32])} value={defs={0x08048446}, expr=8[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) 2[32])} value={defs={0x08048446}, expr=4[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v1423[32] -4[32]) -8[32]) 1[32])} value={defs={0x08048446}, expr=-123[8]}
    addr={defs={0x08048440,0x08048443}, expr=(add[32] (add[32] v1423[32] -4[32]) -8[32])} value={defs={0x08048446}, expr=-44[8]}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v1423[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v1424[32])}
    addr={defs={0x08048440}, expr=(add[32] v1423[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v1424[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
registers:
    ax      = { {defs={}, expr=v1467[32]} }
    cx      = { {defs={}, expr=v1468[32]} }
    dx      = { {defs={}, expr=v1469[32]} }
    bx      = { {defs={}, expr=v1470[32]} }
    sp      = { {defs={}, expr=v1472[32]} }
    bp      = { {defs={}, expr=v1472[32]} }
    si      = { {defs={}, expr=v1473[32]} }
    di      = { {defs={}, expr=v1474[32]} }
    es      = { {defs={}, expr=v1475[16]} }
    cs      = { {defs={}, expr=v1476[16]} }
    ss      = { {defs={}, expr=v1477[16]} }
    ds      = { {defs={}, expr=v1478[16]} }
    fs      = { {defs={}, expr=v1479[16]} }
    gs      = { {defs={}, expr=v1480[16]} }
    cf      = { {defs={}, expr=v1481[1]} }
    ?1      = { {defs={}, expr=v1482[1]} }
    pf      = { {defs={}, expr=v1483[1]} }
    ?3      = { {defs={}, expr=v1484[1]} }
    af      = { {defs={}, expr=v1485[1]} }
    ?5      = { {defs={}, expr=v1486[1]} }
    zf      = { {defs={}, expr=v1487[1]} }
    sf      = { {defs={}, expr=v1488[1]} }
    tf      = { {defs={}, expr=v1489[1]} }
    if      = { {defs={}, expr=v1490[1]} }
    df      = { {defs={}, expr=v1491[1]} }
    of      = { {defs={}, expr=v1492[1]} }
    iopl0   = { {defs={}, expr=v1493[1]} }
    iopl1   = { {defs={}, expr=v1494[1]} }
    nt      = { {defs={}, expr=v1495[1]} }
    ?15     = { {defs={}, expr=v1496[1]} }
    rf      = { {defs={}, expr=v1497[1]} }
    vm      = { {defs={}, expr=v1498[1]} }
    ac      = { {defs={}, expr=v1499[1]} }
    vif     = { {defs={}, expr=v1500[1]} }
    vip     = { {defs={}, expr=v1501[1]} }
    id      = { {defs={}, expr=v1502[1]} }
    ?22     = { {defs={}, expr=v1503[1]} }
    ?23     = { {defs={}, expr=v1504[1]} }
    ?24     = { {defs={}, expr=v1505[1]} }
    ?25     = { {defs={}, expr=v1506[1]} }
    ?26     = { {defs={}, expr=v1507[1]} }
    ?27     = { {defs={}, expr=v1508[1]} }
    ?28     = { {defs={}, expr=v1509[1]} }
    ?29     = { {defs={}, expr=v1510[1]} }
    ?30     = { {defs={}, expr=v1511[1]} }
    ?31     = { {defs={}, expr=v1512[1]} }
    ip      = { {defs={0x08048452}, expr=0x08048454[32]} }
memory:
0x8048454:pop    ebp
registers:
    ax      = { {defs={}, expr=v1467[32]} }
    cx      = { {defs={}, expr=v1468[32]} }
    dx      = { {defs={}, expr=v1469[32]} }
    bx      = { {defs={}, expr=v1470[32]} }
    sp      = { {defs={0x08048454}, expr=(add[32] v1472[32] 4[32])} }
    bp      = { {defs={0x08048454}, expr=v1513[32]} }
    si      = { {defs={}, expr=v1473[32]} }
    di      = { {defs={}, expr=v1474[32]} }
    es      = { {defs={}, expr=v1475[16]} }
    cs      = { {defs={}, expr=v1476[16]} }
    ss      = { {defs={}, expr=v1477[16]} }
    ds      = { {defs={}, expr=v1478[16]} }
    fs      = { {defs={}, expr=v1479[16]} }
    gs      = { {defs={}, expr=v1480[16]} }
    cf      = { {defs={}, expr=v1481[1]} }
    ?1      = { {defs={}, expr=v1482[1]} }
    pf      = { {defs={}, expr=v1483[1]} }
    ?3      = { {defs={}, expr=v1484[1]} }
    af      = { {defs={}, expr=v1485[1]} }
    ?5      = { {defs={}, expr=v1486[1]} }
    zf      = { {defs={}, expr=v1487[1]} }
    sf      = { {defs={}, expr=v1488[1]} }
    tf      = { {defs={}, expr=v1489[1]} }
    if      = { {defs={}, expr=v1490[1]} }
    df      = { {defs={}, expr=v1491[1]} }
    of      = { {defs={}, expr=v1492[1]} }
    iopl0   = { {defs={}, expr=v1493[1]} }
    iopl1   = { {defs={}, expr=v1494[1]} }
    nt      = { {defs={}, expr=v1495[1]} }
    ?15     = { {defs={}, expr=v1496[1]} }
    rf      = { {defs={}, expr=v1497[1]} }
    vm      = { {defs={}, expr=v1498[1]} }
    ac      = { {defs={}, expr=v1499[1]} }
    vif     = { {defs={}, expr=v1500[1]} }
    vip     = { {defs={}, expr=v1501[1]} }
    id      = { {defs={}, expr=v1502[1]} }
    ?22     = { {defs={}, expr=v1503[1]} }
    ?23     = { {defs={}, expr=v1504[1]} }
    ?24     = { {defs={}, expr=v1505[1]} }
    ?25     = { {defs={}, expr=v1506[1]} }
    ?26     = { {defs={}, expr=v1507[1]} }
    ?27     = { {defs={}, expr=v1508[1]} }
    ?28     = { {defs={}, expr=v1509[1]} }
    ?29     = { {defs={}, expr=v1510[1]} }
    ?30     = { {defs={}, expr=v1511[1]} }
    ?31     = { {defs={}, expr=v1512[1]} }
    ip      = { {defs={0x08048454}, expr=0x08048455[32]} }
memory:
    addr={defs={0x08048454}, expr=(add[32] v1472[32] 3[32])} value={defs={0x08048454}, expr=(extract[8] 24[32] 32[32] v1513[32])}
    addr={defs={0x08048454}, expr=(add[32] v1472[32] 2[32])} value={defs={0x08048454}, expr=(extract[8] 16[32] 24[32] v1513[32])}
    addr={defs={0x08048454}, expr=(add[32] v1472[32] 1[32])} value={defs={0x08048454}, expr=(extract[8] 8[32] 16[32] v1513[32])}
    addr={defs={}, expr=v1472[32]} value={defs={0x08048454}, expr=(extract[8] 0[32] 8[32] v1513[32])}
0x8048455:ret    
registers:
    ax      = { {defs={}, expr=v1467[32]} }
    cx      = { {defs={}, expr=v1468[32]} }
    dx      = { {defs={}, expr=v1469[32]} }
    bx      = { {defs={}, expr=v1470[32]} }
    sp      = { {defs={0x08048454,0x08048455}, expr=(add[32] (add[32] v1472[32] 4[32]) 4[32])} }
    bp      = { {defs={0x08048454}, expr=v1513[32]} }
    si      = { {defs={}, expr=v1473[32]} }
    di      = { {defs={}, expr=v1474[32]} }
    es      = { {defs={}, expr=v1475[16]} }
    cs      = { {defs={}, expr=v1476[16]} }
    ss      = { {defs={}, expr=v1477[16]} }
    ds      = { {defs={}, expr=v1478[16]} }
    fs      = { {defs={}, expr=v1479[16]} }
    gs      = { {defs={}, expr=v1480[16]} }
    cf      = { {defs={}, expr=v1481[1]} }
    ?1      = { {defs={}, expr=v1482[1]} }
    pf      = { {defs={}, expr=v1483[1]} }
    ?3      = { {defs={}, expr=v1484[1]} }
    af      = { {defs={}, expr=v1485[1]} }
    ?5      = { {defs={}, expr=v1486[1]} }
    zf      = { {defs={}, expr=v1487[1]} }
    sf      = { {defs={}, expr=v1488[1]} }
    tf      = { {defs={}, expr=v1489[1]} }
    if      = { {defs={}, expr=v1490[1]} }
    df      = { {defs={}, expr=v1491[1]} }
    of      = { {defs={}, expr=v1492[1]} }
    iopl0   = { {defs={}, expr=v1493[1]} }
    iopl1   = { {defs={}, expr=v1494[1]} }
    nt      = { {defs={}, expr=v1495[1]} }
    ?15     = { {defs={}, expr=v1496[1]} }
    rf      = { {defs={}, expr=v1497[1]} }
    vm      = { {defs={}, expr=v1498[1]} }
    ac      = { {defs={}, expr=v1499[1]} }
    vif     = { {defs={}, expr=v1500[1]} }
    vip     = { {defs={}, expr=v1501[1]} }
    id      = { {defs={}, expr=v1502[1]} }
    ?22     = { {defs={}, expr=v1503[1]} }
    ?23     = { {defs={}, expr=v1504[1]} }
    ?24     = { {defs={}, expr=v1505[1]} }
    ?25     = { {defs={}, expr=v1506[1]} }
    ?26     = { {defs={}, expr=v1507[1]} }
    ?27     = { {defs={}, expr=v1508[1]} }
    ?28     = { {defs={}, expr=v1509[1]} }
    ?29     = { {defs={}, expr=v1510[1]} }
    ?30     = { {defs={}, expr=v1511[1]} }
    ?31     = { {defs={}, expr=v1512[1]} }
    ip      = { {defs={0x08048455}, expr=v1518[32]} }
memory:
    addr={defs={0x08048454,0x08048455}, expr=(add[32] (add[32] v1472[32] 4[32]) 3[32])} value={defs={0x08048455}, expr=(extract[8] 24[32] 32[32] v1518[32])}
    addr={defs={0x08048454,0x08048455}, expr=(add[32] (add[32] v1472[32] 4[32]) 2[32])} value={defs={0x08048455}, expr=(extract[8] 16[32] 24[32] v1518[32])}
    addr={defs={0x08048454,0x08048455}, expr=(add[32] (add[32] v1472[32] 4[32]) 1[32])} value={defs={0x08048455}, expr=(extract[8] 8[32] 16[32] v1518[32])}
    addr={defs={0x08048454}, expr=(add[32] v1472[32] 4[32])} value={defs={0x08048455}, expr=(extract[8] 0[32] 8[32] v1518[32])}
    addr={defs={0x08048454}, expr=(add[32] v1472[32] 3[32])} value={defs={0x08048454}, expr=(extract[8] 24[32] 32[32] v1513[32])}
    addr={defs={0x08048454}, expr=(add[32] v1472[32] 2[32])} value={defs={0x08048454}, expr=(extract[8] 16[32] 24[32] v1513[32])}
    addr={defs={0x08048454}, expr=(add[32] v1472[32] 1[32])} value={defs={0x08048454}, expr=(extract[8] 8[32] 16[32] v1513[32])}
    addr={defs={}, expr=v1472[32]} value={defs={0x08048454}, expr=(extract[8] 0[32] 8[32] v1513[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
registers:
    ax      = { {defs={}, expr=v1525[32]} }
    cx      = { {defs={}, expr=v1526[32]} }
    dx      = { {defs={}, expr=v1527[32]} }
    bx      = { {defs={}, expr=v1528[32]} }
    sp      = { {defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} }
    bp      = { {defs={}, expr=v1530[32]} }
    si      = { {defs={}, expr=v1531[32]} }
    di      = { {defs={}, expr=v1532[32]} }
    es      = { {defs={}, expr=v1533[16]} }
    cs      = { {defs={}, expr=v1534[16]} }
    ss      = { {defs={}, expr=v1535[16]} }
    ds      = { {defs={}, expr=v1536[16]} }
    fs      = { {defs={}, expr=v1537[16]} }
    gs      = { {defs={}, expr=v1538[16]} }
    cf      = { {defs={}, expr=v1539[1]} }
    ?1      = { {defs={}, expr=v1540[1]} }
    pf      = { {defs={}, expr=v1541[1]} }
    ?3      = { {defs={}, expr=v1542[1]} }
    af      = { {defs={}, expr=v1543[1]} }
    ?5      = { {defs={}, expr=v1544[1]} }
    zf      = { {defs={}, expr=v1545[1]} }
    sf      = { {defs={}, expr=v1546[1]} }
    tf      = { {defs={}, expr=v1547[1]} }
    if      = { {defs={}, expr=v1548[1]} }
    df      = { {defs={}, expr=v1549[1]} }
    of      = { {defs={}, expr=v1550[1]} }
    iopl0   = { {defs={}, expr=v1551[1]} }
    iopl1   = { {defs={}, expr=v1552[1]} }
    nt      = { {defs={}, expr=v1553[1]} }
    ?15     = { {defs={}, expr=v1554[1]} }
    rf      = { {defs={}, expr=v1555[1]} }
    vm      = { {defs={}, expr=v1556[1]} }
    ac      = { {defs={}, expr=v1557[1]} }
    vif     = { {defs={}, expr=v1558[1]} }
    vip     = { {defs={}, expr=v1559[1]} }
    id      = { {defs={}, expr=v1560[1]} }
    ?22     = { {defs={}, expr=v1561[1]} }
    ?23     = { {defs={}, expr=v1562[1]} }
    ?24     = { {defs={}, expr=v1563[1]} }
    ?25     = { {defs={}, expr=v1564[1]} }
    ?26     = { {defs={}, expr=v1565[1]} }
    ?27     = { {defs={}, expr=v1566[1]} }
    ?28     = { {defs={}, expr=v1567[1]} }
    ?29     = { {defs={}, expr=v1568[1]} }
    ?30     = { {defs={}, expr=v1569[1]} }
    ?31     = { {defs={}, expr=v1570[1]} }
    ip      = { {defs={0x08048460}, expr=0x08048461[32]} }
memory:
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v1530[32])}
0x8048461:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v1525[32]} }
    cx      = { {defs={}, expr=v1526[32]} }
    dx      = { {defs={}, expr=v1527[32]} }
    bx      = { {defs={}, expr=v1528[32]} }
    sp      = { {defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} }
    bp      = { {defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} }
    si      = { {defs={}, expr=v1531[32]} }
    di      = { {defs={}, expr=v1532[32]} }
    es      = { {defs={}, expr=v1533[16]} }
    cs      = { {defs={}, expr=v1534[16]} }
    ss      = { {defs={}, expr=v1535[16]} }
    ds      = { {defs={}, expr=v1536[16]} }
    fs      = { {defs={}, expr=v1537[16]} }
    gs      = { {defs={}, expr=v1538[16]} }
    cf      = { {defs={}, expr=v1539[1]} }
    ?1      = { {defs={}, expr=v1540[1]} }
    pf      = { {defs={}, expr=v1541[1]} }
    ?3      = { {defs={}, expr=v1542[1]} }
    af      = { {defs={}, expr=v1543[1]} }
    ?5      = { {defs={}, expr=v1544[1]} }
    zf      = { {defs={}, expr=v1545[1]} }
    sf      = { {defs={}, expr=v1546[1]} }
    tf      = { {defs={}, expr=v1547[1]} }
    if      = { {defs={}, expr=v1548[1]} }
    df      = { {defs={}, expr=v1549[1]} }
    of      = { {defs={}, expr=v1550[1]} }
    iopl0   = { {defs={}, expr=v1551[1]} }
    iopl1   = { {defs={}, expr=v1552[1]} }
    nt      = { {defs={}, expr=v1553[1]} }
    ?15     = { {defs={}, expr=v1554[1]} }
    rf      = { {defs={}, expr=v1555[1]} }
    vm      = { {defs={}, expr=v1556[1]} }
    ac      = { {defs={}, expr=v1557[1]} }
    vif     = { {defs={}, expr=v1558[1]} }
    vip     = { {defs={}, expr=v1559[1]} }
    id      = { {defs={}, expr=v1560[1]} }
    ?22     = { {defs={}, expr=v1561[1]} }
    ?23     = { {defs={}, expr=v1562[1]} }
    ?24     = { {defs={}, expr=v1563[1]} }
    ?25     = { {defs={}, expr=v1564[1]} }
    ?26     = { {defs={}, expr=v1565[1]} }
    ?27     = { {defs={}, expr=v1566[1]} }
    ?28     = { {defs={}, expr=v1567[1]} }
    ?29     = { {defs={}, expr=v1568[1]} }
    ?30     = { {defs={}, expr=v1569[1]} }
    ?31     = { {defs={}, expr=v1570[1]} }
    ip      = { {defs={0x08048461}, expr=0x08048463[32]} }
memory:
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v1530[32])}
0x8048463:sub    esp, 0x08
registers:
    ax      = { {defs={}, expr=v1525[32]} }
    cx      = { {defs={}, expr=v1526[32]} }
    dx      = { {defs={}, expr=v1527[32]} }
    bx      = { {defs={}, expr=v1528[32]} }
    sp      = { {defs={0x08048460,0x08048463}, expr=(add[32] (add[32] v1529[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} }
    si      = { {defs={}, expr=v1531[32]} }
    di      = { {defs={}, expr=v1532[32]} }
    es      = { {defs={}, expr=v1533[16]} }
    cs      = { {defs={}, expr=v1534[16]} }
    ss      = { {defs={}, expr=v1535[16]} }
    ds      = { {defs={}, expr=v1536[16]} }
    fs      = { {defs={}, expr=v1537[16]} }
    gs      = { {defs={}, expr=v1538[16]} }
    cf      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1540[1]} }
    pf      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1542[1]} }
    af      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1544[1]} }
    zf      = { {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] (add[32] v1529[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1547[1]} }
    if      = { {defs={}, expr=v1548[1]} }
    df      = { {defs={}, expr=v1549[1]} }
    of      = { {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1551[1]} }
    iopl1   = { {defs={}, expr=v1552[1]} }
    nt      = { {defs={}, expr=v1553[1]} }
    ?15     = { {defs={}, expr=v1554[1]} }
    rf      = { {defs={}, expr=v1555[1]} }
    vm      = { {defs={}, expr=v1556[1]} }
    ac      = { {defs={}, expr=v1557[1]} }
    vif     = { {defs={}, expr=v1558[1]} }
    vip     = { {defs={}, expr=v1559[1]} }
    id      = { {defs={}, expr=v1560[1]} }
    ?22     = { {defs={}, expr=v1561[1]} }
    ?23     = { {defs={}, expr=v1562[1]} }
    ?24     = { {defs={}, expr=v1563[1]} }
    ?25     = { {defs={}, expr=v1564[1]} }
    ?26     = { {defs={}, expr=v1565[1]} }
    ?27     = { {defs={}, expr=v1566[1]} }
    ?28     = { {defs={}, expr=v1567[1]} }
    ?29     = { {defs={}, expr=v1568[1]} }
    ?30     = { {defs={}, expr=v1569[1]} }
    ?31     = { {defs={}, expr=v1570[1]} }
    ip      = { {defs={0x08048463}, expr=0x08048466[32]} }
memory:
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v1530[32])}
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { {defs={}, expr=v1525[32]} }
    cx      = { {defs={}, expr=v1526[32]} }
    dx      = { {defs={}, expr=v1527[32]} }
    bx      = { {defs={}, expr=v1528[32]} }
    sp      = { {defs={0x08048460,0x08048463}, expr=(add[32] (add[32] v1529[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} }
    si      = { {defs={}, expr=v1531[32]} }
    di      = { {defs={}, expr=v1532[32]} }
    es      = { {defs={}, expr=v1533[16]} }
    cs      = { {defs={}, expr=v1534[16]} }
    ss      = { {defs={}, expr=v1535[16]} }
    ds      = { {defs={}, expr=v1536[16]} }
    fs      = { {defs={}, expr=v1537[16]} }
    gs      = { {defs={}, expr=v1538[16]} }
    cf      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1540[1]} }
    pf      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1542[1]} }
    af      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1544[1]} }
    zf      = { {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] (add[32] v1529[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1547[1]} }
    if      = { {defs={}, expr=v1548[1]} }
    df      = { {defs={}, expr=v1549[1]} }
    of      = { {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1551[1]} }
    iopl1   = { {defs={}, expr=v1552[1]} }
    nt      = { {defs={}, expr=v1553[1]} }
    ?15     = { {defs={}, expr=v1554[1]} }
    rf      = { {defs={}, expr=v1555[1]} }
    vm      = { {defs={}, expr=v1556[1]} }
    ac      = { {defs={}, expr=v1557[1]} }
    vif     = { {defs={}, expr=v1558[1]} }
    vip     = { {defs={}, expr=v1559[1]} }
    id      = { {defs={}, expr=v1560[1]} }
    ?22     = { {defs={}, expr=v1561[1]} }
    ?23     = { {defs={}, expr=v1562[1]} }
    ?24     = { {defs={}, expr=v1563[1]} }
    ?25     = { {defs={}, expr=v1564[1]} }
    ?26     = { {defs={}, expr=v1565[1]} }
    ?27     = { {defs={}, expr=v1566[1]} }
    ?28     = { {defs={}, expr=v1567[1]} }
    ?29     = { {defs={}, expr=v1568[1]} }
    ?30     = { {defs={}, expr=v1569[1]} }
    ?31     = { {defs={}, expr=v1570[1]} }
    ip      = { {defs={0x08048466}, expr=0x0804846d[32]} }
memory:
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) 3[32])} value={defs={0x08048466}, expr=8[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) 2[32])} value={defs={0x08048466}, expr=4[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) 1[32])} value={defs={0x08048466}, expr=-123[8]}
    addr={defs={0x08048460,0x08048463}, expr=(add[32] (add[32] v1529[32] -4[32]) -8[32])} value={defs={0x08048466}, expr=-44[8]}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v1530[32])}
0x804846d:call   0x08048300<puts@plt>
registers:
    ax      = { {defs={}, expr=v1525[32]} }
    cx      = { {defs={}, expr=v1526[32]} }
    dx      = { {defs={}, expr=v1527[32]} }
    bx      = { {defs={}, expr=v1528[32]} }
    sp      = { {defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) -4[32])} }
    bp      = { {defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} }
    si      = { {defs={}, expr=v1531[32]} }
    di      = { {defs={}, expr=v1532[32]} }
    es      = { {defs={}, expr=v1533[16]} }
    cs      = { {defs={}, expr=v1534[16]} }
    ss      = { {defs={}, expr=v1535[16]} }
    ds      = { {defs={}, expr=v1536[16]} }
    fs      = { {defs={}, expr=v1537[16]} }
    gs      = { {defs={}, expr=v1538[16]} }
    cf      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1540[1]} }
    pf      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1529[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1542[1]} }
    af      = { {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1544[1]} }
    zf      = { {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] (add[32] v1529[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1547[1]} }
    if      = { {defs={}, expr=v1548[1]} }
    df      = { {defs={}, expr=v1549[1]} }
    of      = { {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1529[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1551[1]} }
    iopl1   = { {defs={}, expr=v1552[1]} }
    nt      = { {defs={}, expr=v1553[1]} }
    ?15     = { {defs={}, expr=v1554[1]} }
    rf      = { {defs={}, expr=v1555[1]} }
    vm      = { {defs={}, expr=v1556[1]} }
    ac      = { {defs={}, expr=v1557[1]} }
    vif     = { {defs={}, expr=v1558[1]} }
    vip     = { {defs={}, expr=v1559[1]} }
    id      = { {defs={}, expr=v1560[1]} }
    ?22     = { {defs={}, expr=v1561[1]} }
    ?23     = { {defs={}, expr=v1562[1]} }
    ?24     = { {defs={}, expr=v1563[1]} }
    ?25     = { {defs={}, expr=v1564[1]} }
    ?26     = { {defs={}, expr=v1565[1]} }
    ?27     = { {defs={}, expr=v1566[1]} }
    ?28     = { {defs={}, expr=v1567[1]} }
    ?29     = { {defs={}, expr=v1568[1]} }
    ?30     = { {defs={}, expr=v1569[1]} }
    ?31     = { {defs={}, expr=v1570[1]} }
    ip      = { {defs={0x0804846d}, expr=0x08048300[32]} }
memory:
    addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) -4[32]) 3[32])} value={defs={0x0804846d}, expr=8[8]}
    addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) -4[32]) 2[32])} value={defs={0x0804846d}, expr=4[8]}
    addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) -4[32]) 1[32])} value={defs={0x0804846d}, expr=-124[8]}
    addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) -4[32])} value={defs={0x0804846d}, expr=114[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) 3[32])} value={defs={0x08048466}, expr=8[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) 2[32])} value={defs={0x08048466}, expr=4[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v1529[32] -4[32]) -8[32]) 1[32])} value={defs={0x08048466}, expr=-123[8]}
    addr={defs={0x08048460,0x08048463}, expr=(add[32] (add[32] v1529[32] -4[32]) -8[32])} value={defs={0x08048466}, expr=-44[8]}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v1529[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v1530[32])}
    addr={defs={0x08048460}, expr=(add[32] v1529[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v1530[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
registers:
    ax      = { {defs={}, expr=v1573[32]} }
    cx      = { {defs={}, expr=v1574[32]} }
    dx      = { {defs={}, expr=v1575[32]} }
    bx      = { {defs={}, expr=v1576[32]} }
    sp      = { {defs={}, expr=v1577[32]} }
    bp      = { {defs={}, expr=v1578[32]} }
    si      = { {defs={}, expr=v1579[32]} }
    di      = { {defs={}, expr=v1580[32]} }
    es      = { {defs={}, expr=v1581[16]} }
    cs      = { {defs={}, expr=v1582[16]} }
    ss      = { {defs={}, expr=v1583[16]} }
    ds      = { {defs={}, expr=v1584[16]} }
    fs      = { {defs={}, expr=v1585[16]} }
    gs      = { {defs={}, expr=v1586[16]} }
    cf      = { {defs={}, expr=v1587[1]} }
    ?1      = { {defs={}, expr=v1588[1]} }
    pf      = { {defs={}, expr=v1589[1]} }
    ?3      = { {defs={}, expr=v1590[1]} }
    af      = { {defs={}, expr=v1591[1]} }
    ?5      = { {defs={}, expr=v1592[1]} }
    zf      = { {defs={}, expr=v1593[1]} }
    sf      = { {defs={}, expr=v1594[1]} }
    tf      = { {defs={}, expr=v1595[1]} }
    if      = { {defs={}, expr=v1596[1]} }
    df      = { {defs={}, expr=v1597[1]} }
    of      = { {defs={}, expr=v1598[1]} }
    iopl0   = { {defs={}, expr=v1599[1]} }
    iopl1   = { {defs={}, expr=v1600[1]} }
    nt      = { {defs={}, expr=v1601[1]} }
    ?15     = { {defs={}, expr=v1602[1]} }
    rf      = { {defs={}, expr=v1603[1]} }
    vm      = { {defs={}, expr=v1604[1]} }
    ac      = { {defs={}, expr=v1605[1]} }
    vif     = { {defs={}, expr=v1606[1]} }
    vip     = { {defs={}, expr=v1607[1]} }
    id      = { {defs={}, expr=v1608[1]} }
    ?22     = { {defs={}, expr=v1609[1]} }
    ?23     = { {defs={}, expr=v1610[1]} }
    ?24     = { {defs={}, expr=v1611[1]} }
    ?25     = { {defs={}, expr=v1612[1]} }
    ?26     = { {defs={}, expr=v1613[1]} }
    ?27     = { {defs={}, expr=v1614[1]} }
    ?28     = { {defs={}, expr=v1615[1]} }
    ?29     = { {defs={}, expr=v1616[1]} }
    ?30     = { {defs={}, expr=v1617[1]} }
    ?31     = { {defs={}, expr=v1618[1]} }
    ip      = { {defs={0x08048472}, expr=0x08048479[32]} }
memory:
    addr={defs={0x08048472}, expr=(add[32] v1577[32] 3[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={0x08048472}, expr=(add[32] v1577[32] 2[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={0x08048472}, expr=(add[32] v1577[32] 1[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={}, expr=v1577[32]} value={defs={0x08048472}, expr=0[8]}
0x8048479:call   0x08048320<_exit@plt>
registers:
    ax      = { {defs={}, expr=v1573[32]} }
    cx      = { {defs={}, expr=v1574[32]} }
    dx      = { {defs={}, expr=v1575[32]} }
    bx      = { {defs={}, expr=v1576[32]} }
    sp      = { {defs={0x08048479}, expr=(add[32] v1577[32] -4[32])} }
    bp      = { {defs={}, expr=v1578[32]} }
    si      = { {defs={}, expr=v1579[32]} }
    di      = { {defs={}, expr=v1580[32]} }
    es      = { {defs={}, expr=v1581[16]} }
    cs      = { {defs={}, expr=v1582[16]} }
    ss      = { {defs={}, expr=v1583[16]} }
    ds      = { {defs={}, expr=v1584[16]} }
    fs      = { {defs={}, expr=v1585[16]} }
    gs      = { {defs={}, expr=v1586[16]} }
    cf      = { {defs={}, expr=v1587[1]} }
    ?1      = { {defs={}, expr=v1588[1]} }
    pf      = { {defs={}, expr=v1589[1]} }
    ?3      = { {defs={}, expr=v1590[1]} }
    af      = { {defs={}, expr=v1591[1]} }
    ?5      = { {defs={}, expr=v1592[1]} }
    zf      = { {defs={}, expr=v1593[1]} }
    sf      = { {defs={}, expr=v1594[1]} }
    tf      = { {defs={}, expr=v1595[1]} }
    if      = { {defs={}, expr=v1596[1]} }
    df      = { {defs={}, expr=v1597[1]} }
    of      = { {defs={}, expr=v1598[1]} }
    iopl0   = { {defs={}, expr=v1599[1]} }
    iopl1   = { {defs={}, expr=v1600[1]} }
    nt      = { {defs={}, expr=v1601[1]} }
    ?15     = { {defs={}, expr=v1602[1]} }
    rf      = { {defs={}, expr=v1603[1]} }
    vm      = { {defs={}, expr=v1604[1]} }
    ac      = { {defs={}, expr=v1605[1]} }
    vif     = { {defs={}, expr=v1606[1]} }
    vip     = { {defs={}, expr=v1607[1]} }
    id      = { {defs={}, expr=v1608[1]} }
    ?22     = { {defs={}, expr=v1609[1]} }
    ?23     = { {defs={}, expr=v1610[1]} }
    ?24     = { {defs={}, expr=v1611[1]} }
    ?25     = { {defs={}, expr=v1612[1]} }
    ?26     = { {defs={}, expr=v1613[1]} }
    ?27     = { {defs={}, expr=v1614[1]} }
    ?28     = { {defs={}, expr=v1615[1]} }
    ?29     = { {defs={}, expr=v1616[1]} }
    ?30     = { {defs={}, expr=v1617[1]} }
    ?31     = { {defs={}, expr=v1618[1]} }
    ip      = { {defs={0x08048479}, expr=0x08048320[32]} }
memory:
    addr={defs={0x08048479}, expr=(add[32] (add[32] v1577[32] -4[32]) 3[32])} value={defs={0x08048479}, expr=8[8]}
    addr={defs={0x08048479}, expr=(add[32] (add[32] v1577[32] -4[32]) 2[32])} value={defs={0x08048479}, expr=4[8]}
    addr={defs={0x08048479}, expr=(add[32] (add[32] v1577[32] -4[32]) 1[32])} value={defs={0x08048479}, expr=-124[8]}
    addr={defs={0x08048479}, expr=(add[32] v1577[32] -4[32])} value={defs={0x08048479}, expr=126[8]}
    addr={defs={0x08048472}, expr=(add[32] v1577[32] 3[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={0x08048472}, expr=(add[32] v1577[32] 2[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={0x08048472}, expr=(add[32] v1577[32] 1[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={}, expr=v1577[32]} value={defs={0x08048472}, expr=0[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
registers:
    ax      = { {defs={}, expr=v1621[32]} }
    cx      = { {defs={}, expr=v1622[32]} }
    dx      = { {defs={}, expr=v1623[32]} }
    bx      = { {defs={}, expr=v1624[32]} }
    sp      = { {defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} }
    bp      = { {defs={}, expr=v1626[32]} }
    si      = { {defs={}, expr=v1627[32]} }
    di      = { {defs={}, expr=v1628[32]} }
    es      = { {defs={}, expr=v1629[16]} }
    cs      = { {defs={}, expr=v1630[16]} }
    ss      = { {defs={}, expr=v1631[16]} }
    ds      = { {defs={}, expr=v1632[16]} }
    fs      = { {defs={}, expr=v1633[16]} }
    gs      = { {defs={}, expr=v1634[16]} }
    cf      = { {defs={}, expr=v1635[1]} }
    ?1      = { {defs={}, expr=v1636[1]} }
    pf      = { {defs={}, expr=v1637[1]} }
    ?3      = { {defs={}, expr=v1638[1]} }
    af      = { {defs={}, expr=v1639[1]} }
    ?5      = { {defs={}, expr=v1640[1]} }
    zf      = { {defs={}, expr=v1641[1]} }
    sf      = { {defs={}, expr=v1642[1]} }
    tf      = { {defs={}, expr=v1643[1]} }
    if      = { {defs={}, expr=v1644[1]} }
    df      = { {defs={}, expr=v1645[1]} }
    of      = { {defs={}, expr=v1646[1]} }
    iopl0   = { {defs={}, expr=v1647[1]} }
    iopl1   = { {defs={}, expr=v1648[1]} }
    nt      = { {defs={}, expr=v1649[1]} }
    ?15     = { {defs={}, expr=v1650[1]} }
    rf      = { {defs={}, expr=v1651[1]} }
    vm      = { {defs={}, expr=v1652[1]} }
    ac      = { {defs={}, expr=v1653[1]} }
    vif     = { {defs={}, expr=v1654[1]} }
    vip     = { {defs={}, expr=v1655[1]} }
    id      = { {defs={}, expr=v1656[1]} }
    ?22     = { {defs={}, expr=v1657[1]} }
    ?23     = { {defs={}, expr=v1658[1]} }
    ?24     = { {defs={}, expr=v1659[1]} }
    ?25     = { {defs={}, expr=v1660[1]} }
    ?26     = { {defs={}, expr=v1661[1]} }
    ?27     = { {defs={}, expr=v1662[1]} }
    ?28     = { {defs={}, expr=v1663[1]} }
    ?29     = { {defs={}, expr=v1664[1]} }
    ?30     = { {defs={}, expr=v1665[1]} }
    ?31     = { {defs={}, expr=v1666[1]} }
    ip      = { {defs={0x08048480}, expr=0x08048481[32]} }
memory:
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v1626[32])}
0x8048481:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v1621[32]} }
    cx      = { {defs={}, expr=v1622[32]} }
    dx      = { {defs={}, expr=v1623[32]} }
    bx      = { {defs={}, expr=v1624[32]} }
    sp      = { {defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} }
    bp      = { {defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} }
    si      = { {defs={}, expr=v1627[32]} }
    di      = { {defs={}, expr=v1628[32]} }
    es      = { {defs={}, expr=v1629[16]} }
    cs      = { {defs={}, expr=v1630[16]} }
    ss      = { {defs={}, expr=v1631[16]} }
    ds      = { {defs={}, expr=v1632[16]} }
    fs      = { {defs={}, expr=v1633[16]} }
    gs      = { {defs={}, expr=v1634[16]} }
    cf      = { {defs={}, expr=v1635[1]} }
    ?1      = { {defs={}, expr=v1636[1]} }
    pf      = { {defs={}, expr=v1637[1]} }
    ?3      = { {defs={}, expr=v1638[1]} }
    af      = { {defs={}, expr=v1639[1]} }
    ?5      = { {defs={}, expr=v1640[1]} }
    zf      = { {defs={}, expr=v1641[1]} }
    sf      = { {defs={}, expr=v1642[1]} }
    tf      = { {defs={}, expr=v1643[1]} }
    if      = { {defs={}, expr=v1644[1]} }
    df      = { {defs={}, expr=v1645[1]} }
    of      = { {defs={}, expr=v1646[1]} }
    iopl0   = { {defs={}, expr=v1647[1]} }
    iopl1   = { {defs={}, expr=v1648[1]} }
    nt      = { {defs={}, expr=v1649[1]} }
    ?15     = { {defs={}, expr=v1650[1]} }
    rf      = { {defs={}, expr=v1651[1]} }
    vm      = { {defs={}, expr=v1652[1]} }
    ac      = { {defs={}, expr=v1653[1]} }
    vif     = { {defs={}, expr=v1654[1]} }
    vip     = { {defs={}, expr=v1655[1]} }
    id      = { {defs={}, expr=v1656[1]} }
    ?22     = { {defs={}, expr=v1657[1]} }
    ?23     = { {defs={}, expr=v1658[1]} }
    ?24     = { {defs={}, expr=v1659[1]} }
    ?25     = { {defs={}, expr=v1660[1]} }
    ?26     = { {defs={}, expr=v1661[1]} }
    ?27     = { {defs={}, expr=v1662[1]} }
    ?28     = { {defs={}, expr=v1663[1]} }
    ?29     = { {defs={}, expr=v1664[1]} }
    ?30     = { {defs={}, expr=v1665[1]} }
    ?31     = { {defs={}, expr=v1666[1]} }
    ip      = { {defs={0x08048481}, expr=0x08048483[32]} }
memory:
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v1626[32])}
0x8048483:sub    esp, 0x08
registers:
    ax      = { {defs={}, expr=v1621[32]} }
    cx      = { {defs={}, expr=v1622[32]} }
    dx      = { {defs={}, expr=v1623[32]} }
    bx      = { {defs={}, expr=v1624[32]} }
    sp      = { {defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v1625[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} }
    si      = { {defs={}, expr=v1627[32]} }
    di      = { {defs={}, expr=v1628[32]} }
    es      = { {defs={}, expr=v1629[16]} }
    cs      = { {defs={}, expr=v1630[16]} }
    ss      = { {defs={}, expr=v1631[16]} }
    ds      = { {defs={}, expr=v1632[16]} }
    fs      = { {defs={}, expr=v1633[16]} }
    gs      = { {defs={}, expr=v1634[16]} }
    cf      = { {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1636[1]} }
    pf      = { {defs={0x08048480,0x08048483}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1625[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1625[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1625[32] -4[32]) -8[32])))))))} }
    ?3      = { {defs={}, expr=v1638[1]} }
    af      = { {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) 4294967288[33]))))))} }
    ?5      = { {defs={}, expr=v1640[1]} }
    zf      = { {defs={0x08048480,0x08048483}, expr=(zerop[1] (add[32] (add[32] v1625[32] -4[32]) -8[32]))} }
    sf      = { {defs={0x08048480,0x08048483}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]))} }
    tf      = { {defs={}, expr=v1643[1]} }
    if      = { {defs={}, expr=v1644[1]} }
    df      = { {defs={}, expr=v1645[1]} }
    of      = { {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) 4294967288[33]))))))} }
    iopl0   = { {defs={}, expr=v1647[1]} }
    iopl1   = { {defs={}, expr=v1648[1]} }
    nt      = { {defs={}, expr=v1649[1]} }
    ?15     = { {defs={}, expr=v1650[1]} }
    rf      = { {defs={}, expr=v1651[1]} }
    vm      = { {defs={}, expr=v1652[1]} }
    ac      = { {defs={}, expr=v1653[1]} }
    vif     = { {defs={}, expr=v1654[1]} }
    vip     = { {defs={}, expr=v1655[1]} }
    id      = { {defs={}, expr=v1656[1]} }
    ?22     = { {defs={}, expr=v1657[1]} }
    ?23     = { {defs={}, expr=v1658[1]} }
    ?24     = { {defs={}, expr=v1659[1]} }
    ?25     = { {defs={}, expr=v1660[1]} }
    ?26     = { {defs={}, expr=v1661[1]} }
    ?27     = { {defs={}, expr=v1662[1]} }
    ?28     = { {defs={}, expr=v1663[1]} }
    ?29     = { {defs={}, expr=v1664[1]} }
    ?30     = { {defs={}, expr=v1665[1]} }
    ?31     = { {defs={}, expr=v1666[1]} }
    ip      = { {defs={0x08048483}, expr=0x08048486[32]} }
memory:
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v1626[32])}
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
registers:
    ax      = { {defs={}, expr=v1621[32]} }
    cx      = { {defs={}, expr=v1622[32]} }
    dx      = { {defs={}, expr=v1623[32]} }
    bx      = { {defs={}, expr=v1624[32]} }
    sp      = { {defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v1625[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} }
    si      = { {defs={}, expr=v1627[32]} }
    di      = { {defs={}, expr=v1628[32]} }
    es      = { {defs={}, expr=v1629[16]} }
    cs      = { {defs={}, expr=v1630[16]} }
    ss      = { {defs={}, expr=v1631[16]} }
    ds      = { {defs={}, expr=v1632[16]} }
    fs      = { {defs={}, expr=v1633[16]} }
    gs      = { {defs={}, expr=v1634[16]} }
    cf      = { {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1636[1]} }
    pf      = { {defs={0x08048480,0x08048486}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))))))} }
    ?3      = { {defs={}, expr=v1638[1]} }
    af      = { {defs={0x08048480,0x08048486}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33])))))} }
    ?5      = { {defs={}, expr=v1640[1]} }
    zf      = { {defs={0x08048480,0x08048486}, expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))} }
    sf      = { {defs={0x08048480,0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))} }
    tf      = { {defs={}, expr=v1643[1]} }
    if      = { {defs={}, expr=v1644[1]} }
    df      = { {defs={}, expr=v1645[1]} }
    of      = { {defs={0x08048480,0x08048486}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33]))))))} }
    iopl0   = { {defs={}, expr=v1647[1]} }
    iopl1   = { {defs={}, expr=v1648[1]} }
    nt      = { {defs={}, expr=v1649[1]} }
    ?15     = { {defs={}, expr=v1650[1]} }
    rf      = { {defs={}, expr=v1651[1]} }
    vm      = { {defs={}, expr=v1652[1]} }
    ac      = { {defs={}, expr=v1653[1]} }
    vif     = { {defs={}, expr=v1654[1]} }
    vip     = { {defs={}, expr=v1655[1]} }
    id      = { {defs={}, expr=v1656[1]} }
    ?22     = { {defs={}, expr=v1657[1]} }
    ?23     = { {defs={}, expr=v1658[1]} }
    ?24     = { {defs={}, expr=v1659[1]} }
    ?25     = { {defs={}, expr=v1660[1]} }
    ?26     = { {defs={}, expr=v1661[1]} }
    ?27     = { {defs={}, expr=v1662[1]} }
    ?28     = { {defs={}, expr=v1663[1]} }
    ?29     = { {defs={}, expr=v1664[1]} }
    ?30     = { {defs={}, expr=v1665[1]} }
    ?31     = { {defs={}, expr=v1666[1]} }
    ip      = { {defs={0x08048486}, expr=0x0804848c[32]} }
memory:
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] v1667[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v1626[32])}
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { {defs={}, expr=v1621[32]} }
    cx      = { {defs={}, expr=v1622[32]} }
    dx      = { {defs={}, expr=v1623[32]} }
    bx      = { {defs={}, expr=v1624[32]} }
    sp      = { {defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v1625[32] -4[32]) -8[32])} }
    bp      = { {defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} }
    si      = { {defs={}, expr=v1627[32]} }
    di      = { {defs={}, expr=v1628[32]} }
    es      = { {defs={}, expr=v1629[16]} }
    cs      = { {defs={}, expr=v1630[16]} }
    ss      = { {defs={}, expr=v1631[16]} }
    ds      = { {defs={}, expr=v1632[16]} }
    fs      = { {defs={}, expr=v1633[16]} }
    gs      = { {defs={}, expr=v1634[16]} }
    cf      = { {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1636[1]} }
    pf      = { {defs={0x08048480,0x08048486}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))))))} }
    ?3      = { {defs={}, expr=v1638[1]} }
    af      = { {defs={0x08048480,0x08048486}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33])))))} }
    ?5      = { {defs={}, expr=v1640[1]} }
    zf      = { {defs={0x08048480,0x08048486}, expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))} }
    sf      = { {defs={0x08048480,0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))} }
    tf      = { {defs={}, expr=v1643[1]} }
    if      = { {defs={}, expr=v1644[1]} }
    df      = { {defs={}, expr=v1645[1]} }
    of      = { {defs={0x08048480,0x08048486}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33]))))))} }
    iopl0   = { {defs={}, expr=v1647[1]} }
    iopl1   = { {defs={}, expr=v1648[1]} }
    nt      = { {defs={}, expr=v1649[1]} }
    ?15     = { {defs={}, expr=v1650[1]} }
    rf      = { {defs={}, expr=v1651[1]} }
    vm      = { {defs={}, expr=v1652[1]} }
    ac      = { {defs={}, expr=v1653[1]} }
    vif     = { {defs={}, expr=v1654[1]} }
    vip     = { {defs={}, expr=v1655[1]} }
    id      = { {defs={}, expr=v1656[1]} }
    ?22     = { {defs={}, expr=v1657[1]} }
    ?23     = { {defs={}, expr=v1658[1]} }
    ?24     = { {defs={}, expr=v1659[1]} }
    ?25     = { {defs={}, expr=v1660[1]} }
    ?26     = { {defs={}, expr=v1661[1]} }
    ?27     = { {defs={}, expr=v1662[1]} }
    ?28     = { {defs={}, expr=v1663[1]} }
    ?29     = { {defs={}, expr=v1664[1]} }
    ?30     = { {defs={}, expr=v1665[1]} }
    ?31     = { {defs={}, expr=v1666[1]} }
    ip      = { {defs={0x0804848c}, expr=0x08048493[32]} }
memory:
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) 3[32])} value={defs={0x0804848c}, expr=8[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) 2[32])} value={defs={0x0804848c}, expr=4[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) 1[32])} value={defs={0x0804848c}, expr=-123[8]}
    addr={defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v1625[32] -4[32]) -8[32])} value={defs={0x0804848c}, expr=-44[8]}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] v1667[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v1626[32])}
0x8048493:call   0x08048300<puts@plt>
registers:
    ax      = { {defs={}, expr=v1621[32]} }
    cx      = { {defs={}, expr=v1622[32]} }
    dx      = { {defs={}, expr=v1623[32]} }
    bx      = { {defs={}, expr=v1624[32]} }
    sp      = { {defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) -4[32])} }
    bp      = { {defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} }
    si      = { {defs={}, expr=v1627[32]} }
    di      = { {defs={}, expr=v1628[32]} }
    es      = { {defs={}, expr=v1629[16]} }
    cs      = { {defs={}, expr=v1630[16]} }
    ss      = { {defs={}, expr=v1631[16]} }
    ds      = { {defs={}, expr=v1632[16]} }
    fs      = { {defs={}, expr=v1633[16]} }
    gs      = { {defs={}, expr=v1634[16]} }
    cf      = { {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1625[32] -4[32])) 4294967288[33]))))))} }
    ?1      = { {defs={}, expr=v1636[1]} }
    pf      = { {defs={0x08048480,0x08048486}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32])))))))} }
    ?3      = { {defs={}, expr=v1638[1]} }
    af      = { {defs={0x08048480,0x08048486}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33])))))} }
    ?5      = { {defs={}, expr=v1640[1]} }
    zf      = { {defs={0x08048480,0x08048486}, expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))} }
    sf      = { {defs={0x08048480,0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))} }
    tf      = { {defs={}, expr=v1643[1]} }
    if      = { {defs={}, expr=v1644[1]} }
    df      = { {defs={}, expr=v1645[1]} }
    of      = { {defs={0x08048480,0x08048486}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32]))))) 1[33]))))))} }
    iopl0   = { {defs={}, expr=v1647[1]} }
    iopl1   = { {defs={}, expr=v1648[1]} }
    nt      = { {defs={}, expr=v1649[1]} }
    ?15     = { {defs={}, expr=v1650[1]} }
    rf      = { {defs={}, expr=v1651[1]} }
    vm      = { {defs={}, expr=v1652[1]} }
    ac      = { {defs={}, expr=v1653[1]} }
    vif     = { {defs={}, expr=v1654[1]} }
    vip     = { {defs={}, expr=v1655[1]} }
    id      = { {defs={}, expr=v1656[1]} }
    ?22     = { {defs={}, expr=v1657[1]} }
    ?23     = { {defs={}, expr=v1658[1]} }
    ?24     = { {defs={}, expr=v1659[1]} }
    ?25     = { {defs={}, expr=v1660[1]} }
    ?26     = { {defs={}, expr=v1661[1]} }
    ?27     = { {defs={}, expr=v1662[1]} }
    ?28     = { {defs={}, expr=v1663[1]} }
    ?29     = { {defs={}, expr=v1664[1]} }
    ?30     = { {defs={}, expr=v1665[1]} }
    ?31     = { {defs={}, expr=v1666[1]} }
    ip      = { {defs={0x08048493}, expr=0x08048300[32]} }
memory:
    addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) -4[32]) 3[32])} value={defs={0x08048493}, expr=8[8]}
    addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) -4[32]) 2[32])} value={defs={0x08048493}, expr=4[8]}
    addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) -4[32]) 1[32])} value={defs={0x08048493}, expr=-124[8]}
    addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) -4[32])} value={defs={0x08048493}, expr=-104[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) 3[32])} value={defs={0x0804848c}, expr=8[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) 2[32])} value={defs={0x0804848c}, expr=4[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v1625[32] -4[32]) -8[32]) 1[32])} value={defs={0x0804848c}, expr=-123[8]}
    addr={defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v1625[32] -4[32]) -8[32])} value={defs={0x0804848c}, expr=-44[8]}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048480,0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1669[8] 0x080496f8[32] (extract[8] 0[32] 8[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1671[8] 0x080496f9[32] (extract[8] 8[32] 16[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496f9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1673[8] 0x080496fa[32] (extract[8] 16[32] 24[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fa[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1675[8] 0x080496fb[32] (extract[8] 24[32] 32[32] v1667[32])) (add[32] v1625[32] -4[32]) (extract[8] 0[32] 8[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1626[32])) (add[32] (add[32] v1625[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1626[32])) 0x080496fb[32])))) 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] v1667[32])}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] v1667[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v1625[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v1626[32])}
    addr={defs={0x08048480}, expr=(add[32] v1625[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v1626[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
registers:
    ax      = { {defs={}, expr=v1678[32]} }
    cx      = { {defs={}, expr=v1679[32]} }
    dx      = { {defs={}, expr=v1680[32]} }
    bx      = { {defs={}, expr=v1681[32]} }
    sp      = { {defs={}, expr=v1682[32]} }
    bp      = { {defs={}, expr=v1683[32]} }
    si      = { {defs={}, expr=v1684[32]} }
    di      = { {defs={}, expr=v1685[32]} }
    es      = { {defs={}, expr=v1686[16]} }
    cs      = { {defs={}, expr=v1687[16]} }
    ss      = { {defs={}, expr=v1688[16]} }
    ds      = { {defs={}, expr=v1689[16]} }
    fs      = { {defs={}, expr=v1690[16]} }
    gs      = { {defs={}, expr=v1691[16]} }
    cf      = { {defs={}, expr=v1692[1]} }
    ?1      = { {defs={}, expr=v1693[1]} }
    pf      = { {defs={}, expr=v1694[1]} }
    ?3      = { {defs={}, expr=v1695[1]} }
    af      = { {defs={}, expr=v1696[1]} }
    ?5      = { {defs={}, expr=v1697[1]} }
    zf      = { {defs={}, expr=v1698[1]} }
    sf      = { {defs={}, expr=v1699[1]} }
    tf      = { {defs={}, expr=v1700[1]} }
    if      = { {defs={}, expr=v1701[1]} }
    df      = { {defs={}, expr=v1702[1]} }
    of      = { {defs={}, expr=v1703[1]} }
    iopl0   = { {defs={}, expr=v1704[1]} }
    iopl1   = { {defs={}, expr=v1705[1]} }
    nt      = { {defs={}, expr=v1706[1]} }
    ?15     = { {defs={}, expr=v1707[1]} }
    rf      = { {defs={}, expr=v1708[1]} }
    vm      = { {defs={}, expr=v1709[1]} }
    ac      = { {defs={}, expr=v1710[1]} }
    vif     = { {defs={}, expr=v1711[1]} }
    vip     = { {defs={}, expr=v1712[1]} }
    id      = { {defs={}, expr=v1713[1]} }
    ?22     = { {defs={}, expr=v1714[1]} }
    ?23     = { {defs={}, expr=v1715[1]} }
    ?24     = { {defs={}, expr=v1716[1]} }
    ?25     = { {defs={}, expr=v1717[1]} }
    ?26     = { {defs={}, expr=v1718[1]} }
    ?27     = { {defs={}, expr=v1719[1]} }
    ?28     = { {defs={}, expr=v1720[1]} }
    ?29     = { {defs={}, expr=v1721[1]} }
    ?30     = { {defs={}, expr=v1722[1]} }
    ?31     = { {defs={}, expr=v1723[1]} }
    ip      = { {defs={0x08048498}, expr=0x0804849f[32]} }
memory:
    addr={defs={0x08048498}, expr=(add[32] v1682[32] 3[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={0x08048498}, expr=(add[32] v1682[32] 2[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={0x08048498}, expr=(add[32] v1682[32] 1[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={}, expr=v1682[32]} value={defs={0x08048498}, expr=0[8]}
0x804849f:call   0x08048320<_exit@plt>
registers:
    ax      = { {defs={}, expr=v1678[32]} }
    cx      = { {defs={}, expr=v1679[32]} }
    dx      = { {defs={}, expr=v1680[32]} }
    bx      = { {defs={}, expr=v1681[32]} }
    sp      = { {defs={0x0804849f}, expr=(add[32] v1682[32] -4[32])} }
    bp      = { {defs={}, expr=v1683[32]} }
    si      = { {defs={}, expr=v1684[32]} }
    di      = { {defs={}, expr=v1685[32]} }
    es      = { {defs={}, expr=v1686[16]} }
    cs      = { {defs={}, expr=v1687[16]} }
    ss      = { {defs={}, expr=v1688[16]} }
    ds      = { {defs={}, expr=v1689[16]} }
    fs      = { {defs={}, expr=v1690[16]} }
    gs      = { {defs={}, expr=v1691[16]} }
    cf      = { {defs={}, expr=v1692[1]} }
    ?1      = { {defs={}, expr=v1693[1]} }
    pf      = { {defs={}, expr=v1694[1]} }
    ?3      = { {defs={}, expr=v1695[1]} }
    af      = { {defs={}, expr=v1696[1]} }
    ?5      = { {defs={}, expr=v1697[1]} }
    zf      = { {defs={}, expr=v1698[1]} }
    sf      = { {defs={}, expr=v1699[1]} }
    tf      = { {defs={}, expr=v1700[1]} }
    if      = { {defs={}, expr=v1701[1]} }
    df      = { {defs={}, expr=v1702[1]} }
    of      = { {defs={}, expr=v1703[1]} }
    iopl0   = { {defs={}, expr=v1704[1]} }
    iopl1   = { {defs={}, expr=v1705[1]} }
    nt      = { {defs={}, expr=v1706[1]} }
    ?15     = { {defs={}, expr=v1707[1]} }
    rf      = { {defs={}, expr=v1708[1]} }
    vm      = { {defs={}, expr=v1709[1]} }
    ac      = { {defs={}, expr=v1710[1]} }
    vif     = { {defs={}, expr=v1711[1]} }
    vip     = { {defs={}, expr=v1712[1]} }
    id      = { {defs={}, expr=v1713[1]} }
    ?22     = { {defs={}, expr=v1714[1]} }
    ?23     = { {defs={}, expr=v1715[1]} }
    ?24     = { {defs={}, expr=v1716[1]} }
    ?25     = { {defs={}, expr=v1717[1]} }
    ?26     = { {defs={}, expr=v1718[1]} }
    ?27     = { {defs={}, expr=v1719[1]} }
    ?28     = { {defs={}, expr=v1720[1]} }
    ?29     = { {defs={}, expr=v1721[1]} }
    ?30     = { {defs={}, expr=v1722[1]} }
    ?31     = { {defs={}, expr=v1723[1]} }
    ip      = { {defs={0x0804849f}, expr=0x08048320[32]} }
memory:
    addr={defs={0x0804849f}, expr=(add[32] (add[32] v1682[32] -4[32]) 3[32])} value={defs={0x0804849f}, expr=8[8]}
    addr={defs={0x0804849f}, expr=(add[32] (add[32] v1682[32] -4[32]) 2[32])} value={defs={0x0804849f}, expr=4[8]}
    addr={defs={0x0804849f}, expr=(add[32] (add[32] v1682[32] -4[32]) 1[32])} value={defs={0x0804849f}, expr=-124[8]}
    addr={defs={0x0804849f}, expr=(add[32] v1682[32] -4[32])} value={defs={0x0804849f}, expr=-92[8]}
    addr={defs={0x08048498}, expr=(add[32] v1682[32] 3[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={0x08048498}, expr=(add[32] v1682[32] 2[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={0x08048498}, expr=(add[32] v1682[32] 1[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={}, expr=v1682[32]} value={defs={0x08048498}, expr=0[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
registers:
    ax      = { {defs={}, expr=v1726[32]} }
    cx      = { {defs={}, expr=v1727[32]} }
    dx      = { {defs={}, expr=v1728[32]} }
    bx      = { {defs={}, expr=v1729[32]} }
    sp      = { {defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} }
    bp      = { {defs={}, expr=v1731[32]} }
    si      = { {defs={}, expr=v1732[32]} }
    di      = { {defs={}, expr=v1733[32]} }
    es      = { {defs={}, expr=v1734[16]} }
    cs      = { {defs={}, expr=v1735[16]} }
    ss      = { {defs={}, expr=v1736[16]} }
    ds      = { {defs={}, expr=v1737[16]} }
    fs      = { {defs={}, expr=v1738[16]} }
    gs      = { {defs={}, expr=v1739[16]} }
    cf      = { {defs={}, expr=v1740[1]} }
    ?1      = { {defs={}, expr=v1741[1]} }
    pf      = { {defs={}, expr=v1742[1]} }
    ?3      = { {defs={}, expr=v1743[1]} }
    af      = { {defs={}, expr=v1744[1]} }
    ?5      = { {defs={}, expr=v1745[1]} }
    zf      = { {defs={}, expr=v1746[1]} }
    sf      = { {defs={}, expr=v1747[1]} }
    tf      = { {defs={}, expr=v1748[1]} }
    if      = { {defs={}, expr=v1749[1]} }
    df      = { {defs={}, expr=v1750[1]} }
    of      = { {defs={}, expr=v1751[1]} }
    iopl0   = { {defs={}, expr=v1752[1]} }
    iopl1   = { {defs={}, expr=v1753[1]} }
    nt      = { {defs={}, expr=v1754[1]} }
    ?15     = { {defs={}, expr=v1755[1]} }
    rf      = { {defs={}, expr=v1756[1]} }
    vm      = { {defs={}, expr=v1757[1]} }
    ac      = { {defs={}, expr=v1758[1]} }
    vif     = { {defs={}, expr=v1759[1]} }
    vip     = { {defs={}, expr=v1760[1]} }
    id      = { {defs={}, expr=v1761[1]} }
    ?22     = { {defs={}, expr=v1762[1]} }
    ?23     = { {defs={}, expr=v1763[1]} }
    ?24     = { {defs={}, expr=v1764[1]} }
    ?25     = { {defs={}, expr=v1765[1]} }
    ?26     = { {defs={}, expr=v1766[1]} }
    ?27     = { {defs={}, expr=v1767[1]} }
    ?28     = { {defs={}, expr=v1768[1]} }
    ?29     = { {defs={}, expr=v1769[1]} }
    ?30     = { {defs={}, expr=v1770[1]} }
    ?31     = { {defs={}, expr=v1771[1]} }
    ip      = { {defs={0x080484b0}, expr=0x080484b1[32]} }
memory:
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v1731[32])}
0x80484b1:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v1726[32]} }
    cx      = { {defs={}, expr=v1727[32]} }
    dx      = { {defs={}, expr=v1728[32]} }
    bx      = { {defs={}, expr=v1729[32]} }
    sp      = { {defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} }
    bp      = { {defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} }
    si      = { {defs={}, expr=v1732[32]} }
    di      = { {defs={}, expr=v1733[32]} }
    es      = { {defs={}, expr=v1734[16]} }
    cs      = { {defs={}, expr=v1735[16]} }
    ss      = { {defs={}, expr=v1736[16]} }
    ds      = { {defs={}, expr=v1737[16]} }
    fs      = { {defs={}, expr=v1738[16]} }
    gs      = { {defs={}, expr=v1739[16]} }
    cf      = { {defs={}, expr=v1740[1]} }
    ?1      = { {defs={}, expr=v1741[1]} }
    pf      = { {defs={}, expr=v1742[1]} }
    ?3      = { {defs={}, expr=v1743[1]} }
    af      = { {defs={}, expr=v1744[1]} }
    ?5      = { {defs={}, expr=v1745[1]} }
    zf      = { {defs={}, expr=v1746[1]} }
    sf      = { {defs={}, expr=v1747[1]} }
    tf      = { {defs={}, expr=v1748[1]} }
    if      = { {defs={}, expr=v1749[1]} }
    df      = { {defs={}, expr=v1750[1]} }
    of      = { {defs={}, expr=v1751[1]} }
    iopl0   = { {defs={}, expr=v1752[1]} }
    iopl1   = { {defs={}, expr=v1753[1]} }
    nt      = { {defs={}, expr=v1754[1]} }
    ?15     = { {defs={}, expr=v1755[1]} }
    rf      = { {defs={}, expr=v1756[1]} }
    vm      = { {defs={}, expr=v1757[1]} }
    ac      = { {defs={}, expr=v1758[1]} }
    vif     = { {defs={}, expr=v1759[1]} }
    vip     = { {defs={}, expr=v1760[1]} }
    id      = { {defs={}, expr=v1761[1]} }
    ?22     = { {defs={}, expr=v1762[1]} }
    ?23     = { {defs={}, expr=v1763[1]} }
    ?24     = { {defs={}, expr=v1764[1]} }
    ?25     = { {defs={}, expr=v1765[1]} }
    ?26     = { {defs={}, expr=v1766[1]} }
    ?27     = { {defs={}, expr=v1767[1]} }
    ?28     = { {defs={}, expr=v1768[1]} }
    ?29     = { {defs={}, expr=v1769[1]} }
    ?30     = { {defs={}, expr=v1770[1]} }
    ?31     = { {defs={}, expr=v1771[1]} }
    ip      = { {defs={0x080484b1}, expr=0x080484b3[32]} }
memory:
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v1731[32])}
0x80484b3:push   edi
registers:
    ax      = { {defs={}, expr=v1726[32]} }
    cx      = { {defs={}, expr=v1727[32]} }
    dx      = { {defs={}, expr=v1728[32]} }
    bx      = { {defs={}, expr=v1729[32]} }
    sp      = { {defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v1730[32] -4[32]) -4[32])} }
    bp      = { {defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} }
    si      = { {defs={}, expr=v1732[32]} }
    di      = { {defs={}, expr=v1733[32]} }
    es      = { {defs={}, expr=v1734[16]} }
    cs      = { {defs={}, expr=v1735[16]} }
    ss      = { {defs={}, expr=v1736[16]} }
    ds      = { {defs={}, expr=v1737[16]} }
    fs      = { {defs={}, expr=v1738[16]} }
    gs      = { {defs={}, expr=v1739[16]} }
    cf      = { {defs={}, expr=v1740[1]} }
    ?1      = { {defs={}, expr=v1741[1]} }
    pf      = { {defs={}, expr=v1742[1]} }
    ?3      = { {defs={}, expr=v1743[1]} }
    af      = { {defs={}, expr=v1744[1]} }
    ?5      = { {defs={}, expr=v1745[1]} }
    zf      = { {defs={}, expr=v1746[1]} }
    sf      = { {defs={}, expr=v1747[1]} }
    tf      = { {defs={}, expr=v1748[1]} }
    if      = { {defs={}, expr=v1749[1]} }
    df      = { {defs={}, expr=v1750[1]} }
    of      = { {defs={}, expr=v1751[1]} }
    iopl0   = { {defs={}, expr=v1752[1]} }
    iopl1   = { {defs={}, expr=v1753[1]} }
    nt      = { {defs={}, expr=v1754[1]} }
    ?15     = { {defs={}, expr=v1755[1]} }
    rf      = { {defs={}, expr=v1756[1]} }
    vm      = { {defs={}, expr=v1757[1]} }
    ac      = { {defs={}, expr=v1758[1]} }
    vif     = { {defs={}, expr=v1759[1]} }
    vip     = { {defs={}, expr=v1760[1]} }
    id      = { {defs={}, expr=v1761[1]} }
    ?22     = { {defs={}, expr=v1762[1]} }
    ?23     = { {defs={}, expr=v1763[1]} }
    ?24     = { {defs={}, expr=v1764[1]} }
    ?25     = { {defs={}, expr=v1765[1]} }
    ?26     = { {defs={}, expr=v1766[1]} }
    ?27     = { {defs={}, expr=v1767[1]} }
    ?28     = { {defs={}, expr=v1768[1]} }
    ?29     = { {defs={}, expr=v1769[1]} }
    ?30     = { {defs={}, expr=v1770[1]} }
    ?31     = { {defs={}, expr=v1771[1]} }
    ip      = { {defs={0x080484b3}, expr=0x080484b4[32]} }
memory:
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v1730[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v1733[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v1731[32])}
0x80484b4:push   esi
registers:
    ax      = { {defs={}, expr=v1726[32]} }
    cx      = { {defs={}, expr=v1727[32]} }
    dx      = { {defs={}, expr=v1728[32]} }
    bx      = { {defs={}, expr=v1729[32]} }
    sp      = { {defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} }
    si      = { {defs={}, expr=v1732[32]} }
    di      = { {defs={}, expr=v1733[32]} }
    es      = { {defs={}, expr=v1734[16]} }
    cs      = { {defs={}, expr=v1735[16]} }
    ss      = { {defs={}, expr=v1736[16]} }
    ds      = { {defs={}, expr=v1737[16]} }
    fs      = { {defs={}, expr=v1738[16]} }
    gs      = { {defs={}, expr=v1739[16]} }
    cf      = { {defs={}, expr=v1740[1]} }
    ?1      = { {defs={}, expr=v1741[1]} }
    pf      = { {defs={}, expr=v1742[1]} }
    ?3      = { {defs={}, expr=v1743[1]} }
    af      = { {defs={}, expr=v1744[1]} }
    ?5      = { {defs={}, expr=v1745[1]} }
    zf      = { {defs={}, expr=v1746[1]} }
    sf      = { {defs={}, expr=v1747[1]} }
    tf      = { {defs={}, expr=v1748[1]} }
    if      = { {defs={}, expr=v1749[1]} }
    df      = { {defs={}, expr=v1750[1]} }
    of      = { {defs={}, expr=v1751[1]} }
    iopl0   = { {defs={}, expr=v1752[1]} }
    iopl1   = { {defs={}, expr=v1753[1]} }
    nt      = { {defs={}, expr=v1754[1]} }
    ?15     = { {defs={}, expr=v1755[1]} }
    rf      = { {defs={}, expr=v1756[1]} }
    vm      = { {defs={}, expr=v1757[1]} }
    ac      = { {defs={}, expr=v1758[1]} }
    vif     = { {defs={}, expr=v1759[1]} }
    vip     = { {defs={}, expr=v1760[1]} }
    id      = { {defs={}, expr=v1761[1]} }
    ?22     = { {defs={}, expr=v1762[1]} }
    ?23     = { {defs={}, expr=v1763[1]} }
    ?24     = { {defs={}, expr=v1764[1]} }
    ?25     = { {defs={}, expr=v1765[1]} }
    ?26     = { {defs={}, expr=v1766[1]} }
    ?27     = { {defs={}, expr=v1767[1]} }
    ?28     = { {defs={}, expr=v1768[1]} }
    ?29     = { {defs={}, expr=v1769[1]} }
    ?30     = { {defs={}, expr=v1770[1]} }
    ?31     = { {defs={}, expr=v1771[1]} }
    ip      = { {defs={0x080484b4}, expr=0x080484b5[32]} }
memory:
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b4}, expr=(extract[8] 24[32] 32[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b4}, expr=(extract[8] 16[32] 24[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b4}, expr=(extract[8] 8[32] 16[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32])} value={defs={0x080484b4}, expr=(extract[8] 0[32] 8[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v1730[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v1733[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v1731[32])}
0x80484b5:push   ebx
registers:
    ax      = { {defs={}, expr=v1726[32]} }
    cx      = { {defs={}, expr=v1727[32]} }
    dx      = { {defs={}, expr=v1728[32]} }
    bx      = { {defs={}, expr=v1729[32]} }
    sp      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} }
    si      = { {defs={}, expr=v1732[32]} }
    di      = { {defs={}, expr=v1733[32]} }
    es      = { {defs={}, expr=v1734[16]} }
    cs      = { {defs={}, expr=v1735[16]} }
    ss      = { {defs={}, expr=v1736[16]} }
    ds      = { {defs={}, expr=v1737[16]} }
    fs      = { {defs={}, expr=v1738[16]} }
    gs      = { {defs={}, expr=v1739[16]} }
    cf      = { {defs={}, expr=v1740[1]} }
    ?1      = { {defs={}, expr=v1741[1]} }
    pf      = { {defs={}, expr=v1742[1]} }
    ?3      = { {defs={}, expr=v1743[1]} }
    af      = { {defs={}, expr=v1744[1]} }
    ?5      = { {defs={}, expr=v1745[1]} }
    zf      = { {defs={}, expr=v1746[1]} }
    sf      = { {defs={}, expr=v1747[1]} }
    tf      = { {defs={}, expr=v1748[1]} }
    if      = { {defs={}, expr=v1749[1]} }
    df      = { {defs={}, expr=v1750[1]} }
    of      = { {defs={}, expr=v1751[1]} }
    iopl0   = { {defs={}, expr=v1752[1]} }
    iopl1   = { {defs={}, expr=v1753[1]} }
    nt      = { {defs={}, expr=v1754[1]} }
    ?15     = { {defs={}, expr=v1755[1]} }
    rf      = { {defs={}, expr=v1756[1]} }
    vm      = { {defs={}, expr=v1757[1]} }
    ac      = { {defs={}, expr=v1758[1]} }
    vif     = { {defs={}, expr=v1759[1]} }
    vip     = { {defs={}, expr=v1760[1]} }
    id      = { {defs={}, expr=v1761[1]} }
    ?22     = { {defs={}, expr=v1762[1]} }
    ?23     = { {defs={}, expr=v1763[1]} }
    ?24     = { {defs={}, expr=v1764[1]} }
    ?25     = { {defs={}, expr=v1765[1]} }
    ?26     = { {defs={}, expr=v1766[1]} }
    ?27     = { {defs={}, expr=v1767[1]} }
    ?28     = { {defs={}, expr=v1768[1]} }
    ?29     = { {defs={}, expr=v1769[1]} }
    ?30     = { {defs={}, expr=v1770[1]} }
    ?31     = { {defs={}, expr=v1771[1]} }
    ip      = { {defs={0x080484b5}, expr=0x080484b6[32]} }
memory:
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b5}, expr=(extract[8] 24[32] 32[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b5}, expr=(extract[8] 16[32] 24[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b5}, expr=(extract[8] 8[32] 16[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x080484b5}, expr=(extract[8] 0[32] 8[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b4}, expr=(extract[8] 24[32] 32[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b4}, expr=(extract[8] 16[32] 24[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b4}, expr=(extract[8] 8[32] 16[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32])} value={defs={0x080484b4}, expr=(extract[8] 0[32] 8[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v1730[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v1733[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v1731[32])}
0x80484b6:sub    esp, 0x0c
registers:
    ax      = { {defs={}, expr=v1726[32]} }
    cx      = { {defs={}, expr=v1727[32]} }
    dx      = { {defs={}, expr=v1728[32]} }
    bx      = { {defs={}, expr=v1729[32]} }
    sp      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])} }
    bp      = { {defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} }
    si      = { {defs={}, expr=v1732[32]} }
    di      = { {defs={}, expr=v1733[32]} }
    es      = { {defs={}, expr=v1734[16]} }
    cs      = { {defs={}, expr=v1735[16]} }
    ss      = { {defs={}, expr=v1736[16]} }
    ds      = { {defs={}, expr=v1737[16]} }
    fs      = { {defs={}, expr=v1738[16]} }
    gs      = { {defs={}, expr=v1739[16]} }
    cf      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    ?1      = { {defs={}, expr=v1741[1]} }
    pf      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))} }
    ?3      = { {defs={}, expr=v1743[1]} }
    af      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    ?5      = { {defs={}, expr=v1745[1]} }
    zf      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))} }
    sf      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))} }
    tf      = { {defs={}, expr=v1748[1]} }
    if      = { {defs={}, expr=v1749[1]} }
    df      = { {defs={}, expr=v1750[1]} }
    of      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    iopl0   = { {defs={}, expr=v1752[1]} }
    iopl1   = { {defs={}, expr=v1753[1]} }
    nt      = { {defs={}, expr=v1754[1]} }
    ?15     = { {defs={}, expr=v1755[1]} }
    rf      = { {defs={}, expr=v1756[1]} }
    vm      = { {defs={}, expr=v1757[1]} }
    ac      = { {defs={}, expr=v1758[1]} }
    vif     = { {defs={}, expr=v1759[1]} }
    vip     = { {defs={}, expr=v1760[1]} }
    id      = { {defs={}, expr=v1761[1]} }
    ?22     = { {defs={}, expr=v1762[1]} }
    ?23     = { {defs={}, expr=v1763[1]} }
    ?24     = { {defs={}, expr=v1764[1]} }
    ?25     = { {defs={}, expr=v1765[1]} }
    ?26     = { {defs={}, expr=v1766[1]} }
    ?27     = { {defs={}, expr=v1767[1]} }
    ?28     = { {defs={}, expr=v1768[1]} }
    ?29     = { {defs={}, expr=v1769[1]} }
    ?30     = { {defs={}, expr=v1770[1]} }
    ?31     = { {defs={}, expr=v1771[1]} }
    ip      = { {defs={0x080484b6}, expr=0x080484b9[32]} }
memory:
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b5}, expr=(extract[8] 24[32] 32[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b5}, expr=(extract[8] 16[32] 24[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b5}, expr=(extract[8] 8[32] 16[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x080484b5}, expr=(extract[8] 0[32] 8[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b4}, expr=(extract[8] 24[32] 32[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b4}, expr=(extract[8] 16[32] 24[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b4}, expr=(extract[8] 8[32] 16[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32])} value={defs={0x080484b4}, expr=(extract[8] 0[32] 8[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v1730[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v1733[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v1731[32])}
0x80484b9:call   0x080484be<<Insn>>
registers:
    ax      = { {defs={}, expr=v1726[32]} }
    cx      = { {defs={}, expr=v1727[32]} }
    dx      = { {defs={}, expr=v1728[32]} }
    bx      = { {defs={}, expr=v1729[32]} }
    sp      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])} }
    bp      = { {defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} }
    si      = { {defs={}, expr=v1732[32]} }
    di      = { {defs={}, expr=v1733[32]} }
    es      = { {defs={}, expr=v1734[16]} }
    cs      = { {defs={}, expr=v1735[16]} }
    ss      = { {defs={}, expr=v1736[16]} }
    ds      = { {defs={}, expr=v1737[16]} }
    fs      = { {defs={}, expr=v1738[16]} }
    gs      = { {defs={}, expr=v1739[16]} }
    cf      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    ?1      = { {defs={}, expr=v1741[1]} }
    pf      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))} }
    ?3      = { {defs={}, expr=v1743[1]} }
    af      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    ?5      = { {defs={}, expr=v1745[1]} }
    zf      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))} }
    sf      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))} }
    tf      = { {defs={}, expr=v1748[1]} }
    if      = { {defs={}, expr=v1749[1]} }
    df      = { {defs={}, expr=v1750[1]} }
    of      = { {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    iopl0   = { {defs={}, expr=v1752[1]} }
    iopl1   = { {defs={}, expr=v1753[1]} }
    nt      = { {defs={}, expr=v1754[1]} }
    ?15     = { {defs={}, expr=v1755[1]} }
    rf      = { {defs={}, expr=v1756[1]} }
    vm      = { {defs={}, expr=v1757[1]} }
    ac      = { {defs={}, expr=v1758[1]} }
    vif     = { {defs={}, expr=v1759[1]} }
    vip     = { {defs={}, expr=v1760[1]} }
    id      = { {defs={}, expr=v1761[1]} }
    ?22     = { {defs={}, expr=v1762[1]} }
    ?23     = { {defs={}, expr=v1763[1]} }
    ?24     = { {defs={}, expr=v1764[1]} }
    ?25     = { {defs={}, expr=v1765[1]} }
    ?26     = { {defs={}, expr=v1766[1]} }
    ?27     = { {defs={}, expr=v1767[1]} }
    ?28     = { {defs={}, expr=v1768[1]} }
    ?29     = { {defs={}, expr=v1769[1]} }
    ?30     = { {defs={}, expr=v1770[1]} }
    ?31     = { {defs={}, expr=v1771[1]} }
    ip      = { {defs={0x080484b9}, expr=0x080484be[32]} }
memory:
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32])} value={defs={0x080484b9}, expr=8[8]}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32])} value={defs={0x080484b9}, expr=4[8]}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32])} value={defs={0x080484b9}, expr=-124[8]}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])} value={defs={0x080484b9}, expr=-66[8]}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b5}, expr=(extract[8] 24[32] 32[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b5}, expr=(extract[8] 16[32] 24[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b5}, expr=(extract[8] 8[32] 16[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x080484b5}, expr=(extract[8] 0[32] 8[32] v1729[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b4}, expr=(extract[8] 24[32] 32[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b4}, expr=(extract[8] 16[32] 24[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b4}, expr=(extract[8] 8[32] 16[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) -4[32])} value={defs={0x080484b4}, expr=(extract[8] 0[32] 8[32] v1732[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v1730[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v1733[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v1730[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v1733[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v1730[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v1731[32])}
    addr={defs={0x080484b0}, expr=(add[32] v1730[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v1731[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
registers:
    ax      = { {defs={}, expr=v1774[32]} }
    cx      = { {defs={}, expr=v1775[32]} }
    dx      = { {defs={}, expr=v1776[32]} }
    bx      = { {defs={0x080484be}, expr=v1820[32]} }
    sp      = { {defs={0x080484be}, expr=(add[32] v1778[32] 4[32])} }
    bp      = { {defs={}, expr=v1779[32]} }
    si      = { {defs={}, expr=v1780[32]} }
    di      = { {defs={}, expr=v1781[32]} }
    es      = { {defs={}, expr=v1782[16]} }
    cs      = { {defs={}, expr=v1783[16]} }
    ss      = { {defs={}, expr=v1784[16]} }
    ds      = { {defs={}, expr=v1785[16]} }
    fs      = { {defs={}, expr=v1786[16]} }
    gs      = { {defs={}, expr=v1787[16]} }
    cf      = { {defs={}, expr=v1788[1]} }
    ?1      = { {defs={}, expr=v1789[1]} }
    pf      = { {defs={}, expr=v1790[1]} }
    ?3      = { {defs={}, expr=v1791[1]} }
    af      = { {defs={}, expr=v1792[1]} }
    ?5      = { {defs={}, expr=v1793[1]} }
    zf      = { {defs={}, expr=v1794[1]} }
    sf      = { {defs={}, expr=v1795[1]} }
    tf      = { {defs={}, expr=v1796[1]} }
    if      = { {defs={}, expr=v1797[1]} }
    df      = { {defs={}, expr=v1798[1]} }
    of      = { {defs={}, expr=v1799[1]} }
    iopl0   = { {defs={}, expr=v1800[1]} }
    iopl1   = { {defs={}, expr=v1801[1]} }
    nt      = { {defs={}, expr=v1802[1]} }
    ?15     = { {defs={}, expr=v1803[1]} }
    rf      = { {defs={}, expr=v1804[1]} }
    vm      = { {defs={}, expr=v1805[1]} }
    ac      = { {defs={}, expr=v1806[1]} }
    vif     = { {defs={}, expr=v1807[1]} }
    vip     = { {defs={}, expr=v1808[1]} }
    id      = { {defs={}, expr=v1809[1]} }
    ?22     = { {defs={}, expr=v1810[1]} }
    ?23     = { {defs={}, expr=v1811[1]} }
    ?24     = { {defs={}, expr=v1812[1]} }
    ?25     = { {defs={}, expr=v1813[1]} }
    ?26     = { {defs={}, expr=v1814[1]} }
    ?27     = { {defs={}, expr=v1815[1]} }
    ?28     = { {defs={}, expr=v1816[1]} }
    ?29     = { {defs={}, expr=v1817[1]} }
    ?30     = { {defs={}, expr=v1818[1]} }
    ?31     = { {defs={}, expr=v1819[1]} }
    ip      = { {defs={0x080484be}, expr=0x080484bf[32]} }
memory:
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 3[32])} value={defs={0x080484be}, expr=(extract[8] 24[32] 32[32] v1820[32])}
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 2[32])} value={defs={0x080484be}, expr=(extract[8] 16[32] 24[32] v1820[32])}
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 1[32])} value={defs={0x080484be}, expr=(extract[8] 8[32] 16[32] v1820[32])}
    addr={defs={}, expr=v1778[32]} value={defs={0x080484be}, expr=(extract[8] 0[32] 8[32] v1820[32])}
0x80484bf:add    ebx, 0x0000120a
registers:
    ax      = { {defs={}, expr=v1774[32]} }
    cx      = { {defs={}, expr=v1775[32]} }
    dx      = { {defs={}, expr=v1776[32]} }
    bx      = { {defs={0x080484be,0x080484bf}, expr=(add[32] v1820[32] 4618[32])} }
    sp      = { {defs={0x080484be}, expr=(add[32] v1778[32] 4[32])} }
    bp      = { {defs={}, expr=v1779[32]} }
    si      = { {defs={}, expr=v1780[32]} }
    di      = { {defs={}, expr=v1781[32]} }
    es      = { {defs={}, expr=v1782[16]} }
    cs      = { {defs={}, expr=v1783[16]} }
    ss      = { {defs={}, expr=v1784[16]} }
    ds      = { {defs={}, expr=v1785[16]} }
    fs      = { {defs={}, expr=v1786[16]} }
    gs      = { {defs={}, expr=v1787[16]} }
    cf      = { {defs={0x080484be,0x080484bf}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1820[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v1820[32]) 4618[33])))))} }
    ?1      = { {defs={}, expr=v1789[1]} }
    pf      = { {defs={0x080484be,0x080484bf}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32])))))))} }
    ?3      = { {defs={}, expr=v1791[1]} }
    af      = { {defs={0x080484be,0x080484bf}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1820[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v1820[32]) 4618[33])))))} }
    ?5      = { {defs={}, expr=v1793[1]} }
    zf      = { {defs={0x080484be,0x080484bf}, expr=(zerop[1] (add[32] v1820[32] 4618[32]))} }
    sf      = { {defs={0x080484be,0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v1820[32] 4618[32]))} }
    tf      = { {defs={}, expr=v1796[1]} }
    if      = { {defs={}, expr=v1797[1]} }
    df      = { {defs={}, expr=v1798[1]} }
    of      = { {defs={0x080484be,0x080484bf}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1820[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v1820[32]) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1820[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v1820[32]) 4618[33]))))))} }
    iopl0   = { {defs={}, expr=v1800[1]} }
    iopl1   = { {defs={}, expr=v1801[1]} }
    nt      = { {defs={}, expr=v1802[1]} }
    ?15     = { {defs={}, expr=v1803[1]} }
    rf      = { {defs={}, expr=v1804[1]} }
    vm      = { {defs={}, expr=v1805[1]} }
    ac      = { {defs={}, expr=v1806[1]} }
    vif     = { {defs={}, expr=v1807[1]} }
    vip     = { {defs={}, expr=v1808[1]} }
    id      = { {defs={}, expr=v1809[1]} }
    ?22     = { {defs={}, expr=v1810[1]} }
    ?23     = { {defs={}, expr=v1811[1]} }
    ?24     = { {defs={}, expr=v1812[1]} }
    ?25     = { {defs={}, expr=v1813[1]} }
    ?26     = { {defs={}, expr=v1814[1]} }
    ?27     = { {defs={}, expr=v1815[1]} }
    ?28     = { {defs={}, expr=v1816[1]} }
    ?29     = { {defs={}, expr=v1817[1]} }
    ?30     = { {defs={}, expr=v1818[1]} }
    ?31     = { {defs={}, expr=v1819[1]} }
    ip      = { {defs={0x080484bf}, expr=0x080484c5[32]} }
memory:
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 3[32])} value={defs={0x080484be}, expr=(extract[8] 24[32] 32[32] v1820[32])}
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 2[32])} value={defs={0x080484be}, expr=(extract[8] 16[32] 24[32] v1820[32])}
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 1[32])} value={defs={0x080484be}, expr=(extract[8] 8[32] 16[32] v1820[32])}
    addr={defs={}, expr=v1778[32]} value={defs={0x080484be}, expr=(extract[8] 0[32] 8[32] v1820[32])}
0x80484c5:call   0x080482c8<_init>
registers:
    ax      = { {defs={}, expr=v1774[32]} }
    cx      = { {defs={}, expr=v1775[32]} }
    dx      = { {defs={}, expr=v1776[32]} }
    bx      = { {defs={0x080484be,0x080484bf}, expr=(add[32] v1820[32] 4618[32])} }
    sp      = { {defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] v1778[32] 4[32]) -4[32])} }
    bp      = { {defs={}, expr=v1779[32]} }
    si      = { {defs={}, expr=v1780[32]} }
    di      = { {defs={}, expr=v1781[32]} }
    es      = { {defs={}, expr=v1782[16]} }
    cs      = { {defs={}, expr=v1783[16]} }
    ss      = { {defs={}, expr=v1784[16]} }
    ds      = { {defs={}, expr=v1785[16]} }
    fs      = { {defs={}, expr=v1786[16]} }
    gs      = { {defs={}, expr=v1787[16]} }
    cf      = { {defs={0x080484be,0x080484bf}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1820[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v1820[32]) 4618[33])))))} }
    ?1      = { {defs={}, expr=v1789[1]} }
    pf      = { {defs={0x080484be,0x080484bf}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1820[32] 4618[32])))))))} }
    ?3      = { {defs={}, expr=v1791[1]} }
    af      = { {defs={0x080484be,0x080484bf}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1820[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v1820[32]) 4618[33])))))} }
    ?5      = { {defs={}, expr=v1793[1]} }
    zf      = { {defs={0x080484be,0x080484bf}, expr=(zerop[1] (add[32] v1820[32] 4618[32]))} }
    sf      = { {defs={0x080484be,0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v1820[32] 4618[32]))} }
    tf      = { {defs={}, expr=v1796[1]} }
    if      = { {defs={}, expr=v1797[1]} }
    df      = { {defs={}, expr=v1798[1]} }
    of      = { {defs={0x080484be,0x080484bf}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1820[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v1820[32]) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1820[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v1820[32]) 4618[33]))))))} }
    iopl0   = { {defs={}, expr=v1800[1]} }
    iopl1   = { {defs={}, expr=v1801[1]} }
    nt      = { {defs={}, expr=v1802[1]} }
    ?15     = { {defs={}, expr=v1803[1]} }
    rf      = { {defs={}, expr=v1804[1]} }
    vm      = { {defs={}, expr=v1805[1]} }
    ac      = { {defs={}, expr=v1806[1]} }
    vif     = { {defs={}, expr=v1807[1]} }
    vip     = { {defs={}, expr=v1808[1]} }
    id      = { {defs={}, expr=v1809[1]} }
    ?22     = { {defs={}, expr=v1810[1]} }
    ?23     = { {defs={}, expr=v1811[1]} }
    ?24     = { {defs={}, expr=v1812[1]} }
    ?25     = { {defs={}, expr=v1813[1]} }
    ?26     = { {defs={}, expr=v1814[1]} }
    ?27     = { {defs={}, expr=v1815[1]} }
    ?28     = { {defs={}, expr=v1816[1]} }
    ?29     = { {defs={}, expr=v1817[1]} }
    ?30     = { {defs={}, expr=v1818[1]} }
    ?31     = { {defs={}, expr=v1819[1]} }
    ip      = { {defs={0x080484c5}, expr=0x080482c8[32]} }
memory:
    addr={defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] (add[32] v1778[32] 4[32]) -4[32]) 3[32])} value={defs={0x080484c5}, expr=8[8]}
    addr={defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] (add[32] v1778[32] 4[32]) -4[32]) 2[32])} value={defs={0x080484c5}, expr=4[8]}
    addr={defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] (add[32] v1778[32] 4[32]) -4[32]) 1[32])} value={defs={0x080484c5}, expr=-124[8]}
    addr={defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] v1778[32] 4[32]) -4[32])} value={defs={0x080484c5}, expr=-54[8]}
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 3[32])} value={defs={0x080484be}, expr=(extract[8] 24[32] 32[32] v1820[32])}
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 2[32])} value={defs={0x080484be}, expr=(extract[8] 16[32] 24[32] v1820[32])}
    addr={defs={0x080484be}, expr=(add[32] v1778[32] 1[32])} value={defs={0x080484be}, expr=(extract[8] 8[32] 16[32] v1820[32])}
    addr={defs={}, expr=v1778[32]} value={defs={0x080484be}, expr=(extract[8] 0[32] 8[32] v1820[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { {defs={0x080484ca}, expr=(add[32] v1830[32] -224[32])} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={}, expr=v1829[32]} }
    bx      = { {defs={}, expr=v1830[32]} }
    sp      = { {defs={}, expr=v1831[32]} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={}, expr=v1833[32]} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={}, expr=v1841[1]} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={}, expr=v1843[1]} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={}, expr=v1845[1]} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={}, expr=v1847[1]} }
    sf      = { {defs={}, expr=v1848[1]} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={}, expr=v1852[1]} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484ca}, expr=0x080484d0[32]} }
memory:
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { {defs={0x080484ca}, expr=(add[32] v1830[32] -224[32])} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={}, expr=v1830[32]} }
    sp      = { {defs={}, expr=v1831[32]} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={}, expr=v1833[32]} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={}, expr=v1841[1]} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={}, expr=v1843[1]} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={}, expr=v1845[1]} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={}, expr=v1847[1]} }
    sf      = { {defs={}, expr=v1848[1]} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={}, expr=v1852[1]} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484d0}, expr=0x080484d6[32]} }
memory:
0x80484d6:sub    eax, edx
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={}, expr=v1830[32]} }
    sp      = { {defs={}, expr=v1831[32]} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={}, expr=v1833[32]} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1830[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v1830[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v1830[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v1830[32] -224[32]))) 1[33])))))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484ca,0x080484d0,0x080484d6}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1830[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v1830[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v1830[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v1830[32] -224[32]))) 1[33])))))))} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(zerop[1] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    sf      = { {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484ca,0x080484d0,0x080484d6}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484d6}, expr=0x080484d8[32]} }
memory:
0x80484d8:sar    eax, 0x02
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={}, expr=v1830[32]} }
    sp      = { {defs={}, expr=v1831[32]} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={}, expr=v1833[32]} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484d8}, expr=v1874[1]} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    sf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484d8}, expr=v1875[1]} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484d8}, expr=0x080484db[32]} }
memory:
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={}, expr=v1830[32]} }
    sp      = { {defs={}, expr=v1831[32]} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={}, expr=v1833[32]} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484d8}, expr=v1874[1]} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    sf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484d8}, expr=v1875[1]} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484db}, expr=0x080484de[32]} }
memory:
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v1832[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={}, expr=v1830[32]} }
    sp      = { {defs={}, expr=v1831[32]} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={}, expr=v1833[32]} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484d8}, expr=v1874[1]} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    sf      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484d8}, expr=v1875[1]} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484de}, expr=0x080484e0[32]} }
memory:
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v1832[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
0x80484e0:add    esp, 0x0c
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={}, expr=v1830[32]} }
    sp      = { {defs={0x080484e0}, expr=(add[32] v1831[32] 12[32])} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={}, expr=v1833[32]} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484e0}, expr=(zerop[1] (add[32] v1831[32] 12[32]))} }
    sf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v1831[32] 12[32]))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484e0}, expr=0x080484e3[32]} }
memory:
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v1832[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
0x80484e3:pop    ebx
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1878[8] (add[32] v1831[32] 12[32]) (extract[8] 0[32] 8[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] v1831[32] 12[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1880[8] (add[32] (add[32] v1831[32] 12[32]) 1[32]) (extract[8] 8[32] 16[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1882[8] (add[32] (add[32] v1831[32] 12[32]) 2[32]) (extract[8] 16[32] 24[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1884[8] (add[32] (add[32] v1831[32] 12[32]) 3[32]) (extract[8] 24[32] 32[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 3[32])))))} }
    sp      = { {defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 4[32])} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={}, expr=v1833[32]} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484e0}, expr=(zerop[1] (add[32] v1831[32] 12[32]))} }
    sf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v1831[32] 12[32]))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484e3}, expr=0x080484e4[32]} }
memory:
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v1876[32])}
    addr={defs={0x080484e0}, expr=(add[32] v1831[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v1876[32])}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v1832[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
0x80484e4:pop    esi
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1878[8] (add[32] v1831[32] 12[32]) (extract[8] 0[32] 8[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] v1831[32] 12[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1880[8] (add[32] (add[32] v1831[32] 12[32]) 1[32]) (extract[8] 8[32] 16[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1882[8] (add[32] (add[32] v1831[32] 12[32]) 2[32]) (extract[8] 16[32] 24[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1884[8] (add[32] (add[32] v1831[32] 12[32]) 3[32]) (extract[8] 24[32] 32[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 3[32])))))} }
    sp      = { {defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32])} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e4}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1887[8] (add[32] (add[32] v1831[32] 12[32]) 4[32]) (extract[8] 0[32] 8[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1889[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1891[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1893[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32])))))} }
    di      = { {defs={}, expr=v1834[32]} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484e0}, expr=(zerop[1] (add[32] v1831[32] 12[32]))} }
    sf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v1831[32] 12[32]))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484e4}, expr=0x080484e5[32]} }
memory:
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32])} value={defs={0x080484e4}, expr=(extract[8] 24[32] 32[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32])} value={defs={0x080484e4}, expr=(extract[8] 16[32] 24[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32])} value={defs={0x080484e4}, expr=(extract[8] 8[32] 16[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 4[32])} value={defs={0x080484e4}, expr=(extract[8] 0[32] 8[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v1876[32])}
    addr={defs={0x080484e0}, expr=(add[32] v1831[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v1876[32])}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v1832[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
0x80484e5:pop    edi
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1878[8] (add[32] v1831[32] 12[32]) (extract[8] 0[32] 8[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] v1831[32] 12[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1880[8] (add[32] (add[32] v1831[32] 12[32]) 1[32]) (extract[8] 8[32] 16[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1882[8] (add[32] (add[32] v1831[32] 12[32]) 2[32]) (extract[8] 16[32] 24[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1884[8] (add[32] (add[32] v1831[32] 12[32]) 3[32]) (extract[8] 24[32] 32[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 3[32])))))} }
    sp      = { {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32])} }
    bp      = { {defs={}, expr=v1832[32]} }
    si      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e4}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1887[8] (add[32] (add[32] v1831[32] 12[32]) 4[32]) (extract[8] 0[32] 8[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1889[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1891[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1893[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32])))))} }
    di      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e5}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1896[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) (extract[8] 0[32] 8[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1898[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1900[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1902[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32])))))} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484e0}, expr=(zerop[1] (add[32] v1831[32] 12[32]))} }
    sf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v1831[32] 12[32]))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484e5}, expr=0x080484e6[32]} }
memory:
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e5}, expr=(extract[8] 24[32] 32[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e5}, expr=(extract[8] 16[32] 24[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e5}, expr=(extract[8] 8[32] 16[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32])} value={defs={0x080484e5}, expr=(extract[8] 0[32] 8[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32])} value={defs={0x080484e4}, expr=(extract[8] 24[32] 32[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32])} value={defs={0x080484e4}, expr=(extract[8] 16[32] 24[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32])} value={defs={0x080484e4}, expr=(extract[8] 8[32] 16[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 4[32])} value={defs={0x080484e4}, expr=(extract[8] 0[32] 8[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v1876[32])}
    addr={defs={0x080484e0}, expr=(add[32] v1831[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v1876[32])}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v1832[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
0x80484e6:pop    ebp
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1878[8] (add[32] v1831[32] 12[32]) (extract[8] 0[32] 8[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] v1831[32] 12[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1880[8] (add[32] (add[32] v1831[32] 12[32]) 1[32]) (extract[8] 8[32] 16[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1882[8] (add[32] (add[32] v1831[32] 12[32]) 2[32]) (extract[8] 16[32] 24[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1884[8] (add[32] (add[32] v1831[32] 12[32]) 3[32]) (extract[8] 24[32] 32[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 3[32])))))} }
    sp      = { {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])} }
    bp      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e6}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1905[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) (extract[8] 0[32] 8[32] v1903[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1907[8] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1903[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1909[8] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1903[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1911[8] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1903[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])))))} }
    si      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e4}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1887[8] (add[32] (add[32] v1831[32] 12[32]) 4[32]) (extract[8] 0[32] 8[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1889[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1891[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1893[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32])))))} }
    di      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e5}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1896[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) (extract[8] 0[32] 8[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1898[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1900[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1902[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32])))))} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484e0}, expr=(zerop[1] (add[32] v1831[32] 12[32]))} }
    sf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v1831[32] 12[32]))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484e6}, expr=0x080484e7[32]} }
memory:
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e6}, expr=(extract[8] 24[32] 32[32] v1903[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e6}, expr=(extract[8] 16[32] 24[32] v1903[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e6}, expr=(extract[8] 8[32] 16[32] v1903[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32])} value={defs={0x080484e6}, expr=(extract[8] 0[32] 8[32] v1903[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e5}, expr=(extract[8] 24[32] 32[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e5}, expr=(extract[8] 16[32] 24[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e5}, expr=(extract[8] 8[32] 16[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32])} value={defs={0x080484e5}, expr=(extract[8] 0[32] 8[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32])} value={defs={0x080484e4}, expr=(extract[8] 24[32] 32[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32])} value={defs={0x080484e4}, expr=(extract[8] 16[32] 24[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32])} value={defs={0x080484e4}, expr=(extract[8] 8[32] 16[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 4[32])} value={defs={0x080484e4}, expr=(extract[8] 0[32] 8[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v1876[32])}
    addr={defs={0x080484e0}, expr=(add[32] v1831[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v1876[32])}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v1832[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
0x80484e7:ret    
registers:
    ax      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1828[32]} }
    dx      = { {defs={0x080484d0}, expr=(add[32] v1830[32] -224[32])} }
    bx      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e3}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1878[8] (add[32] v1831[32] 12[32]) (extract[8] 0[32] 8[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] v1831[32] 12[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1880[8] (add[32] (add[32] v1831[32] 12[32]) 1[32]) (extract[8] 8[32] 16[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1882[8] (add[32] (add[32] v1831[32] 12[32]) 2[32]) (extract[8] 16[32] 24[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1884[8] (add[32] (add[32] v1831[32] 12[32]) 3[32]) (extract[8] 24[32] 32[32] v1876[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 3[32])))))} }
    sp      = { {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32])} }
    bp      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e6}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1905[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) (extract[8] 0[32] 8[32] v1903[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1907[8] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1903[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1909[8] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1903[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1911[8] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1903[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])))))} }
    si      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e4}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1887[8] (add[32] (add[32] v1831[32] 12[32]) 4[32]) (extract[8] 0[32] 8[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1831[32] 12[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1889[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1891[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1893[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1885[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32])))))} }
    di      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e5}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1896[8] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) (extract[8] 0[32] 8[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1898[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1900[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1902[8] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1894[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32])))))} }
    es      = { {defs={}, expr=v1835[16]} }
    cs      = { {defs={}, expr=v1836[16]} }
    ss      = { {defs={}, expr=v1837[16]} }
    ds      = { {defs={}, expr=v1838[16]} }
    fs      = { {defs={}, expr=v1839[16]} }
    gs      = { {defs={}, expr=v1840[16]} }
    cf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v1842[1]} }
    pf      = { {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1831[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v1844[1]} }
    af      = { {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v1846[1]} }
    zf      = { {defs={0x080484e0}, expr=(zerop[1] (add[32] v1831[32] 12[32]))} }
    sf      = { {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v1831[32] 12[32]))} }
    tf      = { {defs={}, expr=v1849[1]} }
    if      = { {defs={}, expr=v1850[1]} }
    df      = { {defs={}, expr=v1851[1]} }
    of      = { {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1831[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v1831[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v1853[1]} }
    iopl1   = { {defs={}, expr=v1854[1]} }
    nt      = { {defs={}, expr=v1855[1]} }
    ?15     = { {defs={}, expr=v1856[1]} }
    rf      = { {defs={}, expr=v1857[1]} }
    vm      = { {defs={}, expr=v1858[1]} }
    ac      = { {defs={}, expr=v1859[1]} }
    vif     = { {defs={}, expr=v1860[1]} }
    vip     = { {defs={}, expr=v1861[1]} }
    id      = { {defs={}, expr=v1862[1]} }
    ?22     = { {defs={}, expr=v1863[1]} }
    ?23     = { {defs={}, expr=v1864[1]} }
    ?24     = { {defs={}, expr=v1865[1]} }
    ?25     = { {defs={}, expr=v1866[1]} }
    ?26     = { {defs={}, expr=v1867[1]} }
    ?27     = { {defs={}, expr=v1868[1]} }
    ?28     = { {defs={}, expr=v1869[1]} }
    ?29     = { {defs={}, expr=v1870[1]} }
    ?30     = { {defs={}, expr=v1871[1]} }
    ?31     = { {defs={}, expr=v1872[1]} }
    ip      = { {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484e7}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1914[8] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) (extract[8] 0[32] 8[32] v1912[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1916[8] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) (extract[8] 8[32] 16[32] v1912[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1918[8] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) (extract[8] 16[32] 24[32] v1912[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1920[8] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) (extract[8] 24[32] 32[32] v1912[32])) (add[32] v1832[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] v1832[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32])))))} }
memory:
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e7}, expr=(extract[8] 24[32] 32[32] v1912[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e7}, expr=(extract[8] 16[32] 24[32] v1912[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e7}, expr=(extract[8] 8[32] 16[32] v1912[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])} value={defs={0x080484e7}, expr=(extract[8] 0[32] 8[32] v1912[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e6}, expr=(extract[8] 24[32] 32[32] v1903[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e6}, expr=(extract[8] 16[32] 24[32] v1903[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e6}, expr=(extract[8] 8[32] 16[32] v1903[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 4[32])} value={defs={0x080484e6}, expr=(extract[8] 0[32] 8[32] v1903[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e5}, expr=(extract[8] 24[32] 32[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e5}, expr=(extract[8] 16[32] 24[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e5}, expr=(extract[8] 8[32] 16[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 4[32])} value={defs={0x080484e5}, expr=(extract[8] 0[32] 8[32] v1894[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 3[32])} value={defs={0x080484e4}, expr=(extract[8] 24[32] 32[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 2[32])} value={defs={0x080484e4}, expr=(extract[8] 16[32] 24[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v1831[32] 12[32]) 4[32]) 1[32])} value={defs={0x080484e4}, expr=(extract[8] 8[32] 16[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 4[32])} value={defs={0x080484e4}, expr=(extract[8] 0[32] 8[32] v1885[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v1876[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v1831[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v1876[32])}
    addr={defs={0x080484e0}, expr=(add[32] v1831[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v1876[32])}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v1832[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v1832[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v1830[32] -224[32]) (add[32] (invert[32] (add[32] v1830[32] -224[32])) 1[32]))))}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
registers:
    ax      = { {defs={}, expr=v1923[32]} }
    cx      = { {defs={}, expr=v1924[32]} }
    dx      = { {defs={}, expr=v1925[32]} }
    bx      = { {defs={}, expr=v1926[32]} }
    sp      = { {defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} }
    bp      = { {defs={}, expr=v1928[32]} }
    si      = { {defs={}, expr=v1929[32]} }
    di      = { {defs={}, expr=v1930[32]} }
    es      = { {defs={}, expr=v1931[16]} }
    cs      = { {defs={}, expr=v1932[16]} }
    ss      = { {defs={}, expr=v1933[16]} }
    ds      = { {defs={}, expr=v1934[16]} }
    fs      = { {defs={}, expr=v1935[16]} }
    gs      = { {defs={}, expr=v1936[16]} }
    cf      = { {defs={}, expr=v1937[1]} }
    ?1      = { {defs={}, expr=v1938[1]} }
    pf      = { {defs={}, expr=v1939[1]} }
    ?3      = { {defs={}, expr=v1940[1]} }
    af      = { {defs={}, expr=v1941[1]} }
    ?5      = { {defs={}, expr=v1942[1]} }
    zf      = { {defs={}, expr=v1943[1]} }
    sf      = { {defs={}, expr=v1944[1]} }
    tf      = { {defs={}, expr=v1945[1]} }
    if      = { {defs={}, expr=v1946[1]} }
    df      = { {defs={}, expr=v1947[1]} }
    of      = { {defs={}, expr=v1948[1]} }
    iopl0   = { {defs={}, expr=v1949[1]} }
    iopl1   = { {defs={}, expr=v1950[1]} }
    nt      = { {defs={}, expr=v1951[1]} }
    ?15     = { {defs={}, expr=v1952[1]} }
    rf      = { {defs={}, expr=v1953[1]} }
    vm      = { {defs={}, expr=v1954[1]} }
    ac      = { {defs={}, expr=v1955[1]} }
    vif     = { {defs={}, expr=v1956[1]} }
    vip     = { {defs={}, expr=v1957[1]} }
    id      = { {defs={}, expr=v1958[1]} }
    ?22     = { {defs={}, expr=v1959[1]} }
    ?23     = { {defs={}, expr=v1960[1]} }
    ?24     = { {defs={}, expr=v1961[1]} }
    ?25     = { {defs={}, expr=v1962[1]} }
    ?26     = { {defs={}, expr=v1963[1]} }
    ?27     = { {defs={}, expr=v1964[1]} }
    ?28     = { {defs={}, expr=v1965[1]} }
    ?29     = { {defs={}, expr=v1966[1]} }
    ?30     = { {defs={}, expr=v1967[1]} }
    ?31     = { {defs={}, expr=v1968[1]} }
    ip      = { {defs={0x08048520}, expr=0x08048521[32]} }
memory:
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v1928[32])}
0x8048521:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v1923[32]} }
    cx      = { {defs={}, expr=v1924[32]} }
    dx      = { {defs={}, expr=v1925[32]} }
    bx      = { {defs={}, expr=v1926[32]} }
    sp      = { {defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} }
    bp      = { {defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} }
    si      = { {defs={}, expr=v1929[32]} }
    di      = { {defs={}, expr=v1930[32]} }
    es      = { {defs={}, expr=v1931[16]} }
    cs      = { {defs={}, expr=v1932[16]} }
    ss      = { {defs={}, expr=v1933[16]} }
    ds      = { {defs={}, expr=v1934[16]} }
    fs      = { {defs={}, expr=v1935[16]} }
    gs      = { {defs={}, expr=v1936[16]} }
    cf      = { {defs={}, expr=v1937[1]} }
    ?1      = { {defs={}, expr=v1938[1]} }
    pf      = { {defs={}, expr=v1939[1]} }
    ?3      = { {defs={}, expr=v1940[1]} }
    af      = { {defs={}, expr=v1941[1]} }
    ?5      = { {defs={}, expr=v1942[1]} }
    zf      = { {defs={}, expr=v1943[1]} }
    sf      = { {defs={}, expr=v1944[1]} }
    tf      = { {defs={}, expr=v1945[1]} }
    if      = { {defs={}, expr=v1946[1]} }
    df      = { {defs={}, expr=v1947[1]} }
    of      = { {defs={}, expr=v1948[1]} }
    iopl0   = { {defs={}, expr=v1949[1]} }
    iopl1   = { {defs={}, expr=v1950[1]} }
    nt      = { {defs={}, expr=v1951[1]} }
    ?15     = { {defs={}, expr=v1952[1]} }
    rf      = { {defs={}, expr=v1953[1]} }
    vm      = { {defs={}, expr=v1954[1]} }
    ac      = { {defs={}, expr=v1955[1]} }
    vif     = { {defs={}, expr=v1956[1]} }
    vip     = { {defs={}, expr=v1957[1]} }
    id      = { {defs={}, expr=v1958[1]} }
    ?22     = { {defs={}, expr=v1959[1]} }
    ?23     = { {defs={}, expr=v1960[1]} }
    ?24     = { {defs={}, expr=v1961[1]} }
    ?25     = { {defs={}, expr=v1962[1]} }
    ?26     = { {defs={}, expr=v1963[1]} }
    ?27     = { {defs={}, expr=v1964[1]} }
    ?28     = { {defs={}, expr=v1965[1]} }
    ?29     = { {defs={}, expr=v1966[1]} }
    ?30     = { {defs={}, expr=v1967[1]} }
    ?31     = { {defs={}, expr=v1968[1]} }
    ip      = { {defs={0x08048521}, expr=0x08048523[32]} }
memory:
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v1928[32])}
0x8048523:push   edi
registers:
    ax      = { {defs={}, expr=v1923[32]} }
    cx      = { {defs={}, expr=v1924[32]} }
    dx      = { {defs={}, expr=v1925[32]} }
    bx      = { {defs={}, expr=v1926[32]} }
    sp      = { {defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v1927[32] -4[32]) -4[32])} }
    bp      = { {defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} }
    si      = { {defs={}, expr=v1929[32]} }
    di      = { {defs={}, expr=v1930[32]} }
    es      = { {defs={}, expr=v1931[16]} }
    cs      = { {defs={}, expr=v1932[16]} }
    ss      = { {defs={}, expr=v1933[16]} }
    ds      = { {defs={}, expr=v1934[16]} }
    fs      = { {defs={}, expr=v1935[16]} }
    gs      = { {defs={}, expr=v1936[16]} }
    cf      = { {defs={}, expr=v1937[1]} }
    ?1      = { {defs={}, expr=v1938[1]} }
    pf      = { {defs={}, expr=v1939[1]} }
    ?3      = { {defs={}, expr=v1940[1]} }
    af      = { {defs={}, expr=v1941[1]} }
    ?5      = { {defs={}, expr=v1942[1]} }
    zf      = { {defs={}, expr=v1943[1]} }
    sf      = { {defs={}, expr=v1944[1]} }
    tf      = { {defs={}, expr=v1945[1]} }
    if      = { {defs={}, expr=v1946[1]} }
    df      = { {defs={}, expr=v1947[1]} }
    of      = { {defs={}, expr=v1948[1]} }
    iopl0   = { {defs={}, expr=v1949[1]} }
    iopl1   = { {defs={}, expr=v1950[1]} }
    nt      = { {defs={}, expr=v1951[1]} }
    ?15     = { {defs={}, expr=v1952[1]} }
    rf      = { {defs={}, expr=v1953[1]} }
    vm      = { {defs={}, expr=v1954[1]} }
    ac      = { {defs={}, expr=v1955[1]} }
    vif     = { {defs={}, expr=v1956[1]} }
    vip     = { {defs={}, expr=v1957[1]} }
    id      = { {defs={}, expr=v1958[1]} }
    ?22     = { {defs={}, expr=v1959[1]} }
    ?23     = { {defs={}, expr=v1960[1]} }
    ?24     = { {defs={}, expr=v1961[1]} }
    ?25     = { {defs={}, expr=v1962[1]} }
    ?26     = { {defs={}, expr=v1963[1]} }
    ?27     = { {defs={}, expr=v1964[1]} }
    ?28     = { {defs={}, expr=v1965[1]} }
    ?29     = { {defs={}, expr=v1966[1]} }
    ?30     = { {defs={}, expr=v1967[1]} }
    ?31     = { {defs={}, expr=v1968[1]} }
    ip      = { {defs={0x08048523}, expr=0x08048524[32]} }
memory:
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v1927[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v1930[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v1928[32])}
0x8048524:push   esi
registers:
    ax      = { {defs={}, expr=v1923[32]} }
    cx      = { {defs={}, expr=v1924[32]} }
    dx      = { {defs={}, expr=v1925[32]} }
    bx      = { {defs={}, expr=v1926[32]} }
    sp      = { {defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} }
    si      = { {defs={}, expr=v1929[32]} }
    di      = { {defs={}, expr=v1930[32]} }
    es      = { {defs={}, expr=v1931[16]} }
    cs      = { {defs={}, expr=v1932[16]} }
    ss      = { {defs={}, expr=v1933[16]} }
    ds      = { {defs={}, expr=v1934[16]} }
    fs      = { {defs={}, expr=v1935[16]} }
    gs      = { {defs={}, expr=v1936[16]} }
    cf      = { {defs={}, expr=v1937[1]} }
    ?1      = { {defs={}, expr=v1938[1]} }
    pf      = { {defs={}, expr=v1939[1]} }
    ?3      = { {defs={}, expr=v1940[1]} }
    af      = { {defs={}, expr=v1941[1]} }
    ?5      = { {defs={}, expr=v1942[1]} }
    zf      = { {defs={}, expr=v1943[1]} }
    sf      = { {defs={}, expr=v1944[1]} }
    tf      = { {defs={}, expr=v1945[1]} }
    if      = { {defs={}, expr=v1946[1]} }
    df      = { {defs={}, expr=v1947[1]} }
    of      = { {defs={}, expr=v1948[1]} }
    iopl0   = { {defs={}, expr=v1949[1]} }
    iopl1   = { {defs={}, expr=v1950[1]} }
    nt      = { {defs={}, expr=v1951[1]} }
    ?15     = { {defs={}, expr=v1952[1]} }
    rf      = { {defs={}, expr=v1953[1]} }
    vm      = { {defs={}, expr=v1954[1]} }
    ac      = { {defs={}, expr=v1955[1]} }
    vif     = { {defs={}, expr=v1956[1]} }
    vip     = { {defs={}, expr=v1957[1]} }
    id      = { {defs={}, expr=v1958[1]} }
    ?22     = { {defs={}, expr=v1959[1]} }
    ?23     = { {defs={}, expr=v1960[1]} }
    ?24     = { {defs={}, expr=v1961[1]} }
    ?25     = { {defs={}, expr=v1962[1]} }
    ?26     = { {defs={}, expr=v1963[1]} }
    ?27     = { {defs={}, expr=v1964[1]} }
    ?28     = { {defs={}, expr=v1965[1]} }
    ?29     = { {defs={}, expr=v1966[1]} }
    ?30     = { {defs={}, expr=v1967[1]} }
    ?31     = { {defs={}, expr=v1968[1]} }
    ip      = { {defs={0x08048524}, expr=0x08048525[32]} }
memory:
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048524}, expr=(extract[8] 24[32] 32[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048524}, expr=(extract[8] 16[32] 24[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048524}, expr=(extract[8] 8[32] 16[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048524}, expr=(extract[8] 0[32] 8[32] v1929[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v1927[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v1930[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v1928[32])}
0x8048525:push   ebx
registers:
    ax      = { {defs={}, expr=v1923[32]} }
    cx      = { {defs={}, expr=v1924[32]} }
    dx      = { {defs={}, expr=v1925[32]} }
    bx      = { {defs={}, expr=v1926[32]} }
    sp      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} }
    si      = { {defs={}, expr=v1929[32]} }
    di      = { {defs={}, expr=v1930[32]} }
    es      = { {defs={}, expr=v1931[16]} }
    cs      = { {defs={}, expr=v1932[16]} }
    ss      = { {defs={}, expr=v1933[16]} }
    ds      = { {defs={}, expr=v1934[16]} }
    fs      = { {defs={}, expr=v1935[16]} }
    gs      = { {defs={}, expr=v1936[16]} }
    cf      = { {defs={}, expr=v1937[1]} }
    ?1      = { {defs={}, expr=v1938[1]} }
    pf      = { {defs={}, expr=v1939[1]} }
    ?3      = { {defs={}, expr=v1940[1]} }
    af      = { {defs={}, expr=v1941[1]} }
    ?5      = { {defs={}, expr=v1942[1]} }
    zf      = { {defs={}, expr=v1943[1]} }
    sf      = { {defs={}, expr=v1944[1]} }
    tf      = { {defs={}, expr=v1945[1]} }
    if      = { {defs={}, expr=v1946[1]} }
    df      = { {defs={}, expr=v1947[1]} }
    of      = { {defs={}, expr=v1948[1]} }
    iopl0   = { {defs={}, expr=v1949[1]} }
    iopl1   = { {defs={}, expr=v1950[1]} }
    nt      = { {defs={}, expr=v1951[1]} }
    ?15     = { {defs={}, expr=v1952[1]} }
    rf      = { {defs={}, expr=v1953[1]} }
    vm      = { {defs={}, expr=v1954[1]} }
    ac      = { {defs={}, expr=v1955[1]} }
    vif     = { {defs={}, expr=v1956[1]} }
    vip     = { {defs={}, expr=v1957[1]} }
    id      = { {defs={}, expr=v1958[1]} }
    ?22     = { {defs={}, expr=v1959[1]} }
    ?23     = { {defs={}, expr=v1960[1]} }
    ?24     = { {defs={}, expr=v1961[1]} }
    ?25     = { {defs={}, expr=v1962[1]} }
    ?26     = { {defs={}, expr=v1963[1]} }
    ?27     = { {defs={}, expr=v1964[1]} }
    ?28     = { {defs={}, expr=v1965[1]} }
    ?29     = { {defs={}, expr=v1966[1]} }
    ?30     = { {defs={}, expr=v1967[1]} }
    ?31     = { {defs={}, expr=v1968[1]} }
    ip      = { {defs={0x08048525}, expr=0x08048526[32]} }
memory:
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048525}, expr=(extract[8] 24[32] 32[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048525}, expr=(extract[8] 16[32] 24[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048525}, expr=(extract[8] 8[32] 16[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048525}, expr=(extract[8] 0[32] 8[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048524}, expr=(extract[8] 24[32] 32[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048524}, expr=(extract[8] 16[32] 24[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048524}, expr=(extract[8] 8[32] 16[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048524}, expr=(extract[8] 0[32] 8[32] v1929[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v1927[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v1930[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v1928[32])}
0x8048526:sub    esp, 0x0c
registers:
    ax      = { {defs={}, expr=v1923[32]} }
    cx      = { {defs={}, expr=v1924[32]} }
    dx      = { {defs={}, expr=v1925[32]} }
    bx      = { {defs={}, expr=v1926[32]} }
    sp      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])} }
    bp      = { {defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} }
    si      = { {defs={}, expr=v1929[32]} }
    di      = { {defs={}, expr=v1930[32]} }
    es      = { {defs={}, expr=v1931[16]} }
    cs      = { {defs={}, expr=v1932[16]} }
    ss      = { {defs={}, expr=v1933[16]} }
    ds      = { {defs={}, expr=v1934[16]} }
    fs      = { {defs={}, expr=v1935[16]} }
    gs      = { {defs={}, expr=v1936[16]} }
    cf      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    ?1      = { {defs={}, expr=v1938[1]} }
    pf      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))} }
    ?3      = { {defs={}, expr=v1940[1]} }
    af      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    ?5      = { {defs={}, expr=v1942[1]} }
    zf      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))} }
    sf      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))} }
    tf      = { {defs={}, expr=v1945[1]} }
    if      = { {defs={}, expr=v1946[1]} }
    df      = { {defs={}, expr=v1947[1]} }
    of      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    iopl0   = { {defs={}, expr=v1949[1]} }
    iopl1   = { {defs={}, expr=v1950[1]} }
    nt      = { {defs={}, expr=v1951[1]} }
    ?15     = { {defs={}, expr=v1952[1]} }
    rf      = { {defs={}, expr=v1953[1]} }
    vm      = { {defs={}, expr=v1954[1]} }
    ac      = { {defs={}, expr=v1955[1]} }
    vif     = { {defs={}, expr=v1956[1]} }
    vip     = { {defs={}, expr=v1957[1]} }
    id      = { {defs={}, expr=v1958[1]} }
    ?22     = { {defs={}, expr=v1959[1]} }
    ?23     = { {defs={}, expr=v1960[1]} }
    ?24     = { {defs={}, expr=v1961[1]} }
    ?25     = { {defs={}, expr=v1962[1]} }
    ?26     = { {defs={}, expr=v1963[1]} }
    ?27     = { {defs={}, expr=v1964[1]} }
    ?28     = { {defs={}, expr=v1965[1]} }
    ?29     = { {defs={}, expr=v1966[1]} }
    ?30     = { {defs={}, expr=v1967[1]} }
    ?31     = { {defs={}, expr=v1968[1]} }
    ip      = { {defs={0x08048526}, expr=0x08048529[32]} }
memory:
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048525}, expr=(extract[8] 24[32] 32[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048525}, expr=(extract[8] 16[32] 24[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048525}, expr=(extract[8] 8[32] 16[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048525}, expr=(extract[8] 0[32] 8[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048524}, expr=(extract[8] 24[32] 32[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048524}, expr=(extract[8] 16[32] 24[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048524}, expr=(extract[8] 8[32] 16[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048524}, expr=(extract[8] 0[32] 8[32] v1929[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v1927[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v1930[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v1928[32])}
0x8048529:call   0x0804852e<<Insn>>
registers:
    ax      = { {defs={}, expr=v1923[32]} }
    cx      = { {defs={}, expr=v1924[32]} }
    dx      = { {defs={}, expr=v1925[32]} }
    bx      = { {defs={}, expr=v1926[32]} }
    sp      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])} }
    bp      = { {defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} }
    si      = { {defs={}, expr=v1929[32]} }
    di      = { {defs={}, expr=v1930[32]} }
    es      = { {defs={}, expr=v1931[16]} }
    cs      = { {defs={}, expr=v1932[16]} }
    ss      = { {defs={}, expr=v1933[16]} }
    ds      = { {defs={}, expr=v1934[16]} }
    fs      = { {defs={}, expr=v1935[16]} }
    gs      = { {defs={}, expr=v1936[16]} }
    cf      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    ?1      = { {defs={}, expr=v1938[1]} }
    pf      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))} }
    ?3      = { {defs={}, expr=v1940[1]} }
    af      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    ?5      = { {defs={}, expr=v1942[1]} }
    zf      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))} }
    sf      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))} }
    tf      = { {defs={}, expr=v1945[1]} }
    if      = { {defs={}, expr=v1946[1]} }
    df      = { {defs={}, expr=v1947[1]} }
    of      = { {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))} }
    iopl0   = { {defs={}, expr=v1949[1]} }
    iopl1   = { {defs={}, expr=v1950[1]} }
    nt      = { {defs={}, expr=v1951[1]} }
    ?15     = { {defs={}, expr=v1952[1]} }
    rf      = { {defs={}, expr=v1953[1]} }
    vm      = { {defs={}, expr=v1954[1]} }
    ac      = { {defs={}, expr=v1955[1]} }
    vif     = { {defs={}, expr=v1956[1]} }
    vip     = { {defs={}, expr=v1957[1]} }
    id      = { {defs={}, expr=v1958[1]} }
    ?22     = { {defs={}, expr=v1959[1]} }
    ?23     = { {defs={}, expr=v1960[1]} }
    ?24     = { {defs={}, expr=v1961[1]} }
    ?25     = { {defs={}, expr=v1962[1]} }
    ?26     = { {defs={}, expr=v1963[1]} }
    ?27     = { {defs={}, expr=v1964[1]} }
    ?28     = { {defs={}, expr=v1965[1]} }
    ?29     = { {defs={}, expr=v1966[1]} }
    ?30     = { {defs={}, expr=v1967[1]} }
    ?31     = { {defs={}, expr=v1968[1]} }
    ip      = { {defs={0x08048529}, expr=0x0804852e[32]} }
memory:
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32])} value={defs={0x08048529}, expr=8[8]}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32])} value={defs={0x08048529}, expr=4[8]}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32])} value={defs={0x08048529}, expr=-123[8]}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])} value={defs={0x08048529}, expr=46[8]}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048525}, expr=(extract[8] 24[32] 32[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048525}, expr=(extract[8] 16[32] 24[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048525}, expr=(extract[8] 8[32] 16[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048525}, expr=(extract[8] 0[32] 8[32] v1926[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048524}, expr=(extract[8] 24[32] 32[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048524}, expr=(extract[8] 16[32] 24[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048524}, expr=(extract[8] 8[32] 16[32] v1929[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048524}, expr=(extract[8] 0[32] 8[32] v1929[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v1927[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v1930[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v1927[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v1930[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v1927[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v1928[32])}
    addr={defs={0x08048520}, expr=(add[32] v1927[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v1928[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
registers:
    ax      = { {defs={}, expr=v1971[32]} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={}, expr=v1973[32]} }
    bx      = { {defs={0x0804852e}, expr=v2017[32]} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={}, expr=v1985[1]} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={}, expr=v1987[1]} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={}, expr=v1989[1]} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={}, expr=v1991[1]} }
    sf      = { {defs={}, expr=v1992[1]} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={}, expr=v1996[1]} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x0804852e}, expr=0x0804852f[32]} }
memory:
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x804852f:add    ebx, 0x0000119a
registers:
    ax      = { {defs={}, expr=v1971[32]} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={}, expr=v1973[32]} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33])))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))))))} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33])))))} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f}, expr=(zerop[1] (add[32] v2017[32] 4506[32]))} }
    sf      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v2017[32] 4506[32]))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x0804852e,0x0804852f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33]))))))} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x0804852f}, expr=0x08048535[32]} }
memory:
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={}, expr=v1973[32]} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33])))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))))))} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33])))))} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f}, expr=(zerop[1] (add[32] v2017[32] 4506[32]))} }
    sf      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v2017[32] 4506[32]))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x0804852e,0x0804852f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33]))))))} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x08048535}, expr=0x0804853b[32]} }
memory:
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33])))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2017[32] 4506[32])))))))} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33])))))} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f}, expr=(zerop[1] (add[32] v2017[32] 4506[32]))} }
    sf      = { {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v2017[32] 4506[32]))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x0804852e,0x0804852f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2017[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2017[32]) 4506[33]))))))} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x0804853b}, expr=0x08048541[32]} }
memory:
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x8048541:sub    eax, edx
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]))) 1[33])))))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]))) 1[33])))))))} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(zerop[1] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32])))} }
    sf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32])))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x08048541}, expr=0x08048543[32]} }
memory:
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x8048543:sar    eax, 0x02
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x08048543}, expr=v2023[1]} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))} }
    sf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x08048543}, expr=v2024[1]} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x08048543}, expr=0x08048546[32]} }
memory:
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32])))} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x08048543}, expr=v2023[1]} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))} }
    sf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x08048543}, expr=v2024[1]} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x08048546}, expr=0x08048549[32]} }
memory:
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v1976[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x8048549:dec    eax
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=1[1]} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32]))} }
    sf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32]))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x08048549}, expr=0x0804854a[32]} }
memory:
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v1976[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x804854a:cmp    eax, 0xff<-0x01>
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))} }
    sf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x0804854a}, expr=0x0804854d[32]} }
memory:
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v1976[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x804854d:je     0x0804856b<<Insn>>
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e}, expr=(add[32] v1975[32] 4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))} }
    sf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d}, expr=0x0804856b[32]} }
memory:
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v1976[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
0x804856b:call   0x080485b0<_fini>
registers:
    ax      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])} }
    cx      = { {defs={}, expr=v1972[32]} }
    dx      = { {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v2017[32] 4506[32]) -224[32])} }
    bx      = { {defs={0x0804852e,0x0804852f}, expr=(add[32] v2017[32] 4506[32])} }
    sp      = { {defs={0x0804852e,0x0804856b}, expr=(add[32] (add[32] v1975[32] 4[32]) -4[32])} }
    bp      = { {defs={}, expr=v1976[32]} }
    si      = { {defs={}, expr=v1977[32]} }
    di      = { {defs={}, expr=v1978[32]} }
    es      = { {defs={}, expr=v1979[16]} }
    cs      = { {defs={}, expr=v1980[16]} }
    ss      = { {defs={}, expr=v1981[16]} }
    ds      = { {defs={}, expr=v1982[16]} }
    fs      = { {defs={}, expr=v1983[16]} }
    gs      = { {defs={}, expr=v1984[16]} }
    cf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))} }
    ?1      = { {defs={}, expr=v1986[1]} }
    pf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=1[1]} }
    ?3      = { {defs={}, expr=v1988[1]} }
    af      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))} }
    ?5      = { {defs={}, expr=v1990[1]} }
    zf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))} }
    sf      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))} }
    tf      = { {defs={}, expr=v1993[1]} }
    if      = { {defs={}, expr=v1994[1]} }
    df      = { {defs={}, expr=v1995[1]} }
    of      = { {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v1997[1]} }
    iopl1   = { {defs={}, expr=v1998[1]} }
    nt      = { {defs={}, expr=v1999[1]} }
    ?15     = { {defs={}, expr=v2000[1]} }
    rf      = { {defs={}, expr=v2001[1]} }
    vm      = { {defs={}, expr=v2002[1]} }
    ac      = { {defs={}, expr=v2003[1]} }
    vif     = { {defs={}, expr=v2004[1]} }
    vip     = { {defs={}, expr=v2005[1]} }
    id      = { {defs={}, expr=v2006[1]} }
    ?22     = { {defs={}, expr=v2007[1]} }
    ?23     = { {defs={}, expr=v2008[1]} }
    ?24     = { {defs={}, expr=v2009[1]} }
    ?25     = { {defs={}, expr=v2010[1]} }
    ?26     = { {defs={}, expr=v2011[1]} }
    ?27     = { {defs={}, expr=v2012[1]} }
    ?28     = { {defs={}, expr=v2013[1]} }
    ?29     = { {defs={}, expr=v2014[1]} }
    ?30     = { {defs={}, expr=v2015[1]} }
    ?31     = { {defs={}, expr=v2016[1]} }
    ip      = { {defs={0x0804856b}, expr=0x080485b0[32]} }
memory:
    addr={defs={0x0804852e,0x0804856b}, expr=(add[32] (add[32] (add[32] v1975[32] 4[32]) -4[32]) 3[32])} value={defs={0x0804856b}, expr=8[8]}
    addr={defs={0x0804852e,0x0804856b}, expr=(add[32] (add[32] (add[32] v1975[32] 4[32]) -4[32]) 2[32])} value={defs={0x0804856b}, expr=4[8]}
    addr={defs={0x0804852e,0x0804856b}, expr=(add[32] (add[32] (add[32] v1975[32] 4[32]) -4[32]) 1[32])} value={defs={0x0804856b}, expr=-123[8]}
    addr={defs={0x0804852e,0x0804856b}, expr=(add[32] (add[32] v1975[32] 4[32]) -4[32])} value={defs={0x0804856b}, expr=112[8]}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v1976[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v1976[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2017[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v2017[32])}
    addr={defs={0x0804852e}, expr=(add[32] v1975[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v2017[32])}
    addr={defs={}, expr=v1975[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v2017[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
registers:
    ax      = { {defs={}, expr=v2027[32]} }
    cx      = { {defs={}, expr=v2028[32]} }
    dx      = { {defs={}, expr=v2029[32]} }
    bx      = { {defs={}, expr=v2030[32]} }
    sp      = { {defs={}, expr=v2031[32]} }
    bp      = { {defs={}, expr=v2032[32]} }
    si      = { {defs={0x0804854f}, expr=(add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8])))} }
    di      = { {defs={}, expr=v2034[32]} }
    es      = { {defs={}, expr=v2035[16]} }
    cs      = { {defs={}, expr=v2036[16]} }
    ss      = { {defs={}, expr=v2037[16]} }
    ds      = { {defs={}, expr=v2038[16]} }
    fs      = { {defs={}, expr=v2039[16]} }
    gs      = { {defs={}, expr=v2040[16]} }
    cf      = { {defs={}, expr=v2041[1]} }
    ?1      = { {defs={}, expr=v2042[1]} }
    pf      = { {defs={}, expr=v2043[1]} }
    ?3      = { {defs={}, expr=v2044[1]} }
    af      = { {defs={}, expr=v2045[1]} }
    ?5      = { {defs={}, expr=v2046[1]} }
    zf      = { {defs={}, expr=v2047[1]} }
    sf      = { {defs={}, expr=v2048[1]} }
    tf      = { {defs={}, expr=v2049[1]} }
    if      = { {defs={}, expr=v2050[1]} }
    df      = { {defs={}, expr=v2051[1]} }
    of      = { {defs={}, expr=v2052[1]} }
    iopl0   = { {defs={}, expr=v2053[1]} }
    iopl1   = { {defs={}, expr=v2054[1]} }
    nt      = { {defs={}, expr=v2055[1]} }
    ?15     = { {defs={}, expr=v2056[1]} }
    rf      = { {defs={}, expr=v2057[1]} }
    vm      = { {defs={}, expr=v2058[1]} }
    ac      = { {defs={}, expr=v2059[1]} }
    vif     = { {defs={}, expr=v2060[1]} }
    vip     = { {defs={}, expr=v2061[1]} }
    id      = { {defs={}, expr=v2062[1]} }
    ?22     = { {defs={}, expr=v2063[1]} }
    ?23     = { {defs={}, expr=v2064[1]} }
    ?24     = { {defs={}, expr=v2065[1]} }
    ?25     = { {defs={}, expr=v2066[1]} }
    ?26     = { {defs={}, expr=v2067[1]} }
    ?27     = { {defs={}, expr=v2068[1]} }
    ?28     = { {defs={}, expr=v2069[1]} }
    ?29     = { {defs={}, expr=v2070[1]} }
    ?30     = { {defs={}, expr=v2071[1]} }
    ?31     = { {defs={}, expr=v2072[1]} }
    ip      = { {defs={0x0804854f}, expr=0x08048552[32]} }
memory:
0x8048552:xor    edi, edi
registers:
    ax      = { {defs={}, expr=v2027[32]} }
    cx      = { {defs={}, expr=v2028[32]} }
    dx      = { {defs={}, expr=v2029[32]} }
    bx      = { {defs={}, expr=v2030[32]} }
    sp      = { {defs={}, expr=v2031[32]} }
    bp      = { {defs={}, expr=v2032[32]} }
    si      = { {defs={0x0804854f}, expr=(add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8])))} }
    di      = { {defs={0x08048552}, expr=0[32]} }
    es      = { {defs={}, expr=v2035[16]} }
    cs      = { {defs={}, expr=v2036[16]} }
    ss      = { {defs={}, expr=v2037[16]} }
    ds      = { {defs={}, expr=v2038[16]} }
    fs      = { {defs={}, expr=v2039[16]} }
    gs      = { {defs={}, expr=v2040[16]} }
    cf      = { {defs={0x08048552}, expr=0[1]} }
    ?1      = { {defs={}, expr=v2042[1]} }
    pf      = { {defs={0x08048552}, expr=1[1]} }
    ?3      = { {defs={}, expr=v2044[1]} }
    af      = { {defs={}, expr=v2073[1]} }
    ?5      = { {defs={}, expr=v2046[1]} }
    zf      = { {defs={0x08048552}, expr=1[1]} }
    sf      = { {defs={0x08048552}, expr=0[1]} }
    tf      = { {defs={}, expr=v2049[1]} }
    if      = { {defs={}, expr=v2050[1]} }
    df      = { {defs={}, expr=v2051[1]} }
    of      = { {defs={0x08048552}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v2053[1]} }
    iopl1   = { {defs={}, expr=v2054[1]} }
    nt      = { {defs={}, expr=v2055[1]} }
    ?15     = { {defs={}, expr=v2056[1]} }
    rf      = { {defs={}, expr=v2057[1]} }
    vm      = { {defs={}, expr=v2058[1]} }
    ac      = { {defs={}, expr=v2059[1]} }
    vif     = { {defs={}, expr=v2060[1]} }
    vip     = { {defs={}, expr=v2061[1]} }
    id      = { {defs={}, expr=v2062[1]} }
    ?22     = { {defs={}, expr=v2063[1]} }
    ?23     = { {defs={}, expr=v2064[1]} }
    ?24     = { {defs={}, expr=v2065[1]} }
    ?25     = { {defs={}, expr=v2066[1]} }
    ?26     = { {defs={}, expr=v2067[1]} }
    ?27     = { {defs={}, expr=v2068[1]} }
    ?28     = { {defs={}, expr=v2069[1]} }
    ?29     = { {defs={}, expr=v2070[1]} }
    ?30     = { {defs={}, expr=v2071[1]} }
    ?31     = { {defs={}, expr=v2072[1]} }
    ip      = { {defs={0x08048552}, expr=0x08048554[32]} }
memory:
0x8048554:lea    esi, [esi + 0x00000000]
registers:
    ax      = { {defs={}, expr=v2027[32]} }
    cx      = { {defs={}, expr=v2028[32]} }
    dx      = { {defs={}, expr=v2029[32]} }
    bx      = { {defs={}, expr=v2030[32]} }
    sp      = { {defs={}, expr=v2031[32]} }
    bp      = { {defs={}, expr=v2032[32]} }
    si      = { {defs={0x0804854f}, expr=(add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8])))} }
    di      = { {defs={0x08048552}, expr=0[32]} }
    es      = { {defs={}, expr=v2035[16]} }
    cs      = { {defs={}, expr=v2036[16]} }
    ss      = { {defs={}, expr=v2037[16]} }
    ds      = { {defs={}, expr=v2038[16]} }
    fs      = { {defs={}, expr=v2039[16]} }
    gs      = { {defs={}, expr=v2040[16]} }
    cf      = { {defs={0x08048552}, expr=0[1]} }
    ?1      = { {defs={}, expr=v2042[1]} }
    pf      = { {defs={0x08048552}, expr=1[1]} }
    ?3      = { {defs={}, expr=v2044[1]} }
    af      = { {defs={}, expr=v2073[1]} }
    ?5      = { {defs={}, expr=v2046[1]} }
    zf      = { {defs={0x08048552}, expr=1[1]} }
    sf      = { {defs={0x08048552}, expr=0[1]} }
    tf      = { {defs={}, expr=v2049[1]} }
    if      = { {defs={}, expr=v2050[1]} }
    df      = { {defs={}, expr=v2051[1]} }
    of      = { {defs={0x08048552}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v2053[1]} }
    iopl1   = { {defs={}, expr=v2054[1]} }
    nt      = { {defs={}, expr=v2055[1]} }
    ?15     = { {defs={}, expr=v2056[1]} }
    rf      = { {defs={}, expr=v2057[1]} }
    vm      = { {defs={}, expr=v2058[1]} }
    ac      = { {defs={}, expr=v2059[1]} }
    vif     = { {defs={}, expr=v2060[1]} }
    vip     = { {defs={}, expr=v2061[1]} }
    id      = { {defs={}, expr=v2062[1]} }
    ?22     = { {defs={}, expr=v2063[1]} }
    ?23     = { {defs={}, expr=v2064[1]} }
    ?24     = { {defs={}, expr=v2065[1]} }
    ?25     = { {defs={}, expr=v2066[1]} }
    ?26     = { {defs={}, expr=v2067[1]} }
    ?27     = { {defs={}, expr=v2068[1]} }
    ?28     = { {defs={}, expr=v2069[1]} }
    ?29     = { {defs={}, expr=v2070[1]} }
    ?30     = { {defs={}, expr=v2071[1]} }
    ?31     = { {defs={}, expr=v2072[1]} }
    ip      = { {defs={0x08048554}, expr=0x0804855a[32]} }
memory:
0x804855a:lea    edi, [edi + 0x00000000]
registers:
    ax      = { {defs={}, expr=v2027[32]} }
    cx      = { {defs={}, expr=v2028[32]} }
    dx      = { {defs={}, expr=v2029[32]} }
    bx      = { {defs={}, expr=v2030[32]} }
    sp      = { {defs={}, expr=v2031[32]} }
    bp      = { {defs={}, expr=v2032[32]} }
    si      = { {defs={0x0804854f}, expr=(add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8])))} }
    di      = { {defs={0x08048552,0x0804855a}, expr=0[32]} }
    es      = { {defs={}, expr=v2035[16]} }
    cs      = { {defs={}, expr=v2036[16]} }
    ss      = { {defs={}, expr=v2037[16]} }
    ds      = { {defs={}, expr=v2038[16]} }
    fs      = { {defs={}, expr=v2039[16]} }
    gs      = { {defs={}, expr=v2040[16]} }
    cf      = { {defs={0x08048552}, expr=0[1]} }
    ?1      = { {defs={}, expr=v2042[1]} }
    pf      = { {defs={0x08048552}, expr=1[1]} }
    ?3      = { {defs={}, expr=v2044[1]} }
    af      = { {defs={}, expr=v2073[1]} }
    ?5      = { {defs={}, expr=v2046[1]} }
    zf      = { {defs={0x08048552}, expr=1[1]} }
    sf      = { {defs={0x08048552}, expr=0[1]} }
    tf      = { {defs={}, expr=v2049[1]} }
    if      = { {defs={}, expr=v2050[1]} }
    df      = { {defs={}, expr=v2051[1]} }
    of      = { {defs={0x08048552}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v2053[1]} }
    iopl1   = { {defs={}, expr=v2054[1]} }
    nt      = { {defs={}, expr=v2055[1]} }
    ?15     = { {defs={}, expr=v2056[1]} }
    rf      = { {defs={}, expr=v2057[1]} }
    vm      = { {defs={}, expr=v2058[1]} }
    ac      = { {defs={}, expr=v2059[1]} }
    vif     = { {defs={}, expr=v2060[1]} }
    vip     = { {defs={}, expr=v2061[1]} }
    id      = { {defs={}, expr=v2062[1]} }
    ?22     = { {defs={}, expr=v2063[1]} }
    ?23     = { {defs={}, expr=v2064[1]} }
    ?24     = { {defs={}, expr=v2065[1]} }
    ?25     = { {defs={}, expr=v2066[1]} }
    ?26     = { {defs={}, expr=v2067[1]} }
    ?27     = { {defs={}, expr=v2068[1]} }
    ?28     = { {defs={}, expr=v2069[1]} }
    ?29     = { {defs={}, expr=v2070[1]} }
    ?30     = { {defs={}, expr=v2071[1]} }
    ?31     = { {defs={}, expr=v2072[1]} }
    ip      = { {defs={0x0804855a}, expr=0x08048560[32]} }
memory:
0x8048560:call   DWORD PTR ds:[esi]
registers:
    ax      = { {defs={}, expr=v2027[32]} }
    cx      = { {defs={}, expr=v2028[32]} }
    dx      = { {defs={}, expr=v2029[32]} }
    bx      = { {defs={}, expr=v2030[32]} }
    sp      = { {defs={0x08048560}, expr=(add[32] v2031[32] -4[32])} }
    bp      = { {defs={}, expr=v2032[32]} }
    si      = { {defs={0x0804854f}, expr=(add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8])))} }
    di      = { {defs={0x08048552,0x0804855a}, expr=0[32]} }
    es      = { {defs={}, expr=v2035[16]} }
    cs      = { {defs={}, expr=v2036[16]} }
    ss      = { {defs={}, expr=v2037[16]} }
    ds      = { {defs={}, expr=v2038[16]} }
    fs      = { {defs={}, expr=v2039[16]} }
    gs      = { {defs={}, expr=v2040[16]} }
    cf      = { {defs={0x08048552}, expr=0[1]} }
    ?1      = { {defs={}, expr=v2042[1]} }
    pf      = { {defs={0x08048552}, expr=1[1]} }
    ?3      = { {defs={}, expr=v2044[1]} }
    af      = { {defs={}, expr=v2073[1]} }
    ?5      = { {defs={}, expr=v2046[1]} }
    zf      = { {defs={0x08048552}, expr=1[1]} }
    sf      = { {defs={0x08048552}, expr=0[1]} }
    tf      = { {defs={}, expr=v2049[1]} }
    if      = { {defs={}, expr=v2050[1]} }
    df      = { {defs={}, expr=v2051[1]} }
    of      = { {defs={0x08048552}, expr=0[1]} }
    iopl0   = { {defs={}, expr=v2053[1]} }
    iopl1   = { {defs={}, expr=v2054[1]} }
    nt      = { {defs={}, expr=v2055[1]} }
    ?15     = { {defs={}, expr=v2056[1]} }
    rf      = { {defs={}, expr=v2057[1]} }
    vm      = { {defs={}, expr=v2058[1]} }
    ac      = { {defs={}, expr=v2059[1]} }
    vif     = { {defs={}, expr=v2060[1]} }
    vip     = { {defs={}, expr=v2061[1]} }
    id      = { {defs={}, expr=v2062[1]} }
    ?22     = { {defs={}, expr=v2063[1]} }
    ?23     = { {defs={}, expr=v2064[1]} }
    ?24     = { {defs={}, expr=v2065[1]} }
    ?25     = { {defs={}, expr=v2066[1]} }
    ?26     = { {defs={}, expr=v2067[1]} }
    ?27     = { {defs={}, expr=v2068[1]} }
    ?28     = { {defs={}, expr=v2069[1]} }
    ?29     = { {defs={}, expr=v2070[1]} }
    ?30     = { {defs={}, expr=v2071[1]} }
    ?31     = { {defs={}, expr=v2072[1]} }
    ip      = { {defs={0x08048560}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2076[8] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) (extract[8] 0[32] 8[32] v2074[32])) (add[32] v2031[32] -4[32]) 98[8]) (add[32] (add[32] v2031[32] -4[32]) 1[32]) -123[8]) (add[32] (add[32] v2031[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v2031[32] -4[32]) 3[32]) 8[8]) (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2078[8] (add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 1[32]) (extract[8] 8[32] 16[32] v2074[32])) (add[32] v2031[32] -4[32]) 98[8]) (add[32] (add[32] v2031[32] -4[32]) 1[32]) -123[8]) (add[32] (add[32] v2031[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v2031[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2080[8] (add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 2[32]) (extract[8] 16[32] 24[32] v2074[32])) (add[32] v2031[32] -4[32]) 98[8]) (add[32] (add[32] v2031[32] -4[32]) 1[32]) -123[8]) (add[32] (add[32] v2031[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v2031[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2082[8] (add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 3[32]) (extract[8] 24[32] 32[32] v2074[32])) (add[32] v2031[32] -4[32]) 98[8]) (add[32] (add[32] v2031[32] -4[32]) 1[32]) -123[8]) (add[32] (add[32] v2031[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v2031[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 3[32])))))} }
memory:
    addr={defs={0x0804854f,0x08048560}, expr=(add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 3[32])} value={defs={0x08048560}, expr=(extract[8] 24[32] 32[32] v2074[32])}
    addr={defs={0x0804854f,0x08048560}, expr=(add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 2[32])} value={defs={0x08048560}, expr=(extract[8] 16[32] 24[32] v2074[32])}
    addr={defs={0x0804854f,0x08048560}, expr=(add[32] (add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8]))) 1[32])} value={defs={0x08048560}, expr=(extract[8] 8[32] 16[32] v2074[32])}
    addr={defs={0x0804854f}, expr=(add[32] v2029[32] (extract[32] 0[32] 32[32] (umul[40] v2027[32] 4[8])))} value={defs={0x08048560}, expr=(extract[8] 0[32] 8[32] v2074[32])}
    addr={defs={0x08048560}, expr=(add[32] (add[32] v2031[32] -4[32]) 3[32])} value={defs={0x08048560}, expr=8[8]}
    addr={defs={0x08048560}, expr=(add[32] (add[32] v2031[32] -4[32]) 2[32])} value={defs={0x08048560}, expr=4[8]}
    addr={defs={0x08048560}, expr=(add[32] (add[32] v2031[32] -4[32]) 1[32])} value={defs={0x08048560}, expr=-123[8]}
    addr={defs={0x08048560}, expr=(add[32] v2031[32] -4[32])} value={defs={0x08048560}, expr=98[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
registers:
    ax      = { {defs={}, expr=v2085[32]} }
    cx      = { {defs={}, expr=v2086[32]} }
    dx      = { {defs={}, expr=v2087[32]} }
    bx      = { {defs={}, expr=v2088[32]} }
    sp      = { {defs={}, expr=v2089[32]} }
    bp      = { {defs={}, expr=v2090[32]} }
    si      = { {defs={}, expr=v2091[32]} }
    di      = { {defs={0x08048562}, expr=(add[32] v2092[32] 1[32])} }
    es      = { {defs={}, expr=v2093[16]} }
    cs      = { {defs={}, expr=v2094[16]} }
    ss      = { {defs={}, expr=v2095[16]} }
    ds      = { {defs={}, expr=v2096[16]} }
    fs      = { {defs={}, expr=v2097[16]} }
    gs      = { {defs={}, expr=v2098[16]} }
    cf      = { {defs={}, expr=v2099[1]} }
    ?1      = { {defs={}, expr=v2100[1]} }
    pf      = { {defs={0x08048562}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2092[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2092[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2092[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2092[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2092[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2092[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2092[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2092[32] 1[32])))))))} }
    ?3      = { {defs={}, expr=v2102[1]} }
    af      = { {defs={0x08048562}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2092[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2092[32]) 1[33])))))} }
    ?5      = { {defs={}, expr=v2104[1]} }
    zf      = { {defs={0x08048562}, expr=(zerop[1] (add[32] v2092[32] 1[32]))} }
    sf      = { {defs={0x08048562}, expr=(extract[1] 31[32] 32[32] (add[32] v2092[32] 1[32]))} }
    tf      = { {defs={}, expr=v2107[1]} }
    if      = { {defs={}, expr=v2108[1]} }
    df      = { {defs={}, expr=v2109[1]} }
    of      = { {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2092[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2092[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2092[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2092[32]) 1[33]))))))} }
    iopl0   = { {defs={}, expr=v2111[1]} }
    iopl1   = { {defs={}, expr=v2112[1]} }
    nt      = { {defs={}, expr=v2113[1]} }
    ?15     = { {defs={}, expr=v2114[1]} }
    rf      = { {defs={}, expr=v2115[1]} }
    vm      = { {defs={}, expr=v2116[1]} }
    ac      = { {defs={}, expr=v2117[1]} }
    vif     = { {defs={}, expr=v2118[1]} }
    vip     = { {defs={}, expr=v2119[1]} }
    id      = { {defs={}, expr=v2120[1]} }
    ?22     = { {defs={}, expr=v2121[1]} }
    ?23     = { {defs={}, expr=v2122[1]} }
    ?24     = { {defs={}, expr=v2123[1]} }
    ?25     = { {defs={}, expr=v2124[1]} }
    ?26     = { {defs={}, expr=v2125[1]} }
    ?27     = { {defs={}, expr=v2126[1]} }
    ?28     = { {defs={}, expr=v2127[1]} }
    ?29     = { {defs={}, expr=v2128[1]} }
    ?30     = { {defs={}, expr=v2129[1]} }
    ?31     = { {defs={}, expr=v2130[1]} }
    ip      = { {defs={0x08048562}, expr=0x08048563[32]} }
memory:
0x8048563:sub    esi, 0x04
registers:
    ax      = { {defs={}, expr=v2085[32]} }
    cx      = { {defs={}, expr=v2086[32]} }
    dx      = { {defs={}, expr=v2087[32]} }
    bx      = { {defs={}, expr=v2088[32]} }
    sp      = { {defs={}, expr=v2089[32]} }
    bp      = { {defs={}, expr=v2090[32]} }
    si      = { {defs={0x08048563}, expr=(add[32] v2091[32] -4[32])} }
    di      = { {defs={0x08048562}, expr=(add[32] v2092[32] 1[32])} }
    es      = { {defs={}, expr=v2093[16]} }
    cs      = { {defs={}, expr=v2094[16]} }
    ss      = { {defs={}, expr=v2095[16]} }
    ds      = { {defs={}, expr=v2096[16]} }
    fs      = { {defs={}, expr=v2097[16]} }
    gs      = { {defs={}, expr=v2098[16]} }
    cf      = { {defs={0x08048563}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2091[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2091[32]) 4294967292[33]))))))} }
    ?1      = { {defs={}, expr=v2100[1]} }
    pf      = { {defs={0x08048563}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2091[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2091[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2091[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2091[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2091[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2091[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2091[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2091[32] -4[32])))))))} }
    ?3      = { {defs={}, expr=v2102[1]} }
    af      = { {defs={0x08048563}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2091[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2091[32]) 4294967292[33]))))))} }
    ?5      = { {defs={}, expr=v2104[1]} }
    zf      = { {defs={0x08048563}, expr=(zerop[1] (add[32] v2091[32] -4[32]))} }
    sf      = { {defs={0x08048563}, expr=(extract[1] 31[32] 32[32] (add[32] v2091[32] -4[32]))} }
    tf      = { {defs={}, expr=v2107[1]} }
    if      = { {defs={}, expr=v2108[1]} }
    df      = { {defs={}, expr=v2109[1]} }
    of      = { {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2091[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2091[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2091[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2091[32]) 4294967292[33]))))))} }
    iopl0   = { {defs={}, expr=v2111[1]} }
    iopl1   = { {defs={}, expr=v2112[1]} }
    nt      = { {defs={}, expr=v2113[1]} }
    ?15     = { {defs={}, expr=v2114[1]} }
    rf      = { {defs={}, expr=v2115[1]} }
    vm      = { {defs={}, expr=v2116[1]} }
    ac      = { {defs={}, expr=v2117[1]} }
    vif     = { {defs={}, expr=v2118[1]} }
    vip     = { {defs={}, expr=v2119[1]} }
    id      = { {defs={}, expr=v2120[1]} }
    ?22     = { {defs={}, expr=v2121[1]} }
    ?23     = { {defs={}, expr=v2122[1]} }
    ?24     = { {defs={}, expr=v2123[1]} }
    ?25     = { {defs={}, expr=v2124[1]} }
    ?26     = { {defs={}, expr=v2125[1]} }
    ?27     = { {defs={}, expr=v2126[1]} }
    ?28     = { {defs={}, expr=v2127[1]} }
    ?29     = { {defs={}, expr=v2128[1]} }
    ?30     = { {defs={}, expr=v2129[1]} }
    ?31     = { {defs={}, expr=v2130[1]} }
    ip      = { {defs={0x08048563}, expr=0x08048566[32]} }
memory:
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
registers:
    ax      = { {defs={}, expr=v2085[32]} }
    cx      = { {defs={}, expr=v2086[32]} }
    dx      = { {defs={}, expr=v2087[32]} }
    bx      = { {defs={}, expr=v2088[32]} }
    sp      = { {defs={}, expr=v2089[32]} }
    bp      = { {defs={}, expr=v2090[32]} }
    si      = { {defs={0x08048563}, expr=(add[32] v2091[32] -4[32])} }
    di      = { {defs={0x08048562}, expr=(add[32] v2092[32] 1[32])} }
    es      = { {defs={}, expr=v2093[16]} }
    cs      = { {defs={}, expr=v2094[16]} }
    ss      = { {defs={}, expr=v2095[16]} }
    ds      = { {defs={}, expr=v2096[16]} }
    fs      = { {defs={}, expr=v2097[16]} }
    gs      = { {defs={}, expr=v2098[16]} }
    cf      = { {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2131[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) (add[33] (uextend[33] 33[32] v2131[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) 1[33])))))))} }
    ?1      = { {defs={}, expr=v2100[1]} }
    pf      = { {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32]))))))))} }
    ?3      = { {defs={}, expr=v2102[1]} }
    af      = { {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2131[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) (add[33] (uextend[33] 33[32] v2131[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) 1[33])))))))} }
    ?5      = { {defs={}, expr=v2104[1]} }
    zf      = { {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))} }
    sf      = { {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))} }
    tf      = { {defs={}, expr=v2107[1]} }
    if      = { {defs={}, expr=v2108[1]} }
    df      = { {defs={}, expr=v2109[1]} }
    of      = { {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2131[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) (add[33] (uextend[33] 33[32] v2131[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2131[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) (add[33] (uextend[33] 33[32] v2131[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) 1[33])))))))} }
    iopl0   = { {defs={}, expr=v2111[1]} }
    iopl1   = { {defs={}, expr=v2112[1]} }
    nt      = { {defs={}, expr=v2113[1]} }
    ?15     = { {defs={}, expr=v2114[1]} }
    rf      = { {defs={}, expr=v2115[1]} }
    vm      = { {defs={}, expr=v2116[1]} }
    ac      = { {defs={}, expr=v2117[1]} }
    vif     = { {defs={}, expr=v2118[1]} }
    vip     = { {defs={}, expr=v2119[1]} }
    id      = { {defs={}, expr=v2120[1]} }
    ?22     = { {defs={}, expr=v2121[1]} }
    ?23     = { {defs={}, expr=v2122[1]} }
    ?24     = { {defs={}, expr=v2123[1]} }
    ?25     = { {defs={}, expr=v2124[1]} }
    ?26     = { {defs={}, expr=v2125[1]} }
    ?27     = { {defs={}, expr=v2126[1]} }
    ?28     = { {defs={}, expr=v2127[1]} }
    ?29     = { {defs={}, expr=v2128[1]} }
    ?30     = { {defs={}, expr=v2129[1]} }
    ?31     = { {defs={}, expr=v2130[1]} }
    ip      = { {defs={0x08048566}, expr=0x08048569[32]} }
memory:
    addr={defs={0x08048566}, expr=(add[32] (add[32] v2090[32] -16[32]) 3[32])} value={defs={0x08048566}, expr=(extract[8] 24[32] 32[32] v2131[32])}
    addr={defs={0x08048566}, expr=(add[32] (add[32] v2090[32] -16[32]) 2[32])} value={defs={0x08048566}, expr=(extract[8] 16[32] 24[32] v2131[32])}
    addr={defs={0x08048566}, expr=(add[32] (add[32] v2090[32] -16[32]) 1[32])} value={defs={0x08048566}, expr=(extract[8] 8[32] 16[32] v2131[32])}
    addr={defs={0x08048566}, expr=(add[32] v2090[32] -16[32])} value={defs={0x08048566}, expr=(extract[8] 0[32] 8[32] v2131[32])}
0x8048569:jne    0x08048560<<Insn>>
registers:
    ax      = { {defs={}, expr=v2085[32]} }
    cx      = { {defs={}, expr=v2086[32]} }
    dx      = { {defs={}, expr=v2087[32]} }
    bx      = { {defs={}, expr=v2088[32]} }
    sp      = { {defs={}, expr=v2089[32]} }
    bp      = { {defs={}, expr=v2090[32]} }
    si      = { {defs={0x08048563}, expr=(add[32] v2091[32] -4[32])} }
    di      = { {defs={0x08048562}, expr=(add[32] v2092[32] 1[32])} }
    es      = { {defs={}, expr=v2093[16]} }
    cs      = { {defs={}, expr=v2094[16]} }
    ss      = { {defs={}, expr=v2095[16]} }
    ds      = { {defs={}, expr=v2096[16]} }
    fs      = { {defs={}, expr=v2097[16]} }
    gs      = { {defs={}, expr=v2098[16]} }
    cf      = { {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2131[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) (add[33] (uextend[33] 33[32] v2131[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) 1[33])))))))} }
    ?1      = { {defs={}, expr=v2100[1]} }
    pf      = { {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32]))))))))} }
    ?3      = { {defs={}, expr=v2102[1]} }
    af      = { {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2131[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) (add[33] (uextend[33] 33[32] v2131[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) 1[33])))))))} }
    ?5      = { {defs={}, expr=v2104[1]} }
    zf      = { {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))} }
    sf      = { {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))} }
    tf      = { {defs={}, expr=v2107[1]} }
    if      = { {defs={}, expr=v2108[1]} }
    df      = { {defs={}, expr=v2109[1]} }
    of      = { {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2131[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) (add[33] (uextend[33] 33[32] v2131[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2131[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) (add[33] (uextend[33] 33[32] v2131[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2092[32] 1[32]))) 1[33])))))))} }
    iopl0   = { {defs={}, expr=v2111[1]} }
    iopl1   = { {defs={}, expr=v2112[1]} }
    nt      = { {defs={}, expr=v2113[1]} }
    ?15     = { {defs={}, expr=v2114[1]} }
    rf      = { {defs={}, expr=v2115[1]} }
    vm      = { {defs={}, expr=v2116[1]} }
    ac      = { {defs={}, expr=v2117[1]} }
    vif     = { {defs={}, expr=v2118[1]} }
    vip     = { {defs={}, expr=v2119[1]} }
    id      = { {defs={}, expr=v2120[1]} }
    ?22     = { {defs={}, expr=v2121[1]} }
    ?23     = { {defs={}, expr=v2122[1]} }
    ?24     = { {defs={}, expr=v2123[1]} }
    ?25     = { {defs={}, expr=v2124[1]} }
    ?26     = { {defs={}, expr=v2125[1]} }
    ?27     = { {defs={}, expr=v2126[1]} }
    ?28     = { {defs={}, expr=v2127[1]} }
    ?29     = { {defs={}, expr=v2128[1]} }
    ?30     = { {defs={}, expr=v2129[1]} }
    ?31     = { {defs={}, expr=v2130[1]} }
    ip      = { {defs={0x08048562,0x08048566,0x08048569}, expr=(ite[32] (invert[1] (zerop[1] (add[32] v2131[32] (add[32] (invert[32] (add[32] v2092[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32])} }
memory:
    addr={defs={0x08048566}, expr=(add[32] (add[32] v2090[32] -16[32]) 3[32])} value={defs={0x08048566}, expr=(extract[8] 24[32] 32[32] v2131[32])}
    addr={defs={0x08048566}, expr=(add[32] (add[32] v2090[32] -16[32]) 2[32])} value={defs={0x08048566}, expr=(extract[8] 16[32] 24[32] v2131[32])}
    addr={defs={0x08048566}, expr=(add[32] (add[32] v2090[32] -16[32]) 1[32])} value={defs={0x08048566}, expr=(extract[8] 8[32] 16[32] v2131[32])}
    addr={defs={0x08048566}, expr=(add[32] v2090[32] -16[32])} value={defs={0x08048566}, expr=(extract[8] 0[32] 8[32] v2131[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
registers:
    ax      = { {defs={}, expr=v2138[32]} }
    cx      = { {defs={}, expr=v2139[32]} }
    dx      = { {defs={}, expr=v2140[32]} }
    bx      = { {defs={}, expr=v2141[32]} }
    sp      = { {defs={0x08048570}, expr=(add[32] v2142[32] 12[32])} }
    bp      = { {defs={}, expr=v2143[32]} }
    si      = { {defs={}, expr=v2144[32]} }
    di      = { {defs={}, expr=v2145[32]} }
    es      = { {defs={}, expr=v2146[16]} }
    cs      = { {defs={}, expr=v2147[16]} }
    ss      = { {defs={}, expr=v2148[16]} }
    ds      = { {defs={}, expr=v2149[16]} }
    fs      = { {defs={}, expr=v2150[16]} }
    gs      = { {defs={}, expr=v2151[16]} }
    cf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v2153[1]} }
    pf      = { {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v2155[1]} }
    af      = { {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v2157[1]} }
    zf      = { {defs={0x08048570}, expr=(zerop[1] (add[32] v2142[32] 12[32]))} }
    sf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v2142[32] 12[32]))} }
    tf      = { {defs={}, expr=v2160[1]} }
    if      = { {defs={}, expr=v2161[1]} }
    df      = { {defs={}, expr=v2162[1]} }
    of      = { {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v2164[1]} }
    iopl1   = { {defs={}, expr=v2165[1]} }
    nt      = { {defs={}, expr=v2166[1]} }
    ?15     = { {defs={}, expr=v2167[1]} }
    rf      = { {defs={}, expr=v2168[1]} }
    vm      = { {defs={}, expr=v2169[1]} }
    ac      = { {defs={}, expr=v2170[1]} }
    vif     = { {defs={}, expr=v2171[1]} }
    vip     = { {defs={}, expr=v2172[1]} }
    id      = { {defs={}, expr=v2173[1]} }
    ?22     = { {defs={}, expr=v2174[1]} }
    ?23     = { {defs={}, expr=v2175[1]} }
    ?24     = { {defs={}, expr=v2176[1]} }
    ?25     = { {defs={}, expr=v2177[1]} }
    ?26     = { {defs={}, expr=v2178[1]} }
    ?27     = { {defs={}, expr=v2179[1]} }
    ?28     = { {defs={}, expr=v2180[1]} }
    ?29     = { {defs={}, expr=v2181[1]} }
    ?30     = { {defs={}, expr=v2182[1]} }
    ?31     = { {defs={}, expr=v2183[1]} }
    ip      = { {defs={0x08048570}, expr=0x08048573[32]} }
memory:
0x8048573:pop    ebx
registers:
    ax      = { {defs={}, expr=v2138[32]} }
    cx      = { {defs={}, expr=v2139[32]} }
    dx      = { {defs={}, expr=v2140[32]} }
    bx      = { {defs={0x08048573}, expr=v2184[32]} }
    sp      = { {defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 4[32])} }
    bp      = { {defs={}, expr=v2143[32]} }
    si      = { {defs={}, expr=v2144[32]} }
    di      = { {defs={}, expr=v2145[32]} }
    es      = { {defs={}, expr=v2146[16]} }
    cs      = { {defs={}, expr=v2147[16]} }
    ss      = { {defs={}, expr=v2148[16]} }
    ds      = { {defs={}, expr=v2149[16]} }
    fs      = { {defs={}, expr=v2150[16]} }
    gs      = { {defs={}, expr=v2151[16]} }
    cf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v2153[1]} }
    pf      = { {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v2155[1]} }
    af      = { {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v2157[1]} }
    zf      = { {defs={0x08048570}, expr=(zerop[1] (add[32] v2142[32] 12[32]))} }
    sf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v2142[32] 12[32]))} }
    tf      = { {defs={}, expr=v2160[1]} }
    if      = { {defs={}, expr=v2161[1]} }
    df      = { {defs={}, expr=v2162[1]} }
    of      = { {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v2164[1]} }
    iopl1   = { {defs={}, expr=v2165[1]} }
    nt      = { {defs={}, expr=v2166[1]} }
    ?15     = { {defs={}, expr=v2167[1]} }
    rf      = { {defs={}, expr=v2168[1]} }
    vm      = { {defs={}, expr=v2169[1]} }
    ac      = { {defs={}, expr=v2170[1]} }
    vif     = { {defs={}, expr=v2171[1]} }
    vip     = { {defs={}, expr=v2172[1]} }
    id      = { {defs={}, expr=v2173[1]} }
    ?22     = { {defs={}, expr=v2174[1]} }
    ?23     = { {defs={}, expr=v2175[1]} }
    ?24     = { {defs={}, expr=v2176[1]} }
    ?25     = { {defs={}, expr=v2177[1]} }
    ?26     = { {defs={}, expr=v2178[1]} }
    ?27     = { {defs={}, expr=v2179[1]} }
    ?28     = { {defs={}, expr=v2180[1]} }
    ?29     = { {defs={}, expr=v2181[1]} }
    ?30     = { {defs={}, expr=v2182[1]} }
    ?31     = { {defs={}, expr=v2183[1]} }
    ip      = { {defs={0x08048573}, expr=0x08048574[32]} }
memory:
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v2184[32])}
    addr={defs={0x08048570}, expr=(add[32] v2142[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v2184[32])}
0x8048574:pop    esi
registers:
    ax      = { {defs={}, expr=v2138[32]} }
    cx      = { {defs={}, expr=v2139[32]} }
    dx      = { {defs={}, expr=v2140[32]} }
    bx      = { {defs={0x08048573}, expr=v2184[32]} }
    sp      = { {defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32])} }
    bp      = { {defs={}, expr=v2143[32]} }
    si      = { {defs={0x08048574}, expr=v2189[32]} }
    di      = { {defs={}, expr=v2145[32]} }
    es      = { {defs={}, expr=v2146[16]} }
    cs      = { {defs={}, expr=v2147[16]} }
    ss      = { {defs={}, expr=v2148[16]} }
    ds      = { {defs={}, expr=v2149[16]} }
    fs      = { {defs={}, expr=v2150[16]} }
    gs      = { {defs={}, expr=v2151[16]} }
    cf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v2153[1]} }
    pf      = { {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v2155[1]} }
    af      = { {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v2157[1]} }
    zf      = { {defs={0x08048570}, expr=(zerop[1] (add[32] v2142[32] 12[32]))} }
    sf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v2142[32] 12[32]))} }
    tf      = { {defs={}, expr=v2160[1]} }
    if      = { {defs={}, expr=v2161[1]} }
    df      = { {defs={}, expr=v2162[1]} }
    of      = { {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v2164[1]} }
    iopl1   = { {defs={}, expr=v2165[1]} }
    nt      = { {defs={}, expr=v2166[1]} }
    ?15     = { {defs={}, expr=v2167[1]} }
    rf      = { {defs={}, expr=v2168[1]} }
    vm      = { {defs={}, expr=v2169[1]} }
    ac      = { {defs={}, expr=v2170[1]} }
    vif     = { {defs={}, expr=v2171[1]} }
    vip     = { {defs={}, expr=v2172[1]} }
    id      = { {defs={}, expr=v2173[1]} }
    ?22     = { {defs={}, expr=v2174[1]} }
    ?23     = { {defs={}, expr=v2175[1]} }
    ?24     = { {defs={}, expr=v2176[1]} }
    ?25     = { {defs={}, expr=v2177[1]} }
    ?26     = { {defs={}, expr=v2178[1]} }
    ?27     = { {defs={}, expr=v2179[1]} }
    ?28     = { {defs={}, expr=v2180[1]} }
    ?29     = { {defs={}, expr=v2181[1]} }
    ?30     = { {defs={}, expr=v2182[1]} }
    ?31     = { {defs={}, expr=v2183[1]} }
    ip      = { {defs={0x08048574}, expr=0x08048575[32]} }
memory:
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 3[32])} value={defs={0x08048574}, expr=(extract[8] 24[32] 32[32] v2189[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 2[32])} value={defs={0x08048574}, expr=(extract[8] 16[32] 24[32] v2189[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 1[32])} value={defs={0x08048574}, expr=(extract[8] 8[32] 16[32] v2189[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 4[32])} value={defs={0x08048574}, expr=(extract[8] 0[32] 8[32] v2189[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v2184[32])}
    addr={defs={0x08048570}, expr=(add[32] v2142[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v2184[32])}
0x8048575:pop    edi
registers:
    ax      = { {defs={}, expr=v2138[32]} }
    cx      = { {defs={}, expr=v2139[32]} }
    dx      = { {defs={}, expr=v2140[32]} }
    bx      = { {defs={0x08048573}, expr=v2184[32]} }
    sp      = { {defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32])} }
    bp      = { {defs={}, expr=v2143[32]} }
    si      = { {defs={0x08048574}, expr=v2189[32]} }
    di      = { {defs={0x08048575}, expr=v2194[32]} }
    es      = { {defs={}, expr=v2146[16]} }
    cs      = { {defs={}, expr=v2147[16]} }
    ss      = { {defs={}, expr=v2148[16]} }
    ds      = { {defs={}, expr=v2149[16]} }
    fs      = { {defs={}, expr=v2150[16]} }
    gs      = { {defs={}, expr=v2151[16]} }
    cf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v2153[1]} }
    pf      = { {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v2155[1]} }
    af      = { {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v2157[1]} }
    zf      = { {defs={0x08048570}, expr=(zerop[1] (add[32] v2142[32] 12[32]))} }
    sf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v2142[32] 12[32]))} }
    tf      = { {defs={}, expr=v2160[1]} }
    if      = { {defs={}, expr=v2161[1]} }
    df      = { {defs={}, expr=v2162[1]} }
    of      = { {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v2164[1]} }
    iopl1   = { {defs={}, expr=v2165[1]} }
    nt      = { {defs={}, expr=v2166[1]} }
    ?15     = { {defs={}, expr=v2167[1]} }
    rf      = { {defs={}, expr=v2168[1]} }
    vm      = { {defs={}, expr=v2169[1]} }
    ac      = { {defs={}, expr=v2170[1]} }
    vif     = { {defs={}, expr=v2171[1]} }
    vip     = { {defs={}, expr=v2172[1]} }
    id      = { {defs={}, expr=v2173[1]} }
    ?22     = { {defs={}, expr=v2174[1]} }
    ?23     = { {defs={}, expr=v2175[1]} }
    ?24     = { {defs={}, expr=v2176[1]} }
    ?25     = { {defs={}, expr=v2177[1]} }
    ?26     = { {defs={}, expr=v2178[1]} }
    ?27     = { {defs={}, expr=v2179[1]} }
    ?28     = { {defs={}, expr=v2180[1]} }
    ?29     = { {defs={}, expr=v2181[1]} }
    ?30     = { {defs={}, expr=v2182[1]} }
    ?31     = { {defs={}, expr=v2183[1]} }
    ip      = { {defs={0x08048575}, expr=0x08048576[32]} }
memory:
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048575}, expr=(extract[8] 24[32] 32[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048575}, expr=(extract[8] 16[32] 24[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048575}, expr=(extract[8] 8[32] 16[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32])} value={defs={0x08048575}, expr=(extract[8] 0[32] 8[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 3[32])} value={defs={0x08048574}, expr=(extract[8] 24[32] 32[32] v2189[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 2[32])} value={defs={0x08048574}, expr=(extract[8] 16[32] 24[32] v2189[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 1[32])} value={defs={0x08048574}, expr=(extract[8] 8[32] 16[32] v2189[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 4[32])} value={defs={0x08048574}, expr=(extract[8] 0[32] 8[32] v2189[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v2184[32])}
    addr={defs={0x08048570}, expr=(add[32] v2142[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v2184[32])}
0x8048576:pop    ebp
registers:
    ax      = { {defs={}, expr=v2138[32]} }
    cx      = { {defs={}, expr=v2139[32]} }
    dx      = { {defs={}, expr=v2140[32]} }
    bx      = { {defs={0x08048573}, expr=v2184[32]} }
    sp      = { {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])} }
    bp      = { {defs={0x08048576}, expr=v2199[32]} }
    si      = { {defs={0x08048574}, expr=v2189[32]} }
    di      = { {defs={0x08048575}, expr=v2194[32]} }
    es      = { {defs={}, expr=v2146[16]} }
    cs      = { {defs={}, expr=v2147[16]} }
    ss      = { {defs={}, expr=v2148[16]} }
    ds      = { {defs={}, expr=v2149[16]} }
    fs      = { {defs={}, expr=v2150[16]} }
    gs      = { {defs={}, expr=v2151[16]} }
    cf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v2153[1]} }
    pf      = { {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v2155[1]} }
    af      = { {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v2157[1]} }
    zf      = { {defs={0x08048570}, expr=(zerop[1] (add[32] v2142[32] 12[32]))} }
    sf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v2142[32] 12[32]))} }
    tf      = { {defs={}, expr=v2160[1]} }
    if      = { {defs={}, expr=v2161[1]} }
    df      = { {defs={}, expr=v2162[1]} }
    of      = { {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v2164[1]} }
    iopl1   = { {defs={}, expr=v2165[1]} }
    nt      = { {defs={}, expr=v2166[1]} }
    ?15     = { {defs={}, expr=v2167[1]} }
    rf      = { {defs={}, expr=v2168[1]} }
    vm      = { {defs={}, expr=v2169[1]} }
    ac      = { {defs={}, expr=v2170[1]} }
    vif     = { {defs={}, expr=v2171[1]} }
    vip     = { {defs={}, expr=v2172[1]} }
    id      = { {defs={}, expr=v2173[1]} }
    ?22     = { {defs={}, expr=v2174[1]} }
    ?23     = { {defs={}, expr=v2175[1]} }
    ?24     = { {defs={}, expr=v2176[1]} }
    ?25     = { {defs={}, expr=v2177[1]} }
    ?26     = { {defs={}, expr=v2178[1]} }
    ?27     = { {defs={}, expr=v2179[1]} }
    ?28     = { {defs={}, expr=v2180[1]} }
    ?29     = { {defs={}, expr=v2181[1]} }
    ?30     = { {defs={}, expr=v2182[1]} }
    ?31     = { {defs={}, expr=v2183[1]} }
    ip      = { {defs={0x08048576}, expr=0x08048577[32]} }
memory:
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048576}, expr=(extract[8] 24[32] 32[32] v2199[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048576}, expr=(extract[8] 16[32] 24[32] v2199[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048576}, expr=(extract[8] 8[32] 16[32] v2199[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32])} value={defs={0x08048576}, expr=(extract[8] 0[32] 8[32] v2199[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048575}, expr=(extract[8] 24[32] 32[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048575}, expr=(extract[8] 16[32] 24[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048575}, expr=(extract[8] 8[32] 16[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32])} value={defs={0x08048575}, expr=(extract[8] 0[32] 8[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 3[32])} value={defs={0x08048574}, expr=(extract[8] 24[32] 32[32] v2189[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 2[32])} value={defs={0x08048574}, expr=(extract[8] 16[32] 24[32] v2189[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 1[32])} value={defs={0x08048574}, expr=(extract[8] 8[32] 16[32] v2189[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 4[32])} value={defs={0x08048574}, expr=(extract[8] 0[32] 8[32] v2189[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v2184[32])}
    addr={defs={0x08048570}, expr=(add[32] v2142[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v2184[32])}
0x8048577:ret    
registers:
    ax      = { {defs={}, expr=v2138[32]} }
    cx      = { {defs={}, expr=v2139[32]} }
    dx      = { {defs={}, expr=v2140[32]} }
    bx      = { {defs={0x08048573}, expr=v2184[32]} }
    sp      = { {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32])} }
    bp      = { {defs={0x08048576}, expr=v2199[32]} }
    si      = { {defs={0x08048574}, expr=v2189[32]} }
    di      = { {defs={0x08048575}, expr=v2194[32]} }
    es      = { {defs={}, expr=v2146[16]} }
    cs      = { {defs={}, expr=v2147[16]} }
    ss      = { {defs={}, expr=v2148[16]} }
    ds      = { {defs={}, expr=v2149[16]} }
    fs      = { {defs={}, expr=v2150[16]} }
    gs      = { {defs={}, expr=v2151[16]} }
    cf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?1      = { {defs={}, expr=v2153[1]} }
    pf      = { {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2142[32] 12[32])))))))} }
    ?3      = { {defs={}, expr=v2155[1]} }
    af      = { {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33])))))} }
    ?5      = { {defs={}, expr=v2157[1]} }
    zf      = { {defs={0x08048570}, expr=(zerop[1] (add[32] v2142[32] 12[32]))} }
    sf      = { {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v2142[32] 12[32]))} }
    tf      = { {defs={}, expr=v2160[1]} }
    if      = { {defs={}, expr=v2161[1]} }
    df      = { {defs={}, expr=v2162[1]} }
    of      = { {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2142[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2142[32]) 12[33]))))))} }
    iopl0   = { {defs={}, expr=v2164[1]} }
    iopl1   = { {defs={}, expr=v2165[1]} }
    nt      = { {defs={}, expr=v2166[1]} }
    ?15     = { {defs={}, expr=v2167[1]} }
    rf      = { {defs={}, expr=v2168[1]} }
    vm      = { {defs={}, expr=v2169[1]} }
    ac      = { {defs={}, expr=v2170[1]} }
    vif     = { {defs={}, expr=v2171[1]} }
    vip     = { {defs={}, expr=v2172[1]} }
    id      = { {defs={}, expr=v2173[1]} }
    ?22     = { {defs={}, expr=v2174[1]} }
    ?23     = { {defs={}, expr=v2175[1]} }
    ?24     = { {defs={}, expr=v2176[1]} }
    ?25     = { {defs={}, expr=v2177[1]} }
    ?26     = { {defs={}, expr=v2178[1]} }
    ?27     = { {defs={}, expr=v2179[1]} }
    ?28     = { {defs={}, expr=v2180[1]} }
    ?29     = { {defs={}, expr=v2181[1]} }
    ?30     = { {defs={}, expr=v2182[1]} }
    ?31     = { {defs={}, expr=v2183[1]} }
    ip      = { {defs={0x08048577}, expr=v2204[32]} }
memory:
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048577}, expr=(extract[8] 24[32] 32[32] v2204[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048577}, expr=(extract[8] 16[32] 24[32] v2204[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048577}, expr=(extract[8] 8[32] 16[32] v2204[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])} value={defs={0x08048577}, expr=(extract[8] 0[32] 8[32] v2204[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048576}, expr=(extract[8] 24[32] 32[32] v2199[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048576}, expr=(extract[8] 16[32] 24[32] v2199[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048576}, expr=(extract[8] 8[32] 16[32] v2199[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 4[32])} value={defs={0x08048576}, expr=(extract[8] 0[32] 8[32] v2199[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048575}, expr=(extract[8] 24[32] 32[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048575}, expr=(extract[8] 16[32] 24[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048575}, expr=(extract[8] 8[32] 16[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 4[32])} value={defs={0x08048575}, expr=(extract[8] 0[32] 8[32] v2194[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 3[32])} value={defs={0x08048574}, expr=(extract[8] 24[32] 32[32] v2189[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 2[32])} value={defs={0x08048574}, expr=(extract[8] 16[32] 24[32] v2189[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v2142[32] 12[32]) 4[32]) 1[32])} value={defs={0x08048574}, expr=(extract[8] 8[32] 16[32] v2189[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 4[32])} value={defs={0x08048574}, expr=(extract[8] 0[32] 8[32] v2189[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v2184[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v2142[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v2184[32])}
    addr={defs={0x08048570}, expr=(add[32] v2142[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v2184[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
registers:
    ax      = { {defs={}, expr=v2211[32]} }
    cx      = { {defs={}, expr=v2212[32]} }
    dx      = { {defs={}, expr=v2213[32]} }
    bx      = { {defs={}, expr=v2214[32]} }
    sp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    bp      = { {defs={}, expr=v2216[32]} }
    si      = { {defs={}, expr=v2217[32]} }
    di      = { {defs={}, expr=v2218[32]} }
    es      = { {defs={}, expr=v2219[16]} }
    cs      = { {defs={}, expr=v2220[16]} }
    ss      = { {defs={}, expr=v2221[16]} }
    ds      = { {defs={}, expr=v2222[16]} }
    fs      = { {defs={}, expr=v2223[16]} }
    gs      = { {defs={}, expr=v2224[16]} }
    cf      = { {defs={}, expr=v2225[1]} }
    ?1      = { {defs={}, expr=v2226[1]} }
    pf      = { {defs={}, expr=v2227[1]} }
    ?3      = { {defs={}, expr=v2228[1]} }
    af      = { {defs={}, expr=v2229[1]} }
    ?5      = { {defs={}, expr=v2230[1]} }
    zf      = { {defs={}, expr=v2231[1]} }
    sf      = { {defs={}, expr=v2232[1]} }
    tf      = { {defs={}, expr=v2233[1]} }
    if      = { {defs={}, expr=v2234[1]} }
    df      = { {defs={}, expr=v2235[1]} }
    of      = { {defs={}, expr=v2236[1]} }
    iopl0   = { {defs={}, expr=v2237[1]} }
    iopl1   = { {defs={}, expr=v2238[1]} }
    nt      = { {defs={}, expr=v2239[1]} }
    ?15     = { {defs={}, expr=v2240[1]} }
    rf      = { {defs={}, expr=v2241[1]} }
    vm      = { {defs={}, expr=v2242[1]} }
    ac      = { {defs={}, expr=v2243[1]} }
    vif     = { {defs={}, expr=v2244[1]} }
    vip     = { {defs={}, expr=v2245[1]} }
    id      = { {defs={}, expr=v2246[1]} }
    ?22     = { {defs={}, expr=v2247[1]} }
    ?23     = { {defs={}, expr=v2248[1]} }
    ?24     = { {defs={}, expr=v2249[1]} }
    ?25     = { {defs={}, expr=v2250[1]} }
    ?26     = { {defs={}, expr=v2251[1]} }
    ?27     = { {defs={}, expr=v2252[1]} }
    ?28     = { {defs={}, expr=v2253[1]} }
    ?29     = { {defs={}, expr=v2254[1]} }
    ?30     = { {defs={}, expr=v2255[1]} }
    ?31     = { {defs={}, expr=v2256[1]} }
    ip      = { {defs={0x08048580}, expr=0x08048581[32]} }
memory:
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v2216[32])}
0x8048581:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v2211[32]} }
    cx      = { {defs={}, expr=v2212[32]} }
    dx      = { {defs={}, expr=v2213[32]} }
    bx      = { {defs={}, expr=v2214[32]} }
    sp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    bp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    si      = { {defs={}, expr=v2217[32]} }
    di      = { {defs={}, expr=v2218[32]} }
    es      = { {defs={}, expr=v2219[16]} }
    cs      = { {defs={}, expr=v2220[16]} }
    ss      = { {defs={}, expr=v2221[16]} }
    ds      = { {defs={}, expr=v2222[16]} }
    fs      = { {defs={}, expr=v2223[16]} }
    gs      = { {defs={}, expr=v2224[16]} }
    cf      = { {defs={}, expr=v2225[1]} }
    ?1      = { {defs={}, expr=v2226[1]} }
    pf      = { {defs={}, expr=v2227[1]} }
    ?3      = { {defs={}, expr=v2228[1]} }
    af      = { {defs={}, expr=v2229[1]} }
    ?5      = { {defs={}, expr=v2230[1]} }
    zf      = { {defs={}, expr=v2231[1]} }
    sf      = { {defs={}, expr=v2232[1]} }
    tf      = { {defs={}, expr=v2233[1]} }
    if      = { {defs={}, expr=v2234[1]} }
    df      = { {defs={}, expr=v2235[1]} }
    of      = { {defs={}, expr=v2236[1]} }
    iopl0   = { {defs={}, expr=v2237[1]} }
    iopl1   = { {defs={}, expr=v2238[1]} }
    nt      = { {defs={}, expr=v2239[1]} }
    ?15     = { {defs={}, expr=v2240[1]} }
    rf      = { {defs={}, expr=v2241[1]} }
    vm      = { {defs={}, expr=v2242[1]} }
    ac      = { {defs={}, expr=v2243[1]} }
    vif     = { {defs={}, expr=v2244[1]} }
    vip     = { {defs={}, expr=v2245[1]} }
    id      = { {defs={}, expr=v2246[1]} }
    ?22     = { {defs={}, expr=v2247[1]} }
    ?23     = { {defs={}, expr=v2248[1]} }
    ?24     = { {defs={}, expr=v2249[1]} }
    ?25     = { {defs={}, expr=v2250[1]} }
    ?26     = { {defs={}, expr=v2251[1]} }
    ?27     = { {defs={}, expr=v2252[1]} }
    ?28     = { {defs={}, expr=v2253[1]} }
    ?29     = { {defs={}, expr=v2254[1]} }
    ?30     = { {defs={}, expr=v2255[1]} }
    ?31     = { {defs={}, expr=v2256[1]} }
    ip      = { {defs={0x08048581}, expr=0x08048583[32]} }
memory:
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v2216[32])}
0x8048583:push   ebx
registers:
    ax      = { {defs={}, expr=v2211[32]} }
    cx      = { {defs={}, expr=v2212[32]} }
    dx      = { {defs={}, expr=v2213[32]} }
    bx      = { {defs={}, expr=v2214[32]} }
    sp      = { {defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v2215[32] -4[32]) -4[32])} }
    bp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    si      = { {defs={}, expr=v2217[32]} }
    di      = { {defs={}, expr=v2218[32]} }
    es      = { {defs={}, expr=v2219[16]} }
    cs      = { {defs={}, expr=v2220[16]} }
    ss      = { {defs={}, expr=v2221[16]} }
    ds      = { {defs={}, expr=v2222[16]} }
    fs      = { {defs={}, expr=v2223[16]} }
    gs      = { {defs={}, expr=v2224[16]} }
    cf      = { {defs={}, expr=v2225[1]} }
    ?1      = { {defs={}, expr=v2226[1]} }
    pf      = { {defs={}, expr=v2227[1]} }
    ?3      = { {defs={}, expr=v2228[1]} }
    af      = { {defs={}, expr=v2229[1]} }
    ?5      = { {defs={}, expr=v2230[1]} }
    zf      = { {defs={}, expr=v2231[1]} }
    sf      = { {defs={}, expr=v2232[1]} }
    tf      = { {defs={}, expr=v2233[1]} }
    if      = { {defs={}, expr=v2234[1]} }
    df      = { {defs={}, expr=v2235[1]} }
    of      = { {defs={}, expr=v2236[1]} }
    iopl0   = { {defs={}, expr=v2237[1]} }
    iopl1   = { {defs={}, expr=v2238[1]} }
    nt      = { {defs={}, expr=v2239[1]} }
    ?15     = { {defs={}, expr=v2240[1]} }
    rf      = { {defs={}, expr=v2241[1]} }
    vm      = { {defs={}, expr=v2242[1]} }
    ac      = { {defs={}, expr=v2243[1]} }
    vif     = { {defs={}, expr=v2244[1]} }
    vip     = { {defs={}, expr=v2245[1]} }
    id      = { {defs={}, expr=v2246[1]} }
    ?22     = { {defs={}, expr=v2247[1]} }
    ?23     = { {defs={}, expr=v2248[1]} }
    ?24     = { {defs={}, expr=v2249[1]} }
    ?25     = { {defs={}, expr=v2250[1]} }
    ?26     = { {defs={}, expr=v2251[1]} }
    ?27     = { {defs={}, expr=v2252[1]} }
    ?28     = { {defs={}, expr=v2253[1]} }
    ?29     = { {defs={}, expr=v2254[1]} }
    ?30     = { {defs={}, expr=v2255[1]} }
    ?31     = { {defs={}, expr=v2256[1]} }
    ip      = { {defs={0x08048583}, expr=0x08048584[32]} }
memory:
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v2215[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v2214[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v2216[32])}
0x8048584:sub    esp, 0x04
registers:
    ax      = { {defs={}, expr=v2211[32]} }
    cx      = { {defs={}, expr=v2212[32]} }
    dx      = { {defs={}, expr=v2213[32]} }
    bx      = { {defs={}, expr=v2214[32]} }
    sp      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    si      = { {defs={}, expr=v2217[32]} }
    di      = { {defs={}, expr=v2218[32]} }
    es      = { {defs={}, expr=v2219[16]} }
    cs      = { {defs={}, expr=v2220[16]} }
    ss      = { {defs={}, expr=v2221[16]} }
    ds      = { {defs={}, expr=v2222[16]} }
    fs      = { {defs={}, expr=v2223[16]} }
    gs      = { {defs={}, expr=v2224[16]} }
    cf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    ?1      = { {defs={}, expr=v2226[1]} }
    pf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))))))} }
    ?3      = { {defs={}, expr=v2228[1]} }
    af      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    ?5      = { {defs={}, expr=v2230[1]} }
    zf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))} }
    sf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))} }
    tf      = { {defs={}, expr=v2233[1]} }
    if      = { {defs={}, expr=v2234[1]} }
    df      = { {defs={}, expr=v2235[1]} }
    of      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    iopl0   = { {defs={}, expr=v2237[1]} }
    iopl1   = { {defs={}, expr=v2238[1]} }
    nt      = { {defs={}, expr=v2239[1]} }
    ?15     = { {defs={}, expr=v2240[1]} }
    rf      = { {defs={}, expr=v2241[1]} }
    vm      = { {defs={}, expr=v2242[1]} }
    ac      = { {defs={}, expr=v2243[1]} }
    vif     = { {defs={}, expr=v2244[1]} }
    vip     = { {defs={}, expr=v2245[1]} }
    id      = { {defs={}, expr=v2246[1]} }
    ?22     = { {defs={}, expr=v2247[1]} }
    ?23     = { {defs={}, expr=v2248[1]} }
    ?24     = { {defs={}, expr=v2249[1]} }
    ?25     = { {defs={}, expr=v2250[1]} }
    ?26     = { {defs={}, expr=v2251[1]} }
    ?27     = { {defs={}, expr=v2252[1]} }
    ?28     = { {defs={}, expr=v2253[1]} }
    ?29     = { {defs={}, expr=v2254[1]} }
    ?30     = { {defs={}, expr=v2255[1]} }
    ?31     = { {defs={}, expr=v2256[1]} }
    ip      = { {defs={0x08048584}, expr=0x08048587[32]} }
memory:
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v2215[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v2214[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v2216[32])}
0x8048587:mov    ebx, 0x080495e8<.ctors>
registers:
    ax      = { {defs={}, expr=v2211[32]} }
    cx      = { {defs={}, expr=v2212[32]} }
    dx      = { {defs={}, expr=v2213[32]} }
    bx      = { {defs={0x08048587}, expr=0x080495e8[32]} }
    sp      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    si      = { {defs={}, expr=v2217[32]} }
    di      = { {defs={}, expr=v2218[32]} }
    es      = { {defs={}, expr=v2219[16]} }
    cs      = { {defs={}, expr=v2220[16]} }
    ss      = { {defs={}, expr=v2221[16]} }
    ds      = { {defs={}, expr=v2222[16]} }
    fs      = { {defs={}, expr=v2223[16]} }
    gs      = { {defs={}, expr=v2224[16]} }
    cf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    ?1      = { {defs={}, expr=v2226[1]} }
    pf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))))))} }
    ?3      = { {defs={}, expr=v2228[1]} }
    af      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    ?5      = { {defs={}, expr=v2230[1]} }
    zf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))} }
    sf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))} }
    tf      = { {defs={}, expr=v2233[1]} }
    if      = { {defs={}, expr=v2234[1]} }
    df      = { {defs={}, expr=v2235[1]} }
    of      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    iopl0   = { {defs={}, expr=v2237[1]} }
    iopl1   = { {defs={}, expr=v2238[1]} }
    nt      = { {defs={}, expr=v2239[1]} }
    ?15     = { {defs={}, expr=v2240[1]} }
    rf      = { {defs={}, expr=v2241[1]} }
    vm      = { {defs={}, expr=v2242[1]} }
    ac      = { {defs={}, expr=v2243[1]} }
    vif     = { {defs={}, expr=v2244[1]} }
    vip     = { {defs={}, expr=v2245[1]} }
    id      = { {defs={}, expr=v2246[1]} }
    ?22     = { {defs={}, expr=v2247[1]} }
    ?23     = { {defs={}, expr=v2248[1]} }
    ?24     = { {defs={}, expr=v2249[1]} }
    ?25     = { {defs={}, expr=v2250[1]} }
    ?26     = { {defs={}, expr=v2251[1]} }
    ?27     = { {defs={}, expr=v2252[1]} }
    ?28     = { {defs={}, expr=v2253[1]} }
    ?29     = { {defs={}, expr=v2254[1]} }
    ?30     = { {defs={}, expr=v2255[1]} }
    ?31     = { {defs={}, expr=v2256[1]} }
    ip      = { {defs={0x08048587}, expr=0x0804858c[32]} }
memory:
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v2215[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v2214[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v2216[32])}
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
registers:
    ax      = { {defs={0x08048580,0x08048583,0x0804858c}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))} }
    cx      = { {defs={}, expr=v2212[32]} }
    dx      = { {defs={}, expr=v2213[32]} }
    bx      = { {defs={0x08048587}, expr=0x080495e8[32]} }
    sp      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    si      = { {defs={}, expr=v2217[32]} }
    di      = { {defs={}, expr=v2218[32]} }
    es      = { {defs={}, expr=v2219[16]} }
    cs      = { {defs={}, expr=v2220[16]} }
    ss      = { {defs={}, expr=v2221[16]} }
    ds      = { {defs={}, expr=v2222[16]} }
    fs      = { {defs={}, expr=v2223[16]} }
    gs      = { {defs={}, expr=v2224[16]} }
    cf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    ?1      = { {defs={}, expr=v2226[1]} }
    pf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])))))))} }
    ?3      = { {defs={}, expr=v2228[1]} }
    af      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    ?5      = { {defs={}, expr=v2230[1]} }
    zf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))} }
    sf      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32]))} }
    tf      = { {defs={}, expr=v2233[1]} }
    if      = { {defs={}, expr=v2234[1]} }
    df      = { {defs={}, expr=v2235[1]} }
    of      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v2215[32] -4[32]) -4[32])) 4294967292[33]))))))} }
    iopl0   = { {defs={}, expr=v2237[1]} }
    iopl1   = { {defs={}, expr=v2238[1]} }
    nt      = { {defs={}, expr=v2239[1]} }
    ?15     = { {defs={}, expr=v2240[1]} }
    rf      = { {defs={}, expr=v2241[1]} }
    vm      = { {defs={}, expr=v2242[1]} }
    ac      = { {defs={}, expr=v2243[1]} }
    vif     = { {defs={}, expr=v2244[1]} }
    vip     = { {defs={}, expr=v2245[1]} }
    id      = { {defs={}, expr=v2246[1]} }
    ?22     = { {defs={}, expr=v2247[1]} }
    ?23     = { {defs={}, expr=v2248[1]} }
    ?24     = { {defs={}, expr=v2249[1]} }
    ?25     = { {defs={}, expr=v2250[1]} }
    ?26     = { {defs={}, expr=v2251[1]} }
    ?27     = { {defs={}, expr=v2252[1]} }
    ?28     = { {defs={}, expr=v2253[1]} }
    ?29     = { {defs={}, expr=v2254[1]} }
    ?30     = { {defs={}, expr=v2255[1]} }
    ?31     = { {defs={}, expr=v2256[1]} }
    ip      = { {defs={0x0804858c}, expr=0x08048591[32]} }
memory:
    addr={defs={0x0804858c}, expr=0x080495eb[32]} value={defs={0x0804858c}, expr=(extract[8] 24[32] 32[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495ea[32]} value={defs={0x0804858c}, expr=(extract[8] 16[32] 24[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495e9[32]} value={defs={0x0804858c}, expr=(extract[8] 8[32] 16[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495e8[32]} value={defs={0x0804858c}, expr=(extract[8] 0[32] 8[32] v2257[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v2215[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v2214[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v2216[32])}
0x8048591:cmp    eax, 0xff<-0x01>
registers:
    ax      = { {defs={0x08048580,0x08048583,0x0804858c}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))} }
    cx      = { {defs={}, expr=v2212[32]} }
    dx      = { {defs={}, expr=v2213[32]} }
    bx      = { {defs={0x08048587}, expr=0x080495e8[32]} }
    sp      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    si      = { {defs={}, expr=v2217[32]} }
    di      = { {defs={}, expr=v2218[32]} }
    es      = { {defs={}, expr=v2219[16]} }
    cs      = { {defs={}, expr=v2220[16]} }
    ss      = { {defs={}, expr=v2221[16]} }
    ds      = { {defs={}, expr=v2222[16]} }
    fs      = { {defs={}, expr=v2223[16]} }
    gs      = { {defs={}, expr=v2224[16]} }
    cf      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) 1[33]))))))} }
    ?1      = { {defs={}, expr=v2226[1]} }
    pf      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32])))))))} }
    ?3      = { {defs={}, expr=v2228[1]} }
    af      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) 1[33]))))))} }
    ?5      = { {defs={}, expr=v2230[1]} }
    zf      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))} }
    sf      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))} }
    tf      = { {defs={}, expr=v2233[1]} }
    if      = { {defs={}, expr=v2234[1]} }
    df      = { {defs={}, expr=v2235[1]} }
    of      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) 1[33]))))))} }
    iopl0   = { {defs={}, expr=v2237[1]} }
    iopl1   = { {defs={}, expr=v2238[1]} }
    nt      = { {defs={}, expr=v2239[1]} }
    ?15     = { {defs={}, expr=v2240[1]} }
    rf      = { {defs={}, expr=v2241[1]} }
    vm      = { {defs={}, expr=v2242[1]} }
    ac      = { {defs={}, expr=v2243[1]} }
    vif     = { {defs={}, expr=v2244[1]} }
    vip     = { {defs={}, expr=v2245[1]} }
    id      = { {defs={}, expr=v2246[1]} }
    ?22     = { {defs={}, expr=v2247[1]} }
    ?23     = { {defs={}, expr=v2248[1]} }
    ?24     = { {defs={}, expr=v2249[1]} }
    ?25     = { {defs={}, expr=v2250[1]} }
    ?26     = { {defs={}, expr=v2251[1]} }
    ?27     = { {defs={}, expr=v2252[1]} }
    ?28     = { {defs={}, expr=v2253[1]} }
    ?29     = { {defs={}, expr=v2254[1]} }
    ?30     = { {defs={}, expr=v2255[1]} }
    ?31     = { {defs={}, expr=v2256[1]} }
    ip      = { {defs={0x08048591}, expr=0x08048594[32]} }
memory:
    addr={defs={0x0804858c}, expr=0x080495eb[32]} value={defs={0x0804858c}, expr=(extract[8] 24[32] 32[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495ea[32]} value={defs={0x0804858c}, expr=(extract[8] 16[32] 24[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495e9[32]} value={defs={0x0804858c}, expr=(extract[8] 8[32] 16[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495e8[32]} value={defs={0x0804858c}, expr=(extract[8] 0[32] 8[32] v2257[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v2215[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v2214[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v2216[32])}
0x8048594:je     0x080485ac<<Insn>>
registers:
    ax      = { {defs={0x08048580,0x08048583,0x0804858c}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))} }
    cx      = { {defs={}, expr=v2212[32]} }
    dx      = { {defs={}, expr=v2213[32]} }
    bx      = { {defs={0x08048587}, expr=0x080495e8[32]} }
    sp      = { {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} }
    si      = { {defs={}, expr=v2217[32]} }
    di      = { {defs={}, expr=v2218[32]} }
    es      = { {defs={}, expr=v2219[16]} }
    cs      = { {defs={}, expr=v2220[16]} }
    ss      = { {defs={}, expr=v2221[16]} }
    ds      = { {defs={}, expr=v2222[16]} }
    fs      = { {defs={}, expr=v2223[16]} }
    gs      = { {defs={}, expr=v2224[16]} }
    cf      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) 1[33]))))))} }
    ?1      = { {defs={}, expr=v2226[1]} }
    pf      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32])))))))} }
    ?3      = { {defs={}, expr=v2228[1]} }
    af      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) 1[33]))))))} }
    ?5      = { {defs={}, expr=v2230[1]} }
    zf      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))} }
    sf      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32]))} }
    tf      = { {defs={}, expr=v2233[1]} }
    if      = { {defs={}, expr=v2234[1]} }
    df      = { {defs={}, expr=v2235[1]} }
    of      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32]))))) 1[33]))))))} }
    iopl0   = { {defs={}, expr=v2237[1]} }
    iopl1   = { {defs={}, expr=v2238[1]} }
    nt      = { {defs={}, expr=v2239[1]} }
    ?15     = { {defs={}, expr=v2240[1]} }
    rf      = { {defs={}, expr=v2241[1]} }
    vm      = { {defs={}, expr=v2242[1]} }
    ac      = { {defs={}, expr=v2243[1]} }
    vif     = { {defs={}, expr=v2244[1]} }
    vip     = { {defs={}, expr=v2245[1]} }
    id      = { {defs={}, expr=v2246[1]} }
    ?22     = { {defs={}, expr=v2247[1]} }
    ?23     = { {defs={}, expr=v2248[1]} }
    ?24     = { {defs={}, expr=v2249[1]} }
    ?25     = { {defs={}, expr=v2250[1]} }
    ?26     = { {defs={}, expr=v2251[1]} }
    ?27     = { {defs={}, expr=v2252[1]} }
    ?28     = { {defs={}, expr=v2253[1]} }
    ?29     = { {defs={}, expr=v2254[1]} }
    ?30     = { {defs={}, expr=v2255[1]} }
    ?31     = { {defs={}, expr=v2256[1]} }
    ip      = { {defs={0x08048580,0x08048583,0x0804858c,0x08048591,0x08048594}, expr=(ite[32] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2259[8] 0x080495e8[32] (extract[8] 0[32] 8[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e8[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2261[8] 0x080495e9[32] (extract[8] 8[32] 16[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495e9[32])))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2263[8] 0x080495ea[32] (extract[8] 16[32] 24[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495ea[32])))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2265[8] 0x080495eb[32] (extract[8] 24[32] 32[32] v2257[32])) (add[32] v2215[32] -4[32]) (extract[8] 0[32] 8[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2216[32])) (add[32] (add[32] v2215[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2214[32])) (add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2214[32])) 0x080495eb[32])))) 1[32])) 0x080485ac[32] 0x08048596[32])} }
memory:
    addr={defs={0x0804858c}, expr=0x080495eb[32]} value={defs={0x0804858c}, expr=(extract[8] 24[32] 32[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495ea[32]} value={defs={0x0804858c}, expr=(extract[8] 16[32] 24[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495e9[32]} value={defs={0x0804858c}, expr=(extract[8] 8[32] 16[32] v2257[32])}
    addr={defs={0x0804858c}, expr=0x080495e8[32]} value={defs={0x0804858c}, expr=(extract[8] 0[32] 8[32] v2257[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v2215[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v2214[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v2215[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v2214[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v2215[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v2216[32])}
    addr={defs={0x08048580}, expr=(add[32] v2215[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v2216[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048596:lea    esi, [esi + 0x00]
registers:
    ax      = { {defs={}, expr=v2268[32]} }
    cx      = { {defs={}, expr=v2269[32]} }
    dx      = { {defs={}, expr=v2270[32]} }
    bx      = { {defs={}, expr=v2271[32]} }
    sp      = { {defs={}, expr=v2272[32]} }
    bp      = { {defs={}, expr=v2273[32]} }
    si      = { {defs={}, expr=v2274[32]} }
    di      = { {defs={}, expr=v2275[32]} }
    es      = { {defs={}, expr=v2276[16]} }
    cs      = { {defs={}, expr=v2277[16]} }
    ss      = { {defs={}, expr=v2278[16]} }
    ds      = { {defs={}, expr=v2279[16]} }
    fs      = { {defs={}, expr=v2280[16]} }
    gs      = { {defs={}, expr=v2281[16]} }
    cf      = { {defs={}, expr=v2282[1]} }
    ?1      = { {defs={}, expr=v2283[1]} }
    pf      = { {defs={}, expr=v2284[1]} }
    ?3      = { {defs={}, expr=v2285[1]} }
    af      = { {defs={}, expr=v2286[1]} }
    ?5      = { {defs={}, expr=v2287[1]} }
    zf      = { {defs={}, expr=v2288[1]} }
    sf      = { {defs={}, expr=v2289[1]} }
    tf      = { {defs={}, expr=v2290[1]} }
    if      = { {defs={}, expr=v2291[1]} }
    df      = { {defs={}, expr=v2292[1]} }
    of      = { {defs={}, expr=v2293[1]} }
    iopl0   = { {defs={}, expr=v2294[1]} }
    iopl1   = { {defs={}, expr=v2295[1]} }
    nt      = { {defs={}, expr=v2296[1]} }
    ?15     = { {defs={}, expr=v2297[1]} }
    rf      = { {defs={}, expr=v2298[1]} }
    vm      = { {defs={}, expr=v2299[1]} }
    ac      = { {defs={}, expr=v2300[1]} }
    vif     = { {defs={}, expr=v2301[1]} }
    vip     = { {defs={}, expr=v2302[1]} }
    id      = { {defs={}, expr=v2303[1]} }
    ?22     = { {defs={}, expr=v2304[1]} }
    ?23     = { {defs={}, expr=v2305[1]} }
    ?24     = { {defs={}, expr=v2306[1]} }
    ?25     = { {defs={}, expr=v2307[1]} }
    ?26     = { {defs={}, expr=v2308[1]} }
    ?27     = { {defs={}, expr=v2309[1]} }
    ?28     = { {defs={}, expr=v2310[1]} }
    ?29     = { {defs={}, expr=v2311[1]} }
    ?30     = { {defs={}, expr=v2312[1]} }
    ?31     = { {defs={}, expr=v2313[1]} }
    ip      = { {defs={0x08048596}, expr=0x08048599[32]} }
memory:
0x8048599:lea    edi, [edi + 0x00000000]
registers:
    ax      = { {defs={}, expr=v2268[32]} }
    cx      = { {defs={}, expr=v2269[32]} }
    dx      = { {defs={}, expr=v2270[32]} }
    bx      = { {defs={}, expr=v2271[32]} }
    sp      = { {defs={}, expr=v2272[32]} }
    bp      = { {defs={}, expr=v2273[32]} }
    si      = { {defs={}, expr=v2274[32]} }
    di      = { {defs={}, expr=v2275[32]} }
    es      = { {defs={}, expr=v2276[16]} }
    cs      = { {defs={}, expr=v2277[16]} }
    ss      = { {defs={}, expr=v2278[16]} }
    ds      = { {defs={}, expr=v2279[16]} }
    fs      = { {defs={}, expr=v2280[16]} }
    gs      = { {defs={}, expr=v2281[16]} }
    cf      = { {defs={}, expr=v2282[1]} }
    ?1      = { {defs={}, expr=v2283[1]} }
    pf      = { {defs={}, expr=v2284[1]} }
    ?3      = { {defs={}, expr=v2285[1]} }
    af      = { {defs={}, expr=v2286[1]} }
    ?5      = { {defs={}, expr=v2287[1]} }
    zf      = { {defs={}, expr=v2288[1]} }
    sf      = { {defs={}, expr=v2289[1]} }
    tf      = { {defs={}, expr=v2290[1]} }
    if      = { {defs={}, expr=v2291[1]} }
    df      = { {defs={}, expr=v2292[1]} }
    of      = { {defs={}, expr=v2293[1]} }
    iopl0   = { {defs={}, expr=v2294[1]} }
    iopl1   = { {defs={}, expr=v2295[1]} }
    nt      = { {defs={}, expr=v2296[1]} }
    ?15     = { {defs={}, expr=v2297[1]} }
    rf      = { {defs={}, expr=v2298[1]} }
    vm      = { {defs={}, expr=v2299[1]} }
    ac      = { {defs={}, expr=v2300[1]} }
    vif     = { {defs={}, expr=v2301[1]} }
    vip     = { {defs={}, expr=v2302[1]} }
    id      = { {defs={}, expr=v2303[1]} }
    ?22     = { {defs={}, expr=v2304[1]} }
    ?23     = { {defs={}, expr=v2305[1]} }
    ?24     = { {defs={}, expr=v2306[1]} }
    ?25     = { {defs={}, expr=v2307[1]} }
    ?26     = { {defs={}, expr=v2308[1]} }
    ?27     = { {defs={}, expr=v2309[1]} }
    ?28     = { {defs={}, expr=v2310[1]} }
    ?29     = { {defs={}, expr=v2311[1]} }
    ?30     = { {defs={}, expr=v2312[1]} }
    ?31     = { {defs={}, expr=v2313[1]} }
    ip      = { {defs={0x08048599}, expr=0x080485a0[32]} }
memory:
0x80485a0:sub    ebx, 0x04
registers:
    ax      = { {defs={}, expr=v2268[32]} }
    cx      = { {defs={}, expr=v2269[32]} }
    dx      = { {defs={}, expr=v2270[32]} }
    bx      = { {defs={0x080485a0}, expr=(add[32] v2271[32] -4[32])} }
    sp      = { {defs={}, expr=v2272[32]} }
    bp      = { {defs={}, expr=v2273[32]} }
    si      = { {defs={}, expr=v2274[32]} }
    di      = { {defs={}, expr=v2275[32]} }
    es      = { {defs={}, expr=v2276[16]} }
    cs      = { {defs={}, expr=v2277[16]} }
    ss      = { {defs={}, expr=v2278[16]} }
    ds      = { {defs={}, expr=v2279[16]} }
    fs      = { {defs={}, expr=v2280[16]} }
    gs      = { {defs={}, expr=v2281[16]} }
    cf      = { {defs={0x080485a0}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2271[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2271[32]) 4294967292[33]))))))} }
    ?1      = { {defs={}, expr=v2283[1]} }
    pf      = { {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32])))))))} }
    ?3      = { {defs={}, expr=v2285[1]} }
    af      = { {defs={0x080485a0}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2271[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2271[32]) 4294967292[33]))))))} }
    ?5      = { {defs={}, expr=v2287[1]} }
    zf      = { {defs={0x080485a0}, expr=(zerop[1] (add[32] v2271[32] -4[32]))} }
    sf      = { {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] v2271[32] -4[32]))} }
    tf      = { {defs={}, expr=v2290[1]} }
    if      = { {defs={}, expr=v2291[1]} }
    df      = { {defs={}, expr=v2292[1]} }
    of      = { {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2271[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2271[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2271[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2271[32]) 4294967292[33]))))))} }
    iopl0   = { {defs={}, expr=v2294[1]} }
    iopl1   = { {defs={}, expr=v2295[1]} }
    nt      = { {defs={}, expr=v2296[1]} }
    ?15     = { {defs={}, expr=v2297[1]} }
    rf      = { {defs={}, expr=v2298[1]} }
    vm      = { {defs={}, expr=v2299[1]} }
    ac      = { {defs={}, expr=v2300[1]} }
    vif     = { {defs={}, expr=v2301[1]} }
    vip     = { {defs={}, expr=v2302[1]} }
    id      = { {defs={}, expr=v2303[1]} }
    ?22     = { {defs={}, expr=v2304[1]} }
    ?23     = { {defs={}, expr=v2305[1]} }
    ?24     = { {defs={}, expr=v2306[1]} }
    ?25     = { {defs={}, expr=v2307[1]} }
    ?26     = { {defs={}, expr=v2308[1]} }
    ?27     = { {defs={}, expr=v2309[1]} }
    ?28     = { {defs={}, expr=v2310[1]} }
    ?29     = { {defs={}, expr=v2311[1]} }
    ?30     = { {defs={}, expr=v2312[1]} }
    ?31     = { {defs={}, expr=v2313[1]} }
    ip      = { {defs={0x080485a0}, expr=0x080485a3[32]} }
memory:
0x80485a3:call   eax
registers:
    ax      = { {defs={}, expr=v2268[32]} }
    cx      = { {defs={}, expr=v2269[32]} }
    dx      = { {defs={}, expr=v2270[32]} }
    bx      = { {defs={0x080485a0}, expr=(add[32] v2271[32] -4[32])} }
    sp      = { {defs={0x080485a3}, expr=(add[32] v2272[32] -4[32])} }
    bp      = { {defs={}, expr=v2273[32]} }
    si      = { {defs={}, expr=v2274[32]} }
    di      = { {defs={}, expr=v2275[32]} }
    es      = { {defs={}, expr=v2276[16]} }
    cs      = { {defs={}, expr=v2277[16]} }
    ss      = { {defs={}, expr=v2278[16]} }
    ds      = { {defs={}, expr=v2279[16]} }
    fs      = { {defs={}, expr=v2280[16]} }
    gs      = { {defs={}, expr=v2281[16]} }
    cf      = { {defs={0x080485a0}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2271[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2271[32]) 4294967292[33]))))))} }
    ?1      = { {defs={}, expr=v2283[1]} }
    pf      = { {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2271[32] -4[32])))))))} }
    ?3      = { {defs={}, expr=v2285[1]} }
    af      = { {defs={0x080485a0}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2271[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2271[32]) 4294967292[33]))))))} }
    ?5      = { {defs={}, expr=v2287[1]} }
    zf      = { {defs={0x080485a0}, expr=(zerop[1] (add[32] v2271[32] -4[32]))} }
    sf      = { {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] v2271[32] -4[32]))} }
    tf      = { {defs={}, expr=v2290[1]} }
    if      = { {defs={}, expr=v2291[1]} }
    df      = { {defs={}, expr=v2292[1]} }
    of      = { {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2271[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2271[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2271[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v2271[32]) 4294967292[33]))))))} }
    iopl0   = { {defs={}, expr=v2294[1]} }
    iopl1   = { {defs={}, expr=v2295[1]} }
    nt      = { {defs={}, expr=v2296[1]} }
    ?15     = { {defs={}, expr=v2297[1]} }
    rf      = { {defs={}, expr=v2298[1]} }
    vm      = { {defs={}, expr=v2299[1]} }
    ac      = { {defs={}, expr=v2300[1]} }
    vif     = { {defs={}, expr=v2301[1]} }
    vip     = { {defs={}, expr=v2302[1]} }
    id      = { {defs={}, expr=v2303[1]} }
    ?22     = { {defs={}, expr=v2304[1]} }
    ?23     = { {defs={}, expr=v2305[1]} }
    ?24     = { {defs={}, expr=v2306[1]} }
    ?25     = { {defs={}, expr=v2307[1]} }
    ?26     = { {defs={}, expr=v2308[1]} }
    ?27     = { {defs={}, expr=v2309[1]} }
    ?28     = { {defs={}, expr=v2310[1]} }
    ?29     = { {defs={}, expr=v2311[1]} }
    ?30     = { {defs={}, expr=v2312[1]} }
    ?31     = { {defs={}, expr=v2313[1]} }
    ip      = { {defs={}, expr=v2268[32]} }
memory:
    addr={defs={0x080485a3}, expr=(add[32] (add[32] v2272[32] -4[32]) 3[32])} value={defs={0x080485a3}, expr=8[8]}
    addr={defs={0x080485a3}, expr=(add[32] (add[32] v2272[32] -4[32]) 2[32])} value={defs={0x080485a3}, expr=4[8]}
    addr={defs={0x080485a3}, expr=(add[32] (add[32] v2272[32] -4[32]) 1[32])} value={defs={0x080485a3}, expr=-123[8]}
    addr={defs={0x080485a3}, expr=(add[32] v2272[32] -4[32])} value={defs={0x080485a3}, expr=-91[8]}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
registers:
    ax      = { {defs={0x080485a5}, expr=v2362[32]} }
    cx      = { {defs={}, expr=v2317[32]} }
    dx      = { {defs={}, expr=v2318[32]} }
    bx      = { {defs={}, expr=v2319[32]} }
    sp      = { {defs={}, expr=v2320[32]} }
    bp      = { {defs={}, expr=v2321[32]} }
    si      = { {defs={}, expr=v2322[32]} }
    di      = { {defs={}, expr=v2323[32]} }
    es      = { {defs={}, expr=v2324[16]} }
    cs      = { {defs={}, expr=v2325[16]} }
    ss      = { {defs={}, expr=v2326[16]} }
    ds      = { {defs={}, expr=v2327[16]} }
    fs      = { {defs={}, expr=v2328[16]} }
    gs      = { {defs={}, expr=v2329[16]} }
    cf      = { {defs={}, expr=v2330[1]} }
    ?1      = { {defs={}, expr=v2331[1]} }
    pf      = { {defs={}, expr=v2332[1]} }
    ?3      = { {defs={}, expr=v2333[1]} }
    af      = { {defs={}, expr=v2334[1]} }
    ?5      = { {defs={}, expr=v2335[1]} }
    zf      = { {defs={}, expr=v2336[1]} }
    sf      = { {defs={}, expr=v2337[1]} }
    tf      = { {defs={}, expr=v2338[1]} }
    if      = { {defs={}, expr=v2339[1]} }
    df      = { {defs={}, expr=v2340[1]} }
    of      = { {defs={}, expr=v2341[1]} }
    iopl0   = { {defs={}, expr=v2342[1]} }
    iopl1   = { {defs={}, expr=v2343[1]} }
    nt      = { {defs={}, expr=v2344[1]} }
    ?15     = { {defs={}, expr=v2345[1]} }
    rf      = { {defs={}, expr=v2346[1]} }
    vm      = { {defs={}, expr=v2347[1]} }
    ac      = { {defs={}, expr=v2348[1]} }
    vif     = { {defs={}, expr=v2349[1]} }
    vip     = { {defs={}, expr=v2350[1]} }
    id      = { {defs={}, expr=v2351[1]} }
    ?22     = { {defs={}, expr=v2352[1]} }
    ?23     = { {defs={}, expr=v2353[1]} }
    ?24     = { {defs={}, expr=v2354[1]} }
    ?25     = { {defs={}, expr=v2355[1]} }
    ?26     = { {defs={}, expr=v2356[1]} }
    ?27     = { {defs={}, expr=v2357[1]} }
    ?28     = { {defs={}, expr=v2358[1]} }
    ?29     = { {defs={}, expr=v2359[1]} }
    ?30     = { {defs={}, expr=v2360[1]} }
    ?31     = { {defs={}, expr=v2361[1]} }
    ip      = { {defs={0x080485a5}, expr=0x080485a7[32]} }
memory:
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 3[32])} value={defs={0x080485a5}, expr=(extract[8] 24[32] 32[32] v2362[32])}
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 2[32])} value={defs={0x080485a5}, expr=(extract[8] 16[32] 24[32] v2362[32])}
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 1[32])} value={defs={0x080485a5}, expr=(extract[8] 8[32] 16[32] v2362[32])}
    addr={defs={}, expr=v2319[32]} value={defs={0x080485a5}, expr=(extract[8] 0[32] 8[32] v2362[32])}
0x80485a7:cmp    eax, 0xff<-0x01>
registers:
    ax      = { {defs={0x080485a5}, expr=v2362[32]} }
    cx      = { {defs={}, expr=v2317[32]} }
    dx      = { {defs={}, expr=v2318[32]} }
    bx      = { {defs={}, expr=v2319[32]} }
    sp      = { {defs={}, expr=v2320[32]} }
    bp      = { {defs={}, expr=v2321[32]} }
    si      = { {defs={}, expr=v2322[32]} }
    di      = { {defs={}, expr=v2323[32]} }
    es      = { {defs={}, expr=v2324[16]} }
    cs      = { {defs={}, expr=v2325[16]} }
    ss      = { {defs={}, expr=v2326[16]} }
    ds      = { {defs={}, expr=v2327[16]} }
    fs      = { {defs={}, expr=v2328[16]} }
    gs      = { {defs={}, expr=v2329[16]} }
    cf      = { {defs={0x080485a5,0x080485a7}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2362[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v2362[32]) 1[33]))))))} }
    ?1      = { {defs={}, expr=v2331[1]} }
    pf      = { {defs={0x080485a5,0x080485a7}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32])))))))} }
    ?3      = { {defs={}, expr=v2333[1]} }
    af      = { {defs={0x080485a5,0x080485a7}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2362[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v2362[32]) 1[33]))))))} }
    ?5      = { {defs={}, expr=v2335[1]} }
    zf      = { {defs={0x080485a5,0x080485a7}, expr=(zerop[1] (add[32] v2362[32] 1[32]))} }
    sf      = { {defs={0x080485a5,0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v2362[32] 1[32]))} }
    tf      = { {defs={}, expr=v2338[1]} }
    if      = { {defs={}, expr=v2339[1]} }
    df      = { {defs={}, expr=v2340[1]} }
    of      = { {defs={0x080485a5,0x080485a7}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2362[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v2362[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2362[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v2362[32]) 1[33]))))))} }
    iopl0   = { {defs={}, expr=v2342[1]} }
    iopl1   = { {defs={}, expr=v2343[1]} }
    nt      = { {defs={}, expr=v2344[1]} }
    ?15     = { {defs={}, expr=v2345[1]} }
    rf      = { {defs={}, expr=v2346[1]} }
    vm      = { {defs={}, expr=v2347[1]} }
    ac      = { {defs={}, expr=v2348[1]} }
    vif     = { {defs={}, expr=v2349[1]} }
    vip     = { {defs={}, expr=v2350[1]} }
    id      = { {defs={}, expr=v2351[1]} }
    ?22     = { {defs={}, expr=v2352[1]} }
    ?23     = { {defs={}, expr=v2353[1]} }
    ?24     = { {defs={}, expr=v2354[1]} }
    ?25     = { {defs={}, expr=v2355[1]} }
    ?26     = { {defs={}, expr=v2356[1]} }
    ?27     = { {defs={}, expr=v2357[1]} }
    ?28     = { {defs={}, expr=v2358[1]} }
    ?29     = { {defs={}, expr=v2359[1]} }
    ?30     = { {defs={}, expr=v2360[1]} }
    ?31     = { {defs={}, expr=v2361[1]} }
    ip      = { {defs={0x080485a7}, expr=0x080485aa[32]} }
memory:
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 3[32])} value={defs={0x080485a5}, expr=(extract[8] 24[32] 32[32] v2362[32])}
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 2[32])} value={defs={0x080485a5}, expr=(extract[8] 16[32] 24[32] v2362[32])}
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 1[32])} value={defs={0x080485a5}, expr=(extract[8] 8[32] 16[32] v2362[32])}
    addr={defs={}, expr=v2319[32]} value={defs={0x080485a5}, expr=(extract[8] 0[32] 8[32] v2362[32])}
0x80485aa:jne    0x080485a0<<Insn>>
registers:
    ax      = { {defs={0x080485a5}, expr=v2362[32]} }
    cx      = { {defs={}, expr=v2317[32]} }
    dx      = { {defs={}, expr=v2318[32]} }
    bx      = { {defs={}, expr=v2319[32]} }
    sp      = { {defs={}, expr=v2320[32]} }
    bp      = { {defs={}, expr=v2321[32]} }
    si      = { {defs={}, expr=v2322[32]} }
    di      = { {defs={}, expr=v2323[32]} }
    es      = { {defs={}, expr=v2324[16]} }
    cs      = { {defs={}, expr=v2325[16]} }
    ss      = { {defs={}, expr=v2326[16]} }
    ds      = { {defs={}, expr=v2327[16]} }
    fs      = { {defs={}, expr=v2328[16]} }
    gs      = { {defs={}, expr=v2329[16]} }
    cf      = { {defs={0x080485a5,0x080485a7}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2362[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v2362[32]) 1[33]))))))} }
    ?1      = { {defs={}, expr=v2331[1]} }
    pf      = { {defs={0x080485a5,0x080485a7}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2362[32] 1[32])))))))} }
    ?3      = { {defs={}, expr=v2333[1]} }
    af      = { {defs={0x080485a5,0x080485a7}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2362[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v2362[32]) 1[33]))))))} }
    ?5      = { {defs={}, expr=v2335[1]} }
    zf      = { {defs={0x080485a5,0x080485a7}, expr=(zerop[1] (add[32] v2362[32] 1[32]))} }
    sf      = { {defs={0x080485a5,0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v2362[32] 1[32]))} }
    tf      = { {defs={}, expr=v2338[1]} }
    if      = { {defs={}, expr=v2339[1]} }
    df      = { {defs={}, expr=v2340[1]} }
    of      = { {defs={0x080485a5,0x080485a7}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2362[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v2362[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2362[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v2362[32]) 1[33]))))))} }
    iopl0   = { {defs={}, expr=v2342[1]} }
    iopl1   = { {defs={}, expr=v2343[1]} }
    nt      = { {defs={}, expr=v2344[1]} }
    ?15     = { {defs={}, expr=v2345[1]} }
    rf      = { {defs={}, expr=v2346[1]} }
    vm      = { {defs={}, expr=v2347[1]} }
    ac      = { {defs={}, expr=v2348[1]} }
    vif     = { {defs={}, expr=v2349[1]} }
    vip     = { {defs={}, expr=v2350[1]} }
    id      = { {defs={}, expr=v2351[1]} }
    ?22     = { {defs={}, expr=v2352[1]} }
    ?23     = { {defs={}, expr=v2353[1]} }
    ?24     = { {defs={}, expr=v2354[1]} }
    ?25     = { {defs={}, expr=v2355[1]} }
    ?26     = { {defs={}, expr=v2356[1]} }
    ?27     = { {defs={}, expr=v2357[1]} }
    ?28     = { {defs={}, expr=v2358[1]} }
    ?29     = { {defs={}, expr=v2359[1]} }
    ?30     = { {defs={}, expr=v2360[1]} }
    ?31     = { {defs={}, expr=v2361[1]} }
    ip      = { {defs={0x080485a5,0x080485a7,0x080485aa}, expr=(ite[32] (invert[1] (zerop[1] (add[32] v2362[32] 1[32]))) 0x080485a0[32] 0x080485ac[32])} }
memory:
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 3[32])} value={defs={0x080485a5}, expr=(extract[8] 24[32] 32[32] v2362[32])}
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 2[32])} value={defs={0x080485a5}, expr=(extract[8] 16[32] 24[32] v2362[32])}
    addr={defs={0x080485a5}, expr=(add[32] v2319[32] 1[32])} value={defs={0x080485a5}, expr=(extract[8] 8[32] 16[32] v2362[32])}
    addr={defs={}, expr=v2319[32]} value={defs={0x080485a5}, expr=(extract[8] 0[32] 8[32] v2362[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
registers:
    ax      = { {defs={0x080485ac}, expr=v2415[32]} }
    cx      = { {defs={}, expr=v2370[32]} }
    dx      = { {defs={}, expr=v2371[32]} }
    bx      = { {defs={}, expr=v2372[32]} }
    sp      = { {defs={0x080485ac}, expr=(add[32] v2373[32] 4[32])} }
    bp      = { {defs={}, expr=v2374[32]} }
    si      = { {defs={}, expr=v2375[32]} }
    di      = { {defs={}, expr=v2376[32]} }
    es      = { {defs={}, expr=v2377[16]} }
    cs      = { {defs={}, expr=v2378[16]} }
    ss      = { {defs={}, expr=v2379[16]} }
    ds      = { {defs={}, expr=v2380[16]} }
    fs      = { {defs={}, expr=v2381[16]} }
    gs      = { {defs={}, expr=v2382[16]} }
    cf      = { {defs={}, expr=v2383[1]} }
    ?1      = { {defs={}, expr=v2384[1]} }
    pf      = { {defs={}, expr=v2385[1]} }
    ?3      = { {defs={}, expr=v2386[1]} }
    af      = { {defs={}, expr=v2387[1]} }
    ?5      = { {defs={}, expr=v2388[1]} }
    zf      = { {defs={}, expr=v2389[1]} }
    sf      = { {defs={}, expr=v2390[1]} }
    tf      = { {defs={}, expr=v2391[1]} }
    if      = { {defs={}, expr=v2392[1]} }
    df      = { {defs={}, expr=v2393[1]} }
    of      = { {defs={}, expr=v2394[1]} }
    iopl0   = { {defs={}, expr=v2395[1]} }
    iopl1   = { {defs={}, expr=v2396[1]} }
    nt      = { {defs={}, expr=v2397[1]} }
    ?15     = { {defs={}, expr=v2398[1]} }
    rf      = { {defs={}, expr=v2399[1]} }
    vm      = { {defs={}, expr=v2400[1]} }
    ac      = { {defs={}, expr=v2401[1]} }
    vif     = { {defs={}, expr=v2402[1]} }
    vip     = { {defs={}, expr=v2403[1]} }
    id      = { {defs={}, expr=v2404[1]} }
    ?22     = { {defs={}, expr=v2405[1]} }
    ?23     = { {defs={}, expr=v2406[1]} }
    ?24     = { {defs={}, expr=v2407[1]} }
    ?25     = { {defs={}, expr=v2408[1]} }
    ?26     = { {defs={}, expr=v2409[1]} }
    ?27     = { {defs={}, expr=v2410[1]} }
    ?28     = { {defs={}, expr=v2411[1]} }
    ?29     = { {defs={}, expr=v2412[1]} }
    ?30     = { {defs={}, expr=v2413[1]} }
    ?31     = { {defs={}, expr=v2414[1]} }
    ip      = { {defs={0x080485ac}, expr=0x080485ad[32]} }
memory:
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 3[32])} value={defs={0x080485ac}, expr=(extract[8] 24[32] 32[32] v2415[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 2[32])} value={defs={0x080485ac}, expr=(extract[8] 16[32] 24[32] v2415[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 1[32])} value={defs={0x080485ac}, expr=(extract[8] 8[32] 16[32] v2415[32])}
    addr={defs={}, expr=v2373[32]} value={defs={0x080485ac}, expr=(extract[8] 0[32] 8[32] v2415[32])}
0x80485ad:pop    ebx
registers:
    ax      = { {defs={0x080485ac}, expr=v2415[32]} }
    cx      = { {defs={}, expr=v2370[32]} }
    dx      = { {defs={}, expr=v2371[32]} }
    bx      = { {defs={0x080485ad}, expr=v2420[32]} }
    sp      = { {defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 4[32])} }
    bp      = { {defs={}, expr=v2374[32]} }
    si      = { {defs={}, expr=v2375[32]} }
    di      = { {defs={}, expr=v2376[32]} }
    es      = { {defs={}, expr=v2377[16]} }
    cs      = { {defs={}, expr=v2378[16]} }
    ss      = { {defs={}, expr=v2379[16]} }
    ds      = { {defs={}, expr=v2380[16]} }
    fs      = { {defs={}, expr=v2381[16]} }
    gs      = { {defs={}, expr=v2382[16]} }
    cf      = { {defs={}, expr=v2383[1]} }
    ?1      = { {defs={}, expr=v2384[1]} }
    pf      = { {defs={}, expr=v2385[1]} }
    ?3      = { {defs={}, expr=v2386[1]} }
    af      = { {defs={}, expr=v2387[1]} }
    ?5      = { {defs={}, expr=v2388[1]} }
    zf      = { {defs={}, expr=v2389[1]} }
    sf      = { {defs={}, expr=v2390[1]} }
    tf      = { {defs={}, expr=v2391[1]} }
    if      = { {defs={}, expr=v2392[1]} }
    df      = { {defs={}, expr=v2393[1]} }
    of      = { {defs={}, expr=v2394[1]} }
    iopl0   = { {defs={}, expr=v2395[1]} }
    iopl1   = { {defs={}, expr=v2396[1]} }
    nt      = { {defs={}, expr=v2397[1]} }
    ?15     = { {defs={}, expr=v2398[1]} }
    rf      = { {defs={}, expr=v2399[1]} }
    vm      = { {defs={}, expr=v2400[1]} }
    ac      = { {defs={}, expr=v2401[1]} }
    vif     = { {defs={}, expr=v2402[1]} }
    vip     = { {defs={}, expr=v2403[1]} }
    id      = { {defs={}, expr=v2404[1]} }
    ?22     = { {defs={}, expr=v2405[1]} }
    ?23     = { {defs={}, expr=v2406[1]} }
    ?24     = { {defs={}, expr=v2407[1]} }
    ?25     = { {defs={}, expr=v2408[1]} }
    ?26     = { {defs={}, expr=v2409[1]} }
    ?27     = { {defs={}, expr=v2410[1]} }
    ?28     = { {defs={}, expr=v2411[1]} }
    ?29     = { {defs={}, expr=v2412[1]} }
    ?30     = { {defs={}, expr=v2413[1]} }
    ?31     = { {defs={}, expr=v2414[1]} }
    ip      = { {defs={0x080485ad}, expr=0x080485ae[32]} }
memory:
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 3[32])} value={defs={0x080485ad}, expr=(extract[8] 24[32] 32[32] v2420[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 2[32])} value={defs={0x080485ad}, expr=(extract[8] 16[32] 24[32] v2420[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 1[32])} value={defs={0x080485ad}, expr=(extract[8] 8[32] 16[32] v2420[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 4[32])} value={defs={0x080485ad}, expr=(extract[8] 0[32] 8[32] v2420[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 3[32])} value={defs={0x080485ac}, expr=(extract[8] 24[32] 32[32] v2415[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 2[32])} value={defs={0x080485ac}, expr=(extract[8] 16[32] 24[32] v2415[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 1[32])} value={defs={0x080485ac}, expr=(extract[8] 8[32] 16[32] v2415[32])}
    addr={defs={}, expr=v2373[32]} value={defs={0x080485ac}, expr=(extract[8] 0[32] 8[32] v2415[32])}
0x80485ae:pop    ebp
registers:
    ax      = { {defs={0x080485ac}, expr=v2415[32]} }
    cx      = { {defs={}, expr=v2370[32]} }
    dx      = { {defs={}, expr=v2371[32]} }
    bx      = { {defs={0x080485ad}, expr=v2420[32]} }
    sp      = { {defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 4[32])} }
    bp      = { {defs={0x080485ae}, expr=v2425[32]} }
    si      = { {defs={}, expr=v2375[32]} }
    di      = { {defs={}, expr=v2376[32]} }
    es      = { {defs={}, expr=v2377[16]} }
    cs      = { {defs={}, expr=v2378[16]} }
    ss      = { {defs={}, expr=v2379[16]} }
    ds      = { {defs={}, expr=v2380[16]} }
    fs      = { {defs={}, expr=v2381[16]} }
    gs      = { {defs={}, expr=v2382[16]} }
    cf      = { {defs={}, expr=v2383[1]} }
    ?1      = { {defs={}, expr=v2384[1]} }
    pf      = { {defs={}, expr=v2385[1]} }
    ?3      = { {defs={}, expr=v2386[1]} }
    af      = { {defs={}, expr=v2387[1]} }
    ?5      = { {defs={}, expr=v2388[1]} }
    zf      = { {defs={}, expr=v2389[1]} }
    sf      = { {defs={}, expr=v2390[1]} }
    tf      = { {defs={}, expr=v2391[1]} }
    if      = { {defs={}, expr=v2392[1]} }
    df      = { {defs={}, expr=v2393[1]} }
    of      = { {defs={}, expr=v2394[1]} }
    iopl0   = { {defs={}, expr=v2395[1]} }
    iopl1   = { {defs={}, expr=v2396[1]} }
    nt      = { {defs={}, expr=v2397[1]} }
    ?15     = { {defs={}, expr=v2398[1]} }
    rf      = { {defs={}, expr=v2399[1]} }
    vm      = { {defs={}, expr=v2400[1]} }
    ac      = { {defs={}, expr=v2401[1]} }
    vif     = { {defs={}, expr=v2402[1]} }
    vip     = { {defs={}, expr=v2403[1]} }
    id      = { {defs={}, expr=v2404[1]} }
    ?22     = { {defs={}, expr=v2405[1]} }
    ?23     = { {defs={}, expr=v2406[1]} }
    ?24     = { {defs={}, expr=v2407[1]} }
    ?25     = { {defs={}, expr=v2408[1]} }
    ?26     = { {defs={}, expr=v2409[1]} }
    ?27     = { {defs={}, expr=v2410[1]} }
    ?28     = { {defs={}, expr=v2411[1]} }
    ?29     = { {defs={}, expr=v2412[1]} }
    ?30     = { {defs={}, expr=v2413[1]} }
    ?31     = { {defs={}, expr=v2414[1]} }
    ip      = { {defs={0x080485ae}, expr=0x080485af[32]} }
memory:
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 3[32])} value={defs={0x080485ae}, expr=(extract[8] 24[32] 32[32] v2425[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 2[32])} value={defs={0x080485ae}, expr=(extract[8] 16[32] 24[32] v2425[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 1[32])} value={defs={0x080485ae}, expr=(extract[8] 8[32] 16[32] v2425[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 4[32])} value={defs={0x080485ae}, expr=(extract[8] 0[32] 8[32] v2425[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 3[32])} value={defs={0x080485ad}, expr=(extract[8] 24[32] 32[32] v2420[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 2[32])} value={defs={0x080485ad}, expr=(extract[8] 16[32] 24[32] v2420[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 1[32])} value={defs={0x080485ad}, expr=(extract[8] 8[32] 16[32] v2420[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 4[32])} value={defs={0x080485ad}, expr=(extract[8] 0[32] 8[32] v2420[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 3[32])} value={defs={0x080485ac}, expr=(extract[8] 24[32] 32[32] v2415[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 2[32])} value={defs={0x080485ac}, expr=(extract[8] 16[32] 24[32] v2415[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 1[32])} value={defs={0x080485ac}, expr=(extract[8] 8[32] 16[32] v2415[32])}
    addr={defs={}, expr=v2373[32]} value={defs={0x080485ac}, expr=(extract[8] 0[32] 8[32] v2415[32])}
0x80485af:ret    
registers:
    ax      = { {defs={0x080485ac}, expr=v2415[32]} }
    cx      = { {defs={}, expr=v2370[32]} }
    dx      = { {defs={}, expr=v2371[32]} }
    bx      = { {defs={0x080485ad}, expr=v2420[32]} }
    sp      = { {defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] (add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 4[32]) 4[32])} }
    bp      = { {defs={0x080485ae}, expr=v2425[32]} }
    si      = { {defs={}, expr=v2375[32]} }
    di      = { {defs={}, expr=v2376[32]} }
    es      = { {defs={}, expr=v2377[16]} }
    cs      = { {defs={}, expr=v2378[16]} }
    ss      = { {defs={}, expr=v2379[16]} }
    ds      = { {defs={}, expr=v2380[16]} }
    fs      = { {defs={}, expr=v2381[16]} }
    gs      = { {defs={}, expr=v2382[16]} }
    cf      = { {defs={}, expr=v2383[1]} }
    ?1      = { {defs={}, expr=v2384[1]} }
    pf      = { {defs={}, expr=v2385[1]} }
    ?3      = { {defs={}, expr=v2386[1]} }
    af      = { {defs={}, expr=v2387[1]} }
    ?5      = { {defs={}, expr=v2388[1]} }
    zf      = { {defs={}, expr=v2389[1]} }
    sf      = { {defs={}, expr=v2390[1]} }
    tf      = { {defs={}, expr=v2391[1]} }
    if      = { {defs={}, expr=v2392[1]} }
    df      = { {defs={}, expr=v2393[1]} }
    of      = { {defs={}, expr=v2394[1]} }
    iopl0   = { {defs={}, expr=v2395[1]} }
    iopl1   = { {defs={}, expr=v2396[1]} }
    nt      = { {defs={}, expr=v2397[1]} }
    ?15     = { {defs={}, expr=v2398[1]} }
    rf      = { {defs={}, expr=v2399[1]} }
    vm      = { {defs={}, expr=v2400[1]} }
    ac      = { {defs={}, expr=v2401[1]} }
    vif     = { {defs={}, expr=v2402[1]} }
    vip     = { {defs={}, expr=v2403[1]} }
    id      = { {defs={}, expr=v2404[1]} }
    ?22     = { {defs={}, expr=v2405[1]} }
    ?23     = { {defs={}, expr=v2406[1]} }
    ?24     = { {defs={}, expr=v2407[1]} }
    ?25     = { {defs={}, expr=v2408[1]} }
    ?26     = { {defs={}, expr=v2409[1]} }
    ?27     = { {defs={}, expr=v2410[1]} }
    ?28     = { {defs={}, expr=v2411[1]} }
    ?29     = { {defs={}, expr=v2412[1]} }
    ?30     = { {defs={}, expr=v2413[1]} }
    ?31     = { {defs={}, expr=v2414[1]} }
    ip      = { {defs={0x080485af}, expr=v2430[32]} }
memory:
    addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] (add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080485af}, expr=(extract[8] 24[32] 32[32] v2430[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] (add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080485af}, expr=(extract[8] 16[32] 24[32] v2430[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] (add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080485af}, expr=(extract[8] 8[32] 16[32] v2430[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 4[32])} value={defs={0x080485af}, expr=(extract[8] 0[32] 8[32] v2430[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 3[32])} value={defs={0x080485ae}, expr=(extract[8] 24[32] 32[32] v2425[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 2[32])} value={defs={0x080485ae}, expr=(extract[8] 16[32] 24[32] v2425[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v2373[32] 4[32]) 4[32]) 1[32])} value={defs={0x080485ae}, expr=(extract[8] 8[32] 16[32] v2425[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 4[32])} value={defs={0x080485ae}, expr=(extract[8] 0[32] 8[32] v2425[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 3[32])} value={defs={0x080485ad}, expr=(extract[8] 24[32] 32[32] v2420[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 2[32])} value={defs={0x080485ad}, expr=(extract[8] 16[32] 24[32] v2420[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v2373[32] 4[32]) 1[32])} value={defs={0x080485ad}, expr=(extract[8] 8[32] 16[32] v2420[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 4[32])} value={defs={0x080485ad}, expr=(extract[8] 0[32] 8[32] v2420[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 3[32])} value={defs={0x080485ac}, expr=(extract[8] 24[32] 32[32] v2415[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 2[32])} value={defs={0x080485ac}, expr=(extract[8] 16[32] 24[32] v2415[32])}
    addr={defs={0x080485ac}, expr=(add[32] v2373[32] 1[32])} value={defs={0x080485ac}, expr=(extract[8] 8[32] 16[32] v2415[32])}
    addr={defs={}, expr=v2373[32]} value={defs={0x080485ac}, expr=(extract[8] 0[32] 8[32] v2415[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
registers:
    ax      = { {defs={}, expr=v2437[32]} }
    cx      = { {defs={}, expr=v2438[32]} }
    dx      = { {defs={}, expr=v2439[32]} }
    bx      = { {defs={}, expr=v2440[32]} }
    sp      = { {defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} }
    bp      = { {defs={}, expr=v2442[32]} }
    si      = { {defs={}, expr=v2443[32]} }
    di      = { {defs={}, expr=v2444[32]} }
    es      = { {defs={}, expr=v2445[16]} }
    cs      = { {defs={}, expr=v2446[16]} }
    ss      = { {defs={}, expr=v2447[16]} }
    ds      = { {defs={}, expr=v2448[16]} }
    fs      = { {defs={}, expr=v2449[16]} }
    gs      = { {defs={}, expr=v2450[16]} }
    cf      = { {defs={}, expr=v2451[1]} }
    ?1      = { {defs={}, expr=v2452[1]} }
    pf      = { {defs={}, expr=v2453[1]} }
    ?3      = { {defs={}, expr=v2454[1]} }
    af      = { {defs={}, expr=v2455[1]} }
    ?5      = { {defs={}, expr=v2456[1]} }
    zf      = { {defs={}, expr=v2457[1]} }
    sf      = { {defs={}, expr=v2458[1]} }
    tf      = { {defs={}, expr=v2459[1]} }
    if      = { {defs={}, expr=v2460[1]} }
    df      = { {defs={}, expr=v2461[1]} }
    of      = { {defs={}, expr=v2462[1]} }
    iopl0   = { {defs={}, expr=v2463[1]} }
    iopl1   = { {defs={}, expr=v2464[1]} }
    nt      = { {defs={}, expr=v2465[1]} }
    ?15     = { {defs={}, expr=v2466[1]} }
    rf      = { {defs={}, expr=v2467[1]} }
    vm      = { {defs={}, expr=v2468[1]} }
    ac      = { {defs={}, expr=v2469[1]} }
    vif     = { {defs={}, expr=v2470[1]} }
    vip     = { {defs={}, expr=v2471[1]} }
    id      = { {defs={}, expr=v2472[1]} }
    ?22     = { {defs={}, expr=v2473[1]} }
    ?23     = { {defs={}, expr=v2474[1]} }
    ?24     = { {defs={}, expr=v2475[1]} }
    ?25     = { {defs={}, expr=v2476[1]} }
    ?26     = { {defs={}, expr=v2477[1]} }
    ?27     = { {defs={}, expr=v2478[1]} }
    ?28     = { {defs={}, expr=v2479[1]} }
    ?29     = { {defs={}, expr=v2480[1]} }
    ?30     = { {defs={}, expr=v2481[1]} }
    ?31     = { {defs={}, expr=v2482[1]} }
    ip      = { {defs={0x080485b0}, expr=0x080485b1[32]} }
memory:
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v2442[32])}
0x80485b1:mov    ebp, esp
registers:
    ax      = { {defs={}, expr=v2437[32]} }
    cx      = { {defs={}, expr=v2438[32]} }
    dx      = { {defs={}, expr=v2439[32]} }
    bx      = { {defs={}, expr=v2440[32]} }
    sp      = { {defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} }
    bp      = { {defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} }
    si      = { {defs={}, expr=v2443[32]} }
    di      = { {defs={}, expr=v2444[32]} }
    es      = { {defs={}, expr=v2445[16]} }
    cs      = { {defs={}, expr=v2446[16]} }
    ss      = { {defs={}, expr=v2447[16]} }
    ds      = { {defs={}, expr=v2448[16]} }
    fs      = { {defs={}, expr=v2449[16]} }
    gs      = { {defs={}, expr=v2450[16]} }
    cf      = { {defs={}, expr=v2451[1]} }
    ?1      = { {defs={}, expr=v2452[1]} }
    pf      = { {defs={}, expr=v2453[1]} }
    ?3      = { {defs={}, expr=v2454[1]} }
    af      = { {defs={}, expr=v2455[1]} }
    ?5      = { {defs={}, expr=v2456[1]} }
    zf      = { {defs={}, expr=v2457[1]} }
    sf      = { {defs={}, expr=v2458[1]} }
    tf      = { {defs={}, expr=v2459[1]} }
    if      = { {defs={}, expr=v2460[1]} }
    df      = { {defs={}, expr=v2461[1]} }
    of      = { {defs={}, expr=v2462[1]} }
    iopl0   = { {defs={}, expr=v2463[1]} }
    iopl1   = { {defs={}, expr=v2464[1]} }
    nt      = { {defs={}, expr=v2465[1]} }
    ?15     = { {defs={}, expr=v2466[1]} }
    rf      = { {defs={}, expr=v2467[1]} }
    vm      = { {defs={}, expr=v2468[1]} }
    ac      = { {defs={}, expr=v2469[1]} }
    vif     = { {defs={}, expr=v2470[1]} }
    vip     = { {defs={}, expr=v2471[1]} }
    id      = { {defs={}, expr=v2472[1]} }
    ?22     = { {defs={}, expr=v2473[1]} }
    ?23     = { {defs={}, expr=v2474[1]} }
    ?24     = { {defs={}, expr=v2475[1]} }
    ?25     = { {defs={}, expr=v2476[1]} }
    ?26     = { {defs={}, expr=v2477[1]} }
    ?27     = { {defs={}, expr=v2478[1]} }
    ?28     = { {defs={}, expr=v2479[1]} }
    ?29     = { {defs={}, expr=v2480[1]} }
    ?30     = { {defs={}, expr=v2481[1]} }
    ?31     = { {defs={}, expr=v2482[1]} }
    ip      = { {defs={0x080485b1}, expr=0x080485b3[32]} }
memory:
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v2442[32])}
0x80485b3:push   ebx
registers:
    ax      = { {defs={}, expr=v2437[32]} }
    cx      = { {defs={}, expr=v2438[32]} }
    dx      = { {defs={}, expr=v2439[32]} }
    bx      = { {defs={}, expr=v2440[32]} }
    sp      = { {defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] v2441[32] -4[32]) -4[32])} }
    bp      = { {defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} }
    si      = { {defs={}, expr=v2443[32]} }
    di      = { {defs={}, expr=v2444[32]} }
    es      = { {defs={}, expr=v2445[16]} }
    cs      = { {defs={}, expr=v2446[16]} }
    ss      = { {defs={}, expr=v2447[16]} }
    ds      = { {defs={}, expr=v2448[16]} }
    fs      = { {defs={}, expr=v2449[16]} }
    gs      = { {defs={}, expr=v2450[16]} }
    cf      = { {defs={}, expr=v2451[1]} }
    ?1      = { {defs={}, expr=v2452[1]} }
    pf      = { {defs={}, expr=v2453[1]} }
    ?3      = { {defs={}, expr=v2454[1]} }
    af      = { {defs={}, expr=v2455[1]} }
    ?5      = { {defs={}, expr=v2456[1]} }
    zf      = { {defs={}, expr=v2457[1]} }
    sf      = { {defs={}, expr=v2458[1]} }
    tf      = { {defs={}, expr=v2459[1]} }
    if      = { {defs={}, expr=v2460[1]} }
    df      = { {defs={}, expr=v2461[1]} }
    of      = { {defs={}, expr=v2462[1]} }
    iopl0   = { {defs={}, expr=v2463[1]} }
    iopl1   = { {defs={}, expr=v2464[1]} }
    nt      = { {defs={}, expr=v2465[1]} }
    ?15     = { {defs={}, expr=v2466[1]} }
    rf      = { {defs={}, expr=v2467[1]} }
    vm      = { {defs={}, expr=v2468[1]} }
    ac      = { {defs={}, expr=v2469[1]} }
    vif     = { {defs={}, expr=v2470[1]} }
    vip     = { {defs={}, expr=v2471[1]} }
    id      = { {defs={}, expr=v2472[1]} }
    ?22     = { {defs={}, expr=v2473[1]} }
    ?23     = { {defs={}, expr=v2474[1]} }
    ?24     = { {defs={}, expr=v2475[1]} }
    ?25     = { {defs={}, expr=v2476[1]} }
    ?26     = { {defs={}, expr=v2477[1]} }
    ?27     = { {defs={}, expr=v2478[1]} }
    ?28     = { {defs={}, expr=v2479[1]} }
    ?29     = { {defs={}, expr=v2480[1]} }
    ?30     = { {defs={}, expr=v2481[1]} }
    ?31     = { {defs={}, expr=v2482[1]} }
    ip      = { {defs={0x080485b3}, expr=0x080485b4[32]} }
memory:
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 3[32])} value={defs={0x080485b3}, expr=(extract[8] 24[32] 32[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 2[32])} value={defs={0x080485b3}, expr=(extract[8] 16[32] 24[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 1[32])} value={defs={0x080485b3}, expr=(extract[8] 8[32] 16[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] v2441[32] -4[32]) -4[32])} value={defs={0x080485b3}, expr=(extract[8] 0[32] 8[32] v2440[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v2442[32])}
0x80485b4:push   eax
registers:
    ax      = { {defs={}, expr=v2437[32]} }
    cx      = { {defs={}, expr=v2438[32]} }
    dx      = { {defs={}, expr=v2439[32]} }
    bx      = { {defs={}, expr=v2440[32]} }
    sp      = { {defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} }
    si      = { {defs={}, expr=v2443[32]} }
    di      = { {defs={}, expr=v2444[32]} }
    es      = { {defs={}, expr=v2445[16]} }
    cs      = { {defs={}, expr=v2446[16]} }
    ss      = { {defs={}, expr=v2447[16]} }
    ds      = { {defs={}, expr=v2448[16]} }
    fs      = { {defs={}, expr=v2449[16]} }
    gs      = { {defs={}, expr=v2450[16]} }
    cf      = { {defs={}, expr=v2451[1]} }
    ?1      = { {defs={}, expr=v2452[1]} }
    pf      = { {defs={}, expr=v2453[1]} }
    ?3      = { {defs={}, expr=v2454[1]} }
    af      = { {defs={}, expr=v2455[1]} }
    ?5      = { {defs={}, expr=v2456[1]} }
    zf      = { {defs={}, expr=v2457[1]} }
    sf      = { {defs={}, expr=v2458[1]} }
    tf      = { {defs={}, expr=v2459[1]} }
    if      = { {defs={}, expr=v2460[1]} }
    df      = { {defs={}, expr=v2461[1]} }
    of      = { {defs={}, expr=v2462[1]} }
    iopl0   = { {defs={}, expr=v2463[1]} }
    iopl1   = { {defs={}, expr=v2464[1]} }
    nt      = { {defs={}, expr=v2465[1]} }
    ?15     = { {defs={}, expr=v2466[1]} }
    rf      = { {defs={}, expr=v2467[1]} }
    vm      = { {defs={}, expr=v2468[1]} }
    ac      = { {defs={}, expr=v2469[1]} }
    vif     = { {defs={}, expr=v2470[1]} }
    vip     = { {defs={}, expr=v2471[1]} }
    id      = { {defs={}, expr=v2472[1]} }
    ?22     = { {defs={}, expr=v2473[1]} }
    ?23     = { {defs={}, expr=v2474[1]} }
    ?24     = { {defs={}, expr=v2475[1]} }
    ?25     = { {defs={}, expr=v2476[1]} }
    ?26     = { {defs={}, expr=v2477[1]} }
    ?27     = { {defs={}, expr=v2478[1]} }
    ?28     = { {defs={}, expr=v2479[1]} }
    ?29     = { {defs={}, expr=v2480[1]} }
    ?30     = { {defs={}, expr=v2481[1]} }
    ?31     = { {defs={}, expr=v2482[1]} }
    ip      = { {defs={0x080485b4}, expr=0x080485b5[32]} }
memory:
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080485b4}, expr=(extract[8] 24[32] 32[32] v2437[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080485b4}, expr=(extract[8] 16[32] 24[32] v2437[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080485b4}, expr=(extract[8] 8[32] 16[32] v2437[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32])} value={defs={0x080485b4}, expr=(extract[8] 0[32] 8[32] v2437[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 3[32])} value={defs={0x080485b3}, expr=(extract[8] 24[32] 32[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 2[32])} value={defs={0x080485b3}, expr=(extract[8] 16[32] 24[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 1[32])} value={defs={0x080485b3}, expr=(extract[8] 8[32] 16[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] v2441[32] -4[32]) -4[32])} value={defs={0x080485b3}, expr=(extract[8] 0[32] 8[32] v2440[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v2442[32])}
0x80485b5:call   0x080485ba<<Insn>>
registers:
    ax      = { {defs={}, expr=v2437[32]} }
    cx      = { {defs={}, expr=v2438[32]} }
    dx      = { {defs={}, expr=v2439[32]} }
    bx      = { {defs={}, expr=v2440[32]} }
    sp      = { {defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) -4[32])} }
    bp      = { {defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} }
    si      = { {defs={}, expr=v2443[32]} }
    di      = { {defs={}, expr=v2444[32]} }
    es      = { {defs={}, expr=v2445[16]} }
    cs      = { {defs={}, expr=v2446[16]} }
    ss      = { {defs={}, expr=v2447[16]} }
    ds      = { {defs={}, expr=v2448[16]} }
    fs      = { {defs={}, expr=v2449[16]} }
    gs      = { {defs={}, expr=v2450[16]} }
    cf      = { {defs={}, expr=v2451[1]} }
    ?1      = { {defs={}, expr=v2452[1]} }
    pf      = { {defs={}, expr=v2453[1]} }
    ?3      = { {defs={}, expr=v2454[1]} }
    af      = { {defs={}, expr=v2455[1]} }
    ?5      = { {defs={}, expr=v2456[1]} }
    zf      = { {defs={}, expr=v2457[1]} }
    sf      = { {defs={}, expr=v2458[1]} }
    tf      = { {defs={}, expr=v2459[1]} }
    if      = { {defs={}, expr=v2460[1]} }
    df      = { {defs={}, expr=v2461[1]} }
    of      = { {defs={}, expr=v2462[1]} }
    iopl0   = { {defs={}, expr=v2463[1]} }
    iopl1   = { {defs={}, expr=v2464[1]} }
    nt      = { {defs={}, expr=v2465[1]} }
    ?15     = { {defs={}, expr=v2466[1]} }
    rf      = { {defs={}, expr=v2467[1]} }
    vm      = { {defs={}, expr=v2468[1]} }
    ac      = { {defs={}, expr=v2469[1]} }
    vif     = { {defs={}, expr=v2470[1]} }
    vip     = { {defs={}, expr=v2471[1]} }
    id      = { {defs={}, expr=v2472[1]} }
    ?22     = { {defs={}, expr=v2473[1]} }
    ?23     = { {defs={}, expr=v2474[1]} }
    ?24     = { {defs={}, expr=v2475[1]} }
    ?25     = { {defs={}, expr=v2476[1]} }
    ?26     = { {defs={}, expr=v2477[1]} }
    ?27     = { {defs={}, expr=v2478[1]} }
    ?28     = { {defs={}, expr=v2479[1]} }
    ?29     = { {defs={}, expr=v2480[1]} }
    ?30     = { {defs={}, expr=v2481[1]} }
    ?31     = { {defs={}, expr=v2482[1]} }
    ip      = { {defs={0x080485b5}, expr=0x080485ba[32]} }
memory:
    addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080485b5}, expr=8[8]}
    addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080485b5}, expr=4[8]}
    addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080485b5}, expr=-123[8]}
    addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x080485b5}, expr=-70[8]}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080485b4}, expr=(extract[8] 24[32] 32[32] v2437[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080485b4}, expr=(extract[8] 16[32] 24[32] v2437[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080485b4}, expr=(extract[8] 8[32] 16[32] v2437[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) -4[32])} value={defs={0x080485b4}, expr=(extract[8] 0[32] 8[32] v2437[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 3[32])} value={defs={0x080485b3}, expr=(extract[8] 24[32] 32[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 2[32])} value={defs={0x080485b3}, expr=(extract[8] 16[32] 24[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v2441[32] -4[32]) -4[32]) 1[32])} value={defs={0x080485b3}, expr=(extract[8] 8[32] 16[32] v2440[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] v2441[32] -4[32]) -4[32])} value={defs={0x080485b3}, expr=(extract[8] 0[32] 8[32] v2440[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v2441[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v2442[32])}
    addr={defs={0x080485b0}, expr=(add[32] v2441[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v2442[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
registers:
    ax      = { {defs={}, expr=v2485[32]} }
    cx      = { {defs={}, expr=v2486[32]} }
    dx      = { {defs={}, expr=v2487[32]} }
    bx      = { {defs={0x080485ba}, expr=v2531[32]} }
    sp      = { {defs={0x080485ba}, expr=(add[32] v2489[32] 4[32])} }
    bp      = { {defs={}, expr=v2490[32]} }
    si      = { {defs={}, expr=v2491[32]} }
    di      = { {defs={}, expr=v2492[32]} }
    es      = { {defs={}, expr=v2493[16]} }
    cs      = { {defs={}, expr=v2494[16]} }
    ss      = { {defs={}, expr=v2495[16]} }
    ds      = { {defs={}, expr=v2496[16]} }
    fs      = { {defs={}, expr=v2497[16]} }
    gs      = { {defs={}, expr=v2498[16]} }
    cf      = { {defs={}, expr=v2499[1]} }
    ?1      = { {defs={}, expr=v2500[1]} }
    pf      = { {defs={}, expr=v2501[1]} }
    ?3      = { {defs={}, expr=v2502[1]} }
    af      = { {defs={}, expr=v2503[1]} }
    ?5      = { {defs={}, expr=v2504[1]} }
    zf      = { {defs={}, expr=v2505[1]} }
    sf      = { {defs={}, expr=v2506[1]} }
    tf      = { {defs={}, expr=v2507[1]} }
    if      = { {defs={}, expr=v2508[1]} }
    df      = { {defs={}, expr=v2509[1]} }
    of      = { {defs={}, expr=v2510[1]} }
    iopl0   = { {defs={}, expr=v2511[1]} }
    iopl1   = { {defs={}, expr=v2512[1]} }
    nt      = { {defs={}, expr=v2513[1]} }
    ?15     = { {defs={}, expr=v2514[1]} }
    rf      = { {defs={}, expr=v2515[1]} }
    vm      = { {defs={}, expr=v2516[1]} }
    ac      = { {defs={}, expr=v2517[1]} }
    vif     = { {defs={}, expr=v2518[1]} }
    vip     = { {defs={}, expr=v2519[1]} }
    id      = { {defs={}, expr=v2520[1]} }
    ?22     = { {defs={}, expr=v2521[1]} }
    ?23     = { {defs={}, expr=v2522[1]} }
    ?24     = { {defs={}, expr=v2523[1]} }
    ?25     = { {defs={}, expr=v2524[1]} }
    ?26     = { {defs={}, expr=v2525[1]} }
    ?27     = { {defs={}, expr=v2526[1]} }
    ?28     = { {defs={}, expr=v2527[1]} }
    ?29     = { {defs={}, expr=v2528[1]} }
    ?30     = { {defs={}, expr=v2529[1]} }
    ?31     = { {defs={}, expr=v2530[1]} }
    ip      = { {defs={0x080485ba}, expr=0x080485bb[32]} }
memory:
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 3[32])} value={defs={0x080485ba}, expr=(extract[8] 24[32] 32[32] v2531[32])}
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 2[32])} value={defs={0x080485ba}, expr=(extract[8] 16[32] 24[32] v2531[32])}
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 1[32])} value={defs={0x080485ba}, expr=(extract[8] 8[32] 16[32] v2531[32])}
    addr={defs={}, expr=v2489[32]} value={defs={0x080485ba}, expr=(extract[8] 0[32] 8[32] v2531[32])}
0x80485bb:add    ebx, 0x0000110e
registers:
    ax      = { {defs={}, expr=v2485[32]} }
    cx      = { {defs={}, expr=v2486[32]} }
    dx      = { {defs={}, expr=v2487[32]} }
    bx      = { {defs={0x080485ba,0x080485bb}, expr=(add[32] v2531[32] 4366[32])} }
    sp      = { {defs={0x080485ba}, expr=(add[32] v2489[32] 4[32])} }
    bp      = { {defs={}, expr=v2490[32]} }
    si      = { {defs={}, expr=v2491[32]} }
    di      = { {defs={}, expr=v2492[32]} }
    es      = { {defs={}, expr=v2493[16]} }
    cs      = { {defs={}, expr=v2494[16]} }
    ss      = { {defs={}, expr=v2495[16]} }
    ds      = { {defs={}, expr=v2496[16]} }
    fs      = { {defs={}, expr=v2497[16]} }
    gs      = { {defs={}, expr=v2498[16]} }
    cf      = { {defs={0x080485ba,0x080485bb}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2531[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v2531[32]) 4366[33])))))} }
    ?1      = { {defs={}, expr=v2500[1]} }
    pf      = { {defs={0x080485ba,0x080485bb}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32])))))))} }
    ?3      = { {defs={}, expr=v2502[1]} }
    af      = { {defs={0x080485ba,0x080485bb}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2531[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v2531[32]) 4366[33])))))} }
    ?5      = { {defs={}, expr=v2504[1]} }
    zf      = { {defs={0x080485ba,0x080485bb}, expr=(zerop[1] (add[32] v2531[32] 4366[32]))} }
    sf      = { {defs={0x080485ba,0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v2531[32] 4366[32]))} }
    tf      = { {defs={}, expr=v2507[1]} }
    if      = { {defs={}, expr=v2508[1]} }
    df      = { {defs={}, expr=v2509[1]} }
    of      = { {defs={0x080485ba,0x080485bb}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2531[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v2531[32]) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2531[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v2531[32]) 4366[33]))))))} }
    iopl0   = { {defs={}, expr=v2511[1]} }
    iopl1   = { {defs={}, expr=v2512[1]} }
    nt      = { {defs={}, expr=v2513[1]} }
    ?15     = { {defs={}, expr=v2514[1]} }
    rf      = { {defs={}, expr=v2515[1]} }
    vm      = { {defs={}, expr=v2516[1]} }
    ac      = { {defs={}, expr=v2517[1]} }
    vif     = { {defs={}, expr=v2518[1]} }
    vip     = { {defs={}, expr=v2519[1]} }
    id      = { {defs={}, expr=v2520[1]} }
    ?22     = { {defs={}, expr=v2521[1]} }
    ?23     = { {defs={}, expr=v2522[1]} }
    ?24     = { {defs={}, expr=v2523[1]} }
    ?25     = { {defs={}, expr=v2524[1]} }
    ?26     = { {defs={}, expr=v2525[1]} }
    ?27     = { {defs={}, expr=v2526[1]} }
    ?28     = { {defs={}, expr=v2527[1]} }
    ?29     = { {defs={}, expr=v2528[1]} }
    ?30     = { {defs={}, expr=v2529[1]} }
    ?31     = { {defs={}, expr=v2530[1]} }
    ip      = { {defs={0x080485bb}, expr=0x080485c1[32]} }
memory:
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 3[32])} value={defs={0x080485ba}, expr=(extract[8] 24[32] 32[32] v2531[32])}
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 2[32])} value={defs={0x080485ba}, expr=(extract[8] 16[32] 24[32] v2531[32])}
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 1[32])} value={defs={0x080485ba}, expr=(extract[8] 8[32] 16[32] v2531[32])}
    addr={defs={}, expr=v2489[32]} value={defs={0x080485ba}, expr=(extract[8] 0[32] 8[32] v2531[32])}
0x80485c1:call   0x08048390<__do_global_dtors_aux>
registers:
    ax      = { {defs={}, expr=v2485[32]} }
    cx      = { {defs={}, expr=v2486[32]} }
    dx      = { {defs={}, expr=v2487[32]} }
    bx      = { {defs={0x080485ba,0x080485bb}, expr=(add[32] v2531[32] 4366[32])} }
    sp      = { {defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] v2489[32] 4[32]) -4[32])} }
    bp      = { {defs={}, expr=v2490[32]} }
    si      = { {defs={}, expr=v2491[32]} }
    di      = { {defs={}, expr=v2492[32]} }
    es      = { {defs={}, expr=v2493[16]} }
    cs      = { {defs={}, expr=v2494[16]} }
    ss      = { {defs={}, expr=v2495[16]} }
    ds      = { {defs={}, expr=v2496[16]} }
    fs      = { {defs={}, expr=v2497[16]} }
    gs      = { {defs={}, expr=v2498[16]} }
    cf      = { {defs={0x080485ba,0x080485bb}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2531[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v2531[32]) 4366[33])))))} }
    ?1      = { {defs={}, expr=v2500[1]} }
    pf      = { {defs={0x080485ba,0x080485bb}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2531[32] 4366[32])))))))} }
    ?3      = { {defs={}, expr=v2502[1]} }
    af      = { {defs={0x080485ba,0x080485bb}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2531[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v2531[32]) 4366[33])))))} }
    ?5      = { {defs={}, expr=v2504[1]} }
    zf      = { {defs={0x080485ba,0x080485bb}, expr=(zerop[1] (add[32] v2531[32] 4366[32]))} }
    sf      = { {defs={0x080485ba,0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v2531[32] 4366[32]))} }
    tf      = { {defs={}, expr=v2507[1]} }
    if      = { {defs={}, expr=v2508[1]} }
    df      = { {defs={}, expr=v2509[1]} }
    of      = { {defs={0x080485ba,0x080485bb}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2531[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v2531[32]) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2531[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v2531[32]) 4366[33]))))))} }
    iopl0   = { {defs={}, expr=v2511[1]} }
    iopl1   = { {defs={}, expr=v2512[1]} }
    nt      = { {defs={}, expr=v2513[1]} }
    ?15     = { {defs={}, expr=v2514[1]} }
    rf      = { {defs={}, expr=v2515[1]} }
    vm      = { {defs={}, expr=v2516[1]} }
    ac      = { {defs={}, expr=v2517[1]} }
    vif     = { {defs={}, expr=v2518[1]} }
    vip     = { {defs={}, expr=v2519[1]} }
    id      = { {defs={}, expr=v2520[1]} }
    ?22     = { {defs={}, expr=v2521[1]} }
    ?23     = { {defs={}, expr=v2522[1]} }
    ?24     = { {defs={}, expr=v2523[1]} }
    ?25     = { {defs={}, expr=v2524[1]} }
    ?26     = { {defs={}, expr=v2525[1]} }
    ?27     = { {defs={}, expr=v2526[1]} }
    ?28     = { {defs={}, expr=v2527[1]} }
    ?29     = { {defs={}, expr=v2528[1]} }
    ?30     = { {defs={}, expr=v2529[1]} }
    ?31     = { {defs={}, expr=v2530[1]} }
    ip      = { {defs={0x080485c1}, expr=0x08048390[32]} }
memory:
    addr={defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] (add[32] v2489[32] 4[32]) -4[32]) 3[32])} value={defs={0x080485c1}, expr=8[8]}
    addr={defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] (add[32] v2489[32] 4[32]) -4[32]) 2[32])} value={defs={0x080485c1}, expr=4[8]}
    addr={defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] (add[32] v2489[32] 4[32]) -4[32]) 1[32])} value={defs={0x080485c1}, expr=-123[8]}
    addr={defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] v2489[32] 4[32]) -4[32])} value={defs={0x080485c1}, expr=-58[8]}
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 3[32])} value={defs={0x080485ba}, expr=(extract[8] 24[32] 32[32] v2531[32])}
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 2[32])} value={defs={0x080485ba}, expr=(extract[8] 16[32] 24[32] v2531[32])}
    addr={defs={0x080485ba}, expr=(add[32] v2489[32] 1[32])} value={defs={0x080485ba}, expr=(extract[8] 8[32] 16[32] v2531[32])}
    addr={defs={}, expr=v2489[32]} value={defs={0x080485ba}, expr=(extract[8] 0[32] 8[32] v2531[32])}
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
registers:
    ax      = { {defs={0x080485c6}, expr=v2584[32]} }
    cx      = { {defs={}, expr=v2539[32]} }
    dx      = { {defs={}, expr=v2540[32]} }
    bx      = { {defs={}, expr=v2541[32]} }
    sp      = { {defs={0x080485c6}, expr=(add[32] v2542[32] 4[32])} }
    bp      = { {defs={}, expr=v2543[32]} }
    si      = { {defs={}, expr=v2544[32]} }
    di      = { {defs={}, expr=v2545[32]} }
    es      = { {defs={}, expr=v2546[16]} }
    cs      = { {defs={}, expr=v2547[16]} }
    ss      = { {defs={}, expr=v2548[16]} }
    ds      = { {defs={}, expr=v2549[16]} }
    fs      = { {defs={}, expr=v2550[16]} }
    gs      = { {defs={}, expr=v2551[16]} }
    cf      = { {defs={}, expr=v2552[1]} }
    ?1      = { {defs={}, expr=v2553[1]} }
    pf      = { {defs={}, expr=v2554[1]} }
    ?3      = { {defs={}, expr=v2555[1]} }
    af      = { {defs={}, expr=v2556[1]} }
    ?5      = { {defs={}, expr=v2557[1]} }
    zf      = { {defs={}, expr=v2558[1]} }
    sf      = { {defs={}, expr=v2559[1]} }
    tf      = { {defs={}, expr=v2560[1]} }
    if      = { {defs={}, expr=v2561[1]} }
    df      = { {defs={}, expr=v2562[1]} }
    of      = { {defs={}, expr=v2563[1]} }
    iopl0   = { {defs={}, expr=v2564[1]} }
    iopl1   = { {defs={}, expr=v2565[1]} }
    nt      = { {defs={}, expr=v2566[1]} }
    ?15     = { {defs={}, expr=v2567[1]} }
    rf      = { {defs={}, expr=v2568[1]} }
    vm      = { {defs={}, expr=v2569[1]} }
    ac      = { {defs={}, expr=v2570[1]} }
    vif     = { {defs={}, expr=v2571[1]} }
    vip     = { {defs={}, expr=v2572[1]} }
    id      = { {defs={}, expr=v2573[1]} }
    ?22     = { {defs={}, expr=v2574[1]} }
    ?23     = { {defs={}, expr=v2575[1]} }
    ?24     = { {defs={}, expr=v2576[1]} }
    ?25     = { {defs={}, expr=v2577[1]} }
    ?26     = { {defs={}, expr=v2578[1]} }
    ?27     = { {defs={}, expr=v2579[1]} }
    ?28     = { {defs={}, expr=v2580[1]} }
    ?29     = { {defs={}, expr=v2581[1]} }
    ?30     = { {defs={}, expr=v2582[1]} }
    ?31     = { {defs={}, expr=v2583[1]} }
    ip      = { {defs={0x080485c6}, expr=0x080485c7[32]} }
memory:
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 3[32])} value={defs={0x080485c6}, expr=(extract[8] 24[32] 32[32] v2584[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 2[32])} value={defs={0x080485c6}, expr=(extract[8] 16[32] 24[32] v2584[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 1[32])} value={defs={0x080485c6}, expr=(extract[8] 8[32] 16[32] v2584[32])}
    addr={defs={}, expr=v2542[32]} value={defs={0x080485c6}, expr=(extract[8] 0[32] 8[32] v2584[32])}
0x80485c7:pop    ebx
registers:
    ax      = { {defs={0x080485c6}, expr=v2584[32]} }
    cx      = { {defs={}, expr=v2539[32]} }
    dx      = { {defs={}, expr=v2540[32]} }
    bx      = { {defs={0x080485c7}, expr=v2589[32]} }
    sp      = { {defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 4[32])} }
    bp      = { {defs={}, expr=v2543[32]} }
    si      = { {defs={}, expr=v2544[32]} }
    di      = { {defs={}, expr=v2545[32]} }
    es      = { {defs={}, expr=v2546[16]} }
    cs      = { {defs={}, expr=v2547[16]} }
    ss      = { {defs={}, expr=v2548[16]} }
    ds      = { {defs={}, expr=v2549[16]} }
    fs      = { {defs={}, expr=v2550[16]} }
    gs      = { {defs={}, expr=v2551[16]} }
    cf      = { {defs={}, expr=v2552[1]} }
    ?1      = { {defs={}, expr=v2553[1]} }
    pf      = { {defs={}, expr=v2554[1]} }
    ?3      = { {defs={}, expr=v2555[1]} }
    af      = { {defs={}, expr=v2556[1]} }
    ?5      = { {defs={}, expr=v2557[1]} }
    zf      = { {defs={}, expr=v2558[1]} }
    sf      = { {defs={}, expr=v2559[1]} }
    tf      = { {defs={}, expr=v2560[1]} }
    if      = { {defs={}, expr=v2561[1]} }
    df      = { {defs={}, expr=v2562[1]} }
    of      = { {defs={}, expr=v2563[1]} }
    iopl0   = { {defs={}, expr=v2564[1]} }
    iopl1   = { {defs={}, expr=v2565[1]} }
    nt      = { {defs={}, expr=v2566[1]} }
    ?15     = { {defs={}, expr=v2567[1]} }
    rf      = { {defs={}, expr=v2568[1]} }
    vm      = { {defs={}, expr=v2569[1]} }
    ac      = { {defs={}, expr=v2570[1]} }
    vif     = { {defs={}, expr=v2571[1]} }
    vip     = { {defs={}, expr=v2572[1]} }
    id      = { {defs={}, expr=v2573[1]} }
    ?22     = { {defs={}, expr=v2574[1]} }
    ?23     = { {defs={}, expr=v2575[1]} }
    ?24     = { {defs={}, expr=v2576[1]} }
    ?25     = { {defs={}, expr=v2577[1]} }
    ?26     = { {defs={}, expr=v2578[1]} }
    ?27     = { {defs={}, expr=v2579[1]} }
    ?28     = { {defs={}, expr=v2580[1]} }
    ?29     = { {defs={}, expr=v2581[1]} }
    ?30     = { {defs={}, expr=v2582[1]} }
    ?31     = { {defs={}, expr=v2583[1]} }
    ip      = { {defs={0x080485c7}, expr=0x080485c8[32]} }
memory:
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 3[32])} value={defs={0x080485c7}, expr=(extract[8] 24[32] 32[32] v2589[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 2[32])} value={defs={0x080485c7}, expr=(extract[8] 16[32] 24[32] v2589[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 1[32])} value={defs={0x080485c7}, expr=(extract[8] 8[32] 16[32] v2589[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 4[32])} value={defs={0x080485c7}, expr=(extract[8] 0[32] 8[32] v2589[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 3[32])} value={defs={0x080485c6}, expr=(extract[8] 24[32] 32[32] v2584[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 2[32])} value={defs={0x080485c6}, expr=(extract[8] 16[32] 24[32] v2584[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 1[32])} value={defs={0x080485c6}, expr=(extract[8] 8[32] 16[32] v2584[32])}
    addr={defs={}, expr=v2542[32]} value={defs={0x080485c6}, expr=(extract[8] 0[32] 8[32] v2584[32])}
0x80485c8:leave  
registers:
    ax      = { {defs={0x080485c6}, expr=v2584[32]} }
    cx      = { {defs={}, expr=v2539[32]} }
    dx      = { {defs={}, expr=v2540[32]} }
    bx      = { {defs={0x080485c7}, expr=v2589[32]} }
    sp      = { {defs={0x080485c8}, expr=(add[32] v2543[32] 4[32])} }
    bp      = { {defs={0x080485c6,0x080485c7,0x080485c8}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2596[8] v2543[32] (extract[8] 0[32] 8[32] v2594[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) v2543[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2598[8] (add[32] v2543[32] 1[32]) (extract[8] 8[32] 16[32] v2594[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] v2543[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2600[8] (add[32] v2543[32] 2[32]) (extract[8] 16[32] 24[32] v2594[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] v2543[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2602[8] (add[32] v2543[32] 3[32]) (extract[8] 24[32] 32[32] v2594[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] v2543[32] 3[32])))))} }
    si      = { {defs={}, expr=v2544[32]} }
    di      = { {defs={}, expr=v2545[32]} }
    es      = { {defs={}, expr=v2546[16]} }
    cs      = { {defs={}, expr=v2547[16]} }
    ss      = { {defs={}, expr=v2548[16]} }
    ds      = { {defs={}, expr=v2549[16]} }
    fs      = { {defs={}, expr=v2550[16]} }
    gs      = { {defs={}, expr=v2551[16]} }
    cf      = { {defs={}, expr=v2552[1]} }
    ?1      = { {defs={}, expr=v2553[1]} }
    pf      = { {defs={}, expr=v2554[1]} }
    ?3      = { {defs={}, expr=v2555[1]} }
    af      = { {defs={}, expr=v2556[1]} }
    ?5      = { {defs={}, expr=v2557[1]} }
    zf      = { {defs={}, expr=v2558[1]} }
    sf      = { {defs={}, expr=v2559[1]} }
    tf      = { {defs={}, expr=v2560[1]} }
    if      = { {defs={}, expr=v2561[1]} }
    df      = { {defs={}, expr=v2562[1]} }
    of      = { {defs={}, expr=v2563[1]} }
    iopl0   = { {defs={}, expr=v2564[1]} }
    iopl1   = { {defs={}, expr=v2565[1]} }
    nt      = { {defs={}, expr=v2566[1]} }
    ?15     = { {defs={}, expr=v2567[1]} }
    rf      = { {defs={}, expr=v2568[1]} }
    vm      = { {defs={}, expr=v2569[1]} }
    ac      = { {defs={}, expr=v2570[1]} }
    vif     = { {defs={}, expr=v2571[1]} }
    vip     = { {defs={}, expr=v2572[1]} }
    id      = { {defs={}, expr=v2573[1]} }
    ?22     = { {defs={}, expr=v2574[1]} }
    ?23     = { {defs={}, expr=v2575[1]} }
    ?24     = { {defs={}, expr=v2576[1]} }
    ?25     = { {defs={}, expr=v2577[1]} }
    ?26     = { {defs={}, expr=v2578[1]} }
    ?27     = { {defs={}, expr=v2579[1]} }
    ?28     = { {defs={}, expr=v2580[1]} }
    ?29     = { {defs={}, expr=v2581[1]} }
    ?30     = { {defs={}, expr=v2582[1]} }
    ?31     = { {defs={}, expr=v2583[1]} }
    ip      = { {defs={0x080485c8}, expr=0x080485c9[32]} }
memory:
    addr={defs={0x080485c8}, expr=(add[32] v2543[32] 3[32])} value={defs={0x080485c8}, expr=(extract[8] 24[32] 32[32] v2594[32])}
    addr={defs={0x080485c8}, expr=(add[32] v2543[32] 2[32])} value={defs={0x080485c8}, expr=(extract[8] 16[32] 24[32] v2594[32])}
    addr={defs={0x080485c8}, expr=(add[32] v2543[32] 1[32])} value={defs={0x080485c8}, expr=(extract[8] 8[32] 16[32] v2594[32])}
    addr={defs={}, expr=v2543[32]} value={defs={0x080485c8}, expr=(extract[8] 0[32] 8[32] v2594[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 3[32])} value={defs={0x080485c7}, expr=(extract[8] 24[32] 32[32] v2589[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 2[32])} value={defs={0x080485c7}, expr=(extract[8] 16[32] 24[32] v2589[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 1[32])} value={defs={0x080485c7}, expr=(extract[8] 8[32] 16[32] v2589[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 4[32])} value={defs={0x080485c7}, expr=(extract[8] 0[32] 8[32] v2589[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 3[32])} value={defs={0x080485c6}, expr=(extract[8] 24[32] 32[32] v2584[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 2[32])} value={defs={0x080485c6}, expr=(extract[8] 16[32] 24[32] v2584[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 1[32])} value={defs={0x080485c6}, expr=(extract[8] 8[32] 16[32] v2584[32])}
    addr={defs={}, expr=v2542[32]} value={defs={0x080485c6}, expr=(extract[8] 0[32] 8[32] v2584[32])}
0x80485c9:ret    
registers:
    ax      = { {defs={0x080485c6}, expr=v2584[32]} }
    cx      = { {defs={}, expr=v2539[32]} }
    dx      = { {defs={}, expr=v2540[32]} }
    bx      = { {defs={0x080485c7}, expr=v2589[32]} }
    sp      = { {defs={0x080485c8,0x080485c9}, expr=(add[32] (add[32] v2543[32] 4[32]) 4[32])} }
    bp      = { {defs={0x080485c6,0x080485c7,0x080485c8}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2596[8] v2543[32] (extract[8] 0[32] 8[32] v2594[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) v2543[32])) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2598[8] (add[32] v2543[32] 1[32]) (extract[8] 8[32] 16[32] v2594[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] v2543[32] 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2600[8] (add[32] v2543[32] 2[32]) (extract[8] 16[32] 24[32] v2594[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] v2543[32] 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2602[8] (add[32] v2543[32] 3[32]) (extract[8] 24[32] 32[32] v2594[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] v2543[32] 3[32])))))} }
    si      = { {defs={}, expr=v2544[32]} }
    di      = { {defs={}, expr=v2545[32]} }
    es      = { {defs={}, expr=v2546[16]} }
    cs      = { {defs={}, expr=v2547[16]} }
    ss      = { {defs={}, expr=v2548[16]} }
    ds      = { {defs={}, expr=v2549[16]} }
    fs      = { {defs={}, expr=v2550[16]} }
    gs      = { {defs={}, expr=v2551[16]} }
    cf      = { {defs={}, expr=v2552[1]} }
    ?1      = { {defs={}, expr=v2553[1]} }
    pf      = { {defs={}, expr=v2554[1]} }
    ?3      = { {defs={}, expr=v2555[1]} }
    af      = { {defs={}, expr=v2556[1]} }
    ?5      = { {defs={}, expr=v2557[1]} }
    zf      = { {defs={}, expr=v2558[1]} }
    sf      = { {defs={}, expr=v2559[1]} }
    tf      = { {defs={}, expr=v2560[1]} }
    if      = { {defs={}, expr=v2561[1]} }
    df      = { {defs={}, expr=v2562[1]} }
    of      = { {defs={}, expr=v2563[1]} }
    iopl0   = { {defs={}, expr=v2564[1]} }
    iopl1   = { {defs={}, expr=v2565[1]} }
    nt      = { {defs={}, expr=v2566[1]} }
    ?15     = { {defs={}, expr=v2567[1]} }
    rf      = { {defs={}, expr=v2568[1]} }
    vm      = { {defs={}, expr=v2569[1]} }
    ac      = { {defs={}, expr=v2570[1]} }
    vif     = { {defs={}, expr=v2571[1]} }
    vip     = { {defs={}, expr=v2572[1]} }
    id      = { {defs={}, expr=v2573[1]} }
    ?22     = { {defs={}, expr=v2574[1]} }
    ?23     = { {defs={}, expr=v2575[1]} }
    ?24     = { {defs={}, expr=v2576[1]} }
    ?25     = { {defs={}, expr=v2577[1]} }
    ?26     = { {defs={}, expr=v2578[1]} }
    ?27     = { {defs={}, expr=v2579[1]} }
    ?28     = { {defs={}, expr=v2580[1]} }
    ?29     = { {defs={}, expr=v2581[1]} }
    ?30     = { {defs={}, expr=v2582[1]} }
    ?31     = { {defs={}, expr=v2583[1]} }
    ip      = { {defs={0x080485c6,0x080485c7,0x080485c9}, expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2605[8] (add[32] v2543[32] 4[32]) (extract[8] 0[32] 8[32] v2603[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] v2543[32] 4[32]))) (shl0[32] 8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2607[8] (add[32] (add[32] v2543[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2603[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] (add[32] v2543[32] 4[32]) 1[32]))))) (shl0[32] -16[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2609[8] (add[32] (add[32] v2543[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2603[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] (add[32] v2543[32] 4[32]) 2[32]))))) (shl0[32] -8[5] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2611[8] (add[32] (add[32] v2543[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2603[32])) v2542[32] (extract[8] 0[32] 8[32] v2584[32])) (add[32] v2542[32] 1[32]) (extract[8] 8[32] 16[32] v2584[32])) (add[32] v2542[32] 2[32]) (extract[8] 16[32] 24[32] v2584[32])) (add[32] v2542[32] 3[32]) (extract[8] 24[32] 32[32] v2584[32])) (add[32] v2542[32] 4[32]) (extract[8] 0[32] 8[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 1[32]) (extract[8] 8[32] 16[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 2[32]) (extract[8] 16[32] 24[32] v2589[32])) (add[32] (add[32] v2542[32] 4[32]) 3[32]) (extract[8] 24[32] 32[32] v2589[32])) (add[32] (add[32] v2543[32] 4[32]) 3[32])))))} }
memory:
    addr={defs={0x080485c8,0x080485c9}, expr=(add[32] (add[32] v2543[32] 4[32]) 3[32])} value={defs={0x080485c9}, expr=(extract[8] 24[32] 32[32] v2603[32])}
    addr={defs={0x080485c8,0x080485c9}, expr=(add[32] (add[32] v2543[32] 4[32]) 2[32])} value={defs={0x080485c9}, expr=(extract[8] 16[32] 24[32] v2603[32])}
    addr={defs={0x080485c8,0x080485c9}, expr=(add[32] (add[32] v2543[32] 4[32]) 1[32])} value={defs={0x080485c9}, expr=(extract[8] 8[32] 16[32] v2603[32])}
    addr={defs={0x080485c8}, expr=(add[32] v2543[32] 4[32])} value={defs={0x080485c9}, expr=(extract[8] 0[32] 8[32] v2603[32])}
    addr={defs={0x080485c8}, expr=(add[32] v2543[32] 3[32])} value={defs={0x080485c8}, expr=(extract[8] 24[32] 32[32] v2594[32])}
    addr={defs={0x080485c8}, expr=(add[32] v2543[32] 2[32])} value={defs={0x080485c8}, expr=(extract[8] 16[32] 24[32] v2594[32])}
    addr={defs={0x080485c8}, expr=(add[32] v2543[32] 1[32])} value={defs={0x080485c8}, expr=(extract[8] 8[32] 16[32] v2594[32])}
    addr={defs={}, expr=v2543[32]} value={defs={0x080485c8}, expr=(extract[8] 0[32] 8[32] v2594[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 3[32])} value={defs={0x080485c7}, expr=(extract[8] 24[32] 32[32] v2589[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 2[32])} value={defs={0x080485c7}, expr=(extract[8] 16[32] 24[32] v2589[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v2542[32] 4[32]) 1[32])} value={defs={0x080485c7}, expr=(extract[8] 8[32] 16[32] v2589[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 4[32])} value={defs={0x080485c7}, expr=(extract[8] 0[32] 8[32] v2589[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 3[32])} value={defs={0x080485c6}, expr=(extract[8] 24[32] 32[32] v2584[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 2[32])} value={defs={0x080485c6}, expr=(extract[8] 16[32] 24[32] v2584[32])}
    addr={defs={0x080485c6}, expr=(add[32] v2542[32] 1[32])} value={defs={0x080485c6}, expr=(extract[8] 8[32] 16[32] v2584[32])}
    addr={defs={}, expr=v2542[32]} value={defs={0x080485c6}, expr=(extract[8] 0[32] 8[32] v2584[32])}
analyzed headers: 1
