=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80482c8:push   ebp
Symbolic@0x22ecb30 insn@0x080482c8[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x080482c8[0]: number_(32, 1) = {defs={0x080482c8}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080482c8[0]: number_(32, 134513352) = {defs={0x080482c8}, expr=0x080482c8[32]}
Symbolic@0x22ecb30 insn@0x080482c8[0]: add({defs={0x080482c8}, expr=0x080482c8[32]}, {defs={0x080482c8}, expr=1[32]}) = {defs={0x080482c8}, expr=0x080482c9[32]}
Symbolic@0x22ecb30 insn@0x080482c8[0]: writeRegister(eip, {defs={0x080482c8}, expr=0x080482c9[32]})
Symbolic@0x22ecb30 insn@0x080482c8[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080482c8[0]: number_(32, 18446744073709551612) = {defs={0x080482c8}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080482c8[0]: add(esp_0[32], {defs={0x080482c8}, expr=-4[32]}) = {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080482c8[0]: boolean_(1) = {defs={0x080482c8}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080482c8[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080482c8[0]: writeMemory(ss, {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x080482c8}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080482c8[0]: writeRegister(esp, {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080482c8[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080482c8}, expr=0x080482c9[32]}
memory:
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80482c9:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x080482c9[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x080482c9[1]: number_(32, 2) = {defs={0x080482c9}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080482c9[1]: number_(32, 134513353) = {defs={0x080482c9}, expr=0x080482c9[32]}
Symbolic@0x22ecb30 insn@0x080482c9[1]: add({defs={0x080482c9}, expr=0x080482c9[32]}, {defs={0x080482c9}, expr=2[32]}) = {defs={0x080482c9}, expr=0x080482cb[32]}
Symbolic@0x22ecb30 insn@0x080482c9[1]: writeRegister(eip, {defs={0x080482c9}, expr=0x080482cb[32]})
Symbolic@0x22ecb30 insn@0x080482c9[1]: readRegister(esp) = {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080482c9[1]: writeRegister(ebp, {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080482c9[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080482c9}, expr=0x080482cb[32]}
memory:
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80482cb:sub    esp, 0x08
Symbolic@0x22ecb30 insn@0x080482cb[2]: startInstruction(sub    esp, 0x08)
Symbolic@0x22ecb30 insn@0x080482cb[2]: number_(32, 3) = {defs={0x080482cb}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080482cb[2]: number_(32, 134513355) = {defs={0x080482cb}, expr=0x080482cb[32]}
Symbolic@0x22ecb30 insn@0x080482cb[2]: add({defs={0x080482cb}, expr=0x080482cb[32]}, {defs={0x080482cb}, expr=3[32]}) = {defs={0x080482cb}, expr=0x080482ce[32]}
Symbolic@0x22ecb30 insn@0x080482cb[2]: writeRegister(eip, {defs={0x080482cb}, expr=0x080482ce[32]})
Symbolic@0x22ecb30 insn@0x080482cb[2]: boolean_(0) = {defs={0x080482cb}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080482cb[2]: number_(32, 8) = {defs={0x080482cb}, expr=8[32]}
Symbolic@0x22ecb30 insn@0x080482cb[2]: invert({defs={0x080482cb}, expr=8[32]}) = {defs={0x080482cb}, expr=-9[32]}
Symbolic@0x22ecb30 insn@0x080482cb[2]: readRegister(esp) = {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080482cb[2]: invert({defs={0x080482cb}, expr=0[1]}) = {defs={0x080482cb}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080482cb[2]: addWithCarries({defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080482cb}, expr=-9[32]}, {defs={0x080482cb}, expr=1[1]}) = {defs={0x080482c8,0x080482cb}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x080482cb[2]: also returns: {defs={0x080482c8,0x080482cb}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(add[32] esp_0[32] -12[32])}, 0, 8) = {defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 1, 2) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 0, 1) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: xor_({defs={0x080482c8,0x080482cb}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}, {defs={0x080482c8,0x080482cb}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 3, 4) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 2, 3) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: xor_({defs={0x080482c8,0x080482cb}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}, {defs={0x080482c8,0x080482cb}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 5, 6) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 4, 5) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: xor_({defs={0x080482c8,0x080482cb}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}, {defs={0x080482c8,0x080482cb}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 7, 8) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 6, 7) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: xor_({defs={0x080482c8,0x080482cb}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}, {defs={0x080482c8,0x080482cb}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: xor_({defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}, {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: xor_({defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}, {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: xor_({defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}, {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: invert({defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: writeRegister(pf, {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))})
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(add[32] esp_0[32] -12[32])}, 31, 32) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: writeRegister(sf, {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x080482cb[2]: equalToZero({defs={0x080482c8,0x080482cb}, expr=(add[32] esp_0[32] -12[32])}) = {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: writeRegister(zf, {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 31, 32) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 30, 31) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: extract({defs={0x080482c8,0x080482cb}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 3, 4) = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: invert({defs={0x080482c8,0x080482cb}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: writeRegister(af, {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x080482cb[2]: invert({defs={0x080482c8,0x080482cb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: writeRegister(cf, {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x080482cb[2]: xor_({defs={0x080482c8,0x080482cb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x080482cb[2]: writeRegister(of, {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x080482cb[2]: writeRegister(esp, {defs={0x080482c8,0x080482cb}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x080482cb[2]: finishInstruction(sub    esp, 0x08)
registers:
  esp       = {defs={0x080482c8,0x080482cb}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x080482cb}, expr=0x080482ce[32]}
  pf        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80482ce:call   0x08048364<call_gmon_start>
Symbolic@0x22ecb30 insn@0x080482ce[3]: startInstruction(call   0x08048364<call_gmon_start>)
Symbolic@0x22ecb30 insn@0x080482ce[3]: number_(32, 5) = {defs={0x080482ce}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080482ce[3]: number_(32, 134513358) = {defs={0x080482ce}, expr=0x080482ce[32]}
Symbolic@0x22ecb30 insn@0x080482ce[3]: add({defs={0x080482ce}, expr=0x080482ce[32]}, {defs={0x080482ce}, expr=5[32]}) = {defs={0x080482ce}, expr=0x080482d3[32]}
Symbolic@0x22ecb30 insn@0x080482ce[3]: writeRegister(eip, {defs={0x080482ce}, expr=0x080482d3[32]})
Symbolic@0x22ecb30 insn@0x080482ce[3]: readRegister(esp) = {defs={0x080482c8,0x080482cb}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x080482ce[3]: number_(32, 18446744073709551612) = {defs={0x080482ce}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080482ce[3]: add({defs={0x080482c8,0x080482cb}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x080482ce}, expr=-4[32]}) = {defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x080482ce[3]: boolean_(1) = {defs={0x080482ce}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080482ce[3]: readRegister(eip) = {defs={0x080482ce}, expr=0x080482d3[32]}
Symbolic@0x22ecb30 insn@0x080482ce[3]: writeMemory(ss, {defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] esp_0[32] -16[32])}, {defs={0x080482ce}, expr=0x080482d3[32]}, {defs={0x080482ce}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080482ce[3]: number_(32, 134513508) = {defs={0x080482ce}, expr=0x08048364[32]}
Symbolic@0x22ecb30 insn@0x080482ce[3]: filterCallTarget({defs={0x080482ce}, expr=0x08048364[32]}) = {defs={0x080482ce}, expr=0x08048364[32]}
Symbolic@0x22ecb30 insn@0x080482ce[3]: writeRegister(eip, {defs={0x080482ce}, expr=0x08048364[32]})
Symbolic@0x22ecb30 insn@0x080482ce[3]: writeRegister(esp, {defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] esp_0[32] -16[32])})
Symbolic@0x22ecb30 insn@0x080482ce[3]: finishInstruction(call   0x08048364<call_gmon_start>)
registers:
  esp       = {defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] esp_0[32] -16[32])}
  ebp       = {defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x080482ce}, expr=0x08048364[32]}
  pf        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] esp_0[32] -13[32])} value={defs={0x080482ce}, expr=8[8]}
  addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] esp_0[32] -14[32])} value={defs={0x080482ce}, expr=4[8]}
  addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] esp_0[32] -15[32])} value={defs={0x080482ce}, expr=-126[8]}
  addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] esp_0[32] -16[32])} value={defs={0x080482ce}, expr=-45[8]}
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = {defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] frame_pointer[32] -12[32])}
  ebp       = {defs={0x080482c8}, expr=frame_pointer[32]}
  eip       = {defs={0x080482ce}, expr=0x08048364[32]}
  pf        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 1[32] 2[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 2[32] 3[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 3[32] 4[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 4[32] 5[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 5[32] 6[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 6[32] 7[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 7[32] 8[32] (add[32] frame_pointer[32] -8[32]))))}
  sf        = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] frame_pointer[32] -8[32]))}
  zf        = {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] frame_pointer[32] -8[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] frame_pointer[32] -9[32])} value={defs={0x080482ce}, expr=8[8]}
  addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] frame_pointer[32] -10[32])} value={defs={0x080482ce}, expr=4[8]}
  addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] frame_pointer[32] -11[32])} value={defs={0x080482ce}, expr=-126[8]}
  addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] frame_pointer[32] -12[32])} value={defs={0x080482ce}, expr=-45[8]}
  addr={defs={0x080482c8}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080482c8}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x080482ce[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80482d3:call   0x080483d0<frame_dummy>
Symbolic@0x22ecb30 insn@0x080482d3[0]: startInstruction(call   0x080483d0<frame_dummy>)
Symbolic@0x22ecb30 insn@0x080482d3[0]: number_(32, 5) = {defs={0x080482d3}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: number_(32, 134513363) = {defs={0x080482d3}, expr=0x080482d3[32]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: add({defs={0x080482d3}, expr=0x080482d3[32]}, {defs={0x080482d3}, expr=5[32]}) = {defs={0x080482d3}, expr=0x080482d8[32]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: writeRegister(eip, {defs={0x080482d3}, expr=0x080482d8[32]})
Symbolic@0x22ecb30 insn@0x080482d3[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080482d3[0]: number_(32, 18446744073709551612) = {defs={0x080482d3}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: add(esp_0[32], {defs={0x080482d3}, expr=-4[32]}) = {defs={0x080482d3}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080482d3[0]: boolean_(1) = {defs={0x080482d3}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: readRegister(eip) = {defs={0x080482d3}, expr=0x080482d8[32]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: writeMemory(ss, {defs={0x080482d3}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080482d3}, expr=0x080482d8[32]}, {defs={0x080482d3}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080482d3[0]: number_(32, 134513616) = {defs={0x080482d3}, expr=0x080483d0[32]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: filterCallTarget({defs={0x080482d3}, expr=0x080483d0[32]}) = {defs={0x080482d3}, expr=0x080483d0[32]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: writeRegister(eip, {defs={0x080482d3}, expr=0x080483d0[32]})
Symbolic@0x22ecb30 insn@0x080482d3[0]: writeRegister(esp, {defs={0x080482d3}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080482d3[0]: finishInstruction(call   0x080483d0<frame_dummy>)
registers:
  esp    = {defs={0x080482d3}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080482d3}, expr=0x080483d0[32]}
memory:
  addr={defs={0x080482d3}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x080482d3}, expr=8[8]}
  addr={defs={0x080482d3}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x080482d3}, expr=4[8]}
  addr={defs={0x080482d3}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x080482d3}, expr=-126[8]}
  addr={defs={0x080482d3}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x080482d3}, expr=-40[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x080482d3}, expr=frame_pointer[32]}
  eip    = {defs={0x080482d3}, expr=0x080483d0[32]}
memory:
  addr={defs={0x080482d3}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x080482d3}, expr=8[8]}
  addr={defs={0x080482d3}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x080482d3}, expr=4[8]}
  addr={defs={0x080482d3}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x080482d3}, expr=-126[8]}
  addr={defs={0x080482d3}, expr=frame_pointer[32]} value={defs={0x080482d3}, expr=-40[8]}
Symbolic@0x22ecb30 insn@0x080482d3[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80482d8:call   0x08048580<__do_global_ctors_aux>
Symbolic@0x22ecb30 insn@0x080482d8[0]: startInstruction(call   0x08048580<__do_global_ctors_aux>)
Symbolic@0x22ecb30 insn@0x080482d8[0]: number_(32, 5) = {defs={0x080482d8}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: number_(32, 134513368) = {defs={0x080482d8}, expr=0x080482d8[32]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: add({defs={0x080482d8}, expr=0x080482d8[32]}, {defs={0x080482d8}, expr=5[32]}) = {defs={0x080482d8}, expr=0x080482dd[32]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: writeRegister(eip, {defs={0x080482d8}, expr=0x080482dd[32]})
Symbolic@0x22ecb30 insn@0x080482d8[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080482d8[0]: number_(32, 18446744073709551612) = {defs={0x080482d8}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: add(esp_0[32], {defs={0x080482d8}, expr=-4[32]}) = {defs={0x080482d8}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080482d8[0]: boolean_(1) = {defs={0x080482d8}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: readRegister(eip) = {defs={0x080482d8}, expr=0x080482dd[32]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: writeMemory(ss, {defs={0x080482d8}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080482d8}, expr=0x080482dd[32]}, {defs={0x080482d8}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080482d8[0]: number_(32, 134514048) = {defs={0x080482d8}, expr=0x08048580[32]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: filterCallTarget({defs={0x080482d8}, expr=0x08048580[32]}) = {defs={0x080482d8}, expr=0x08048580[32]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: writeRegister(eip, {defs={0x080482d8}, expr=0x08048580[32]})
Symbolic@0x22ecb30 insn@0x080482d8[0]: writeRegister(esp, {defs={0x080482d8}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080482d8[0]: finishInstruction(call   0x08048580<__do_global_ctors_aux>)
registers:
  esp    = {defs={0x080482d8}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080482d8}, expr=0x08048580[32]}
memory:
  addr={defs={0x080482d8}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x080482d8}, expr=8[8]}
  addr={defs={0x080482d8}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x080482d8}, expr=4[8]}
  addr={defs={0x080482d8}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x080482d8}, expr=-126[8]}
  addr={defs={0x080482d8}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x080482d8}, expr=-35[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x080482d8}, expr=frame_pointer[32]}
  eip    = {defs={0x080482d8}, expr=0x08048580[32]}
memory:
  addr={defs={0x080482d8}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x080482d8}, expr=8[8]}
  addr={defs={0x080482d8}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x080482d8}, expr=4[8]}
  addr={defs={0x080482d8}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x080482d8}, expr=-126[8]}
  addr={defs={0x080482d8}, expr=frame_pointer[32]} value={defs={0x080482d8}, expr=-35[8]}
Symbolic@0x22ecb30 insn@0x080482d8[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80482dd:leave  
Symbolic@0x22ecb30 insn@0x080482dd[0]: startInstruction(leave)
Symbolic@0x22ecb30 insn@0x080482dd[0]: number_(32, 1) = {defs={0x080482dd}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080482dd[0]: number_(32, 134513373) = {defs={0x080482dd}, expr=0x080482dd[32]}
Symbolic@0x22ecb30 insn@0x080482dd[0]: add({defs={0x080482dd}, expr=0x080482dd[32]}, {defs={0x080482dd}, expr=1[32]}) = {defs={0x080482dd}, expr=0x080482de[32]}
Symbolic@0x22ecb30 insn@0x080482dd[0]: writeRegister(eip, {defs={0x080482dd}, expr=0x080482de[32]})
Symbolic@0x22ecb30 insn@0x080482dd[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080482dd[0]: writeRegister(esp, ebp_0[32])
Symbolic@0x22ecb30 insn@0x080482dd[0]: readRegister(esp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080482dd[0]: number_(32, 4) = {defs={0x080482dd}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080482dd[0]: add(ebp_0[32], {defs={0x080482dd}, expr=4[32]}) = {defs={0x080482dd}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080482dd[0]: boolean_(1) = {defs={0x080482dd}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080482dd[0]: readMemory(ss, ebp_0[32], {defs={0x080482dd}, expr=1[1]}, 32) = v14818[32]
Symbolic@0x22ecb30 insn@0x080482dd[0]: writeRegister(ebp, v14818[32])
Symbolic@0x22ecb30 insn@0x080482dd[0]: writeRegister(esp, {defs={0x080482dd}, expr=(add[32] ebp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x080482dd[0]: finishInstruction(leave)
registers:
  esp    = {defs={0x080482dd}, expr=(add[32] ebp_0[32] 4[32])}
  ebp    = v14818[32]
  eip    = {defs={0x080482dd}, expr=0x080482de[32]}
memory:
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v14818[32])
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v14818[32])
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v14818[32])
  addr={defs={0x080482dd}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v14818[32])

0x80482de:ret    
Symbolic@0x22ecb30 insn@0x080482de[1]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x080482de[1]: number_(32, 1) = {defs={0x080482de}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080482de[1]: number_(32, 134513374) = {defs={0x080482de}, expr=0x080482de[32]}
Symbolic@0x22ecb30 insn@0x080482de[1]: add({defs={0x080482de}, expr=0x080482de[32]}, {defs={0x080482de}, expr=1[32]}) = {defs={0x080482de}, expr=0x080482df[32]}
Symbolic@0x22ecb30 insn@0x080482de[1]: writeRegister(eip, {defs={0x080482de}, expr=0x080482df[32]})
Symbolic@0x22ecb30 insn@0x080482de[1]: number_(32, 0) = {defs={0x080482de}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080482de[1]: readRegister(esp) = {defs={0x080482dd}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080482de[1]: number_(32, 4) = {defs={0x080482de}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080482de[1]: add({defs={0x080482de}, expr=4[32]}, {defs={0x080482de}, expr=0[32]}) = {defs={0x080482de}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080482de[1]: add({defs={0x080482dd}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x080482de}, expr=4[32]}) = {defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x080482de[1]: boolean_(1) = {defs={0x080482de}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080482de[1]: readMemory(ss, {defs={0x080482dd}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x080482de}, expr=1[1]}, 32) = v14823[32]
Symbolic@0x22ecb30 insn@0x080482de[1]: filterReturnTarget(v14823[32]) = v14823[32]
Symbolic@0x22ecb30 insn@0x080482de[1]: writeRegister(eip, v14823[32])
Symbolic@0x22ecb30 insn@0x080482de[1]: writeRegister(esp, {defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x080482de[1]: finishInstruction(ret)
registers:
  esp    = {defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v14818[32]
  eip    = v14823[32]
memory:
  addr={defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v14823[32])
  addr={defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v14823[32])
  addr={defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v14823[32])
  addr={defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v14823[32])
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v14818[32])
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v14818[32])
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v14818[32])
  addr={defs={0x080482dd}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v14818[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v14818[32]
  eip    = v14823[32]
memory:
  addr={defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v14823[32])
  addr={defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v14823[32])
  addr={defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v14823[32])
  addr={defs={0x080482dd,0x080482de}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v14823[32])
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v14818[32])
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v14818[32])
  addr={defs={0x080482dd}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v14818[32])
  addr={defs={0x080482dd}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v14818[32])
Symbolic@0x22ecb30 insn@0x080482de[1]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
Symbolic@0x22ecb30 insn@0x080482f0[0]: startInstruction(jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>])
Symbolic@0x22ecb30 insn@0x080482f0[0]: number_(32, 6) = {defs={0x080482f0}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x080482f0[0]: number_(32, 134513392) = {defs={0x080482f0}, expr=0x080482f0[32]}
Symbolic@0x22ecb30 insn@0x080482f0[0]: add({defs={0x080482f0}, expr=0x080482f0[32]}, {defs={0x080482f0}, expr=6[32]}) = {defs={0x080482f0}, expr=0x080482f6[32]}
Symbolic@0x22ecb30 insn@0x080482f0[0]: writeRegister(eip, {defs={0x080482f0}, expr=0x080482f6[32]})
Symbolic@0x22ecb30 insn@0x080482f0[0]: number_(32, 134518484) = {defs={0x080482f0}, expr=0x080496d4[32]}
Symbolic@0x22ecb30 insn@0x080482f0[0]: boolean_(1) = {defs={0x080482f0}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080482f0[0]: readMemory(ds, {defs={0x080482f0}, expr=0x080496d4[32]}, {defs={0x080482f0}, expr=1[1]}, 32) = v14899[32]
Symbolic@0x22ecb30 insn@0x080482f0[0]: filterIndirectJumpTarget(v14899[32]) = v14899[32]
Symbolic@0x22ecb30 insn@0x080482f0[0]: writeRegister(eip, v14899[32])
Symbolic@0x22ecb30 insn@0x080482f0[0]: finishInstruction(jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>])
registers:
  eip    = v14899[32]
memory:
  addr={defs={0x080482f0}, expr=0x080496d7[32]} value=(extract[8] 24[32] 32[32] v14899[32])
  addr={defs={0x080482f0}, expr=0x080496d6[32]} value=(extract[8] 16[32] 24[32] v14899[32])
  addr={defs={0x080482f0}, expr=0x080496d5[32]} value=(extract[8] 8[32] 16[32] v14899[32])
  addr={defs={0x080482f0}, expr=0x080496d4[32]} value=(extract[8] 0[32] 8[32] v14899[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = (add[32] frame_pointer[32] 4[32])
  eip    = v14899[32]
memory:
  addr={defs={0x080482f0}, expr=0x080496d7[32]} value=(extract[8] 24[32] 32[32] v14899[32])
  addr={defs={0x080482f0}, expr=0x080496d6[32]} value=(extract[8] 16[32] 24[32] v14899[32])
  addr={defs={0x080482f0}, expr=0x080496d5[32]} value=(extract[8] 8[32] 16[32] v14899[32])
  addr={defs={0x080482f0}, expr=0x080496d4[32]} value=(extract[8] 0[32] 8[32] v14899[32])
Symbolic@0x22ecb30 insn@0x080482f0[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
Symbolic@0x22ecb30 insn@0x08048300[0]: startInstruction(jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>])
Symbolic@0x22ecb30 insn@0x08048300[0]: number_(32, 6) = {defs={0x08048300}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x08048300[0]: number_(32, 134513408) = {defs={0x08048300}, expr=0x08048300[32]}
Symbolic@0x22ecb30 insn@0x08048300[0]: add({defs={0x08048300}, expr=0x08048300[32]}, {defs={0x08048300}, expr=6[32]}) = {defs={0x08048300}, expr=0x08048306[32]}
Symbolic@0x22ecb30 insn@0x08048300[0]: writeRegister(eip, {defs={0x08048300}, expr=0x08048306[32]})
Symbolic@0x22ecb30 insn@0x08048300[0]: number_(32, 134518488) = {defs={0x08048300}, expr=0x080496d8[32]}
Symbolic@0x22ecb30 insn@0x08048300[0]: boolean_(1) = {defs={0x08048300}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048300[0]: readMemory(ds, {defs={0x08048300}, expr=0x080496d8[32]}, {defs={0x08048300}, expr=1[1]}, 32) = v14975[32]
Symbolic@0x22ecb30 insn@0x08048300[0]: filterIndirectJumpTarget(v14975[32]) = v14975[32]
Symbolic@0x22ecb30 insn@0x08048300[0]: writeRegister(eip, v14975[32])
Symbolic@0x22ecb30 insn@0x08048300[0]: finishInstruction(jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>])
registers:
  eip    = v14975[32]
memory:
  addr={defs={0x08048300}, expr=0x080496db[32]} value=(extract[8] 24[32] 32[32] v14975[32])
  addr={defs={0x08048300}, expr=0x080496da[32]} value=(extract[8] 16[32] 24[32] v14975[32])
  addr={defs={0x08048300}, expr=0x080496d9[32]} value=(extract[8] 8[32] 16[32] v14975[32])
  addr={defs={0x08048300}, expr=0x080496d8[32]} value=(extract[8] 0[32] 8[32] v14975[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = (add[32] frame_pointer[32] 4[32])
  eip    = v14975[32]
memory:
  addr={defs={0x08048300}, expr=0x080496db[32]} value=(extract[8] 24[32] 32[32] v14975[32])
  addr={defs={0x08048300}, expr=0x080496da[32]} value=(extract[8] 16[32] 24[32] v14975[32])
  addr={defs={0x08048300}, expr=0x080496d9[32]} value=(extract[8] 8[32] 16[32] v14975[32])
  addr={defs={0x08048300}, expr=0x080496d8[32]} value=(extract[8] 0[32] 8[32] v14975[32])
Symbolic@0x22ecb30 insn@0x08048300[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
Symbolic@0x22ecb30 insn@0x08048310[0]: startInstruction(jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>])
Symbolic@0x22ecb30 insn@0x08048310[0]: number_(32, 6) = {defs={0x08048310}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x08048310[0]: number_(32, 134513424) = {defs={0x08048310}, expr=0x08048310[32]}
Symbolic@0x22ecb30 insn@0x08048310[0]: add({defs={0x08048310}, expr=0x08048310[32]}, {defs={0x08048310}, expr=6[32]}) = {defs={0x08048310}, expr=0x08048316[32]}
Symbolic@0x22ecb30 insn@0x08048310[0]: writeRegister(eip, {defs={0x08048310}, expr=0x08048316[32]})
Symbolic@0x22ecb30 insn@0x08048310[0]: number_(32, 134518492) = {defs={0x08048310}, expr=0x080496dc[32]}
Symbolic@0x22ecb30 insn@0x08048310[0]: boolean_(1) = {defs={0x08048310}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048310[0]: readMemory(ds, {defs={0x08048310}, expr=0x080496dc[32]}, {defs={0x08048310}, expr=1[1]}, 32) = v15051[32]
Symbolic@0x22ecb30 insn@0x08048310[0]: filterIndirectJumpTarget(v15051[32]) = v15051[32]
Symbolic@0x22ecb30 insn@0x08048310[0]: writeRegister(eip, v15051[32])
Symbolic@0x22ecb30 insn@0x08048310[0]: finishInstruction(jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>])
registers:
  eip    = v15051[32]
memory:
  addr={defs={0x08048310}, expr=0x080496df[32]} value=(extract[8] 24[32] 32[32] v15051[32])
  addr={defs={0x08048310}, expr=0x080496de[32]} value=(extract[8] 16[32] 24[32] v15051[32])
  addr={defs={0x08048310}, expr=0x080496dd[32]} value=(extract[8] 8[32] 16[32] v15051[32])
  addr={defs={0x08048310}, expr=0x080496dc[32]} value=(extract[8] 0[32] 8[32] v15051[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = (add[32] frame_pointer[32] 4[32])
  eip    = v15051[32]
memory:
  addr={defs={0x08048310}, expr=0x080496df[32]} value=(extract[8] 24[32] 32[32] v15051[32])
  addr={defs={0x08048310}, expr=0x080496de[32]} value=(extract[8] 16[32] 24[32] v15051[32])
  addr={defs={0x08048310}, expr=0x080496dd[32]} value=(extract[8] 8[32] 16[32] v15051[32])
  addr={defs={0x08048310}, expr=0x080496dc[32]} value=(extract[8] 0[32] 8[32] v15051[32])
Symbolic@0x22ecb30 insn@0x08048310[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
Symbolic@0x22ecb30 insn@0x08048320[0]: startInstruction(jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>])
Symbolic@0x22ecb30 insn@0x08048320[0]: number_(32, 6) = {defs={0x08048320}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x08048320[0]: number_(32, 134513440) = {defs={0x08048320}, expr=0x08048320[32]}
Symbolic@0x22ecb30 insn@0x08048320[0]: add({defs={0x08048320}, expr=0x08048320[32]}, {defs={0x08048320}, expr=6[32]}) = {defs={0x08048320}, expr=0x08048326[32]}
Symbolic@0x22ecb30 insn@0x08048320[0]: writeRegister(eip, {defs={0x08048320}, expr=0x08048326[32]})
Symbolic@0x22ecb30 insn@0x08048320[0]: number_(32, 134518496) = {defs={0x08048320}, expr=0x080496e0[32]}
Symbolic@0x22ecb30 insn@0x08048320[0]: boolean_(1) = {defs={0x08048320}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048320[0]: readMemory(ds, {defs={0x08048320}, expr=0x080496e0[32]}, {defs={0x08048320}, expr=1[1]}, 32) = v15127[32]
Symbolic@0x22ecb30 insn@0x08048320[0]: filterIndirectJumpTarget(v15127[32]) = v15127[32]
Symbolic@0x22ecb30 insn@0x08048320[0]: writeRegister(eip, v15127[32])
Symbolic@0x22ecb30 insn@0x08048320[0]: finishInstruction(jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>])
registers:
  eip    = v15127[32]
memory:
  addr={defs={0x08048320}, expr=0x080496e3[32]} value=(extract[8] 24[32] 32[32] v15127[32])
  addr={defs={0x08048320}, expr=0x080496e2[32]} value=(extract[8] 16[32] 24[32] v15127[32])
  addr={defs={0x08048320}, expr=0x080496e1[32]} value=(extract[8] 8[32] 16[32] v15127[32])
  addr={defs={0x08048320}, expr=0x080496e0[32]} value=(extract[8] 0[32] 8[32] v15127[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = (add[32] frame_pointer[32] 4[32])
  eip    = v15127[32]
memory:
  addr={defs={0x08048320}, expr=0x080496e3[32]} value=(extract[8] 24[32] 32[32] v15127[32])
  addr={defs={0x08048320}, expr=0x080496e2[32]} value=(extract[8] 16[32] 24[32] v15127[32])
  addr={defs={0x08048320}, expr=0x080496e1[32]} value=(extract[8] 8[32] 16[32] v15127[32])
  addr={defs={0x08048320}, expr=0x080496e0[32]} value=(extract[8] 0[32] 8[32] v15127[32])
Symbolic@0x22ecb30 insn@0x08048320[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
Symbolic@0x22ecb30 insn@0x08048330[0]: startInstruction(jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>])
Symbolic@0x22ecb30 insn@0x08048330[0]: number_(32, 6) = {defs={0x08048330}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x08048330[0]: number_(32, 134513456) = {defs={0x08048330}, expr=0x08048330[32]}
Symbolic@0x22ecb30 insn@0x08048330[0]: add({defs={0x08048330}, expr=0x08048330[32]}, {defs={0x08048330}, expr=6[32]}) = {defs={0x08048330}, expr=0x08048336[32]}
Symbolic@0x22ecb30 insn@0x08048330[0]: writeRegister(eip, {defs={0x08048330}, expr=0x08048336[32]})
Symbolic@0x22ecb30 insn@0x08048330[0]: number_(32, 134518500) = {defs={0x08048330}, expr=0x080496e4[32]}
Symbolic@0x22ecb30 insn@0x08048330[0]: boolean_(1) = {defs={0x08048330}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048330[0]: readMemory(ds, {defs={0x08048330}, expr=0x080496e4[32]}, {defs={0x08048330}, expr=1[1]}, 32) = v15203[32]
Symbolic@0x22ecb30 insn@0x08048330[0]: filterIndirectJumpTarget(v15203[32]) = v15203[32]
Symbolic@0x22ecb30 insn@0x08048330[0]: writeRegister(eip, v15203[32])
Symbolic@0x22ecb30 insn@0x08048330[0]: finishInstruction(jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>])
registers:
  eip    = v15203[32]
memory:
  addr={defs={0x08048330}, expr=0x080496e7[32]} value=(extract[8] 24[32] 32[32] v15203[32])
  addr={defs={0x08048330}, expr=0x080496e6[32]} value=(extract[8] 16[32] 24[32] v15203[32])
  addr={defs={0x08048330}, expr=0x080496e5[32]} value=(extract[8] 8[32] 16[32] v15203[32])
  addr={defs={0x08048330}, expr=0x080496e4[32]} value=(extract[8] 0[32] 8[32] v15203[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = (add[32] frame_pointer[32] 4[32])
  eip    = v15203[32]
memory:
  addr={defs={0x08048330}, expr=0x080496e7[32]} value=(extract[8] 24[32] 32[32] v15203[32])
  addr={defs={0x08048330}, expr=0x080496e6[32]} value=(extract[8] 16[32] 24[32] v15203[32])
  addr={defs={0x08048330}, expr=0x080496e5[32]} value=(extract[8] 8[32] 16[32] v15203[32])
  addr={defs={0x08048330}, expr=0x080496e4[32]} value=(extract[8] 0[32] 8[32] v15203[32])
Symbolic@0x22ecb30 insn@0x08048330[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048340:xor    ebp, ebp
Symbolic@0x22ecb30 insn@0x08048340[0]: startInstruction(xor    ebp, ebp)
Symbolic@0x22ecb30 insn@0x08048340[0]: number_(32, 2) = {defs={0x08048340}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048340[0]: number_(32, 134513472) = {defs={0x08048340}, expr=0x08048340[32]}
Symbolic@0x22ecb30 insn@0x08048340[0]: add({defs={0x08048340}, expr=0x08048340[32]}, {defs={0x08048340}, expr=2[32]}) = {defs={0x08048340}, expr=0x08048342[32]}
Symbolic@0x22ecb30 insn@0x08048340[0]: writeRegister(eip, {defs={0x08048340}, expr=0x08048342[32]})
Symbolic@0x22ecb30 insn@0x08048340[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048340[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048340[0]: xor_(ebp_0[32], ebp_0[32]) = {defs={0x08048340}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[32]}, 0, 8) = {defs={0x08048340}, expr=0[8]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[8]}, 1, 2) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[8]}, 0, 1) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: xor_({defs={0x08048340}, expr=0[1]}, {defs={0x08048340}, expr=0[1]}) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[8]}, 3, 4) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[8]}, 2, 3) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: xor_({defs={0x08048340}, expr=0[1]}, {defs={0x08048340}, expr=0[1]}) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[8]}, 5, 6) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[8]}, 4, 5) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: xor_({defs={0x08048340}, expr=0[1]}, {defs={0x08048340}, expr=0[1]}) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[8]}, 7, 8) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[8]}, 6, 7) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: xor_({defs={0x08048340}, expr=0[1]}, {defs={0x08048340}, expr=0[1]}) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: xor_({defs={0x08048340}, expr=0[1]}, {defs={0x08048340}, expr=0[1]}) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: xor_({defs={0x08048340}, expr=0[1]}, {defs={0x08048340}, expr=0[1]}) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: xor_({defs={0x08048340}, expr=0[1]}, {defs={0x08048340}, expr=0[1]}) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: invert({defs={0x08048340}, expr=0[1]}) = {defs={0x08048340}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: writeRegister(pf, {defs={0x08048340}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048340[0]: extract({defs={0x08048340}, expr=0[32]}, 31, 32) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: writeRegister(sf, {defs={0x08048340}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048340[0]: equalToZero({defs={0x08048340}, expr=0[32]}) = {defs={0x08048340}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: writeRegister(zf, {defs={0x08048340}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048340[0]: writeRegister(ebp, {defs={0x08048340}, expr=0[32]})
Symbolic@0x22ecb30 insn@0x08048340[0]: boolean_(0) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: writeRegister(of, {defs={0x08048340}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048340[0]: undefined_(1) = v15279[1]
Symbolic@0x22ecb30 insn@0x08048340[0]: writeRegister(af, v15279[1])
Symbolic@0x22ecb30 insn@0x08048340[0]: boolean_(0) = {defs={0x08048340}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048340[0]: writeRegister(cf, {defs={0x08048340}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048340[0]: finishInstruction(xor    ebp, ebp)
registers:
  ebp       = {defs={0x08048340}, expr=0[32]}
  eip       = {defs={0x08048340}, expr=0x08048342[32]}
  pf        = {defs={0x08048340}, expr=1[1]}
  sf        = {defs={0x08048340}, expr=0[1]}
  zf        = {defs={0x08048340}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048340}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15279[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048340}, expr=0[1]}
memory:

0x8048342:pop    esi
Symbolic@0x22ecb30 insn@0x08048342[1]: startInstruction(pop    esi)
Symbolic@0x22ecb30 insn@0x08048342[1]: number_(32, 1) = {defs={0x08048342}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048342[1]: number_(32, 134513474) = {defs={0x08048342}, expr=0x08048342[32]}
Symbolic@0x22ecb30 insn@0x08048342[1]: add({defs={0x08048342}, expr=0x08048342[32]}, {defs={0x08048342}, expr=1[32]}) = {defs={0x08048342}, expr=0x08048343[32]}
Symbolic@0x22ecb30 insn@0x08048342[1]: writeRegister(eip, {defs={0x08048342}, expr=0x08048343[32]})
Symbolic@0x22ecb30 insn@0x08048342[1]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048342[1]: number_(32, 4) = {defs={0x08048342}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048342[1]: add(esp_0[32], {defs={0x08048342}, expr=4[32]}) = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048342[1]: writeRegister(esp, {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x08048342[1]: boolean_(1) = {defs={0x08048342}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048342[1]: readMemory(ss, esp_0[32], {defs={0x08048342}, expr=1[1]}, 32) = v15280[32]
Symbolic@0x22ecb30 insn@0x08048342[1]: writeRegister(esi, v15280[32])
Symbolic@0x22ecb30 insn@0x08048342[1]: finishInstruction(pop    esi)
registers:
  esp       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048342}, expr=0x08048343[32]}
  pf        = {defs={0x08048340}, expr=1[1]}
  sf        = {defs={0x08048340}, expr=0[1]}
  zf        = {defs={0x08048340}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048340}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15279[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048340}, expr=0[1]}
memory:
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x8048343:mov    ecx, esp
Symbolic@0x22ecb30 insn@0x08048343[2]: startInstruction(mov    ecx, esp)
Symbolic@0x22ecb30 insn@0x08048343[2]: number_(32, 2) = {defs={0x08048343}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048343[2]: number_(32, 134513475) = {defs={0x08048343}, expr=0x08048343[32]}
Symbolic@0x22ecb30 insn@0x08048343[2]: add({defs={0x08048343}, expr=0x08048343[32]}, {defs={0x08048343}, expr=2[32]}) = {defs={0x08048343}, expr=0x08048345[32]}
Symbolic@0x22ecb30 insn@0x08048343[2]: writeRegister(eip, {defs={0x08048343}, expr=0x08048345[32]})
Symbolic@0x22ecb30 insn@0x08048343[2]: readRegister(esp) = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048343[2]: writeRegister(ecx, {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x08048343[2]: finishInstruction(mov    ecx, esp)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048343}, expr=0x08048345[32]}
  pf        = {defs={0x08048340}, expr=1[1]}
  sf        = {defs={0x08048340}, expr=0[1]}
  zf        = {defs={0x08048340}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048340}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15279[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048340}, expr=0[1]}
memory:
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x8048345:and    esp, 0xf0<-0x10>
Symbolic@0x22ecb30 insn@0x08048345[3]: startInstruction(and    esp, 0xf0<-0x10>)
Symbolic@0x22ecb30 insn@0x08048345[3]: number_(32, 3) = {defs={0x08048345}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048345[3]: number_(32, 134513477) = {defs={0x08048345}, expr=0x08048345[32]}
Symbolic@0x22ecb30 insn@0x08048345[3]: add({defs={0x08048345}, expr=0x08048345[32]}, {defs={0x08048345}, expr=3[32]}) = {defs={0x08048345}, expr=0x08048348[32]}
Symbolic@0x22ecb30 insn@0x08048345[3]: writeRegister(eip, {defs={0x08048345}, expr=0x08048348[32]})
Symbolic@0x22ecb30 insn@0x08048345[3]: number_(32, 18446744073709551600) = {defs={0x08048345}, expr=-16[32]}
Symbolic@0x22ecb30 insn@0x08048345[3]: readRegister(esp) = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048345[3]: and_({defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x08048345}, expr=-16[32]}) = {defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])}, 0, 8) = {defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, 1, 2) = {defs={0x08048342,0x08048345}, expr=(extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, 0, 1) = {defs={0x08048342,0x08048345}, expr=(extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: xor_({defs={0x08048342,0x08048345}, expr=(extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, {defs={0x08048342,0x08048345}, expr=(extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}) = {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, 3, 4) = {defs={0x08048342,0x08048345}, expr=(extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, 2, 3) = {defs={0x08048342,0x08048345}, expr=(extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: xor_({defs={0x08048342,0x08048345}, expr=(extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, {defs={0x08048342,0x08048345}, expr=(extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}) = {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, 5, 6) = {defs={0x08048342,0x08048345}, expr=(extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, 4, 5) = {defs={0x08048342,0x08048345}, expr=(extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: xor_({defs={0x08048342,0x08048345}, expr=(extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, {defs={0x08048342,0x08048345}, expr=(extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}) = {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, 7, 8) = {defs={0x08048342,0x08048345}, expr=(extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, 6, 7) = {defs={0x08048342,0x08048345}, expr=(extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: xor_({defs={0x08048342,0x08048345}, expr=(extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}, {defs={0x08048342,0x08048345}, expr=(extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}) = {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x08048345[3]: xor_({defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}, {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}) = {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x08048345[3]: xor_({defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}, {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}) = {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x08048345[3]: xor_({defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}, {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}) = {defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x08048345[3]: invert({defs={0x08048342,0x08048345}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])))}) = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
Symbolic@0x22ecb30 insn@0x08048345[3]: writeRegister(pf, {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))})
Symbolic@0x22ecb30 insn@0x08048345[3]: extract({defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])}, 31, 32) = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: writeRegister(sf, {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))})
Symbolic@0x22ecb30 insn@0x08048345[3]: equalToZero({defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])}) = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x08048345[3]: writeRegister(zf, {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))})
Symbolic@0x22ecb30 insn@0x08048345[3]: writeRegister(esp, {defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])})
Symbolic@0x22ecb30 insn@0x08048345[3]: boolean_(0) = {defs={0x08048345}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048345[3]: writeRegister(of, {defs={0x08048345}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048345[3]: undefined_(1) = v15285[1]
Symbolic@0x22ecb30 insn@0x08048345[3]: writeRegister(af, v15285[1])
Symbolic@0x22ecb30 insn@0x08048345[3]: boolean_(0) = {defs={0x08048345}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048345[3]: writeRegister(cf, {defs={0x08048345}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048345[3]: finishInstruction(and    esp, 0xf0<-0x10>)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048345}, expr=0x08048348[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x8048348:push   eax
Symbolic@0x22ecb30 insn@0x08048348[4]: startInstruction(push   eax)
Symbolic@0x22ecb30 insn@0x08048348[4]: number_(32, 1) = {defs={0x08048348}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048348[4]: number_(32, 134513480) = {defs={0x08048348}, expr=0x08048348[32]}
Symbolic@0x22ecb30 insn@0x08048348[4]: add({defs={0x08048348}, expr=0x08048348[32]}, {defs={0x08048348}, expr=1[32]}) = {defs={0x08048348}, expr=0x08048349[32]}
Symbolic@0x22ecb30 insn@0x08048348[4]: writeRegister(eip, {defs={0x08048348}, expr=0x08048349[32]})
Symbolic@0x22ecb30 insn@0x08048348[4]: readRegister(esp) = {defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])}
Symbolic@0x22ecb30 insn@0x08048348[4]: number_(32, 18446744073709551612) = {defs={0x08048348}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048348[4]: add({defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])}, {defs={0x08048348}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])}
Symbolic@0x22ecb30 insn@0x08048348[4]: boolean_(1) = {defs={0x08048348}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048348[4]: readRegister(eax) = eax_0[32]
Symbolic@0x22ecb30 insn@0x08048348[4]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])}, eax_0[32], {defs={0x08048348}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048348[4]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])})
Symbolic@0x22ecb30 insn@0x08048348[4]: finishInstruction(push   eax)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048348}, expr=0x08048349[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x8048349:push   esp
Symbolic@0x22ecb30 insn@0x08048349[5]: startInstruction(push   esp)
Symbolic@0x22ecb30 insn@0x08048349[5]: number_(32, 1) = {defs={0x08048349}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048349[5]: number_(32, 134513481) = {defs={0x08048349}, expr=0x08048349[32]}
Symbolic@0x22ecb30 insn@0x08048349[5]: add({defs={0x08048349}, expr=0x08048349[32]}, {defs={0x08048349}, expr=1[32]}) = {defs={0x08048349}, expr=0x0804834a[32]}
Symbolic@0x22ecb30 insn@0x08048349[5]: writeRegister(eip, {defs={0x08048349}, expr=0x0804834a[32]})
Symbolic@0x22ecb30 insn@0x08048349[5]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])}
Symbolic@0x22ecb30 insn@0x08048349[5]: number_(32, 18446744073709551612) = {defs={0x08048349}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048349[5]: add({defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])}, {defs={0x08048349}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])}
Symbolic@0x22ecb30 insn@0x08048349[5]: boolean_(1) = {defs={0x08048349}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048349[5]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])}
Symbolic@0x22ecb30 insn@0x08048349[5]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])}, {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])}, {defs={0x08048349}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048349[5]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])})
Symbolic@0x22ecb30 insn@0x08048349[5]: finishInstruction(push   esp)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048349}, expr=0x0804834a[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x804834a:push   edx
Symbolic@0x22ecb30 insn@0x0804834a[6]: startInstruction(push   edx)
Symbolic@0x22ecb30 insn@0x0804834a[6]: number_(32, 1) = {defs={0x0804834a}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x0804834a[6]: number_(32, 134513482) = {defs={0x0804834a}, expr=0x0804834a[32]}
Symbolic@0x22ecb30 insn@0x0804834a[6]: add({defs={0x0804834a}, expr=0x0804834a[32]}, {defs={0x0804834a}, expr=1[32]}) = {defs={0x0804834a}, expr=0x0804834b[32]}
Symbolic@0x22ecb30 insn@0x0804834a[6]: writeRegister(eip, {defs={0x0804834a}, expr=0x0804834b[32]})
Symbolic@0x22ecb30 insn@0x0804834a[6]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])}
Symbolic@0x22ecb30 insn@0x0804834a[6]: number_(32, 18446744073709551612) = {defs={0x0804834a}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x0804834a[6]: add({defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])}, {defs={0x0804834a}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])}
Symbolic@0x22ecb30 insn@0x0804834a[6]: boolean_(1) = {defs={0x0804834a}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804834a[6]: readRegister(edx) = edx_0[32]
Symbolic@0x22ecb30 insn@0x0804834a[6]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])}, edx_0[32], {defs={0x0804834a}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804834a[6]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])})
Symbolic@0x22ecb30 insn@0x0804834a[6]: finishInstruction(push   edx)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x0804834a}, expr=0x0804834b[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -9[32])} value=(extract[8] 24[32] 32[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -10[32])} value=(extract[8] 16[32] 24[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -11[32])} value=(extract[8] 8[32] 16[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])} value=(extract[8] 0[32] 8[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x804834b:push   0x08048520<__libc_csu_fini>
Symbolic@0x22ecb30 insn@0x0804834b[7]: startInstruction(push   0x08048520<__libc_csu_fini>)
Symbolic@0x22ecb30 insn@0x0804834b[7]: number_(32, 5) = {defs={0x0804834b}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804834b[7]: number_(32, 134513483) = {defs={0x0804834b}, expr=0x0804834b[32]}
Symbolic@0x22ecb30 insn@0x0804834b[7]: add({defs={0x0804834b}, expr=0x0804834b[32]}, {defs={0x0804834b}, expr=5[32]}) = {defs={0x0804834b}, expr=0x08048350[32]}
Symbolic@0x22ecb30 insn@0x0804834b[7]: writeRegister(eip, {defs={0x0804834b}, expr=0x08048350[32]})
Symbolic@0x22ecb30 insn@0x0804834b[7]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])}
Symbolic@0x22ecb30 insn@0x0804834b[7]: number_(32, 18446744073709551612) = {defs={0x0804834b}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x0804834b[7]: add({defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])}, {defs={0x0804834b}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])}
Symbolic@0x22ecb30 insn@0x0804834b[7]: boolean_(1) = {defs={0x0804834b}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804834b[7]: number_(32, 134513952) = {defs={0x0804834b}, expr=0x08048520[32]}
Symbolic@0x22ecb30 insn@0x0804834b[7]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])}, {defs={0x0804834b}, expr=0x08048520[32]}, {defs={0x0804834b}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804834b[7]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])})
Symbolic@0x22ecb30 insn@0x0804834b[7]: finishInstruction(push   0x08048520<__libc_csu_fini>)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x0804834b}, expr=0x08048350[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -13[32])} value={defs={0x0804834b}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -14[32])} value={defs={0x0804834b}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -15[32])} value={defs={0x0804834b}, expr=-123[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])} value={defs={0x0804834b}, expr=32[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -9[32])} value=(extract[8] 24[32] 32[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -10[32])} value=(extract[8] 16[32] 24[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -11[32])} value=(extract[8] 8[32] 16[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])} value=(extract[8] 0[32] 8[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x8048350:push   0x080484b0<__libc_csu_init>
Symbolic@0x22ecb30 insn@0x08048350[8]: startInstruction(push   0x080484b0<__libc_csu_init>)
Symbolic@0x22ecb30 insn@0x08048350[8]: number_(32, 5) = {defs={0x08048350}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048350[8]: number_(32, 134513488) = {defs={0x08048350}, expr=0x08048350[32]}
Symbolic@0x22ecb30 insn@0x08048350[8]: add({defs={0x08048350}, expr=0x08048350[32]}, {defs={0x08048350}, expr=5[32]}) = {defs={0x08048350}, expr=0x08048355[32]}
Symbolic@0x22ecb30 insn@0x08048350[8]: writeRegister(eip, {defs={0x08048350}, expr=0x08048355[32]})
Symbolic@0x22ecb30 insn@0x08048350[8]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])}
Symbolic@0x22ecb30 insn@0x08048350[8]: number_(32, 18446744073709551612) = {defs={0x08048350}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048350[8]: add({defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])}, {defs={0x08048350}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])}
Symbolic@0x22ecb30 insn@0x08048350[8]: boolean_(1) = {defs={0x08048350}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048350[8]: number_(32, 134513840) = {defs={0x08048350}, expr=0x080484b0[32]}
Symbolic@0x22ecb30 insn@0x08048350[8]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])}, {defs={0x08048350}, expr=0x080484b0[32]}, {defs={0x08048350}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048350[8]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])})
Symbolic@0x22ecb30 insn@0x08048350[8]: finishInstruction(push   0x080484b0<__libc_csu_init>)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048350}, expr=0x08048355[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -17[32])} value={defs={0x08048350}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -18[32])} value={defs={0x08048350}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -19[32])} value={defs={0x08048350}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])} value={defs={0x08048350}, expr=-80[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -13[32])} value={defs={0x0804834b}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -14[32])} value={defs={0x0804834b}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -15[32])} value={defs={0x0804834b}, expr=-123[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])} value={defs={0x0804834b}, expr=32[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -9[32])} value=(extract[8] 24[32] 32[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -10[32])} value=(extract[8] 16[32] 24[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -11[32])} value=(extract[8] 8[32] 16[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])} value=(extract[8] 0[32] 8[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x8048355:push   ecx
Symbolic@0x22ecb30 insn@0x08048355[9]: startInstruction(push   ecx)
Symbolic@0x22ecb30 insn@0x08048355[9]: number_(32, 1) = {defs={0x08048355}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048355[9]: number_(32, 134513493) = {defs={0x08048355}, expr=0x08048355[32]}
Symbolic@0x22ecb30 insn@0x08048355[9]: add({defs={0x08048355}, expr=0x08048355[32]}, {defs={0x08048355}, expr=1[32]}) = {defs={0x08048355}, expr=0x08048356[32]}
Symbolic@0x22ecb30 insn@0x08048355[9]: writeRegister(eip, {defs={0x08048355}, expr=0x08048356[32]})
Symbolic@0x22ecb30 insn@0x08048355[9]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])}
Symbolic@0x22ecb30 insn@0x08048355[9]: number_(32, 18446744073709551612) = {defs={0x08048355}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048355[9]: add({defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])}, {defs={0x08048355}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])}
Symbolic@0x22ecb30 insn@0x08048355[9]: boolean_(1) = {defs={0x08048355}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048355[9]: readRegister(ecx) = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048355[9]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])}, {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x08048355}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048355[9]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])})
Symbolic@0x22ecb30 insn@0x08048355[9]: finishInstruction(push   ecx)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048355}, expr=0x08048356[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -21[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -22[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -23[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -17[32])} value={defs={0x08048350}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -18[32])} value={defs={0x08048350}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -19[32])} value={defs={0x08048350}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])} value={defs={0x08048350}, expr=-80[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -13[32])} value={defs={0x0804834b}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -14[32])} value={defs={0x0804834b}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -15[32])} value={defs={0x0804834b}, expr=-123[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])} value={defs={0x0804834b}, expr=32[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -9[32])} value=(extract[8] 24[32] 32[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -10[32])} value=(extract[8] 16[32] 24[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -11[32])} value=(extract[8] 8[32] 16[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])} value=(extract[8] 0[32] 8[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x8048356:push   esi
Symbolic@0x22ecb30 insn@0x08048356[10]: startInstruction(push   esi)
Symbolic@0x22ecb30 insn@0x08048356[10]: number_(32, 1) = {defs={0x08048356}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048356[10]: number_(32, 134513494) = {defs={0x08048356}, expr=0x08048356[32]}
Symbolic@0x22ecb30 insn@0x08048356[10]: add({defs={0x08048356}, expr=0x08048356[32]}, {defs={0x08048356}, expr=1[32]}) = {defs={0x08048356}, expr=0x08048357[32]}
Symbolic@0x22ecb30 insn@0x08048356[10]: writeRegister(eip, {defs={0x08048356}, expr=0x08048357[32]})
Symbolic@0x22ecb30 insn@0x08048356[10]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])}
Symbolic@0x22ecb30 insn@0x08048356[10]: number_(32, 18446744073709551612) = {defs={0x08048356}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048356[10]: add({defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])}, {defs={0x08048356}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])}
Symbolic@0x22ecb30 insn@0x08048356[10]: boolean_(1) = {defs={0x08048356}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048356[10]: readRegister(esi) = v15280[32]
Symbolic@0x22ecb30 insn@0x08048356[10]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])}, v15280[32], {defs={0x08048356}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048356[10]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])})
Symbolic@0x22ecb30 insn@0x08048356[10]: finishInstruction(push   esi)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048356}, expr=0x08048357[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -25[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -26[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -27[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])} value=(extract[8] 0[32] 8[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -21[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -22[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -23[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -17[32])} value={defs={0x08048350}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -18[32])} value={defs={0x08048350}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -19[32])} value={defs={0x08048350}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])} value={defs={0x08048350}, expr=-80[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -13[32])} value={defs={0x0804834b}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -14[32])} value={defs={0x0804834b}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -15[32])} value={defs={0x0804834b}, expr=-123[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])} value={defs={0x0804834b}, expr=32[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -9[32])} value=(extract[8] 24[32] 32[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -10[32])} value=(extract[8] 16[32] 24[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -11[32])} value=(extract[8] 8[32] 16[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])} value=(extract[8] 0[32] 8[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x8048357:push   0x08048410<main>
Symbolic@0x22ecb30 insn@0x08048357[11]: startInstruction(push   0x08048410<main>)
Symbolic@0x22ecb30 insn@0x08048357[11]: number_(32, 5) = {defs={0x08048357}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048357[11]: number_(32, 134513495) = {defs={0x08048357}, expr=0x08048357[32]}
Symbolic@0x22ecb30 insn@0x08048357[11]: add({defs={0x08048357}, expr=0x08048357[32]}, {defs={0x08048357}, expr=5[32]}) = {defs={0x08048357}, expr=0x0804835c[32]}
Symbolic@0x22ecb30 insn@0x08048357[11]: writeRegister(eip, {defs={0x08048357}, expr=0x0804835c[32]})
Symbolic@0x22ecb30 insn@0x08048357[11]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])}
Symbolic@0x22ecb30 insn@0x08048357[11]: number_(32, 18446744073709551612) = {defs={0x08048357}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048357[11]: add({defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])}, {defs={0x08048357}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -32[32])}
Symbolic@0x22ecb30 insn@0x08048357[11]: boolean_(1) = {defs={0x08048357}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048357[11]: number_(32, 134513680) = {defs={0x08048357}, expr=0x08048410[32]}
Symbolic@0x22ecb30 insn@0x08048357[11]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -32[32])}, {defs={0x08048357}, expr=0x08048410[32]}, {defs={0x08048357}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048357[11]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -32[32])})
Symbolic@0x22ecb30 insn@0x08048357[11]: finishInstruction(push   0x08048410<main>)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -32[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x08048357}, expr=0x0804835c[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -29[32])} value={defs={0x08048357}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -30[32])} value={defs={0x08048357}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -31[32])} value={defs={0x08048357}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -32[32])} value={defs={0x08048357}, expr=16[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -25[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -26[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -27[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])} value=(extract[8] 0[32] 8[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -21[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -22[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -23[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -17[32])} value={defs={0x08048350}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -18[32])} value={defs={0x08048350}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -19[32])} value={defs={0x08048350}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])} value={defs={0x08048350}, expr=-80[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -13[32])} value={defs={0x0804834b}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -14[32])} value={defs={0x0804834b}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -15[32])} value={defs={0x0804834b}, expr=-123[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])} value={defs={0x0804834b}, expr=32[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -9[32])} value=(extract[8] 24[32] 32[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -10[32])} value=(extract[8] 16[32] 24[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -11[32])} value=(extract[8] 8[32] 16[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])} value=(extract[8] 0[32] 8[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])

0x804835c:call   0x08048310<__libc_start_main@plt>
Symbolic@0x22ecb30 insn@0x0804835c[12]: startInstruction(call   0x08048310<__libc_start_main@plt>)
Symbolic@0x22ecb30 insn@0x0804835c[12]: number_(32, 5) = {defs={0x0804835c}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804835c[12]: number_(32, 134513500) = {defs={0x0804835c}, expr=0x0804835c[32]}
Symbolic@0x22ecb30 insn@0x0804835c[12]: add({defs={0x0804835c}, expr=0x0804835c[32]}, {defs={0x0804835c}, expr=5[32]}) = {defs={0x0804835c}, expr=0x08048361[32]}
Symbolic@0x22ecb30 insn@0x0804835c[12]: writeRegister(eip, {defs={0x0804835c}, expr=0x08048361[32]})
Symbolic@0x22ecb30 insn@0x0804835c[12]: readRegister(esp) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -32[32])}
Symbolic@0x22ecb30 insn@0x0804835c[12]: number_(32, 18446744073709551612) = {defs={0x0804835c}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x0804835c[12]: add({defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -32[32])}, {defs={0x0804835c}, expr=-4[32]}) = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -36[32])}
Symbolic@0x22ecb30 insn@0x0804835c[12]: boolean_(1) = {defs={0x0804835c}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804835c[12]: readRegister(eip) = {defs={0x0804835c}, expr=0x08048361[32]}
Symbolic@0x22ecb30 insn@0x0804835c[12]: writeMemory(ss, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -36[32])}, {defs={0x0804835c}, expr=0x08048361[32]}, {defs={0x0804835c}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804835c[12]: number_(32, 134513424) = {defs={0x0804835c}, expr=0x08048310[32]}
Symbolic@0x22ecb30 insn@0x0804835c[12]: filterCallTarget({defs={0x0804835c}, expr=0x08048310[32]}) = {defs={0x0804835c}, expr=0x08048310[32]}
Symbolic@0x22ecb30 insn@0x0804835c[12]: writeRegister(eip, {defs={0x0804835c}, expr=0x08048310[32]})
Symbolic@0x22ecb30 insn@0x0804835c[12]: writeRegister(esp, {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -36[32])})
Symbolic@0x22ecb30 insn@0x0804835c[12]: finishInstruction(call   0x08048310<__libc_start_main@plt>)
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] esp_0[32] 4[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -36[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x0804835c}, expr=0x08048310[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -33[32])} value={defs={0x0804835c}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -34[32])} value={defs={0x0804835c}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -35[32])} value={defs={0x0804835c}, expr=-125[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -36[32])} value={defs={0x0804835c}, expr=97[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -29[32])} value={defs={0x08048357}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -30[32])} value={defs={0x08048357}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -31[32])} value={defs={0x08048357}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -32[32])} value={defs={0x08048357}, expr=16[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -25[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -26[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -27[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -28[32])} value=(extract[8] 0[32] 8[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -21[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -22[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -23[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -24[32])} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -17[32])} value={defs={0x08048350}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -18[32])} value={defs={0x08048350}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -19[32])} value={defs={0x08048350}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -20[32])} value={defs={0x08048350}, expr=-80[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -13[32])} value={defs={0x0804834b}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -14[32])} value={defs={0x0804834b}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -15[32])} value={defs={0x0804834b}, expr=-123[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -16[32])} value={defs={0x0804834b}, expr=32[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -9[32])} value=(extract[8] 24[32] 32[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -10[32])} value=(extract[8] 16[32] 24[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -11[32])} value=(extract[8] 8[32] 16[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -12[32])} value=(extract[8] 0[32] 8[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] 4[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15280[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  ecx       = {defs={0x08048342}, expr=(add[32] frame_pointer[32] 8[32])}
  esp       = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -36[32])}
  ebp       = {defs={0x08048340}, expr=0[32]}
  esi       = v15280[32]
  eip       = {defs={0x0804835c}, expr=0x08048310[32]}
  pf        = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]))))}
  sf        = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]))}
  zf        = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048345}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15285[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048345}, expr=0[1]}
memory:
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -33[32])} value={defs={0x0804835c}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -34[32])} value={defs={0x0804835c}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -35[32])} value={defs={0x0804835c}, expr=-125[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -36[32])} value={defs={0x0804835c}, expr=97[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -29[32])} value={defs={0x08048357}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -30[32])} value={defs={0x08048357}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -31[32])} value={defs={0x08048357}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -32[32])} value={defs={0x08048357}, expr=16[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -25[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -26[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -27[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -28[32])} value=(extract[8] 0[32] 8[32] v15280[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -21[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] (add[32] frame_pointer[32] 8[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -22[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] (add[32] frame_pointer[32] 8[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -23[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] (add[32] frame_pointer[32] 8[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -24[32])} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] (add[32] frame_pointer[32] 8[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -17[32])} value={defs={0x08048350}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -18[32])} value={defs={0x08048350}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -19[32])} value={defs={0x08048350}, expr=-124[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -20[32])} value={defs={0x08048350}, expr=-80[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -13[32])} value={defs={0x0804834b}, expr=8[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -14[32])} value={defs={0x0804834b}, expr=4[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -15[32])} value={defs={0x0804834b}, expr=-123[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -16[32])} value={defs={0x0804834b}, expr=32[8]}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -9[32])} value=(extract[8] 24[32] 32[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -10[32])} value=(extract[8] 16[32] 24[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -11[32])} value=(extract[8] 8[32] 16[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -12[32])} value=(extract[8] 0[32] 8[32] edx_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -5[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -6[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -7[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -8[32])} value={defs={0x08048342,0x08048345,0x08048348}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -4[32]))}
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -1[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -2[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -3[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] 8[32]) -16[32]) -4[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x08048342}, expr=(add[32] frame_pointer[32] 7[32])} value=(extract[8] 24[32] 32[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] frame_pointer[32] 6[32])} value=(extract[8] 16[32] 24[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] frame_pointer[32] 5[32])} value=(extract[8] 8[32] 16[32] v15280[32])
  addr={defs={0x08048342}, expr=(add[32] frame_pointer[32] 4[32])} value=(extract[8] 0[32] 8[32] v15280[32])
Symbolic@0x22ecb30 insn@0x0804835c[12]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048361:hlt    
Symbolic@0x22ecb30 insn@0x08048361[0]: startInstruction(hlt)
Symbolic@0x22ecb30 insn@0x08048361[0]: number_(32, 1) = {defs={0x08048361}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048361[0]: number_(32, 134513505) = {defs={0x08048361}, expr=0x08048361[32]}
Symbolic@0x22ecb30 insn@0x08048361[0]: add({defs={0x08048361}, expr=0x08048361[32]}, {defs={0x08048361}, expr=1[32]}) = {defs={0x08048361}, expr=0x08048362[32]}
Symbolic@0x22ecb30 insn@0x08048361[0]: writeRegister(eip, {defs={0x08048361}, expr=0x08048362[32]})
Symbolic@0x22ecb30 insn@0x08048361[0]: hlt()
Symbolic@0x22ecb30 insn@0x08048361[0]: number_(32, 134513505) = {defs={0x08048361}, expr=0x08048361[32]}
Symbolic@0x22ecb30 insn@0x08048361[0]: writeRegister(eip, {defs={0x08048361}, expr=0x08048361[32]})
Symbolic@0x22ecb30 insn@0x08048361[0]: finishInstruction(hlt)
registers:
  eip    = {defs={0x08048361}, expr=0x08048361[32]}
memory:
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = (add[32] frame_pointer[32] 4[32])
  eip    = {defs={0x08048361}, expr=0x08048361[32]}
memory:
Symbolic@0x22ecb30 insn@0x08048361[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048364:push   ebp
Symbolic@0x22ecb30 insn@0x08048364[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x08048364[0]: number_(32, 1) = {defs={0x08048364}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048364[0]: number_(32, 134513508) = {defs={0x08048364}, expr=0x08048364[32]}
Symbolic@0x22ecb30 insn@0x08048364[0]: add({defs={0x08048364}, expr=0x08048364[32]}, {defs={0x08048364}, expr=1[32]}) = {defs={0x08048364}, expr=0x08048365[32]}
Symbolic@0x22ecb30 insn@0x08048364[0]: writeRegister(eip, {defs={0x08048364}, expr=0x08048365[32]})
Symbolic@0x22ecb30 insn@0x08048364[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048364[0]: number_(32, 18446744073709551612) = {defs={0x08048364}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048364[0]: add(esp_0[32], {defs={0x08048364}, expr=-4[32]}) = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048364[0]: boolean_(1) = {defs={0x08048364}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048364[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048364[0]: writeMemory(ss, {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x08048364}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048364[0]: writeRegister(esp, {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048364[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048364}, expr=0x08048365[32]}
memory:
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048365:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x08048365[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x08048365[1]: number_(32, 2) = {defs={0x08048365}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048365[1]: number_(32, 134513509) = {defs={0x08048365}, expr=0x08048365[32]}
Symbolic@0x22ecb30 insn@0x08048365[1]: add({defs={0x08048365}, expr=0x08048365[32]}, {defs={0x08048365}, expr=2[32]}) = {defs={0x08048365}, expr=0x08048367[32]}
Symbolic@0x22ecb30 insn@0x08048365[1]: writeRegister(eip, {defs={0x08048365}, expr=0x08048367[32]})
Symbolic@0x22ecb30 insn@0x08048365[1]: readRegister(esp) = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048365[1]: writeRegister(ebp, {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048365[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048365}, expr=0x08048367[32]}
memory:
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048367:push   ebx
Symbolic@0x22ecb30 insn@0x08048367[2]: startInstruction(push   ebx)
Symbolic@0x22ecb30 insn@0x08048367[2]: number_(32, 1) = {defs={0x08048367}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048367[2]: number_(32, 134513511) = {defs={0x08048367}, expr=0x08048367[32]}
Symbolic@0x22ecb30 insn@0x08048367[2]: add({defs={0x08048367}, expr=0x08048367[32]}, {defs={0x08048367}, expr=1[32]}) = {defs={0x08048367}, expr=0x08048368[32]}
Symbolic@0x22ecb30 insn@0x08048367[2]: writeRegister(eip, {defs={0x08048367}, expr=0x08048368[32]})
Symbolic@0x22ecb30 insn@0x08048367[2]: readRegister(esp) = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048367[2]: number_(32, 18446744073709551612) = {defs={0x08048367}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048367[2]: add({defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048367}, expr=-4[32]}) = {defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x08048367[2]: boolean_(1) = {defs={0x08048367}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048367[2]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x08048367[2]: writeMemory(ss, {defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])}, ebx_0[32], {defs={0x08048367}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048367[2]: writeRegister(esp, {defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])})
Symbolic@0x22ecb30 insn@0x08048367[2]: finishInstruction(push   ebx)
registers:
  esp    = {defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])}
  ebp    = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048367}, expr=0x08048368[32]}
memory:
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048368:push   ecx
Symbolic@0x22ecb30 insn@0x08048368[3]: startInstruction(push   ecx)
Symbolic@0x22ecb30 insn@0x08048368[3]: number_(32, 1) = {defs={0x08048368}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048368[3]: number_(32, 134513512) = {defs={0x08048368}, expr=0x08048368[32]}
Symbolic@0x22ecb30 insn@0x08048368[3]: add({defs={0x08048368}, expr=0x08048368[32]}, {defs={0x08048368}, expr=1[32]}) = {defs={0x08048368}, expr=0x08048369[32]}
Symbolic@0x22ecb30 insn@0x08048368[3]: writeRegister(eip, {defs={0x08048368}, expr=0x08048369[32]})
Symbolic@0x22ecb30 insn@0x08048368[3]: readRegister(esp) = {defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x08048368[3]: number_(32, 18446744073709551612) = {defs={0x08048368}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048368[3]: add({defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])}, {defs={0x08048368}, expr=-4[32]}) = {defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048368[3]: boolean_(1) = {defs={0x08048368}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048368[3]: readRegister(ecx) = ecx_0[32]
Symbolic@0x22ecb30 insn@0x08048368[3]: writeMemory(ss, {defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -12[32])}, ecx_0[32], {defs={0x08048368}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048368[3]: writeRegister(esp, {defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x08048368[3]: finishInstruction(push   ecx)
registers:
  esp    = {defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -12[32])}
  ebp    = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048368}, expr=0x08048369[32]}
memory:
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048369:call   0x0804836e<<Insn>>
Symbolic@0x22ecb30 insn@0x08048369[4]: startInstruction(call   0x0804836e<<Insn>>)
Symbolic@0x22ecb30 insn@0x08048369[4]: number_(32, 5) = {defs={0x08048369}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048369[4]: number_(32, 134513513) = {defs={0x08048369}, expr=0x08048369[32]}
Symbolic@0x22ecb30 insn@0x08048369[4]: add({defs={0x08048369}, expr=0x08048369[32]}, {defs={0x08048369}, expr=5[32]}) = {defs={0x08048369}, expr=0x0804836e[32]}
Symbolic@0x22ecb30 insn@0x08048369[4]: writeRegister(eip, {defs={0x08048369}, expr=0x0804836e[32]})
Symbolic@0x22ecb30 insn@0x08048369[4]: readRegister(esp) = {defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048369[4]: number_(32, 18446744073709551612) = {defs={0x08048369}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048369[4]: add({defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x08048369}, expr=-4[32]}) = {defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x08048369[4]: boolean_(1) = {defs={0x08048369}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048369[4]: readRegister(eip) = {defs={0x08048369}, expr=0x0804836e[32]}
Symbolic@0x22ecb30 insn@0x08048369[4]: writeMemory(ss, {defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] esp_0[32] -16[32])}, {defs={0x08048369}, expr=0x0804836e[32]}, {defs={0x08048369}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048369[4]: number_(32, 134513518) = {defs={0x08048369}, expr=0x0804836e[32]}
Symbolic@0x22ecb30 insn@0x08048369[4]: filterCallTarget({defs={0x08048369}, expr=0x0804836e[32]}) = {defs={0x08048369}, expr=0x0804836e[32]}
Symbolic@0x22ecb30 insn@0x08048369[4]: writeRegister(eip, {defs={0x08048369}, expr=0x0804836e[32]})
Symbolic@0x22ecb30 insn@0x08048369[4]: writeRegister(esp, {defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] esp_0[32] -16[32])})
Symbolic@0x22ecb30 insn@0x08048369[4]: finishInstruction(call   0x0804836e<<Insn>>)
registers:
  esp    = {defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] esp_0[32] -16[32])}
  ebp    = {defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048369}, expr=0x0804836e[32]}
memory:
  addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] esp_0[32] -13[32])} value={defs={0x08048369}, expr=8[8]}
  addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] esp_0[32] -14[32])} value={defs={0x08048369}, expr=4[8]}
  addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] esp_0[32] -15[32])} value={defs={0x08048369}, expr=-125[8]}
  addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] esp_0[32] -16[32])} value={defs={0x08048369}, expr=110[8]}
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] frame_pointer[32] -12[32])}
  ebp    = {defs={0x08048364}, expr=frame_pointer[32]}
  eip    = {defs={0x08048369}, expr=0x0804836e[32]}
memory:
  addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] frame_pointer[32] -9[32])} value={defs={0x08048369}, expr=8[8]}
  addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] frame_pointer[32] -10[32])} value={defs={0x08048369}, expr=4[8]}
  addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] frame_pointer[32] -11[32])} value={defs={0x08048369}, expr=-125[8]}
  addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] frame_pointer[32] -12[32])} value={defs={0x08048369}, expr=110[8]}
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] frame_pointer[32] -5[32])} value=(extract[8] 24[32] 32[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] frame_pointer[32] -6[32])} value=(extract[8] 16[32] 24[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] frame_pointer[32] -7[32])} value=(extract[8] 8[32] 16[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] frame_pointer[32] -8[32])} value=(extract[8] 0[32] 8[32] ecx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] frame_pointer[32] -1[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] frame_pointer[32] -2[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] frame_pointer[32] -3[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048364,0x08048367}, expr=(add[32] frame_pointer[32] -4[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048364}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048364}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048364}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x08048369[4]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x804836e:pop    ebx
Symbolic@0x22ecb30 insn@0x0804836e[0]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x0804836e[0]: number_(32, 1) = {defs={0x0804836e}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x0804836e[0]: number_(32, 134513518) = {defs={0x0804836e}, expr=0x0804836e[32]}
Symbolic@0x22ecb30 insn@0x0804836e[0]: add({defs={0x0804836e}, expr=0x0804836e[32]}, {defs={0x0804836e}, expr=1[32]}) = {defs={0x0804836e}, expr=0x0804836f[32]}
Symbolic@0x22ecb30 insn@0x0804836e[0]: writeRegister(eip, {defs={0x0804836e}, expr=0x0804836f[32]})
Symbolic@0x22ecb30 insn@0x0804836e[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x0804836e[0]: number_(32, 4) = {defs={0x0804836e}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x0804836e[0]: add(esp_0[32], {defs={0x0804836e}, expr=4[32]}) = {defs={0x0804836e}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x0804836e[0]: writeRegister(esp, {defs={0x0804836e}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x0804836e[0]: boolean_(1) = {defs={0x0804836e}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804836e[0]: readMemory(ss, esp_0[32], {defs={0x0804836e}, expr=1[1]}, 32) = v15499[32]
Symbolic@0x22ecb30 insn@0x0804836e[0]: writeRegister(ebx, v15499[32])
Symbolic@0x22ecb30 insn@0x0804836e[0]: finishInstruction(pop    ebx)
registers:
  ebx    = v15499[32]
  esp    = {defs={0x0804836e}, expr=(add[32] esp_0[32] 4[32])}
  eip    = {defs={0x0804836e}, expr=0x0804836f[32]}
memory:
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15499[32])
  addr={defs={0x0804836e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15499[32])

0x804836f:add    ebx, 0x0000135a
Symbolic@0x22ecb30 insn@0x0804836f[1]: startInstruction(add    ebx, 0x0000135a)
Symbolic@0x22ecb30 insn@0x0804836f[1]: number_(32, 6) = {defs={0x0804836f}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x0804836f[1]: number_(32, 134513519) = {defs={0x0804836f}, expr=0x0804836f[32]}
Symbolic@0x22ecb30 insn@0x0804836f[1]: add({defs={0x0804836f}, expr=0x0804836f[32]}, {defs={0x0804836f}, expr=6[32]}) = {defs={0x0804836f}, expr=0x08048375[32]}
Symbolic@0x22ecb30 insn@0x0804836f[1]: writeRegister(eip, {defs={0x0804836f}, expr=0x08048375[32]})
Symbolic@0x22ecb30 insn@0x0804836f[1]: boolean_(0) = {defs={0x0804836f}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x0804836f[1]: number_(32, 4954) = {defs={0x0804836f}, expr=4954[32]}
Symbolic@0x22ecb30 insn@0x0804836f[1]: readRegister(ebx) = v15499[32]
Symbolic@0x22ecb30 insn@0x0804836f[1]: addWithCarries(v15499[32], {defs={0x0804836f}, expr=4954[32]}, {defs={0x0804836f}, expr=0[1]}) = {defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}
Symbolic@0x22ecb30 insn@0x0804836f[1]: also returns: {defs={0x0804836f}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}, 0, 8) = {defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}, 1, 2) = {defs={0x0804836f}, expr=(extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}, 0, 1) = {defs={0x0804836f}, expr=(extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: xor_({defs={0x0804836f}, expr=(extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32]))}, {defs={0x0804836f}, expr=(extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32]))}) = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}, 3, 4) = {defs={0x0804836f}, expr=(extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}, 2, 3) = {defs={0x0804836f}, expr=(extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: xor_({defs={0x0804836f}, expr=(extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32]))}, {defs={0x0804836f}, expr=(extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32]))}) = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}, 5, 6) = {defs={0x0804836f}, expr=(extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}, 4, 5) = {defs={0x0804836f}, expr=(extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: xor_({defs={0x0804836f}, expr=(extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32]))}, {defs={0x0804836f}, expr=(extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32]))}) = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}, 7, 8) = {defs={0x0804836f}, expr=(extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[8] 0[32] 8[32] (add[32] v15499[32] 4954[32]))}, 6, 7) = {defs={0x0804836f}, expr=(extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: xor_({defs={0x0804836f}, expr=(extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32]))}, {defs={0x0804836f}, expr=(extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32]))}) = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32])))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: xor_({defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])))}, {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])))}) = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])) (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: xor_({defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])))}, {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32])))}) = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])) (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32])))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: xor_({defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])) (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])))}, {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])) (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32])))}) = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])) (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])) (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])) (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32])))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: invert({defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])) (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])) (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])) (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32])))}) = {defs={0x0804836f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])) (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])) (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])) (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32]))))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: writeRegister(pf, {defs={0x0804836f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])) (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])) (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])) (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32]))))})
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}, 31, 32) = {defs={0x0804836f}, expr=(extract[1] 31[32] 32[32] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: writeRegister(sf, {defs={0x0804836f}, expr=(extract[1] 31[32] 32[32] (add[32] v15499[32] 4954[32]))})
Symbolic@0x22ecb30 insn@0x0804836f[1]: equalToZero({defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}) = {defs={0x0804836f}, expr=(zerop[1] (add[32] v15499[32] 4954[32]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: writeRegister(zf, {defs={0x0804836f}, expr=(zerop[1] (add[32] v15499[32] 4954[32]))})
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}, 31, 32) = {defs={0x0804836f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}, 30, 31) = {defs={0x0804836f}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: extract({defs={0x0804836f}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}, 3, 4) = {defs={0x0804836f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: writeRegister(af, {defs={0x0804836f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))})
Symbolic@0x22ecb30 insn@0x0804836f[1]: writeRegister(cf, {defs={0x0804836f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))})
Symbolic@0x22ecb30 insn@0x0804836f[1]: xor_({defs={0x0804836f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}, {defs={0x0804836f}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}) = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33])))}
Symbolic@0x22ecb30 insn@0x0804836f[1]: writeRegister(of, {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33])))})
Symbolic@0x22ecb30 insn@0x0804836f[1]: writeRegister(ebx, {defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])})
Symbolic@0x22ecb30 insn@0x0804836f[1]: finishInstruction(add    ebx, 0x0000135a)
registers:
  ebx       = {defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}
  esp       = {defs={0x0804836e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x0804836f}, expr=0x08048375[32]}
  pf        = {defs={0x0804836f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])) (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])) (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])) (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32]))))}
  sf        = {defs={0x0804836f}, expr=(extract[1] 31[32] 32[32] (add[32] v15499[32] 4954[32]))}
  zf        = {defs={0x0804836f}, expr=(zerop[1] (add[32] v15499[32] 4954[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804836f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804836f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33])))}
memory:
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15499[32])
  addr={defs={0x0804836e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15499[32])

0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
Symbolic@0x22ecb30 insn@0x08048375[2]: startInstruction(mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>])
Symbolic@0x22ecb30 insn@0x08048375[2]: number_(32, 6) = {defs={0x08048375}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x08048375[2]: number_(32, 134513525) = {defs={0x08048375}, expr=0x08048375[32]}
Symbolic@0x22ecb30 insn@0x08048375[2]: add({defs={0x08048375}, expr=0x08048375[32]}, {defs={0x08048375}, expr=6[32]}) = {defs={0x08048375}, expr=0x0804837b[32]}
Symbolic@0x22ecb30 insn@0x08048375[2]: writeRegister(eip, {defs={0x08048375}, expr=0x0804837b[32]})
Symbolic@0x22ecb30 insn@0x08048375[2]: readRegister(ebx) = {defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}
Symbolic@0x22ecb30 insn@0x08048375[2]: number_(32, 18446744073709551612) = {defs={0x08048375}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048375[2]: add({defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}, {defs={0x08048375}, expr=-4[32]}) = {defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4950[32])}
Symbolic@0x22ecb30 insn@0x08048375[2]: boolean_(1) = {defs={0x08048375}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048375[2]: readMemory(ds, {defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4950[32])}, {defs={0x08048375}, expr=1[1]}, 32) = v15504[32]
Symbolic@0x22ecb30 insn@0x08048375[2]: writeRegister(edx, v15504[32])
Symbolic@0x22ecb30 insn@0x08048375[2]: finishInstruction(mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>])
registers:
  edx       = v15504[32]
  ebx       = {defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}
  esp       = {defs={0x0804836e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x08048375}, expr=0x0804837b[32]}
  pf        = {defs={0x0804836f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v15499[32] 4954[32])) (extract[1] 1[32] 2[32] (add[32] v15499[32] 4954[32])) (extract[1] 2[32] 3[32] (add[32] v15499[32] 4954[32])) (extract[1] 3[32] 4[32] (add[32] v15499[32] 4954[32])) (extract[1] 4[32] 5[32] (add[32] v15499[32] 4954[32])) (extract[1] 5[32] 6[32] (add[32] v15499[32] 4954[32])) (extract[1] 6[32] 7[32] (add[32] v15499[32] 4954[32])) (extract[1] 7[32] 8[32] (add[32] v15499[32] 4954[32]))))}
  sf        = {defs={0x0804836f}, expr=(extract[1] 31[32] 32[32] (add[32] v15499[32] 4954[32]))}
  zf        = {defs={0x0804836f}, expr=(zerop[1] (add[32] v15499[32] 4954[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804836f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804836f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804836f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v15499[32]) (add[33] (uextend[33] 33[32] v15499[32]) 4954[33]) 4954[33])))}
memory:
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4953[32])} value=(extract[8] 24[32] 32[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4952[32])} value=(extract[8] 16[32] 24[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4951[32])} value=(extract[8] 8[32] 16[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4950[32])} value=(extract[8] 0[32] 8[32] v15504[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15499[32])
  addr={defs={0x0804836e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15499[32])

0x804837b:test   edx, edx
Symbolic@0x22ecb30 insn@0x0804837b[3]: startInstruction(test   edx, edx)
Symbolic@0x22ecb30 insn@0x0804837b[3]: number_(32, 2) = {defs={0x0804837b}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x0804837b[3]: number_(32, 134513531) = {defs={0x0804837b}, expr=0x0804837b[32]}
Symbolic@0x22ecb30 insn@0x0804837b[3]: add({defs={0x0804837b}, expr=0x0804837b[32]}, {defs={0x0804837b}, expr=2[32]}) = {defs={0x0804837b}, expr=0x0804837d[32]}
Symbolic@0x22ecb30 insn@0x0804837b[3]: writeRegister(eip, {defs={0x0804837b}, expr=0x0804837d[32]})
Symbolic@0x22ecb30 insn@0x0804837b[3]: readRegister(edx) = v15504[32]
Symbolic@0x22ecb30 insn@0x0804837b[3]: readRegister(edx) = v15504[32]
Symbolic@0x22ecb30 insn@0x0804837b[3]: and_(v15504[32], v15504[32]) = {defs={0x0804837b}, expr=(bv-and[32] v15504[32] v15504[32])}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(bv-and[32] v15504[32] v15504[32])}, 0, 8) = {defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}, 1, 2) = {defs={0x0804837b}, expr=(extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}, 0, 1) = {defs={0x0804837b}, expr=(extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: xor_({defs={0x0804837b}, expr=(extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32]))}, {defs={0x0804837b}, expr=(extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32]))}) = {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}, 3, 4) = {defs={0x0804837b}, expr=(extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}, 2, 3) = {defs={0x0804837b}, expr=(extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: xor_({defs={0x0804837b}, expr=(extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32]))}, {defs={0x0804837b}, expr=(extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32]))}) = {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}, 5, 6) = {defs={0x0804837b}, expr=(extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}, 4, 5) = {defs={0x0804837b}, expr=(extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: xor_({defs={0x0804837b}, expr=(extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32]))}, {defs={0x0804837b}, expr=(extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32]))}) = {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}, 7, 8) = {defs={0x0804837b}, expr=(extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}, 6, 7) = {defs={0x0804837b}, expr=(extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: xor_({defs={0x0804837b}, expr=(extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32]))}, {defs={0x0804837b}, expr=(extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32]))}) = {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32])))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: xor_({defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])))}, {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])))}) = {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: xor_({defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])))}, {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32])))}) = {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32])))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: xor_({defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])))}, {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32])))}) = {defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32])))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: invert({defs={0x0804837b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32])))}) = {defs={0x0804837b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32]))))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: writeRegister(pf, {defs={0x0804837b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32]))))})
Symbolic@0x22ecb30 insn@0x0804837b[3]: extract({defs={0x0804837b}, expr=(bv-and[32] v15504[32] v15504[32])}, 31, 32) = {defs={0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: writeRegister(sf, {defs={0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15504[32] v15504[32]))})
Symbolic@0x22ecb30 insn@0x0804837b[3]: equalToZero({defs={0x0804837b}, expr=(bv-and[32] v15504[32] v15504[32])}) = {defs={0x0804837b}, expr=(zerop[1] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837b[3]: writeRegister(zf, {defs={0x0804837b}, expr=(zerop[1] (bv-and[32] v15504[32] v15504[32]))})
Symbolic@0x22ecb30 insn@0x0804837b[3]: boolean_(0) = {defs={0x0804837b}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x0804837b[3]: writeRegister(of, {defs={0x0804837b}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x0804837b[3]: undefined_(1) = v15509[1]
Symbolic@0x22ecb30 insn@0x0804837b[3]: writeRegister(af, v15509[1])
Symbolic@0x22ecb30 insn@0x0804837b[3]: boolean_(0) = {defs={0x0804837b}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x0804837b[3]: writeRegister(cf, {defs={0x0804837b}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x0804837b[3]: finishInstruction(test   edx, edx)
registers:
  edx       = v15504[32]
  ebx       = {defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}
  esp       = {defs={0x0804836e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x0804837b}, expr=0x0804837d[32]}
  pf        = {defs={0x0804837b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32]))))}
  sf        = {defs={0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15504[32] v15504[32]))}
  zf        = {defs={0x0804837b}, expr=(zerop[1] (bv-and[32] v15504[32] v15504[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15509[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804837b}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804837b}, expr=0[1]}
memory:
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4953[32])} value=(extract[8] 24[32] 32[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4952[32])} value=(extract[8] 16[32] 24[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4951[32])} value=(extract[8] 8[32] 16[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4950[32])} value=(extract[8] 0[32] 8[32] v15504[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15499[32])
  addr={defs={0x0804836e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15499[32])

0x804837d:je     0x08048384<<Insn>>
Symbolic@0x22ecb30 insn@0x0804837d[4]: startInstruction(je     0x08048384<<Insn>>)
Symbolic@0x22ecb30 insn@0x0804837d[4]: number_(32, 2) = {defs={0x0804837d}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x0804837d[4]: number_(32, 134513533) = {defs={0x0804837d}, expr=0x0804837d[32]}
Symbolic@0x22ecb30 insn@0x0804837d[4]: add({defs={0x0804837d}, expr=0x0804837d[32]}, {defs={0x0804837d}, expr=2[32]}) = {defs={0x0804837d}, expr=0x0804837f[32]}
Symbolic@0x22ecb30 insn@0x0804837d[4]: writeRegister(eip, {defs={0x0804837d}, expr=0x0804837f[32]})
Symbolic@0x22ecb30 insn@0x0804837d[4]: readRegister(zf) = {defs={0x0804837b}, expr=(zerop[1] (bv-and[32] v15504[32] v15504[32]))}
Symbolic@0x22ecb30 insn@0x0804837d[4]: readRegister(eip) = {defs={0x0804837d}, expr=0x0804837f[32]}
Symbolic@0x22ecb30 insn@0x0804837d[4]: number_(32, 134513540) = {defs={0x0804837d}, expr=0x08048384[32]}
Symbolic@0x22ecb30 insn@0x0804837d[4]: ite({defs={0x0804837b}, expr=(zerop[1] (bv-and[32] v15504[32] v15504[32]))}, {defs={0x0804837d}, expr=0x08048384[32]}, {defs={0x0804837d}, expr=0x0804837f[32]}) = {defs={0x0804837b,0x0804837d}, expr=(ite[32] (zerop[1] (bv-and[32] v15504[32] v15504[32])) 0x08048384[32] 0x0804837f[32])}
Symbolic@0x22ecb30 insn@0x0804837d[4]: writeRegister(eip, {defs={0x0804837b,0x0804837d}, expr=(ite[32] (zerop[1] (bv-and[32] v15504[32] v15504[32])) 0x08048384[32] 0x0804837f[32])})
Symbolic@0x22ecb30 insn@0x0804837d[4]: finishInstruction(je     0x08048384<<Insn>>)
registers:
  edx       = v15504[32]
  ebx       = {defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}
  esp       = {defs={0x0804836e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x0804837b,0x0804837d}, expr=(ite[32] (zerop[1] (bv-and[32] v15504[32] v15504[32])) 0x08048384[32] 0x0804837f[32])}
  pf        = {defs={0x0804837b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32]))))}
  sf        = {defs={0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15504[32] v15504[32]))}
  zf        = {defs={0x0804837b}, expr=(zerop[1] (bv-and[32] v15504[32] v15504[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15509[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804837b}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804837b}, expr=0[1]}
memory:
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4953[32])} value=(extract[8] 24[32] 32[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4952[32])} value=(extract[8] 16[32] 24[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4951[32])} value=(extract[8] 8[32] 16[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4950[32])} value=(extract[8] 0[32] 8[32] v15504[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15499[32])
  addr={defs={0x0804836e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15499[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  edx       = v15504[32]
  ebx       = {defs={0x0804836f}, expr=(add[32] v15499[32] 4954[32])}
  esp       = {defs={0x0804836e}, expr=(add[32] frame_pointer[32] 8[32])}
  eip       = {defs={0x0804837b,0x0804837d}, expr=(ite[32] (zerop[1] (bv-and[32] v15504[32] v15504[32])) 0x08048384[32] 0x0804837f[32])}
  pf        = {defs={0x0804837b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15504[32] v15504[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15504[32] v15504[32]))))}
  sf        = {defs={0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15504[32] v15504[32]))}
  zf        = {defs={0x0804837b}, expr=(zerop[1] (bv-and[32] v15504[32] v15504[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15509[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804837b}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804837b}, expr=0[1]}
memory:
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4953[32])} value=(extract[8] 24[32] 32[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4952[32])} value=(extract[8] 16[32] 24[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4951[32])} value=(extract[8] 8[32] 16[32] v15504[32])
  addr={defs={0x0804836f,0x08048375}, expr=(add[32] v15499[32] 4950[32])} value=(extract[8] 0[32] 8[32] v15504[32])
  addr={defs={0x0804836e}, expr=(add[32] frame_pointer[32] 7[32])} value=(extract[8] 24[32] 32[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] frame_pointer[32] 6[32])} value=(extract[8] 16[32] 24[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] frame_pointer[32] 5[32])} value=(extract[8] 8[32] 16[32] v15499[32])
  addr={defs={0x0804836e}, expr=(add[32] frame_pointer[32] 4[32])} value=(extract[8] 0[32] 8[32] v15499[32])
Symbolic@0x22ecb30 insn@0x0804837d[4]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x804837f:call   0x08048330<__gmon_start__@plt>
Symbolic@0x22ecb30 insn@0x0804837f[0]: startInstruction(call   0x08048330<__gmon_start__@plt>)
Symbolic@0x22ecb30 insn@0x0804837f[0]: number_(32, 5) = {defs={0x0804837f}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: number_(32, 134513535) = {defs={0x0804837f}, expr=0x0804837f[32]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: add({defs={0x0804837f}, expr=0x0804837f[32]}, {defs={0x0804837f}, expr=5[32]}) = {defs={0x0804837f}, expr=0x08048384[32]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: writeRegister(eip, {defs={0x0804837f}, expr=0x08048384[32]})
Symbolic@0x22ecb30 insn@0x0804837f[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x0804837f[0]: number_(32, 18446744073709551612) = {defs={0x0804837f}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: add(esp_0[32], {defs={0x0804837f}, expr=-4[32]}) = {defs={0x0804837f}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x0804837f[0]: boolean_(1) = {defs={0x0804837f}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: readRegister(eip) = {defs={0x0804837f}, expr=0x08048384[32]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: writeMemory(ss, {defs={0x0804837f}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x0804837f}, expr=0x08048384[32]}, {defs={0x0804837f}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804837f[0]: number_(32, 134513456) = {defs={0x0804837f}, expr=0x08048330[32]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: filterCallTarget({defs={0x0804837f}, expr=0x08048330[32]}) = {defs={0x0804837f}, expr=0x08048330[32]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: writeRegister(eip, {defs={0x0804837f}, expr=0x08048330[32]})
Symbolic@0x22ecb30 insn@0x0804837f[0]: writeRegister(esp, {defs={0x0804837f}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x0804837f[0]: finishInstruction(call   0x08048330<__gmon_start__@plt>)
registers:
  esp    = {defs={0x0804837f}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x0804837f}, expr=0x08048330[32]}
memory:
  addr={defs={0x0804837f}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x0804837f}, expr=8[8]}
  addr={defs={0x0804837f}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x0804837f}, expr=4[8]}
  addr={defs={0x0804837f}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x0804837f}, expr=-125[8]}
  addr={defs={0x0804837f}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x0804837f}, expr=-124[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x0804837f}, expr=frame_pointer[32]}
  eip    = {defs={0x0804837f}, expr=0x08048330[32]}
memory:
  addr={defs={0x0804837f}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x0804837f}, expr=8[8]}
  addr={defs={0x0804837f}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x0804837f}, expr=4[8]}
  addr={defs={0x0804837f}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x0804837f}, expr=-125[8]}
  addr={defs={0x0804837f}, expr=frame_pointer[32]} value={defs={0x0804837f}, expr=-124[8]}
Symbolic@0x22ecb30 insn@0x0804837f[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048384:pop    eax
Symbolic@0x22ecb30 insn@0x08048384[0]: startInstruction(pop    eax)
Symbolic@0x22ecb30 insn@0x08048384[0]: number_(32, 1) = {defs={0x08048384}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048384[0]: number_(32, 134513540) = {defs={0x08048384}, expr=0x08048384[32]}
Symbolic@0x22ecb30 insn@0x08048384[0]: add({defs={0x08048384}, expr=0x08048384[32]}, {defs={0x08048384}, expr=1[32]}) = {defs={0x08048384}, expr=0x08048385[32]}
Symbolic@0x22ecb30 insn@0x08048384[0]: writeRegister(eip, {defs={0x08048384}, expr=0x08048385[32]})
Symbolic@0x22ecb30 insn@0x08048384[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048384[0]: number_(32, 4) = {defs={0x08048384}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048384[0]: add(esp_0[32], {defs={0x08048384}, expr=4[32]}) = {defs={0x08048384}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048384[0]: writeRegister(esp, {defs={0x08048384}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x08048384[0]: boolean_(1) = {defs={0x08048384}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048384[0]: readMemory(ss, esp_0[32], {defs={0x08048384}, expr=1[1]}, 32) = v15652[32]
Symbolic@0x22ecb30 insn@0x08048384[0]: writeRegister(eax, v15652[32])
Symbolic@0x22ecb30 insn@0x08048384[0]: finishInstruction(pop    eax)
registers:
  eax    = v15652[32]
  esp    = {defs={0x08048384}, expr=(add[32] esp_0[32] 4[32])}
  eip    = {defs={0x08048384}, expr=0x08048385[32]}
memory:
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15652[32])
  addr={defs={0x08048384}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15652[32])

0x8048385:pop    ebx
Symbolic@0x22ecb30 insn@0x08048385[1]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x08048385[1]: number_(32, 1) = {defs={0x08048385}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048385[1]: number_(32, 134513541) = {defs={0x08048385}, expr=0x08048385[32]}
Symbolic@0x22ecb30 insn@0x08048385[1]: add({defs={0x08048385}, expr=0x08048385[32]}, {defs={0x08048385}, expr=1[32]}) = {defs={0x08048385}, expr=0x08048386[32]}
Symbolic@0x22ecb30 insn@0x08048385[1]: writeRegister(eip, {defs={0x08048385}, expr=0x08048386[32]})
Symbolic@0x22ecb30 insn@0x08048385[1]: readRegister(esp) = {defs={0x08048384}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048385[1]: number_(32, 4) = {defs={0x08048385}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048385[1]: add({defs={0x08048384}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x08048385}, expr=4[32]}) = {defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x08048385[1]: writeRegister(esp, {defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x08048385[1]: boolean_(1) = {defs={0x08048385}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048385[1]: readMemory(ss, {defs={0x08048384}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x08048385}, expr=1[1]}, 32) = v15657[32]
Symbolic@0x22ecb30 insn@0x08048385[1]: writeRegister(ebx, v15657[32])
Symbolic@0x22ecb30 insn@0x08048385[1]: finishInstruction(pop    ebx)
registers:
  eax    = v15652[32]
  ebx    = v15657[32]
  esp    = {defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 8[32])}
  eip    = {defs={0x08048385}, expr=0x08048386[32]}
memory:
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v15657[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15652[32])
  addr={defs={0x08048384}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15652[32])

0x8048386:leave  
Symbolic@0x22ecb30 insn@0x08048386[2]: startInstruction(leave)
Symbolic@0x22ecb30 insn@0x08048386[2]: number_(32, 1) = {defs={0x08048386}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048386[2]: number_(32, 134513542) = {defs={0x08048386}, expr=0x08048386[32]}
Symbolic@0x22ecb30 insn@0x08048386[2]: add({defs={0x08048386}, expr=0x08048386[32]}, {defs={0x08048386}, expr=1[32]}) = {defs={0x08048386}, expr=0x08048387[32]}
Symbolic@0x22ecb30 insn@0x08048386[2]: writeRegister(eip, {defs={0x08048386}, expr=0x08048387[32]})
Symbolic@0x22ecb30 insn@0x08048386[2]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048386[2]: writeRegister(esp, ebp_0[32])
Symbolic@0x22ecb30 insn@0x08048386[2]: readRegister(esp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048386[2]: number_(32, 4) = {defs={0x08048386}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048386[2]: add(ebp_0[32], {defs={0x08048386}, expr=4[32]}) = {defs={0x08048386}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048386[2]: boolean_(1) = {defs={0x08048386}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048386[2]: readMemory(ss, ebp_0[32], {defs={0x08048386}, expr=1[1]}, 32) = v15662[32]
Symbolic@0x22ecb30 insn@0x08048386[2]: writeRegister(ebp, v15662[32])
Symbolic@0x22ecb30 insn@0x08048386[2]: writeRegister(esp, {defs={0x08048386}, expr=(add[32] ebp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x08048386[2]: finishInstruction(leave)
registers:
  eax    = v15652[32]
  ebx    = v15657[32]
  esp    = {defs={0x08048386}, expr=(add[32] ebp_0[32] 4[32])}
  ebp    = v15662[32]
  eip    = {defs={0x08048386}, expr=0x08048387[32]}
memory:
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15662[32])
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15662[32])
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15662[32])
  addr={defs={0x08048386}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v15662[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v15657[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15652[32])
  addr={defs={0x08048384}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15652[32])

0x8048387:ret    
Symbolic@0x22ecb30 insn@0x08048387[3]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x08048387[3]: number_(32, 1) = {defs={0x08048387}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048387[3]: number_(32, 134513543) = {defs={0x08048387}, expr=0x08048387[32]}
Symbolic@0x22ecb30 insn@0x08048387[3]: add({defs={0x08048387}, expr=0x08048387[32]}, {defs={0x08048387}, expr=1[32]}) = {defs={0x08048387}, expr=0x08048388[32]}
Symbolic@0x22ecb30 insn@0x08048387[3]: writeRegister(eip, {defs={0x08048387}, expr=0x08048388[32]})
Symbolic@0x22ecb30 insn@0x08048387[3]: number_(32, 0) = {defs={0x08048387}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048387[3]: readRegister(esp) = {defs={0x08048386}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048387[3]: number_(32, 4) = {defs={0x08048387}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048387[3]: add({defs={0x08048387}, expr=4[32]}, {defs={0x08048387}, expr=0[32]}) = {defs={0x08048387}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048387[3]: add({defs={0x08048386}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x08048387}, expr=4[32]}) = {defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x08048387[3]: boolean_(1) = {defs={0x08048387}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048387[3]: readMemory(ss, {defs={0x08048386}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x08048387}, expr=1[1]}, 32) = v15667[32]
Symbolic@0x22ecb30 insn@0x08048387[3]: filterReturnTarget(v15667[32]) = v15667[32]
Symbolic@0x22ecb30 insn@0x08048387[3]: writeRegister(eip, v15667[32])
Symbolic@0x22ecb30 insn@0x08048387[3]: writeRegister(esp, {defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x08048387[3]: finishInstruction(ret)
registers:
  eax    = v15652[32]
  ebx    = v15657[32]
  esp    = {defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v15662[32]
  eip    = v15667[32]
memory:
  addr={defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v15667[32])
  addr={defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v15667[32])
  addr={defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v15667[32])
  addr={defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v15667[32])
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15662[32])
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15662[32])
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15662[32])
  addr={defs={0x08048386}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v15662[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v15657[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15652[32])
  addr={defs={0x08048384}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v15652[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax    = v15652[32]
  ebx    = v15657[32]
  esp    = {defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v15662[32]
  eip    = v15667[32]
memory:
  addr={defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v15667[32])
  addr={defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v15667[32])
  addr={defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v15667[32])
  addr={defs={0x08048386,0x08048387}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v15667[32])
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v15662[32])
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v15662[32])
  addr={defs={0x08048386}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v15662[32])
  addr={defs={0x08048386}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v15662[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] frame_pointer[32] 11[32])} value=(extract[8] 24[32] 32[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] frame_pointer[32] 10[32])} value=(extract[8] 16[32] 24[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] frame_pointer[32] 9[32])} value=(extract[8] 8[32] 16[32] v15657[32])
  addr={defs={0x08048384,0x08048385}, expr=(add[32] frame_pointer[32] 8[32])} value=(extract[8] 0[32] 8[32] v15657[32])
  addr={defs={0x08048384}, expr=(add[32] frame_pointer[32] 7[32])} value=(extract[8] 24[32] 32[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] frame_pointer[32] 6[32])} value=(extract[8] 16[32] 24[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] frame_pointer[32] 5[32])} value=(extract[8] 8[32] 16[32] v15652[32])
  addr={defs={0x08048384}, expr=(add[32] frame_pointer[32] 4[32])} value=(extract[8] 0[32] 8[32] v15652[32])
Symbolic@0x22ecb30 insn@0x08048387[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048390:push   ebp
Symbolic@0x22ecb30 insn@0x08048390[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x08048390[0]: number_(32, 1) = {defs={0x08048390}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048390[0]: number_(32, 134513552) = {defs={0x08048390}, expr=0x08048390[32]}
Symbolic@0x22ecb30 insn@0x08048390[0]: add({defs={0x08048390}, expr=0x08048390[32]}, {defs={0x08048390}, expr=1[32]}) = {defs={0x08048390}, expr=0x08048391[32]}
Symbolic@0x22ecb30 insn@0x08048390[0]: writeRegister(eip, {defs={0x08048390}, expr=0x08048391[32]})
Symbolic@0x22ecb30 insn@0x08048390[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048390[0]: number_(32, 18446744073709551612) = {defs={0x08048390}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048390[0]: add(esp_0[32], {defs={0x08048390}, expr=-4[32]}) = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048390[0]: boolean_(1) = {defs={0x08048390}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048390[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048390[0]: writeMemory(ss, {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x08048390}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048390[0]: writeRegister(esp, {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048390[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048390}, expr=0x08048391[32]}
memory:
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048391:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x08048391[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x08048391[1]: number_(32, 2) = {defs={0x08048391}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048391[1]: number_(32, 134513553) = {defs={0x08048391}, expr=0x08048391[32]}
Symbolic@0x22ecb30 insn@0x08048391[1]: add({defs={0x08048391}, expr=0x08048391[32]}, {defs={0x08048391}, expr=2[32]}) = {defs={0x08048391}, expr=0x08048393[32]}
Symbolic@0x22ecb30 insn@0x08048391[1]: writeRegister(eip, {defs={0x08048391}, expr=0x08048393[32]})
Symbolic@0x22ecb30 insn@0x08048391[1]: readRegister(esp) = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048391[1]: writeRegister(ebp, {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048391[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048391}, expr=0x08048393[32]}
memory:
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048393:sub    esp, 0x08
Symbolic@0x22ecb30 insn@0x08048393[2]: startInstruction(sub    esp, 0x08)
Symbolic@0x22ecb30 insn@0x08048393[2]: number_(32, 3) = {defs={0x08048393}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048393[2]: number_(32, 134513555) = {defs={0x08048393}, expr=0x08048393[32]}
Symbolic@0x22ecb30 insn@0x08048393[2]: add({defs={0x08048393}, expr=0x08048393[32]}, {defs={0x08048393}, expr=3[32]}) = {defs={0x08048393}, expr=0x08048396[32]}
Symbolic@0x22ecb30 insn@0x08048393[2]: writeRegister(eip, {defs={0x08048393}, expr=0x08048396[32]})
Symbolic@0x22ecb30 insn@0x08048393[2]: boolean_(0) = {defs={0x08048393}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048393[2]: number_(32, 8) = {defs={0x08048393}, expr=8[32]}
Symbolic@0x22ecb30 insn@0x08048393[2]: invert({defs={0x08048393}, expr=8[32]}) = {defs={0x08048393}, expr=-9[32]}
Symbolic@0x22ecb30 insn@0x08048393[2]: readRegister(esp) = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048393[2]: invert({defs={0x08048393}, expr=0[1]}) = {defs={0x08048393}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048393[2]: addWithCarries({defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048393}, expr=-9[32]}, {defs={0x08048393}, expr=1[1]}) = {defs={0x08048390,0x08048393}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048393[2]: also returns: {defs={0x08048390,0x08048393}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(add[32] esp_0[32] -12[32])}, 0, 8) = {defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 1, 2) = {defs={0x08048390,0x08048393}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 0, 1) = {defs={0x08048390,0x08048393}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: xor_({defs={0x08048390,0x08048393}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048390,0x08048393}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 3, 4) = {defs={0x08048390,0x08048393}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 2, 3) = {defs={0x08048390,0x08048393}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: xor_({defs={0x08048390,0x08048393}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048390,0x08048393}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 5, 6) = {defs={0x08048390,0x08048393}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 4, 5) = {defs={0x08048390,0x08048393}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: xor_({defs={0x08048390,0x08048393}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048390,0x08048393}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 7, 8) = {defs={0x08048390,0x08048393}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 6, 7) = {defs={0x08048390,0x08048393}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: xor_({defs={0x08048390,0x08048393}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048390,0x08048393}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: xor_({defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: xor_({defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: xor_({defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: invert({defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048390,0x08048393}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
Symbolic@0x22ecb30 insn@0x08048393[2]: writeRegister(pf, {defs={0x08048390,0x08048393}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))})
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(add[32] esp_0[32] -12[32])}, 31, 32) = {defs={0x08048390,0x08048393}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: writeRegister(sf, {defs={0x08048390,0x08048393}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048393[2]: equalToZero({defs={0x08048390,0x08048393}, expr=(add[32] esp_0[32] -12[32])}) = {defs={0x08048390,0x08048393}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: writeRegister(zf, {defs={0x08048390,0x08048393}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 31, 32) = {defs={0x08048390,0x08048393}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 30, 31) = {defs={0x08048390,0x08048393}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: extract({defs={0x08048390,0x08048393}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 3, 4) = {defs={0x08048390,0x08048393}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048393[2]: invert({defs={0x08048390,0x08048393}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: writeRegister(af, {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048393[2]: invert({defs={0x08048390,0x08048393}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: writeRegister(cf, {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048393[2]: xor_({defs={0x08048390,0x08048393}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, {defs={0x08048390,0x08048393}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048393[2]: writeRegister(of, {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048393[2]: writeRegister(esp, {defs={0x08048390,0x08048393}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x08048393[2]: finishInstruction(sub    esp, 0x08)
registers:
  esp       = {defs={0x08048390,0x08048393}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048393}, expr=0x08048396[32]}
  pf        = {defs={0x08048390,0x08048393}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048390,0x08048393}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048390,0x08048393}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
Symbolic@0x22ecb30 insn@0x08048396[3]: startInstruction(cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00)
Symbolic@0x22ecb30 insn@0x08048396[3]: number_(32, 7) = {defs={0x08048396}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x08048396[3]: number_(32, 134513558) = {defs={0x08048396}, expr=0x08048396[32]}
Symbolic@0x22ecb30 insn@0x08048396[3]: add({defs={0x08048396}, expr=0x08048396[32]}, {defs={0x08048396}, expr=7[32]}) = {defs={0x08048396}, expr=0x0804839d[32]}
Symbolic@0x22ecb30 insn@0x08048396[3]: writeRegister(eip, {defs={0x08048396}, expr=0x0804839d[32]})
Symbolic@0x22ecb30 insn@0x08048396[3]: boolean_(0) = {defs={0x08048396}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048396[3]: number_(8, 0) = {defs={0x08048396}, expr=0[8]}
Symbolic@0x22ecb30 insn@0x08048396[3]: invert({defs={0x08048396}, expr=0[8]}) = {defs={0x08048396}, expr=-1[8]}
Symbolic@0x22ecb30 insn@0x08048396[3]: number_(32, 134518516) = {defs={0x08048396}, expr=0x080496f4[32]}
Symbolic@0x22ecb30 insn@0x08048396[3]: boolean_(1) = {defs={0x08048396}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048396[3]: readMemory(ds, {defs={0x08048396}, expr=0x080496f4[32]}, {defs={0x08048396}, expr=1[1]}, 8) = v15743[8]
Symbolic@0x22ecb30 insn@0x08048396[3]: invert({defs={0x08048396}, expr=0[1]}) = {defs={0x08048396}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048396[3]: addWithCarries(v15743[8], {defs={0x08048396}, expr=-1[8]}, {defs={0x08048396}, expr=1[1]}) = {defs={0x08048396}, expr=v15743[8]}
Symbolic@0x22ecb30 insn@0x08048396[3]: also returns: {defs={0x08048396}, expr=(extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 0, 8) = {defs={0x08048396}, expr=v15743[8]}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 1, 2) = {defs={0x08048396}, expr=(extract[1] 1[32] 2[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 0, 1) = {defs={0x08048396}, expr=(extract[1] 0[32] 1[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: xor_({defs={0x08048396}, expr=(extract[1] 0[32] 1[32] v15743[8])}, {defs={0x08048396}, expr=(extract[1] 1[32] 2[32] v15743[8])}) = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 3, 4) = {defs={0x08048396}, expr=(extract[1] 3[32] 4[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 2, 3) = {defs={0x08048396}, expr=(extract[1] 2[32] 3[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: xor_({defs={0x08048396}, expr=(extract[1] 2[32] 3[32] v15743[8])}, {defs={0x08048396}, expr=(extract[1] 3[32] 4[32] v15743[8])}) = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 5, 6) = {defs={0x08048396}, expr=(extract[1] 5[32] 6[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 4, 5) = {defs={0x08048396}, expr=(extract[1] 4[32] 5[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: xor_({defs={0x08048396}, expr=(extract[1] 4[32] 5[32] v15743[8])}, {defs={0x08048396}, expr=(extract[1] 5[32] 6[32] v15743[8])}) = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 7, 8) = {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 6, 7) = {defs={0x08048396}, expr=(extract[1] 6[32] 7[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: xor_({defs={0x08048396}, expr=(extract[1] 6[32] 7[32] v15743[8])}, {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v15743[8])}) = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: xor_({defs={0x08048396}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]))}, {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]))}) = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: xor_({defs={0x08048396}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]))}, {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8]))}) = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: xor_({defs={0x08048396}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]))}, {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8]))}) = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]) (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: invert({defs={0x08048396}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]) (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8]))}) = {defs={0x08048396}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]) (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8])))}
Symbolic@0x22ecb30 insn@0x08048396[3]: writeRegister(pf, {defs={0x08048396}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]) (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8])))})
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=v15743[8]}, 7, 8) = {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: writeRegister(sf, {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v15743[8])})
Symbolic@0x22ecb30 insn@0x08048396[3]: equalToZero({defs={0x08048396}, expr=v15743[8]}) = {defs={0x08048396}, expr=(zerop[1] v15743[8])}
Symbolic@0x22ecb30 insn@0x08048396[3]: writeRegister(zf, {defs={0x08048396}, expr=(zerop[1] v15743[8])})
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=(extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}, 7, 8) = {defs={0x08048396}, expr=(extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=(extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}, 6, 7) = {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: extract({defs={0x08048396}, expr=(extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}, 3, 4) = {defs={0x08048396}, expr=(extract[1] 4[32] 5[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}
Symbolic@0x22ecb30 insn@0x08048396[3]: invert({defs={0x08048396}, expr=(extract[1] 4[32] 5[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}) = {defs={0x08048396}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
Symbolic@0x22ecb30 insn@0x08048396[3]: writeRegister(af, {defs={0x08048396}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))})
Symbolic@0x22ecb30 insn@0x08048396[3]: invert({defs={0x08048396}, expr=(extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}) = {defs={0x08048396}, expr=(invert[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
Symbolic@0x22ecb30 insn@0x08048396[3]: writeRegister(cf, {defs={0x08048396}, expr=(invert[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))})
Symbolic@0x22ecb30 insn@0x08048396[3]: xor_({defs={0x08048396}, expr=(extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}, {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9]))}) = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])) (extract[1] 7[32] 8[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
Symbolic@0x22ecb30 insn@0x08048396[3]: writeRegister(of, {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])) (extract[1] 7[32] 8[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))})
Symbolic@0x22ecb30 insn@0x08048396[3]: finishInstruction(cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00)
registers:
  esp       = {defs={0x08048390,0x08048393}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048396}, expr=0x0804839d[32]}
  pf        = {defs={0x08048396}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]) (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8])))}
  sf        = {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v15743[8])}
  zf        = {defs={0x08048396}, expr=(zerop[1] v15743[8])}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048396}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048396}, expr=(invert[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])) (extract[1] 7[32] 8[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
memory:
  addr={defs={0x08048396}, expr=0x080496f4[32]} value=v15743[8]
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x804839d:jne    0x080483cc<<Insn>>
Symbolic@0x22ecb30 insn@0x0804839d[4]: startInstruction(jne    0x080483cc<<Insn>>)
Symbolic@0x22ecb30 insn@0x0804839d[4]: number_(32, 2) = {defs={0x0804839d}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x0804839d[4]: number_(32, 134513565) = {defs={0x0804839d}, expr=0x0804839d[32]}
Symbolic@0x22ecb30 insn@0x0804839d[4]: add({defs={0x0804839d}, expr=0x0804839d[32]}, {defs={0x0804839d}, expr=2[32]}) = {defs={0x0804839d}, expr=0x0804839f[32]}
Symbolic@0x22ecb30 insn@0x0804839d[4]: writeRegister(eip, {defs={0x0804839d}, expr=0x0804839f[32]})
Symbolic@0x22ecb30 insn@0x0804839d[4]: readRegister(zf) = {defs={0x08048396}, expr=(zerop[1] v15743[8])}
Symbolic@0x22ecb30 insn@0x0804839d[4]: invert({defs={0x08048396}, expr=(zerop[1] v15743[8])}) = {defs={0x08048396,0x0804839d}, expr=(invert[1] (zerop[1] v15743[8]))}
Symbolic@0x22ecb30 insn@0x0804839d[4]: readRegister(eip) = {defs={0x0804839d}, expr=0x0804839f[32]}
Symbolic@0x22ecb30 insn@0x0804839d[4]: number_(32, 134513612) = {defs={0x0804839d}, expr=0x080483cc[32]}
Symbolic@0x22ecb30 insn@0x0804839d[4]: ite({defs={0x08048396,0x0804839d}, expr=(invert[1] (zerop[1] v15743[8]))}, {defs={0x0804839d}, expr=0x080483cc[32]}, {defs={0x0804839d}, expr=0x0804839f[32]}) = {defs={0x08048396,0x0804839d}, expr=(ite[32] (invert[1] (zerop[1] v15743[8])) 0x080483cc[32] 0x0804839f[32])}
Symbolic@0x22ecb30 insn@0x0804839d[4]: writeRegister(eip, {defs={0x08048396,0x0804839d}, expr=(ite[32] (invert[1] (zerop[1] v15743[8])) 0x080483cc[32] 0x0804839f[32])})
Symbolic@0x22ecb30 insn@0x0804839d[4]: finishInstruction(jne    0x080483cc<<Insn>>)
registers:
  esp       = {defs={0x08048390,0x08048393}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048396,0x0804839d}, expr=(ite[32] (invert[1] (zerop[1] v15743[8])) 0x080483cc[32] 0x0804839f[32])}
  pf        = {defs={0x08048396}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]) (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8])))}
  sf        = {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v15743[8])}
  zf        = {defs={0x08048396}, expr=(zerop[1] v15743[8])}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048396}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048396}, expr=(invert[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])) (extract[1] 7[32] 8[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
memory:
  addr={defs={0x08048396}, expr=0x080496f4[32]} value=v15743[8]
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = {defs={0x08048390,0x08048393}, expr=(add[32] frame_pointer[32] -8[32])}
  ebp       = {defs={0x08048390}, expr=frame_pointer[32]}
  eip       = {defs={0x08048396,0x0804839d}, expr=(ite[32] (invert[1] (zerop[1] v15743[8])) 0x080483cc[32] 0x0804839f[32])}
  pf        = {defs={0x08048396}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] v15743[8]) (extract[1] 1[32] 2[32] v15743[8]) (extract[1] 2[32] 3[32] v15743[8]) (extract[1] 3[32] 4[32] v15743[8]) (extract[1] 4[32] 5[32] v15743[8]) (extract[1] 5[32] 6[32] v15743[8]) (extract[1] 6[32] 7[32] v15743[8]) (extract[1] 7[32] 8[32] v15743[8])))}
  sf        = {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v15743[8])}
  zf        = {defs={0x08048396}, expr=(zerop[1] v15743[8])}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048396}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048396}, expr=(invert[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 8[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])) (extract[1] 7[32] 8[32] (bv-xor[9] (uextend[9] 9[32] v15743[8]) (add[9] (uextend[9] 9[32] v15743[8]) -256[9]) 255[9])))}
memory:
  addr={defs={0x08048396}, expr=0x080496f4[32]} value=v15743[8]
  addr={defs={0x08048390}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048390}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048390}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x0804839d[4]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
Symbolic@0x22ecb30 insn@0x0804839f[0]: startInstruction(mov    eax, DWORD PTR ds:[0x080496f0<.data+8>])
Symbolic@0x22ecb30 insn@0x0804839f[0]: number_(32, 5) = {defs={0x0804839f}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804839f[0]: number_(32, 134513567) = {defs={0x0804839f}, expr=0x0804839f[32]}
Symbolic@0x22ecb30 insn@0x0804839f[0]: add({defs={0x0804839f}, expr=0x0804839f[32]}, {defs={0x0804839f}, expr=5[32]}) = {defs={0x0804839f}, expr=0x080483a4[32]}
Symbolic@0x22ecb30 insn@0x0804839f[0]: writeRegister(eip, {defs={0x0804839f}, expr=0x080483a4[32]})
Symbolic@0x22ecb30 insn@0x0804839f[0]: number_(32, 134518512) = {defs={0x0804839f}, expr=0x080496f0[32]}
Symbolic@0x22ecb30 insn@0x0804839f[0]: boolean_(1) = {defs={0x0804839f}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804839f[0]: readMemory(ds, {defs={0x0804839f}, expr=0x080496f0[32]}, {defs={0x0804839f}, expr=1[1]}, 32) = v15816[32]
Symbolic@0x22ecb30 insn@0x0804839f[0]: writeRegister(eax, v15816[32])
Symbolic@0x22ecb30 insn@0x0804839f[0]: finishInstruction(mov    eax, DWORD PTR ds:[0x080496f0<.data+8>])
registers:
  eax    = v15816[32]
  eip    = {defs={0x0804839f}, expr=0x080483a4[32]}
memory:
  addr={defs={0x0804839f}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15816[32])

0x80483a4:mov    edx, DWORD PTR ds:[eax]
Symbolic@0x22ecb30 insn@0x080483a4[1]: startInstruction(mov    edx, DWORD PTR ds:[eax])
Symbolic@0x22ecb30 insn@0x080483a4[1]: number_(32, 2) = {defs={0x080483a4}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483a4[1]: number_(32, 134513572) = {defs={0x080483a4}, expr=0x080483a4[32]}
Symbolic@0x22ecb30 insn@0x080483a4[1]: add({defs={0x080483a4}, expr=0x080483a4[32]}, {defs={0x080483a4}, expr=2[32]}) = {defs={0x080483a4}, expr=0x080483a6[32]}
Symbolic@0x22ecb30 insn@0x080483a4[1]: writeRegister(eip, {defs={0x080483a4}, expr=0x080483a6[32]})
Symbolic@0x22ecb30 insn@0x080483a4[1]: readRegister(eax) = v15816[32]
Symbolic@0x22ecb30 insn@0x080483a4[1]: boolean_(1) = {defs={0x080483a4}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483a4[1]: readMemory(ds, v15816[32], {defs={0x080483a4}, expr=1[1]}, 32) = v15821[32]
Symbolic@0x22ecb30 insn@0x080483a4[1]: writeRegister(edx, v15821[32])
Symbolic@0x22ecb30 insn@0x080483a4[1]: finishInstruction(mov    edx, DWORD PTR ds:[eax])
registers:
  eax    = v15816[32]
  edx    = v15821[32]
  eip    = {defs={0x080483a4}, expr=0x080483a6[32]}
memory:
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 3[32])} value=(extract[8] 24[32] 32[32] v15821[32])
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 2[32])} value=(extract[8] 16[32] 24[32] v15821[32])
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 1[32])} value=(extract[8] 8[32] 16[32] v15821[32])
  addr={defs={0x080483a4}, expr=v15816[32]} value=(extract[8] 0[32] 8[32] v15821[32])
  addr={defs={0x0804839f}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15816[32])

0x80483a6:test   edx, edx
Symbolic@0x22ecb30 insn@0x080483a6[2]: startInstruction(test   edx, edx)
Symbolic@0x22ecb30 insn@0x080483a6[2]: number_(32, 2) = {defs={0x080483a6}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483a6[2]: number_(32, 134513574) = {defs={0x080483a6}, expr=0x080483a6[32]}
Symbolic@0x22ecb30 insn@0x080483a6[2]: add({defs={0x080483a6}, expr=0x080483a6[32]}, {defs={0x080483a6}, expr=2[32]}) = {defs={0x080483a6}, expr=0x080483a8[32]}
Symbolic@0x22ecb30 insn@0x080483a6[2]: writeRegister(eip, {defs={0x080483a6}, expr=0x080483a8[32]})
Symbolic@0x22ecb30 insn@0x080483a6[2]: readRegister(edx) = v15821[32]
Symbolic@0x22ecb30 insn@0x080483a6[2]: readRegister(edx) = v15821[32]
Symbolic@0x22ecb30 insn@0x080483a6[2]: and_(v15821[32], v15821[32]) = {defs={0x080483a6}, expr=(bv-and[32] v15821[32] v15821[32])}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(bv-and[32] v15821[32] v15821[32])}, 0, 8) = {defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}, 1, 2) = {defs={0x080483a6}, expr=(extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}, 0, 1) = {defs={0x080483a6}, expr=(extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: xor_({defs={0x080483a6}, expr=(extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32]))}, {defs={0x080483a6}, expr=(extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32]))}) = {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}, 3, 4) = {defs={0x080483a6}, expr=(extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}, 2, 3) = {defs={0x080483a6}, expr=(extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: xor_({defs={0x080483a6}, expr=(extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32]))}, {defs={0x080483a6}, expr=(extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32]))}) = {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}, 5, 6) = {defs={0x080483a6}, expr=(extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}, 4, 5) = {defs={0x080483a6}, expr=(extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: xor_({defs={0x080483a6}, expr=(extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32]))}, {defs={0x080483a6}, expr=(extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32]))}) = {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}, 7, 8) = {defs={0x080483a6}, expr=(extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}, 6, 7) = {defs={0x080483a6}, expr=(extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: xor_({defs={0x080483a6}, expr=(extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32]))}, {defs={0x080483a6}, expr=(extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32]))}) = {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32])))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: xor_({defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])))}, {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])))}) = {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: xor_({defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])))}, {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32])))}) = {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32])))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: xor_({defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])))}, {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32])))}) = {defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32])))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: invert({defs={0x080483a6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32])))}) = {defs={0x080483a6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32]))))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: writeRegister(pf, {defs={0x080483a6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32]))))})
Symbolic@0x22ecb30 insn@0x080483a6[2]: extract({defs={0x080483a6}, expr=(bv-and[32] v15821[32] v15821[32])}, 31, 32) = {defs={0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: writeRegister(sf, {defs={0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15821[32] v15821[32]))})
Symbolic@0x22ecb30 insn@0x080483a6[2]: equalToZero({defs={0x080483a6}, expr=(bv-and[32] v15821[32] v15821[32])}) = {defs={0x080483a6}, expr=(zerop[1] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a6[2]: writeRegister(zf, {defs={0x080483a6}, expr=(zerop[1] (bv-and[32] v15821[32] v15821[32]))})
Symbolic@0x22ecb30 insn@0x080483a6[2]: boolean_(0) = {defs={0x080483a6}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483a6[2]: writeRegister(of, {defs={0x080483a6}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483a6[2]: undefined_(1) = v15826[1]
Symbolic@0x22ecb30 insn@0x080483a6[2]: writeRegister(af, v15826[1])
Symbolic@0x22ecb30 insn@0x080483a6[2]: boolean_(0) = {defs={0x080483a6}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483a6[2]: writeRegister(cf, {defs={0x080483a6}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483a6[2]: finishInstruction(test   edx, edx)
registers:
  eax       = v15816[32]
  edx       = v15821[32]
  eip       = {defs={0x080483a6}, expr=0x080483a8[32]}
  pf        = {defs={0x080483a6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32]))))}
  sf        = {defs={0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15821[32] v15821[32]))}
  zf        = {defs={0x080483a6}, expr=(zerop[1] (bv-and[32] v15821[32] v15821[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483a6}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15826[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483a6}, expr=0[1]}
memory:
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 3[32])} value=(extract[8] 24[32] 32[32] v15821[32])
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 2[32])} value=(extract[8] 16[32] 24[32] v15821[32])
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 1[32])} value=(extract[8] 8[32] 16[32] v15821[32])
  addr={defs={0x080483a4}, expr=v15816[32]} value=(extract[8] 0[32] 8[32] v15821[32])
  addr={defs={0x0804839f}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15816[32])

0x80483a8:je     0x080483c5<<Insn>>
Symbolic@0x22ecb30 insn@0x080483a8[3]: startInstruction(je     0x080483c5<<Insn>>)
Symbolic@0x22ecb30 insn@0x080483a8[3]: number_(32, 2) = {defs={0x080483a8}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483a8[3]: number_(32, 134513576) = {defs={0x080483a8}, expr=0x080483a8[32]}
Symbolic@0x22ecb30 insn@0x080483a8[3]: add({defs={0x080483a8}, expr=0x080483a8[32]}, {defs={0x080483a8}, expr=2[32]}) = {defs={0x080483a8}, expr=0x080483aa[32]}
Symbolic@0x22ecb30 insn@0x080483a8[3]: writeRegister(eip, {defs={0x080483a8}, expr=0x080483aa[32]})
Symbolic@0x22ecb30 insn@0x080483a8[3]: readRegister(zf) = {defs={0x080483a6}, expr=(zerop[1] (bv-and[32] v15821[32] v15821[32]))}
Symbolic@0x22ecb30 insn@0x080483a8[3]: readRegister(eip) = {defs={0x080483a8}, expr=0x080483aa[32]}
Symbolic@0x22ecb30 insn@0x080483a8[3]: number_(32, 134513605) = {defs={0x080483a8}, expr=0x080483c5[32]}
Symbolic@0x22ecb30 insn@0x080483a8[3]: ite({defs={0x080483a6}, expr=(zerop[1] (bv-and[32] v15821[32] v15821[32]))}, {defs={0x080483a8}, expr=0x080483c5[32]}, {defs={0x080483a8}, expr=0x080483aa[32]}) = {defs={0x080483a6,0x080483a8}, expr=(ite[32] (zerop[1] (bv-and[32] v15821[32] v15821[32])) 0x080483c5[32] 0x080483aa[32])}
Symbolic@0x22ecb30 insn@0x080483a8[3]: writeRegister(eip, {defs={0x080483a6,0x080483a8}, expr=(ite[32] (zerop[1] (bv-and[32] v15821[32] v15821[32])) 0x080483c5[32] 0x080483aa[32])})
Symbolic@0x22ecb30 insn@0x080483a8[3]: finishInstruction(je     0x080483c5<<Insn>>)
registers:
  eax       = v15816[32]
  edx       = v15821[32]
  eip       = {defs={0x080483a6,0x080483a8}, expr=(ite[32] (zerop[1] (bv-and[32] v15821[32] v15821[32])) 0x080483c5[32] 0x080483aa[32])}
  pf        = {defs={0x080483a6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32]))))}
  sf        = {defs={0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15821[32] v15821[32]))}
  zf        = {defs={0x080483a6}, expr=(zerop[1] (bv-and[32] v15821[32] v15821[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483a6}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15826[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483a6}, expr=0[1]}
memory:
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 3[32])} value=(extract[8] 24[32] 32[32] v15821[32])
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 2[32])} value=(extract[8] 16[32] 24[32] v15821[32])
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 1[32])} value=(extract[8] 8[32] 16[32] v15821[32])
  addr={defs={0x080483a4}, expr=v15816[32]} value=(extract[8] 0[32] 8[32] v15821[32])
  addr={defs={0x0804839f}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15816[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = v15816[32]
  edx       = v15821[32]
  esp       = (add[32] frame_pointer[32] 4[32])
  eip       = {defs={0x080483a6,0x080483a8}, expr=(ite[32] (zerop[1] (bv-and[32] v15821[32] v15821[32])) 0x080483c5[32] 0x080483aa[32])}
  pf        = {defs={0x080483a6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15821[32] v15821[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15821[32] v15821[32]))))}
  sf        = {defs={0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15821[32] v15821[32]))}
  zf        = {defs={0x080483a6}, expr=(zerop[1] (bv-and[32] v15821[32] v15821[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483a6}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15826[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483a6}, expr=0[1]}
memory:
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 3[32])} value=(extract[8] 24[32] 32[32] v15821[32])
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 2[32])} value=(extract[8] 16[32] 24[32] v15821[32])
  addr={defs={0x080483a4}, expr=(add[32] v15816[32] 1[32])} value=(extract[8] 8[32] 16[32] v15821[32])
  addr={defs={0x080483a4}, expr=v15816[32]} value=(extract[8] 0[32] 8[32] v15821[32])
  addr={defs={0x0804839f}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15816[32])
  addr={defs={0x0804839f}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15816[32])
Symbolic@0x22ecb30 insn@0x080483a8[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80483aa:lea    esi, [esi + 0x00000000]
Symbolic@0x22ecb30 insn@0x080483aa[0]: startInstruction(lea    esi, [esi + 0x00000000])
Symbolic@0x22ecb30 insn@0x080483aa[0]: number_(32, 6) = {defs={0x080483aa}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x080483aa[0]: number_(32, 134513578) = {defs={0x080483aa}, expr=0x080483aa[32]}
Symbolic@0x22ecb30 insn@0x080483aa[0]: add({defs={0x080483aa}, expr=0x080483aa[32]}, {defs={0x080483aa}, expr=6[32]}) = {defs={0x080483aa}, expr=0x080483b0[32]}
Symbolic@0x22ecb30 insn@0x080483aa[0]: writeRegister(eip, {defs={0x080483aa}, expr=0x080483b0[32]})
Symbolic@0x22ecb30 insn@0x080483aa[0]: readRegister(esi) = esi_0[32]
Symbolic@0x22ecb30 insn@0x080483aa[0]: number_(32, 0) = {defs={0x080483aa}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483aa[0]: add(esi_0[32], {defs={0x080483aa}, expr=0[32]}) = {defs={0x080483aa}, expr=esi_0[32]}
Symbolic@0x22ecb30 insn@0x080483aa[0]: writeRegister(esi, {defs={0x080483aa}, expr=esi_0[32]})
Symbolic@0x22ecb30 insn@0x080483aa[0]: finishInstruction(lea    esi, [esi + 0x00000000])
registers:
  eip    = {defs={0x080483aa}, expr=0x080483b0[32]}
memory:

0x80483b0:add    eax, 0x04
Symbolic@0x22ecb30 insn@0x080483b0[1]: startInstruction(add    eax, 0x04)
Symbolic@0x22ecb30 insn@0x080483b0[1]: number_(32, 3) = {defs={0x080483b0}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080483b0[1]: number_(32, 134513584) = {defs={0x080483b0}, expr=0x080483b0[32]}
Symbolic@0x22ecb30 insn@0x080483b0[1]: add({defs={0x080483b0}, expr=0x080483b0[32]}, {defs={0x080483b0}, expr=3[32]}) = {defs={0x080483b0}, expr=0x080483b3[32]}
Symbolic@0x22ecb30 insn@0x080483b0[1]: writeRegister(eip, {defs={0x080483b0}, expr=0x080483b3[32]})
Symbolic@0x22ecb30 insn@0x080483b0[1]: boolean_(0) = {defs={0x080483b0}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483b0[1]: number_(32, 4) = {defs={0x080483b0}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080483b0[1]: readRegister(eax) = eax_0[32]
Symbolic@0x22ecb30 insn@0x080483b0[1]: addWithCarries(eax_0[32], {defs={0x080483b0}, expr=4[32]}, {defs={0x080483b0}, expr=0[1]}) = {defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080483b0[1]: also returns: {defs={0x080483b0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}, 0, 8) = {defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}, 1, 2) = {defs={0x080483b0}, expr=(extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}, 0, 1) = {defs={0x080483b0}, expr=(extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: xor_({defs={0x080483b0}, expr=(extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32]))}, {defs={0x080483b0}, expr=(extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32]))}) = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}, 3, 4) = {defs={0x080483b0}, expr=(extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}, 2, 3) = {defs={0x080483b0}, expr=(extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: xor_({defs={0x080483b0}, expr=(extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32]))}, {defs={0x080483b0}, expr=(extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32]))}) = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}, 5, 6) = {defs={0x080483b0}, expr=(extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}, 4, 5) = {defs={0x080483b0}, expr=(extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: xor_({defs={0x080483b0}, expr=(extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32]))}, {defs={0x080483b0}, expr=(extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32]))}) = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}, 7, 8) = {defs={0x080483b0}, expr=(extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}, 6, 7) = {defs={0x080483b0}, expr=(extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: xor_({defs={0x080483b0}, expr=(extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32]))}, {defs={0x080483b0}, expr=(extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32]))}) = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32])))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: xor_({defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])))}, {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])))}) = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: xor_({defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])))}, {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32])))}) = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32])))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: xor_({defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])))}, {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32])))}) = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])) (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32])))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: invert({defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])) (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32])))}) = {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])) (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32]))))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: writeRegister(pf, {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])) (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32]))))})
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}, 31, 32) = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: writeRegister(sf, {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] eax_0[32] 4[32]))})
Symbolic@0x22ecb30 insn@0x080483b0[1]: equalToZero({defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}) = {defs={0x080483b0}, expr=(zerop[1] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: writeRegister(zf, {defs={0x080483b0}, expr=(zerop[1] (add[32] eax_0[32] 4[32]))})
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}, 31, 32) = {defs={0x080483b0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}, 30, 31) = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: extract({defs={0x080483b0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}, 3, 4) = {defs={0x080483b0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: writeRegister(af, {defs={0x080483b0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))})
Symbolic@0x22ecb30 insn@0x080483b0[1]: writeRegister(cf, {defs={0x080483b0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))})
Symbolic@0x22ecb30 insn@0x080483b0[1]: xor_({defs={0x080483b0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}, {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}) = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])))}
Symbolic@0x22ecb30 insn@0x080483b0[1]: writeRegister(of, {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])))})
Symbolic@0x22ecb30 insn@0x080483b0[1]: writeRegister(eax, {defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x080483b0[1]: finishInstruction(add    eax, 0x04)
registers:
  eax       = {defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}
  eip       = {defs={0x080483b0}, expr=0x080483b3[32]}
  pf        = {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])) (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32]))))}
  sf        = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] eax_0[32] 4[32]))}
  zf        = {defs={0x080483b0}, expr=(zerop[1] (add[32] eax_0[32] 4[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080483b0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483b0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])))}
memory:

0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
Symbolic@0x22ecb30 insn@0x080483b3[2]: startInstruction(mov    DWORD PTR ds:[0x080496f0<.data+8>], eax)
Symbolic@0x22ecb30 insn@0x080483b3[2]: number_(32, 5) = {defs={0x080483b3}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080483b3[2]: number_(32, 134513587) = {defs={0x080483b3}, expr=0x080483b3[32]}
Symbolic@0x22ecb30 insn@0x080483b3[2]: add({defs={0x080483b3}, expr=0x080483b3[32]}, {defs={0x080483b3}, expr=5[32]}) = {defs={0x080483b3}, expr=0x080483b8[32]}
Symbolic@0x22ecb30 insn@0x080483b3[2]: writeRegister(eip, {defs={0x080483b3}, expr=0x080483b8[32]})
Symbolic@0x22ecb30 insn@0x080483b3[2]: readRegister(eax) = {defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080483b3[2]: number_(32, 134518512) = {defs={0x080483b3}, expr=0x080496f0[32]}
Symbolic@0x22ecb30 insn@0x080483b3[2]: boolean_(1) = {defs={0x080483b3}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483b3[2]: writeMemory(ds, {defs={0x080483b3}, expr=0x080496f0[32]}, {defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}, {defs={0x080483b3}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080483b3[2]: finishInstruction(mov    DWORD PTR ds:[0x080496f0<.data+8>], eax)
registers:
  eax       = {defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}
  eip       = {defs={0x080483b3}, expr=0x080483b8[32]}
  pf        = {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])) (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32]))))}
  sf        = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] eax_0[32] 4[32]))}
  zf        = {defs={0x080483b0}, expr=(zerop[1] (add[32] eax_0[32] 4[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080483b0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483b0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])))}
memory:
  addr={defs={0x080483b3}, expr=0x080496f3[32]} value={defs={0x080483b0}, expr=(extract[8] 24[32] 32[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f2[32]} value={defs={0x080483b0}, expr=(extract[8] 16[32] 24[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f1[32]} value={defs={0x080483b0}, expr=(extract[8] 8[32] 16[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f0[32]} value={defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}

0x80483b8:call   edx
Symbolic@0x22ecb30 insn@0x080483b8[3]: startInstruction(call   edx)
Symbolic@0x22ecb30 insn@0x080483b8[3]: number_(32, 2) = {defs={0x080483b8}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483b8[3]: number_(32, 134513592) = {defs={0x080483b8}, expr=0x080483b8[32]}
Symbolic@0x22ecb30 insn@0x080483b8[3]: add({defs={0x080483b8}, expr=0x080483b8[32]}, {defs={0x080483b8}, expr=2[32]}) = {defs={0x080483b8}, expr=0x080483ba[32]}
Symbolic@0x22ecb30 insn@0x080483b8[3]: writeRegister(eip, {defs={0x080483b8}, expr=0x080483ba[32]})
Symbolic@0x22ecb30 insn@0x080483b8[3]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080483b8[3]: number_(32, 18446744073709551612) = {defs={0x080483b8}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080483b8[3]: add(esp_0[32], {defs={0x080483b8}, expr=-4[32]}) = {defs={0x080483b8}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080483b8[3]: boolean_(1) = {defs={0x080483b8}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483b8[3]: readRegister(eip) = {defs={0x080483b8}, expr=0x080483ba[32]}
Symbolic@0x22ecb30 insn@0x080483b8[3]: writeMemory(ss, {defs={0x080483b8}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080483b8}, expr=0x080483ba[32]}, {defs={0x080483b8}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080483b8[3]: readRegister(edx) = edx_0[32]
Symbolic@0x22ecb30 insn@0x080483b8[3]: filterCallTarget(edx_0[32]) = edx_0[32]
Symbolic@0x22ecb30 insn@0x080483b8[3]: writeRegister(eip, edx_0[32])
Symbolic@0x22ecb30 insn@0x080483b8[3]: writeRegister(esp, {defs={0x080483b8}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080483b8[3]: finishInstruction(call   edx)
registers:
  eax       = {defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}
  esp       = {defs={0x080483b8}, expr=(add[32] esp_0[32] -4[32])}
  eip       = edx_0[32]
  pf        = {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])) (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32]))))}
  sf        = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] eax_0[32] 4[32]))}
  zf        = {defs={0x080483b0}, expr=(zerop[1] (add[32] eax_0[32] 4[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080483b0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483b0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])))}
memory:
  addr={defs={0x080483b8}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x080483b8}, expr=8[8]}
  addr={defs={0x080483b8}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x080483b8}, expr=4[8]}
  addr={defs={0x080483b8}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x080483b8}, expr=-125[8]}
  addr={defs={0x080483b8}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x080483b8}, expr=-70[8]}
  addr={defs={0x080483b3}, expr=0x080496f3[32]} value={defs={0x080483b0}, expr=(extract[8] 24[32] 32[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f2[32]} value={defs={0x080483b0}, expr=(extract[8] 16[32] 24[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f1[32]} value={defs={0x080483b0}, expr=(extract[8] 8[32] 16[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f0[32]} value={defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = {defs={0x080483b0}, expr=(add[32] eax_0[32] 4[32])}
  esp       = {defs={0x080483b8}, expr=frame_pointer[32]}
  eip       = edx_0[32]
  pf        = {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] eax_0[32] 4[32])) (extract[1] 1[32] 2[32] (add[32] eax_0[32] 4[32])) (extract[1] 2[32] 3[32] (add[32] eax_0[32] 4[32])) (extract[1] 3[32] 4[32] (add[32] eax_0[32] 4[32])) (extract[1] 4[32] 5[32] (add[32] eax_0[32] 4[32])) (extract[1] 5[32] 6[32] (add[32] eax_0[32] 4[32])) (extract[1] 6[32] 7[32] (add[32] eax_0[32] 4[32])) (extract[1] 7[32] 8[32] (add[32] eax_0[32] 4[32]))))}
  sf        = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] eax_0[32] 4[32]))}
  zf        = {defs={0x080483b0}, expr=(zerop[1] (add[32] eax_0[32] 4[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080483b0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483b0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] eax_0[32]) (add[33] (uextend[33] 33[32] eax_0[32]) 4[33]) 4[33])))}
memory:
  addr={defs={0x080483b8}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x080483b8}, expr=8[8]}
  addr={defs={0x080483b8}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x080483b8}, expr=4[8]}
  addr={defs={0x080483b8}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x080483b8}, expr=-125[8]}
  addr={defs={0x080483b8}, expr=frame_pointer[32]} value={defs={0x080483b8}, expr=-70[8]}
  addr={defs={0x080483b3}, expr=0x080496f3[32]} value={defs={0x080483b0}, expr=(extract[8] 24[32] 32[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f2[32]} value={defs={0x080483b0}, expr=(extract[8] 16[32] 24[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f1[32]} value={defs={0x080483b0}, expr=(extract[8] 8[32] 16[32] (add[32] eax_0[32] 4[32]))}
  addr={defs={0x080483b3}, expr=0x080496f0[32]} value={defs={0x080483b0}, expr=(extract[8] 0[32] 8[32] (add[32] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x080483b8[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
Symbolic@0x22ecb30 insn@0x080483ba[0]: startInstruction(mov    eax, DWORD PTR ds:[0x080496f0<.data+8>])
Symbolic@0x22ecb30 insn@0x080483ba[0]: number_(32, 5) = {defs={0x080483ba}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080483ba[0]: number_(32, 134513594) = {defs={0x080483ba}, expr=0x080483ba[32]}
Symbolic@0x22ecb30 insn@0x080483ba[0]: add({defs={0x080483ba}, expr=0x080483ba[32]}, {defs={0x080483ba}, expr=5[32]}) = {defs={0x080483ba}, expr=0x080483bf[32]}
Symbolic@0x22ecb30 insn@0x080483ba[0]: writeRegister(eip, {defs={0x080483ba}, expr=0x080483bf[32]})
Symbolic@0x22ecb30 insn@0x080483ba[0]: number_(32, 134518512) = {defs={0x080483ba}, expr=0x080496f0[32]}
Symbolic@0x22ecb30 insn@0x080483ba[0]: boolean_(1) = {defs={0x080483ba}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483ba[0]: readMemory(ds, {defs={0x080483ba}, expr=0x080496f0[32]}, {defs={0x080483ba}, expr=1[1]}, 32) = v15969[32]
Symbolic@0x22ecb30 insn@0x080483ba[0]: writeRegister(eax, v15969[32])
Symbolic@0x22ecb30 insn@0x080483ba[0]: finishInstruction(mov    eax, DWORD PTR ds:[0x080496f0<.data+8>])
registers:
  eax    = v15969[32]
  eip    = {defs={0x080483ba}, expr=0x080483bf[32]}
memory:
  addr={defs={0x080483ba}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15969[32])

0x80483bf:mov    edx, DWORD PTR ds:[eax]
Symbolic@0x22ecb30 insn@0x080483bf[1]: startInstruction(mov    edx, DWORD PTR ds:[eax])
Symbolic@0x22ecb30 insn@0x080483bf[1]: number_(32, 2) = {defs={0x080483bf}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483bf[1]: number_(32, 134513599) = {defs={0x080483bf}, expr=0x080483bf[32]}
Symbolic@0x22ecb30 insn@0x080483bf[1]: add({defs={0x080483bf}, expr=0x080483bf[32]}, {defs={0x080483bf}, expr=2[32]}) = {defs={0x080483bf}, expr=0x080483c1[32]}
Symbolic@0x22ecb30 insn@0x080483bf[1]: writeRegister(eip, {defs={0x080483bf}, expr=0x080483c1[32]})
Symbolic@0x22ecb30 insn@0x080483bf[1]: readRegister(eax) = v15969[32]
Symbolic@0x22ecb30 insn@0x080483bf[1]: boolean_(1) = {defs={0x080483bf}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483bf[1]: readMemory(ds, v15969[32], {defs={0x080483bf}, expr=1[1]}, 32) = v15974[32]
Symbolic@0x22ecb30 insn@0x080483bf[1]: writeRegister(edx, v15974[32])
Symbolic@0x22ecb30 insn@0x080483bf[1]: finishInstruction(mov    edx, DWORD PTR ds:[eax])
registers:
  eax    = v15969[32]
  edx    = v15974[32]
  eip    = {defs={0x080483bf}, expr=0x080483c1[32]}
memory:
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 3[32])} value=(extract[8] 24[32] 32[32] v15974[32])
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 2[32])} value=(extract[8] 16[32] 24[32] v15974[32])
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 1[32])} value=(extract[8] 8[32] 16[32] v15974[32])
  addr={defs={0x080483bf}, expr=v15969[32]} value=(extract[8] 0[32] 8[32] v15974[32])
  addr={defs={0x080483ba}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15969[32])

0x80483c1:test   edx, edx
Symbolic@0x22ecb30 insn@0x080483c1[2]: startInstruction(test   edx, edx)
Symbolic@0x22ecb30 insn@0x080483c1[2]: number_(32, 2) = {defs={0x080483c1}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483c1[2]: number_(32, 134513601) = {defs={0x080483c1}, expr=0x080483c1[32]}
Symbolic@0x22ecb30 insn@0x080483c1[2]: add({defs={0x080483c1}, expr=0x080483c1[32]}, {defs={0x080483c1}, expr=2[32]}) = {defs={0x080483c1}, expr=0x080483c3[32]}
Symbolic@0x22ecb30 insn@0x080483c1[2]: writeRegister(eip, {defs={0x080483c1}, expr=0x080483c3[32]})
Symbolic@0x22ecb30 insn@0x080483c1[2]: readRegister(edx) = v15974[32]
Symbolic@0x22ecb30 insn@0x080483c1[2]: readRegister(edx) = v15974[32]
Symbolic@0x22ecb30 insn@0x080483c1[2]: and_(v15974[32], v15974[32]) = {defs={0x080483c1}, expr=(bv-and[32] v15974[32] v15974[32])}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(bv-and[32] v15974[32] v15974[32])}, 0, 8) = {defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}, 1, 2) = {defs={0x080483c1}, expr=(extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}, 0, 1) = {defs={0x080483c1}, expr=(extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: xor_({defs={0x080483c1}, expr=(extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32]))}, {defs={0x080483c1}, expr=(extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32]))}) = {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}, 3, 4) = {defs={0x080483c1}, expr=(extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}, 2, 3) = {defs={0x080483c1}, expr=(extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: xor_({defs={0x080483c1}, expr=(extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32]))}, {defs={0x080483c1}, expr=(extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32]))}) = {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}, 5, 6) = {defs={0x080483c1}, expr=(extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}, 4, 5) = {defs={0x080483c1}, expr=(extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: xor_({defs={0x080483c1}, expr=(extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32]))}, {defs={0x080483c1}, expr=(extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32]))}) = {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}, 7, 8) = {defs={0x080483c1}, expr=(extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}, 6, 7) = {defs={0x080483c1}, expr=(extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: xor_({defs={0x080483c1}, expr=(extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32]))}, {defs={0x080483c1}, expr=(extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32]))}) = {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32])))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: xor_({defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])))}, {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])))}) = {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: xor_({defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])))}, {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32])))}) = {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32])))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: xor_({defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])))}, {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32])))}) = {defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32])))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: invert({defs={0x080483c1}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32])))}) = {defs={0x080483c1}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32]))))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: writeRegister(pf, {defs={0x080483c1}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32]))))})
Symbolic@0x22ecb30 insn@0x080483c1[2]: extract({defs={0x080483c1}, expr=(bv-and[32] v15974[32] v15974[32])}, 31, 32) = {defs={0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: writeRegister(sf, {defs={0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15974[32] v15974[32]))})
Symbolic@0x22ecb30 insn@0x080483c1[2]: equalToZero({defs={0x080483c1}, expr=(bv-and[32] v15974[32] v15974[32])}) = {defs={0x080483c1}, expr=(zerop[1] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c1[2]: writeRegister(zf, {defs={0x080483c1}, expr=(zerop[1] (bv-and[32] v15974[32] v15974[32]))})
Symbolic@0x22ecb30 insn@0x080483c1[2]: boolean_(0) = {defs={0x080483c1}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483c1[2]: writeRegister(of, {defs={0x080483c1}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483c1[2]: undefined_(1) = v15979[1]
Symbolic@0x22ecb30 insn@0x080483c1[2]: writeRegister(af, v15979[1])
Symbolic@0x22ecb30 insn@0x080483c1[2]: boolean_(0) = {defs={0x080483c1}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483c1[2]: writeRegister(cf, {defs={0x080483c1}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483c1[2]: finishInstruction(test   edx, edx)
registers:
  eax       = v15969[32]
  edx       = v15974[32]
  eip       = {defs={0x080483c1}, expr=0x080483c3[32]}
  pf        = {defs={0x080483c1}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32]))))}
  sf        = {defs={0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15974[32] v15974[32]))}
  zf        = {defs={0x080483c1}, expr=(zerop[1] (bv-and[32] v15974[32] v15974[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483c1}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15979[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483c1}, expr=0[1]}
memory:
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 3[32])} value=(extract[8] 24[32] 32[32] v15974[32])
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 2[32])} value=(extract[8] 16[32] 24[32] v15974[32])
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 1[32])} value=(extract[8] 8[32] 16[32] v15974[32])
  addr={defs={0x080483bf}, expr=v15969[32]} value=(extract[8] 0[32] 8[32] v15974[32])
  addr={defs={0x080483ba}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15969[32])

0x80483c3:jne    0x080483b0<<Insn>>
Symbolic@0x22ecb30 insn@0x080483c3[3]: startInstruction(jne    0x080483b0<<Insn>>)
Symbolic@0x22ecb30 insn@0x080483c3[3]: number_(32, 2) = {defs={0x080483c3}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483c3[3]: number_(32, 134513603) = {defs={0x080483c3}, expr=0x080483c3[32]}
Symbolic@0x22ecb30 insn@0x080483c3[3]: add({defs={0x080483c3}, expr=0x080483c3[32]}, {defs={0x080483c3}, expr=2[32]}) = {defs={0x080483c3}, expr=0x080483c5[32]}
Symbolic@0x22ecb30 insn@0x080483c3[3]: writeRegister(eip, {defs={0x080483c3}, expr=0x080483c5[32]})
Symbolic@0x22ecb30 insn@0x080483c3[3]: readRegister(zf) = {defs={0x080483c1}, expr=(zerop[1] (bv-and[32] v15974[32] v15974[32]))}
Symbolic@0x22ecb30 insn@0x080483c3[3]: invert({defs={0x080483c1}, expr=(zerop[1] (bv-and[32] v15974[32] v15974[32]))}) = {defs={0x080483c1,0x080483c3}, expr=(invert[1] (zerop[1] (bv-and[32] v15974[32] v15974[32])))}
Symbolic@0x22ecb30 insn@0x080483c3[3]: readRegister(eip) = {defs={0x080483c3}, expr=0x080483c5[32]}
Symbolic@0x22ecb30 insn@0x080483c3[3]: number_(32, 134513584) = {defs={0x080483c3}, expr=0x080483b0[32]}
Symbolic@0x22ecb30 insn@0x080483c3[3]: ite({defs={0x080483c1,0x080483c3}, expr=(invert[1] (zerop[1] (bv-and[32] v15974[32] v15974[32])))}, {defs={0x080483c3}, expr=0x080483b0[32]}, {defs={0x080483c3}, expr=0x080483c5[32]}) = {defs={0x080483c1,0x080483c3}, expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] v15974[32] v15974[32]))) 0x080483b0[32] 0x080483c5[32])}
Symbolic@0x22ecb30 insn@0x080483c3[3]: writeRegister(eip, {defs={0x080483c1,0x080483c3}, expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] v15974[32] v15974[32]))) 0x080483b0[32] 0x080483c5[32])})
Symbolic@0x22ecb30 insn@0x080483c3[3]: finishInstruction(jne    0x080483b0<<Insn>>)
registers:
  eax       = v15969[32]
  edx       = v15974[32]
  eip       = {defs={0x080483c1,0x080483c3}, expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] v15974[32] v15974[32]))) 0x080483b0[32] 0x080483c5[32])}
  pf        = {defs={0x080483c1}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32]))))}
  sf        = {defs={0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15974[32] v15974[32]))}
  zf        = {defs={0x080483c1}, expr=(zerop[1] (bv-and[32] v15974[32] v15974[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483c1}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15979[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483c1}, expr=0[1]}
memory:
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 3[32])} value=(extract[8] 24[32] 32[32] v15974[32])
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 2[32])} value=(extract[8] 16[32] 24[32] v15974[32])
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 1[32])} value=(extract[8] 8[32] 16[32] v15974[32])
  addr={defs={0x080483bf}, expr=v15969[32]} value=(extract[8] 0[32] 8[32] v15974[32])
  addr={defs={0x080483ba}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15969[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = v15969[32]
  edx       = v15974[32]
  esp       = (add[32] frame_pointer[32] 4[32])
  eip       = {defs={0x080483c1,0x080483c3}, expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] v15974[32] v15974[32]))) 0x080483b0[32] 0x080483c5[32])}
  pf        = {defs={0x080483c1}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 1[32] 2[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 2[32] 3[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 3[32] 4[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 4[32] 5[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 5[32] 6[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 6[32] 7[32] (bv-and[32] v15974[32] v15974[32])) (extract[1] 7[32] 8[32] (bv-and[32] v15974[32] v15974[32]))))}
  sf        = {defs={0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v15974[32] v15974[32]))}
  zf        = {defs={0x080483c1}, expr=(zerop[1] (bv-and[32] v15974[32] v15974[32]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483c1}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v15979[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483c1}, expr=0[1]}
memory:
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 3[32])} value=(extract[8] 24[32] 32[32] v15974[32])
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 2[32])} value=(extract[8] 16[32] 24[32] v15974[32])
  addr={defs={0x080483bf}, expr=(add[32] v15969[32] 1[32])} value=(extract[8] 8[32] 16[32] v15974[32])
  addr={defs={0x080483bf}, expr=v15969[32]} value=(extract[8] 0[32] 8[32] v15974[32])
  addr={defs={0x080483ba}, expr=0x080496f3[32]} value=(extract[8] 24[32] 32[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f2[32]} value=(extract[8] 16[32] 24[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f1[32]} value=(extract[8] 8[32] 16[32] v15969[32])
  addr={defs={0x080483ba}, expr=0x080496f0[32]} value=(extract[8] 0[32] 8[32] v15969[32])
Symbolic@0x22ecb30 insn@0x080483c3[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
Symbolic@0x22ecb30 insn@0x080483c5[0]: startInstruction(mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01)
Symbolic@0x22ecb30 insn@0x080483c5[0]: number_(32, 7) = {defs={0x080483c5}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x080483c5[0]: number_(32, 134513605) = {defs={0x080483c5}, expr=0x080483c5[32]}
Symbolic@0x22ecb30 insn@0x080483c5[0]: add({defs={0x080483c5}, expr=0x080483c5[32]}, {defs={0x080483c5}, expr=7[32]}) = {defs={0x080483c5}, expr=0x080483cc[32]}
Symbolic@0x22ecb30 insn@0x080483c5[0]: writeRegister(eip, {defs={0x080483c5}, expr=0x080483cc[32]})
Symbolic@0x22ecb30 insn@0x080483c5[0]: number_(8, 1) = {defs={0x080483c5}, expr=1[8]}
Symbolic@0x22ecb30 insn@0x080483c5[0]: number_(32, 134518516) = {defs={0x080483c5}, expr=0x080496f4[32]}
Symbolic@0x22ecb30 insn@0x080483c5[0]: boolean_(1) = {defs={0x080483c5}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483c5[0]: writeMemory(ds, {defs={0x080483c5}, expr=0x080496f4[32]}, {defs={0x080483c5}, expr=1[8]}, {defs={0x080483c5}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080483c5[0]: finishInstruction(mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01)
registers:
  eip    = {defs={0x080483c5}, expr=0x080483cc[32]}
memory:
  addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={0x080483c5}, expr=1[8]}

0x80483cc:leave  
Symbolic@0x22ecb30 insn@0x080483cc[1]: startInstruction(leave)
Symbolic@0x22ecb30 insn@0x080483cc[1]: number_(32, 1) = {defs={0x080483cc}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080483cc[1]: number_(32, 134513612) = {defs={0x080483cc}, expr=0x080483cc[32]}
Symbolic@0x22ecb30 insn@0x080483cc[1]: add({defs={0x080483cc}, expr=0x080483cc[32]}, {defs={0x080483cc}, expr=1[32]}) = {defs={0x080483cc}, expr=0x080483cd[32]}
Symbolic@0x22ecb30 insn@0x080483cc[1]: writeRegister(eip, {defs={0x080483cc}, expr=0x080483cd[32]})
Symbolic@0x22ecb30 insn@0x080483cc[1]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080483cc[1]: writeRegister(esp, ebp_0[32])
Symbolic@0x22ecb30 insn@0x080483cc[1]: readRegister(esp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080483cc[1]: number_(32, 4) = {defs={0x080483cc}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080483cc[1]: add(ebp_0[32], {defs={0x080483cc}, expr=4[32]}) = {defs={0x080483cc}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080483cc[1]: boolean_(1) = {defs={0x080483cc}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483cc[1]: readMemory(ss, ebp_0[32], {defs={0x080483cc}, expr=1[1]}, 32) = v16051[32]
Symbolic@0x22ecb30 insn@0x080483cc[1]: writeRegister(ebp, v16051[32])
Symbolic@0x22ecb30 insn@0x080483cc[1]: writeRegister(esp, {defs={0x080483cc}, expr=(add[32] ebp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x080483cc[1]: finishInstruction(leave)
registers:
  esp    = {defs={0x080483cc}, expr=(add[32] ebp_0[32] 4[32])}
  ebp    = v16051[32]
  eip    = {defs={0x080483cc}, expr=0x080483cd[32]}
memory:
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16051[32])
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16051[32])
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16051[32])
  addr={defs={0x080483cc}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16051[32])
  addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={0x080483c5}, expr=1[8]}

0x80483cd:ret    
Symbolic@0x22ecb30 insn@0x080483cd[2]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x080483cd[2]: number_(32, 1) = {defs={0x080483cd}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080483cd[2]: number_(32, 134513613) = {defs={0x080483cd}, expr=0x080483cd[32]}
Symbolic@0x22ecb30 insn@0x080483cd[2]: add({defs={0x080483cd}, expr=0x080483cd[32]}, {defs={0x080483cd}, expr=1[32]}) = {defs={0x080483cd}, expr=0x080483ce[32]}
Symbolic@0x22ecb30 insn@0x080483cd[2]: writeRegister(eip, {defs={0x080483cd}, expr=0x080483ce[32]})
Symbolic@0x22ecb30 insn@0x080483cd[2]: number_(32, 0) = {defs={0x080483cd}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483cd[2]: readRegister(esp) = {defs={0x080483cc}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080483cd[2]: number_(32, 4) = {defs={0x080483cd}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080483cd[2]: add({defs={0x080483cd}, expr=4[32]}, {defs={0x080483cd}, expr=0[32]}) = {defs={0x080483cd}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080483cd[2]: add({defs={0x080483cc}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x080483cd}, expr=4[32]}) = {defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x080483cd[2]: boolean_(1) = {defs={0x080483cd}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483cd[2]: readMemory(ss, {defs={0x080483cc}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x080483cd}, expr=1[1]}, 32) = v16056[32]
Symbolic@0x22ecb30 insn@0x080483cd[2]: filterReturnTarget(v16056[32]) = v16056[32]
Symbolic@0x22ecb30 insn@0x080483cd[2]: writeRegister(eip, v16056[32])
Symbolic@0x22ecb30 insn@0x080483cd[2]: writeRegister(esp, {defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x080483cd[2]: finishInstruction(ret)
registers:
  esp    = {defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v16051[32]
  eip    = v16056[32]
memory:
  addr={defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v16056[32])
  addr={defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v16056[32])
  addr={defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v16056[32])
  addr={defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v16056[32])
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16051[32])
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16051[32])
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16051[32])
  addr={defs={0x080483cc}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16051[32])
  addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={0x080483c5}, expr=1[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v16051[32]
  eip    = v16056[32]
memory:
  addr={defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v16056[32])
  addr={defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v16056[32])
  addr={defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v16056[32])
  addr={defs={0x080483cc,0x080483cd}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v16056[32])
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16051[32])
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16051[32])
  addr={defs={0x080483cc}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16051[32])
  addr={defs={0x080483cc}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16051[32])
  addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={0x080483c5}, expr=1[8]}
Symbolic@0x22ecb30 insn@0x080483cd[2]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80483d0:push   ebp
Symbolic@0x22ecb30 insn@0x080483d0[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x080483d0[0]: number_(32, 1) = {defs={0x080483d0}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080483d0[0]: number_(32, 134513616) = {defs={0x080483d0}, expr=0x080483d0[32]}
Symbolic@0x22ecb30 insn@0x080483d0[0]: add({defs={0x080483d0}, expr=0x080483d0[32]}, {defs={0x080483d0}, expr=1[32]}) = {defs={0x080483d0}, expr=0x080483d1[32]}
Symbolic@0x22ecb30 insn@0x080483d0[0]: writeRegister(eip, {defs={0x080483d0}, expr=0x080483d1[32]})
Symbolic@0x22ecb30 insn@0x080483d0[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080483d0[0]: number_(32, 18446744073709551612) = {defs={0x080483d0}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080483d0[0]: add(esp_0[32], {defs={0x080483d0}, expr=-4[32]}) = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080483d0[0]: boolean_(1) = {defs={0x080483d0}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483d0[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080483d0[0]: writeMemory(ss, {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x080483d0}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080483d0[0]: writeRegister(esp, {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080483d0[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080483d0}, expr=0x080483d1[32]}
memory:
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80483d1:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x080483d1[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x080483d1[1]: number_(32, 2) = {defs={0x080483d1}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483d1[1]: number_(32, 134513617) = {defs={0x080483d1}, expr=0x080483d1[32]}
Symbolic@0x22ecb30 insn@0x080483d1[1]: add({defs={0x080483d1}, expr=0x080483d1[32]}, {defs={0x080483d1}, expr=2[32]}) = {defs={0x080483d1}, expr=0x080483d3[32]}
Symbolic@0x22ecb30 insn@0x080483d1[1]: writeRegister(eip, {defs={0x080483d1}, expr=0x080483d3[32]})
Symbolic@0x22ecb30 insn@0x080483d1[1]: readRegister(esp) = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080483d1[1]: writeRegister(ebp, {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080483d1[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080483d1}, expr=0x080483d3[32]}
memory:
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80483d3:sub    esp, 0x08
Symbolic@0x22ecb30 insn@0x080483d3[2]: startInstruction(sub    esp, 0x08)
Symbolic@0x22ecb30 insn@0x080483d3[2]: number_(32, 3) = {defs={0x080483d3}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080483d3[2]: number_(32, 134513619) = {defs={0x080483d3}, expr=0x080483d3[32]}
Symbolic@0x22ecb30 insn@0x080483d3[2]: add({defs={0x080483d3}, expr=0x080483d3[32]}, {defs={0x080483d3}, expr=3[32]}) = {defs={0x080483d3}, expr=0x080483d6[32]}
Symbolic@0x22ecb30 insn@0x080483d3[2]: writeRegister(eip, {defs={0x080483d3}, expr=0x080483d6[32]})
Symbolic@0x22ecb30 insn@0x080483d3[2]: boolean_(0) = {defs={0x080483d3}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483d3[2]: number_(32, 8) = {defs={0x080483d3}, expr=8[32]}
Symbolic@0x22ecb30 insn@0x080483d3[2]: invert({defs={0x080483d3}, expr=8[32]}) = {defs={0x080483d3}, expr=-9[32]}
Symbolic@0x22ecb30 insn@0x080483d3[2]: readRegister(esp) = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080483d3[2]: invert({defs={0x080483d3}, expr=0[1]}) = {defs={0x080483d3}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483d3[2]: addWithCarries({defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080483d3}, expr=-9[32]}, {defs={0x080483d3}, expr=1[1]}) = {defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x080483d3[2]: also returns: {defs={0x080483d0,0x080483d3}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])}, 0, 8) = {defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 1, 2) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 0, 1) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: xor_({defs={0x080483d0,0x080483d3}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}, {defs={0x080483d0,0x080483d3}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 3, 4) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 2, 3) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: xor_({defs={0x080483d0,0x080483d3}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}, {defs={0x080483d0,0x080483d3}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 5, 6) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 4, 5) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: xor_({defs={0x080483d0,0x080483d3}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}, {defs={0x080483d0,0x080483d3}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 7, 8) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 6, 7) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: xor_({defs={0x080483d0,0x080483d3}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}, {defs={0x080483d0,0x080483d3}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: xor_({defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}, {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: xor_({defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}, {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: xor_({defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}, {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: invert({defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: writeRegister(pf, {defs={0x080483d0,0x080483d3}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))})
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])}, 31, 32) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: writeRegister(sf, {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x080483d3[2]: equalToZero({defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])}) = {defs={0x080483d0,0x080483d3}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: writeRegister(zf, {defs={0x080483d0,0x080483d3}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 31, 32) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 30, 31) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: extract({defs={0x080483d0,0x080483d3}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 3, 4) = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: invert({defs={0x080483d0,0x080483d3}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: writeRegister(af, {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x080483d3[2]: invert({defs={0x080483d0,0x080483d3}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: writeRegister(cf, {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x080483d3[2]: xor_({defs={0x080483d0,0x080483d3}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x080483d3[2]: writeRegister(of, {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x080483d3[2]: writeRegister(esp, {defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x080483d3[2]: finishInstruction(sub    esp, 0x08)
registers:
  esp       = {defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x080483d3}, expr=0x080483d6[32]}
  pf        = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x080483d0,0x080483d3}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
Symbolic@0x22ecb30 insn@0x080483d6[3]: startInstruction(mov    eax, DWORD PTR ds:[0x080495f8<.jcr>])
Symbolic@0x22ecb30 insn@0x080483d6[3]: number_(32, 5) = {defs={0x080483d6}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080483d6[3]: number_(32, 134513622) = {defs={0x080483d6}, expr=0x080483d6[32]}
Symbolic@0x22ecb30 insn@0x080483d6[3]: add({defs={0x080483d6}, expr=0x080483d6[32]}, {defs={0x080483d6}, expr=5[32]}) = {defs={0x080483d6}, expr=0x080483db[32]}
Symbolic@0x22ecb30 insn@0x080483d6[3]: writeRegister(eip, {defs={0x080483d6}, expr=0x080483db[32]})
Symbolic@0x22ecb30 insn@0x080483d6[3]: number_(32, 134518264) = {defs={0x080483d6}, expr=0x080495f8[32]}
Symbolic@0x22ecb30 insn@0x080483d6[3]: boolean_(1) = {defs={0x080483d6}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483d6[3]: readMemory(ds, {defs={0x080483d6}, expr=0x080495f8[32]}, {defs={0x080483d6}, expr=1[1]}, 32) = v16132[32]
Symbolic@0x22ecb30 insn@0x080483d6[3]: writeRegister(eax, v16132[32])
Symbolic@0x22ecb30 insn@0x080483d6[3]: finishInstruction(mov    eax, DWORD PTR ds:[0x080495f8<.jcr>])
registers:
  eax       = v16132[32]
  esp       = {defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x080483d6}, expr=0x080483db[32]}
  pf        = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x080483d0,0x080483d3}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x080483d6}, expr=0x080495fb[32]} value=(extract[8] 24[32] 32[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495fa[32]} value=(extract[8] 16[32] 24[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495f9[32]} value=(extract[8] 8[32] 16[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495f8[32]} value=(extract[8] 0[32] 8[32] v16132[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80483db:test   eax, eax
Symbolic@0x22ecb30 insn@0x080483db[4]: startInstruction(test   eax, eax)
Symbolic@0x22ecb30 insn@0x080483db[4]: number_(32, 2) = {defs={0x080483db}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483db[4]: number_(32, 134513627) = {defs={0x080483db}, expr=0x080483db[32]}
Symbolic@0x22ecb30 insn@0x080483db[4]: add({defs={0x080483db}, expr=0x080483db[32]}, {defs={0x080483db}, expr=2[32]}) = {defs={0x080483db}, expr=0x080483dd[32]}
Symbolic@0x22ecb30 insn@0x080483db[4]: writeRegister(eip, {defs={0x080483db}, expr=0x080483dd[32]})
Symbolic@0x22ecb30 insn@0x080483db[4]: readRegister(eax) = v16132[32]
Symbolic@0x22ecb30 insn@0x080483db[4]: readRegister(eax) = v16132[32]
Symbolic@0x22ecb30 insn@0x080483db[4]: and_(v16132[32], v16132[32]) = {defs={0x080483db}, expr=(bv-and[32] v16132[32] v16132[32])}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(bv-and[32] v16132[32] v16132[32])}, 0, 8) = {defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}, 1, 2) = {defs={0x080483db}, expr=(extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}, 0, 1) = {defs={0x080483db}, expr=(extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: xor_({defs={0x080483db}, expr=(extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32]))}, {defs={0x080483db}, expr=(extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32]))}) = {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])))}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}, 3, 4) = {defs={0x080483db}, expr=(extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}, 2, 3) = {defs={0x080483db}, expr=(extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: xor_({defs={0x080483db}, expr=(extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32]))}, {defs={0x080483db}, expr=(extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32]))}) = {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])))}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}, 5, 6) = {defs={0x080483db}, expr=(extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}, 4, 5) = {defs={0x080483db}, expr=(extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: xor_({defs={0x080483db}, expr=(extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32]))}, {defs={0x080483db}, expr=(extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32]))}) = {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])))}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}, 7, 8) = {defs={0x080483db}, expr=(extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(extract[8] 0[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}, 6, 7) = {defs={0x080483db}, expr=(extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: xor_({defs={0x080483db}, expr=(extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32]))}, {defs={0x080483db}, expr=(extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32]))}) = {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32])))}
Symbolic@0x22ecb30 insn@0x080483db[4]: xor_({defs={0x080483db}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])))}, {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])))}) = {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])))}
Symbolic@0x22ecb30 insn@0x080483db[4]: xor_({defs={0x080483db}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])))}, {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32])))}) = {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32])))}
Symbolic@0x22ecb30 insn@0x080483db[4]: xor_({defs={0x080483db}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])))}, {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32])))}) = {defs={0x080483db}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32])))}
Symbolic@0x22ecb30 insn@0x080483db[4]: invert({defs={0x080483db}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32])))}) = {defs={0x080483db}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32]))))}
Symbolic@0x22ecb30 insn@0x080483db[4]: writeRegister(pf, {defs={0x080483db}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32]))))})
Symbolic@0x22ecb30 insn@0x080483db[4]: extract({defs={0x080483db}, expr=(bv-and[32] v16132[32] v16132[32])}, 31, 32) = {defs={0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: writeRegister(sf, {defs={0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v16132[32] v16132[32]))})
Symbolic@0x22ecb30 insn@0x080483db[4]: equalToZero({defs={0x080483db}, expr=(bv-and[32] v16132[32] v16132[32])}) = {defs={0x080483db}, expr=(zerop[1] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483db[4]: writeRegister(zf, {defs={0x080483db}, expr=(zerop[1] (bv-and[32] v16132[32] v16132[32]))})
Symbolic@0x22ecb30 insn@0x080483db[4]: boolean_(0) = {defs={0x080483db}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483db[4]: writeRegister(of, {defs={0x080483db}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483db[4]: undefined_(1) = v16137[1]
Symbolic@0x22ecb30 insn@0x080483db[4]: writeRegister(af, v16137[1])
Symbolic@0x22ecb30 insn@0x080483db[4]: boolean_(0) = {defs={0x080483db}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483db[4]: writeRegister(cf, {defs={0x080483db}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483db[4]: finishInstruction(test   eax, eax)
registers:
  eax       = v16132[32]
  esp       = {defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x080483db}, expr=0x080483dd[32]}
  pf        = {defs={0x080483db}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32]))))}
  sf        = {defs={0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v16132[32] v16132[32]))}
  zf        = {defs={0x080483db}, expr=(zerop[1] (bv-and[32] v16132[32] v16132[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16137[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483db}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483db}, expr=0[1]}
memory:
  addr={defs={0x080483d6}, expr=0x080495fb[32]} value=(extract[8] 24[32] 32[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495fa[32]} value=(extract[8] 16[32] 24[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495f9[32]} value=(extract[8] 8[32] 16[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495f8[32]} value=(extract[8] 0[32] 8[32] v16132[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80483dd:je     0x08048400<<Insn>>
Symbolic@0x22ecb30 insn@0x080483dd[5]: startInstruction(je     0x08048400<<Insn>>)
Symbolic@0x22ecb30 insn@0x080483dd[5]: number_(32, 2) = {defs={0x080483dd}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483dd[5]: number_(32, 134513629) = {defs={0x080483dd}, expr=0x080483dd[32]}
Symbolic@0x22ecb30 insn@0x080483dd[5]: add({defs={0x080483dd}, expr=0x080483dd[32]}, {defs={0x080483dd}, expr=2[32]}) = {defs={0x080483dd}, expr=0x080483df[32]}
Symbolic@0x22ecb30 insn@0x080483dd[5]: writeRegister(eip, {defs={0x080483dd}, expr=0x080483df[32]})
Symbolic@0x22ecb30 insn@0x080483dd[5]: readRegister(zf) = {defs={0x080483db}, expr=(zerop[1] (bv-and[32] v16132[32] v16132[32]))}
Symbolic@0x22ecb30 insn@0x080483dd[5]: readRegister(eip) = {defs={0x080483dd}, expr=0x080483df[32]}
Symbolic@0x22ecb30 insn@0x080483dd[5]: number_(32, 134513664) = {defs={0x080483dd}, expr=0x08048400[32]}
Symbolic@0x22ecb30 insn@0x080483dd[5]: ite({defs={0x080483db}, expr=(zerop[1] (bv-and[32] v16132[32] v16132[32]))}, {defs={0x080483dd}, expr=0x08048400[32]}, {defs={0x080483dd}, expr=0x080483df[32]}) = {defs={0x080483db,0x080483dd}, expr=(ite[32] (zerop[1] (bv-and[32] v16132[32] v16132[32])) 0x08048400[32] 0x080483df[32])}
Symbolic@0x22ecb30 insn@0x080483dd[5]: writeRegister(eip, {defs={0x080483db,0x080483dd}, expr=(ite[32] (zerop[1] (bv-and[32] v16132[32] v16132[32])) 0x08048400[32] 0x080483df[32])})
Symbolic@0x22ecb30 insn@0x080483dd[5]: finishInstruction(je     0x08048400<<Insn>>)
registers:
  eax       = v16132[32]
  esp       = {defs={0x080483d0,0x080483d3}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x080483db,0x080483dd}, expr=(ite[32] (zerop[1] (bv-and[32] v16132[32] v16132[32])) 0x08048400[32] 0x080483df[32])}
  pf        = {defs={0x080483db}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32]))))}
  sf        = {defs={0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v16132[32] v16132[32]))}
  zf        = {defs={0x080483db}, expr=(zerop[1] (bv-and[32] v16132[32] v16132[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16137[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483db}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483db}, expr=0[1]}
memory:
  addr={defs={0x080483d6}, expr=0x080495fb[32]} value=(extract[8] 24[32] 32[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495fa[32]} value=(extract[8] 16[32] 24[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495f9[32]} value=(extract[8] 8[32] 16[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495f8[32]} value=(extract[8] 0[32] 8[32] v16132[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = v16132[32]
  esp       = {defs={0x080483d0,0x080483d3}, expr=(add[32] frame_pointer[32] -8[32])}
  ebp       = {defs={0x080483d0}, expr=frame_pointer[32]}
  eip       = {defs={0x080483db,0x080483dd}, expr=(ite[32] (zerop[1] (bv-and[32] v16132[32] v16132[32])) 0x08048400[32] 0x080483df[32])}
  pf        = {defs={0x080483db}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 1[32] 2[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 2[32] 3[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 3[32] 4[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 4[32] 5[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 5[32] 6[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 6[32] 7[32] (bv-and[32] v16132[32] v16132[32])) (extract[1] 7[32] 8[32] (bv-and[32] v16132[32] v16132[32]))))}
  sf        = {defs={0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v16132[32] v16132[32]))}
  zf        = {defs={0x080483db}, expr=(zerop[1] (bv-and[32] v16132[32] v16132[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16137[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483db}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483db}, expr=0[1]}
memory:
  addr={defs={0x080483d6}, expr=0x080495fb[32]} value=(extract[8] 24[32] 32[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495fa[32]} value=(extract[8] 16[32] 24[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495f9[32]} value=(extract[8] 8[32] 16[32] v16132[32])
  addr={defs={0x080483d6}, expr=0x080495f8[32]} value=(extract[8] 0[32] 8[32] v16132[32])
  addr={defs={0x080483d0}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080483d0}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x080483dd[5]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80483df:mov    eax, 0x00000000
Symbolic@0x22ecb30 insn@0x080483df[0]: startInstruction(mov    eax, 0x00000000)
Symbolic@0x22ecb30 insn@0x080483df[0]: number_(32, 5) = {defs={0x080483df}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080483df[0]: number_(32, 134513631) = {defs={0x080483df}, expr=0x080483df[32]}
Symbolic@0x22ecb30 insn@0x080483df[0]: add({defs={0x080483df}, expr=0x080483df[32]}, {defs={0x080483df}, expr=5[32]}) = {defs={0x080483df}, expr=0x080483e4[32]}
Symbolic@0x22ecb30 insn@0x080483df[0]: writeRegister(eip, {defs={0x080483df}, expr=0x080483e4[32]})
Symbolic@0x22ecb30 insn@0x080483df[0]: number_(32, 0) = {defs={0x080483df}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483df[0]: writeRegister(eax, {defs={0x080483df}, expr=0[32]})
Symbolic@0x22ecb30 insn@0x080483df[0]: finishInstruction(mov    eax, 0x00000000)
registers:
  eax    = {defs={0x080483df}, expr=0[32]}
  eip    = {defs={0x080483df}, expr=0x080483e4[32]}
memory:

0x80483e4:test   eax, eax
Symbolic@0x22ecb30 insn@0x080483e4[1]: startInstruction(test   eax, eax)
Symbolic@0x22ecb30 insn@0x080483e4[1]: number_(32, 2) = {defs={0x080483e4}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: number_(32, 134513636) = {defs={0x080483e4}, expr=0x080483e4[32]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: add({defs={0x080483e4}, expr=0x080483e4[32]}, {defs={0x080483e4}, expr=2[32]}) = {defs={0x080483e4}, expr=0x080483e6[32]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: writeRegister(eip, {defs={0x080483e4}, expr=0x080483e6[32]})
Symbolic@0x22ecb30 insn@0x080483e4[1]: readRegister(eax) = {defs={0x080483df}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: readRegister(eax) = {defs={0x080483df}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: and_({defs={0x080483df}, expr=0[32]}, {defs={0x080483df}, expr=0[32]}) = {defs={0x080483df,0x080483e4}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[32]}, 0, 8) = {defs={0x080483df,0x080483e4}, expr=0[8]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[8]}, 1, 2) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[8]}, 0, 1) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: xor_({defs={0x080483df,0x080483e4}, expr=0[1]}, {defs={0x080483df,0x080483e4}, expr=0[1]}) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[8]}, 3, 4) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[8]}, 2, 3) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: xor_({defs={0x080483df,0x080483e4}, expr=0[1]}, {defs={0x080483df,0x080483e4}, expr=0[1]}) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[8]}, 5, 6) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[8]}, 4, 5) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: xor_({defs={0x080483df,0x080483e4}, expr=0[1]}, {defs={0x080483df,0x080483e4}, expr=0[1]}) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[8]}, 7, 8) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[8]}, 6, 7) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: xor_({defs={0x080483df,0x080483e4}, expr=0[1]}, {defs={0x080483df,0x080483e4}, expr=0[1]}) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: xor_({defs={0x080483df,0x080483e4}, expr=0[1]}, {defs={0x080483df,0x080483e4}, expr=0[1]}) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: xor_({defs={0x080483df,0x080483e4}, expr=0[1]}, {defs={0x080483df,0x080483e4}, expr=0[1]}) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: xor_({defs={0x080483df,0x080483e4}, expr=0[1]}, {defs={0x080483df,0x080483e4}, expr=0[1]}) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: invert({defs={0x080483df,0x080483e4}, expr=0[1]}) = {defs={0x080483df,0x080483e4}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: writeRegister(pf, {defs={0x080483df,0x080483e4}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080483e4[1]: extract({defs={0x080483df,0x080483e4}, expr=0[32]}, 31, 32) = {defs={0x080483df,0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: writeRegister(sf, {defs={0x080483df,0x080483e4}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483e4[1]: equalToZero({defs={0x080483df,0x080483e4}, expr=0[32]}) = {defs={0x080483df,0x080483e4}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: writeRegister(zf, {defs={0x080483df,0x080483e4}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080483e4[1]: boolean_(0) = {defs={0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: writeRegister(of, {defs={0x080483e4}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483e4[1]: undefined_(1) = v16209[1]
Symbolic@0x22ecb30 insn@0x080483e4[1]: writeRegister(af, v16209[1])
Symbolic@0x22ecb30 insn@0x080483e4[1]: boolean_(0) = {defs={0x080483e4}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080483e4[1]: writeRegister(cf, {defs={0x080483e4}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x080483e4[1]: finishInstruction(test   eax, eax)
registers:
  eax       = {defs={0x080483df}, expr=0[32]}
  eip       = {defs={0x080483e4}, expr=0x080483e6[32]}
  pf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  sf        = {defs={0x080483df,0x080483e4}, expr=0[1]}
  zf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483e4}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16209[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483e4}, expr=0[1]}
memory:

0x80483e6:je     0x08048400<<Insn>>
Symbolic@0x22ecb30 insn@0x080483e6[2]: startInstruction(je     0x08048400<<Insn>>)
Symbolic@0x22ecb30 insn@0x080483e6[2]: number_(32, 2) = {defs={0x080483e6}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080483e6[2]: number_(32, 134513638) = {defs={0x080483e6}, expr=0x080483e6[32]}
Symbolic@0x22ecb30 insn@0x080483e6[2]: add({defs={0x080483e6}, expr=0x080483e6[32]}, {defs={0x080483e6}, expr=2[32]}) = {defs={0x080483e6}, expr=0x080483e8[32]}
Symbolic@0x22ecb30 insn@0x080483e6[2]: writeRegister(eip, {defs={0x080483e6}, expr=0x080483e8[32]})
Symbolic@0x22ecb30 insn@0x080483e6[2]: readRegister(zf) = {defs={0x080483df,0x080483e4}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483e6[2]: readRegister(eip) = {defs={0x080483e6}, expr=0x080483e8[32]}
Symbolic@0x22ecb30 insn@0x080483e6[2]: number_(32, 134513664) = {defs={0x080483e6}, expr=0x08048400[32]}
Symbolic@0x22ecb30 insn@0x080483e6[2]: ite({defs={0x080483df,0x080483e4}, expr=1[1]}, {defs={0x080483e6}, expr=0x08048400[32]}, {defs={0x080483e6}, expr=0x080483e8[32]}) = {defs={0x080483df,0x080483e4,0x080483e6}, expr=0x08048400[32]}
Symbolic@0x22ecb30 insn@0x080483e6[2]: writeRegister(eip, {defs={0x080483df,0x080483e4,0x080483e6}, expr=0x08048400[32]})
Symbolic@0x22ecb30 insn@0x080483e6[2]: finishInstruction(je     0x08048400<<Insn>>)
registers:
  eax       = {defs={0x080483df}, expr=0[32]}
  eip       = {defs={0x080483df,0x080483e4,0x080483e6}, expr=0x08048400[32]}
  pf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  sf        = {defs={0x080483df,0x080483e4}, expr=0[1]}
  zf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483e4}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16209[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483e4}, expr=0[1]}
memory:

0x8048400:mov    esp, ebp
Symbolic@0x22ecb30 insn@0x08048400[3]: startInstruction(mov    esp, ebp)
Symbolic@0x22ecb30 insn@0x08048400[3]: number_(32, 2) = {defs={0x08048400}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048400[3]: number_(32, 134513664) = {defs={0x08048400}, expr=0x08048400[32]}
Symbolic@0x22ecb30 insn@0x08048400[3]: add({defs={0x08048400}, expr=0x08048400[32]}, {defs={0x08048400}, expr=2[32]}) = {defs={0x08048400}, expr=0x08048402[32]}
Symbolic@0x22ecb30 insn@0x08048400[3]: writeRegister(eip, {defs={0x08048400}, expr=0x08048402[32]})
Symbolic@0x22ecb30 insn@0x08048400[3]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048400[3]: writeRegister(esp, ebp_0[32])
Symbolic@0x22ecb30 insn@0x08048400[3]: finishInstruction(mov    esp, ebp)
registers:
  eax       = {defs={0x080483df}, expr=0[32]}
  esp       = ebp_0[32]
  eip       = {defs={0x08048400}, expr=0x08048402[32]}
  pf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  sf        = {defs={0x080483df,0x080483e4}, expr=0[1]}
  zf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483e4}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16209[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483e4}, expr=0[1]}
memory:

0x8048402:pop    ebp
Symbolic@0x22ecb30 insn@0x08048402[4]: startInstruction(pop    ebp)
Symbolic@0x22ecb30 insn@0x08048402[4]: number_(32, 1) = {defs={0x08048402}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048402[4]: number_(32, 134513666) = {defs={0x08048402}, expr=0x08048402[32]}
Symbolic@0x22ecb30 insn@0x08048402[4]: add({defs={0x08048402}, expr=0x08048402[32]}, {defs={0x08048402}, expr=1[32]}) = {defs={0x08048402}, expr=0x08048403[32]}
Symbolic@0x22ecb30 insn@0x08048402[4]: writeRegister(eip, {defs={0x08048402}, expr=0x08048403[32]})
Symbolic@0x22ecb30 insn@0x08048402[4]: readRegister(esp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048402[4]: number_(32, 4) = {defs={0x08048402}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048402[4]: add(ebp_0[32], {defs={0x08048402}, expr=4[32]}) = {defs={0x08048402}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048402[4]: writeRegister(esp, {defs={0x08048402}, expr=(add[32] ebp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x08048402[4]: boolean_(1) = {defs={0x08048402}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048402[4]: readMemory(ss, ebp_0[32], {defs={0x08048402}, expr=1[1]}, 32) = v16210[32]
Symbolic@0x22ecb30 insn@0x08048402[4]: writeRegister(ebp, v16210[32])
Symbolic@0x22ecb30 insn@0x08048402[4]: finishInstruction(pop    ebp)
registers:
  eax       = {defs={0x080483df}, expr=0[32]}
  esp       = {defs={0x08048402}, expr=(add[32] ebp_0[32] 4[32])}
  ebp       = v16210[32]
  eip       = {defs={0x08048402}, expr=0x08048403[32]}
  pf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  sf        = {defs={0x080483df,0x080483e4}, expr=0[1]}
  zf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483e4}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16209[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483e4}, expr=0[1]}
memory:
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16210[32])
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16210[32])
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16210[32])
  addr={defs={0x08048402}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16210[32])

0x8048403:ret    
Symbolic@0x22ecb30 insn@0x08048403[5]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x08048403[5]: number_(32, 1) = {defs={0x08048403}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048403[5]: number_(32, 134513667) = {defs={0x08048403}, expr=0x08048403[32]}
Symbolic@0x22ecb30 insn@0x08048403[5]: add({defs={0x08048403}, expr=0x08048403[32]}, {defs={0x08048403}, expr=1[32]}) = {defs={0x08048403}, expr=0x08048404[32]}
Symbolic@0x22ecb30 insn@0x08048403[5]: writeRegister(eip, {defs={0x08048403}, expr=0x08048404[32]})
Symbolic@0x22ecb30 insn@0x08048403[5]: number_(32, 0) = {defs={0x08048403}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048403[5]: readRegister(esp) = {defs={0x08048402}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048403[5]: number_(32, 4) = {defs={0x08048403}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048403[5]: add({defs={0x08048403}, expr=4[32]}, {defs={0x08048403}, expr=0[32]}) = {defs={0x08048403}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048403[5]: add({defs={0x08048402}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x08048403}, expr=4[32]}) = {defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x08048403[5]: boolean_(1) = {defs={0x08048403}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048403[5]: readMemory(ss, {defs={0x08048402}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x08048403}, expr=1[1]}, 32) = v16215[32]
Symbolic@0x22ecb30 insn@0x08048403[5]: filterReturnTarget(v16215[32]) = v16215[32]
Symbolic@0x22ecb30 insn@0x08048403[5]: writeRegister(eip, v16215[32])
Symbolic@0x22ecb30 insn@0x08048403[5]: writeRegister(esp, {defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x08048403[5]: finishInstruction(ret)
registers:
  eax       = {defs={0x080483df}, expr=0[32]}
  esp       = {defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 8[32])}
  ebp       = v16210[32]
  eip       = v16215[32]
  pf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  sf        = {defs={0x080483df,0x080483e4}, expr=0[1]}
  zf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483e4}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16209[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483e4}, expr=0[1]}
memory:
  addr={defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v16215[32])
  addr={defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v16215[32])
  addr={defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v16215[32])
  addr={defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v16215[32])
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16210[32])
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16210[32])
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16210[32])
  addr={defs={0x08048402}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16210[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = {defs={0x080483df}, expr=0[32]}
  esp       = {defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 8[32])}
  ebp       = v16210[32]
  eip       = v16215[32]
  pf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  sf        = {defs={0x080483df,0x080483e4}, expr=0[1]}
  zf        = {defs={0x080483df,0x080483e4}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080483e4}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16209[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080483e4}, expr=0[1]}
memory:
  addr={defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v16215[32])
  addr={defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v16215[32])
  addr={defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v16215[32])
  addr={defs={0x08048402,0x08048403}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v16215[32])
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16210[32])
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16210[32])
  addr={defs={0x08048402}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16210[32])
  addr={defs={0x08048402}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16210[32])
Symbolic@0x22ecb30 insn@0x08048403[5]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
Symbolic@0x22ecb30 insn@0x080483e8[0]: startInstruction(mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>)
Symbolic@0x22ecb30 insn@0x080483e8[0]: number_(32, 7) = {defs={0x080483e8}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x080483e8[0]: number_(32, 134513640) = {defs={0x080483e8}, expr=0x080483e8[32]}
Symbolic@0x22ecb30 insn@0x080483e8[0]: add({defs={0x080483e8}, expr=0x080483e8[32]}, {defs={0x080483e8}, expr=7[32]}) = {defs={0x080483e8}, expr=0x080483ef[32]}
Symbolic@0x22ecb30 insn@0x080483e8[0]: writeRegister(eip, {defs={0x080483e8}, expr=0x080483ef[32]})
Symbolic@0x22ecb30 insn@0x080483e8[0]: number_(32, 134518264) = {defs={0x080483e8}, expr=0x080495f8[32]}
Symbolic@0x22ecb30 insn@0x080483e8[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080483e8[0]: boolean_(1) = {defs={0x080483e8}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483e8[0]: writeMemory(ss, esp_0[32], {defs={0x080483e8}, expr=0x080495f8[32]}, {defs={0x080483e8}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080483e8[0]: finishInstruction(mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>)
registers:
  eip    = {defs={0x080483e8}, expr=0x080483ef[32]}
memory:
  addr={defs={0x080483e8}, expr=(add[32] esp_0[32] 3[32])} value={defs={0x080483e8}, expr=8[8]}
  addr={defs={0x080483e8}, expr=(add[32] esp_0[32] 2[32])} value={defs={0x080483e8}, expr=4[8]}
  addr={defs={0x080483e8}, expr=(add[32] esp_0[32] 1[32])} value={defs={0x080483e8}, expr=-107[8]}
  addr={defs={0x080483e8}, expr=esp_0[32]} value={defs={0x080483e8}, expr=-8[8]}

0x80483ef:call   0x00000000
Symbolic@0x22ecb30 insn@0x080483ef[1]: startInstruction(call   0x00000000)
Symbolic@0x22ecb30 insn@0x080483ef[1]: number_(32, 5) = {defs={0x080483ef}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: number_(32, 134513647) = {defs={0x080483ef}, expr=0x080483ef[32]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: add({defs={0x080483ef}, expr=0x080483ef[32]}, {defs={0x080483ef}, expr=5[32]}) = {defs={0x080483ef}, expr=0x080483f4[32]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: writeRegister(eip, {defs={0x080483ef}, expr=0x080483f4[32]})
Symbolic@0x22ecb30 insn@0x080483ef[1]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080483ef[1]: number_(32, 18446744073709551612) = {defs={0x080483ef}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: add(esp_0[32], {defs={0x080483ef}, expr=-4[32]}) = {defs={0x080483ef}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080483ef[1]: boolean_(1) = {defs={0x080483ef}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: readRegister(eip) = {defs={0x080483ef}, expr=0x080483f4[32]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: writeMemory(ss, {defs={0x080483ef}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080483ef}, expr=0x080483f4[32]}, {defs={0x080483ef}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080483ef[1]: number_(32, 0) = {defs={0x080483ef}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: filterCallTarget({defs={0x080483ef}, expr=0[32]}) = {defs={0x080483ef}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: writeRegister(eip, {defs={0x080483ef}, expr=0[32]})
Symbolic@0x22ecb30 insn@0x080483ef[1]: writeRegister(esp, {defs={0x080483ef}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080483ef[1]: finishInstruction(call   0x00000000)
registers:
  esp    = {defs={0x080483ef}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080483ef}, expr=0[32]}
memory:
  addr={defs={0x080483ef}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x080483ef}, expr=8[8]}
  addr={defs={0x080483ef}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x080483ef}, expr=4[8]}
  addr={defs={0x080483ef}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x080483ef}, expr=-125[8]}
  addr={defs={0x080483ef}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x080483ef}, expr=-12[8]}
  addr={defs={0x080483e8}, expr=(add[32] esp_0[32] 3[32])} value={defs={0x080483e8}, expr=8[8]}
  addr={defs={0x080483e8}, expr=(add[32] esp_0[32] 2[32])} value={defs={0x080483e8}, expr=4[8]}
  addr={defs={0x080483e8}, expr=(add[32] esp_0[32] 1[32])} value={defs={0x080483e8}, expr=-107[8]}
  addr={defs={0x080483e8}, expr=esp_0[32]} value={defs={0x080483e8}, expr=-8[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x080483ef}, expr=frame_pointer[32]}
  eip    = {defs={0x080483ef}, expr=0[32]}
memory:
  addr={defs={0x080483ef}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x080483ef}, expr=8[8]}
  addr={defs={0x080483ef}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x080483ef}, expr=4[8]}
  addr={defs={0x080483ef}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x080483ef}, expr=-125[8]}
  addr={defs={0x080483ef}, expr=frame_pointer[32]} value={defs={0x080483ef}, expr=-12[8]}
  addr={defs={0x080483e8}, expr=(add[32] frame_pointer[32] 7[32])} value={defs={0x080483e8}, expr=8[8]}
  addr={defs={0x080483e8}, expr=(add[32] frame_pointer[32] 6[32])} value={defs={0x080483e8}, expr=4[8]}
  addr={defs={0x080483e8}, expr=(add[32] frame_pointer[32] 5[32])} value={defs={0x080483e8}, expr=-107[8]}
  addr={defs={0x080483e8}, expr=(add[32] frame_pointer[32] 4[32])} value={defs={0x080483e8}, expr=-8[8]}
Symbolic@0x22ecb30 insn@0x080483ef[1]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80483f4:lea    esi, [esi + 0x00000000]
Symbolic@0x22ecb30 insn@0x080483f4[0]: startInstruction(lea    esi, [esi + 0x00000000])
Symbolic@0x22ecb30 insn@0x080483f4[0]: number_(32, 6) = {defs={0x080483f4}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x080483f4[0]: number_(32, 134513652) = {defs={0x080483f4}, expr=0x080483f4[32]}
Symbolic@0x22ecb30 insn@0x080483f4[0]: add({defs={0x080483f4}, expr=0x080483f4[32]}, {defs={0x080483f4}, expr=6[32]}) = {defs={0x080483f4}, expr=0x080483fa[32]}
Symbolic@0x22ecb30 insn@0x080483f4[0]: writeRegister(eip, {defs={0x080483f4}, expr=0x080483fa[32]})
Symbolic@0x22ecb30 insn@0x080483f4[0]: readRegister(esi) = esi_0[32]
Symbolic@0x22ecb30 insn@0x080483f4[0]: number_(32, 0) = {defs={0x080483f4}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483f4[0]: add(esi_0[32], {defs={0x080483f4}, expr=0[32]}) = {defs={0x080483f4}, expr=esi_0[32]}
Symbolic@0x22ecb30 insn@0x080483f4[0]: writeRegister(esi, {defs={0x080483f4}, expr=esi_0[32]})
Symbolic@0x22ecb30 insn@0x080483f4[0]: finishInstruction(lea    esi, [esi + 0x00000000])
registers:
  eip    = {defs={0x080483f4}, expr=0x080483fa[32]}
memory:

0x80483fa:lea    edi, [edi + 0x00000000]
Symbolic@0x22ecb30 insn@0x080483fa[1]: startInstruction(lea    edi, [edi + 0x00000000])
Symbolic@0x22ecb30 insn@0x080483fa[1]: number_(32, 6) = {defs={0x080483fa}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x080483fa[1]: number_(32, 134513658) = {defs={0x080483fa}, expr=0x080483fa[32]}
Symbolic@0x22ecb30 insn@0x080483fa[1]: add({defs={0x080483fa}, expr=0x080483fa[32]}, {defs={0x080483fa}, expr=6[32]}) = {defs={0x080483fa}, expr=0x08048400[32]}
Symbolic@0x22ecb30 insn@0x080483fa[1]: writeRegister(eip, {defs={0x080483fa}, expr=0x08048400[32]})
Symbolic@0x22ecb30 insn@0x080483fa[1]: readRegister(edi) = edi_0[32]
Symbolic@0x22ecb30 insn@0x080483fa[1]: number_(32, 0) = {defs={0x080483fa}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080483fa[1]: add(edi_0[32], {defs={0x080483fa}, expr=0[32]}) = {defs={0x080483fa}, expr=edi_0[32]}
Symbolic@0x22ecb30 insn@0x080483fa[1]: writeRegister(edi, {defs={0x080483fa}, expr=edi_0[32]})
Symbolic@0x22ecb30 insn@0x080483fa[1]: finishInstruction(lea    edi, [edi + 0x00000000])
registers:
  eip    = {defs={0x080483fa}, expr=0x08048400[32]}
memory:
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = (add[32] frame_pointer[32] 4[32])
  eip    = {defs={0x080483fa}, expr=0x08048400[32]}
memory:
Symbolic@0x22ecb30 insn@0x080483fa[1]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048410:push   ebp
Symbolic@0x22ecb30 insn@0x08048410[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x08048410[0]: number_(32, 1) = {defs={0x08048410}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048410[0]: number_(32, 134513680) = {defs={0x08048410}, expr=0x08048410[32]}
Symbolic@0x22ecb30 insn@0x08048410[0]: add({defs={0x08048410}, expr=0x08048410[32]}, {defs={0x08048410}, expr=1[32]}) = {defs={0x08048410}, expr=0x08048411[32]}
Symbolic@0x22ecb30 insn@0x08048410[0]: writeRegister(eip, {defs={0x08048410}, expr=0x08048411[32]})
Symbolic@0x22ecb30 insn@0x08048410[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048410[0]: number_(32, 18446744073709551612) = {defs={0x08048410}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048410[0]: add(esp_0[32], {defs={0x08048410}, expr=-4[32]}) = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048410[0]: boolean_(1) = {defs={0x08048410}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048410[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048410[0]: writeMemory(ss, {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x08048410}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048410[0]: writeRegister(esp, {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048410[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048410}, expr=0x08048411[32]}
memory:
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048411:mov    edx, 0x08048480<handler>
Symbolic@0x22ecb30 insn@0x08048411[1]: startInstruction(mov    edx, 0x08048480<handler>)
Symbolic@0x22ecb30 insn@0x08048411[1]: number_(32, 5) = {defs={0x08048411}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048411[1]: number_(32, 134513681) = {defs={0x08048411}, expr=0x08048411[32]}
Symbolic@0x22ecb30 insn@0x08048411[1]: add({defs={0x08048411}, expr=0x08048411[32]}, {defs={0x08048411}, expr=5[32]}) = {defs={0x08048411}, expr=0x08048416[32]}
Symbolic@0x22ecb30 insn@0x08048411[1]: writeRegister(eip, {defs={0x08048411}, expr=0x08048416[32]})
Symbolic@0x22ecb30 insn@0x08048411[1]: number_(32, 134513792) = {defs={0x08048411}, expr=0x08048480[32]}
Symbolic@0x22ecb30 insn@0x08048411[1]: writeRegister(edx, {defs={0x08048411}, expr=0x08048480[32]})
Symbolic@0x22ecb30 insn@0x08048411[1]: finishInstruction(mov    edx, 0x08048480<handler>)
registers:
  edx    = {defs={0x08048411}, expr=0x08048480[32]}
  esp    = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048411}, expr=0x08048416[32]}
memory:
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048416:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x08048416[2]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x08048416[2]: number_(32, 2) = {defs={0x08048416}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048416[2]: number_(32, 134513686) = {defs={0x08048416}, expr=0x08048416[32]}
Symbolic@0x22ecb30 insn@0x08048416[2]: add({defs={0x08048416}, expr=0x08048416[32]}, {defs={0x08048416}, expr=2[32]}) = {defs={0x08048416}, expr=0x08048418[32]}
Symbolic@0x22ecb30 insn@0x08048416[2]: writeRegister(eip, {defs={0x08048416}, expr=0x08048418[32]})
Symbolic@0x22ecb30 insn@0x08048416[2]: readRegister(esp) = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048416[2]: writeRegister(ebp, {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048416[2]: finishInstruction(mov    ebp, esp)
registers:
  edx    = {defs={0x08048411}, expr=0x08048480[32]}
  esp    = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048416}, expr=0x08048418[32]}
memory:
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048418:sub    esp, 0x08
Symbolic@0x22ecb30 insn@0x08048418[3]: startInstruction(sub    esp, 0x08)
Symbolic@0x22ecb30 insn@0x08048418[3]: number_(32, 3) = {defs={0x08048418}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048418[3]: number_(32, 134513688) = {defs={0x08048418}, expr=0x08048418[32]}
Symbolic@0x22ecb30 insn@0x08048418[3]: add({defs={0x08048418}, expr=0x08048418[32]}, {defs={0x08048418}, expr=3[32]}) = {defs={0x08048418}, expr=0x0804841b[32]}
Symbolic@0x22ecb30 insn@0x08048418[3]: writeRegister(eip, {defs={0x08048418}, expr=0x0804841b[32]})
Symbolic@0x22ecb30 insn@0x08048418[3]: boolean_(0) = {defs={0x08048418}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048418[3]: number_(32, 8) = {defs={0x08048418}, expr=8[32]}
Symbolic@0x22ecb30 insn@0x08048418[3]: invert({defs={0x08048418}, expr=8[32]}) = {defs={0x08048418}, expr=-9[32]}
Symbolic@0x22ecb30 insn@0x08048418[3]: readRegister(esp) = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048418[3]: invert({defs={0x08048418}, expr=0[1]}) = {defs={0x08048418}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048418[3]: addWithCarries({defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048418}, expr=-9[32]}, {defs={0x08048418}, expr=1[1]}) = {defs={0x08048410,0x08048418}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048418[3]: also returns: {defs={0x08048410,0x08048418}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(add[32] esp_0[32] -12[32])}, 0, 8) = {defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 1, 2) = {defs={0x08048410,0x08048418}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 0, 1) = {defs={0x08048410,0x08048418}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: xor_({defs={0x08048410,0x08048418}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048410,0x08048418}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 3, 4) = {defs={0x08048410,0x08048418}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 2, 3) = {defs={0x08048410,0x08048418}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: xor_({defs={0x08048410,0x08048418}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048410,0x08048418}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 5, 6) = {defs={0x08048410,0x08048418}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 4, 5) = {defs={0x08048410,0x08048418}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: xor_({defs={0x08048410,0x08048418}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048410,0x08048418}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 7, 8) = {defs={0x08048410,0x08048418}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 6, 7) = {defs={0x08048410,0x08048418}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: xor_({defs={0x08048410,0x08048418}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048410,0x08048418}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: xor_({defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: xor_({defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: xor_({defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: invert({defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048410,0x08048418}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
Symbolic@0x22ecb30 insn@0x08048418[3]: writeRegister(pf, {defs={0x08048410,0x08048418}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))})
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(add[32] esp_0[32] -12[32])}, 31, 32) = {defs={0x08048410,0x08048418}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: writeRegister(sf, {defs={0x08048410,0x08048418}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048418[3]: equalToZero({defs={0x08048410,0x08048418}, expr=(add[32] esp_0[32] -12[32])}) = {defs={0x08048410,0x08048418}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: writeRegister(zf, {defs={0x08048410,0x08048418}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 31, 32) = {defs={0x08048410,0x08048418}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 30, 31) = {defs={0x08048410,0x08048418}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: extract({defs={0x08048410,0x08048418}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 3, 4) = {defs={0x08048410,0x08048418}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048418[3]: invert({defs={0x08048410,0x08048418}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: writeRegister(af, {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048418[3]: invert({defs={0x08048410,0x08048418}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: writeRegister(cf, {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048418[3]: xor_({defs={0x08048410,0x08048418}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, {defs={0x08048410,0x08048418}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048418[3]: writeRegister(of, {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048418[3]: writeRegister(esp, {defs={0x08048410,0x08048418}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x08048418[3]: finishInstruction(sub    esp, 0x08)
registers:
  edx       = {defs={0x08048411}, expr=0x08048480[32]}
  esp       = {defs={0x08048410,0x08048418}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048418}, expr=0x0804841b[32]}
  pf        = {defs={0x08048410,0x08048418}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048410,0x08048418}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048410,0x08048418}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x804841b:and    esp, 0xf0<-0x10>
Symbolic@0x22ecb30 insn@0x0804841b[4]: startInstruction(and    esp, 0xf0<-0x10>)
Symbolic@0x22ecb30 insn@0x0804841b[4]: number_(32, 3) = {defs={0x0804841b}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x0804841b[4]: number_(32, 134513691) = {defs={0x0804841b}, expr=0x0804841b[32]}
Symbolic@0x22ecb30 insn@0x0804841b[4]: add({defs={0x0804841b}, expr=0x0804841b[32]}, {defs={0x0804841b}, expr=3[32]}) = {defs={0x0804841b}, expr=0x0804841e[32]}
Symbolic@0x22ecb30 insn@0x0804841b[4]: writeRegister(eip, {defs={0x0804841b}, expr=0x0804841e[32]})
Symbolic@0x22ecb30 insn@0x0804841b[4]: number_(32, 18446744073709551600) = {defs={0x0804841b}, expr=-16[32]}
Symbolic@0x22ecb30 insn@0x0804841b[4]: readRegister(esp) = {defs={0x08048410,0x08048418}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x0804841b[4]: and_({defs={0x08048410,0x08048418}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x0804841b}, expr=-16[32]}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}, 0, 8) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, 1, 2) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, 0, 1) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: xor_({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, 3, 4) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, 2, 3) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: xor_({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, 5, 6) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, 4, 5) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: xor_({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, 7, 8) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[8] 0[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, 6, 7) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: xor_({defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}, {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: xor_({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}, {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: xor_({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}, {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: xor_({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}, {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: invert({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])))}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: writeRegister(pf, {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))))})
Symbolic@0x22ecb30 insn@0x0804841b[4]: extract({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}, 31, 32) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: writeRegister(sf, {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))})
Symbolic@0x22ecb30 insn@0x0804841b[4]: equalToZero({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
Symbolic@0x22ecb30 insn@0x0804841b[4]: writeRegister(zf, {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))})
Symbolic@0x22ecb30 insn@0x0804841b[4]: writeRegister(esp, {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])})
Symbolic@0x22ecb30 insn@0x0804841b[4]: boolean_(0) = {defs={0x0804841b}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x0804841b[4]: writeRegister(of, {defs={0x0804841b}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x0804841b[4]: undefined_(1) = v16433[1]
Symbolic@0x22ecb30 insn@0x0804841b[4]: writeRegister(af, v16433[1])
Symbolic@0x22ecb30 insn@0x0804841b[4]: boolean_(0) = {defs={0x0804841b}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x0804841b[4]: writeRegister(cf, {defs={0x0804841b}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x0804841b[4]: finishInstruction(and    esp, 0xf0<-0x10>)
registers:
  edx       = {defs={0x08048411}, expr=0x08048480[32]}
  esp       = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}
  ebp       = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x0804841b}, expr=0x0804841e[32]}
  pf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))))}
  sf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
  zf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16433[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804841b}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804841b}, expr=0[1]}
memory:
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
Symbolic@0x22ecb30 insn@0x0804841e[5]: startInstruction(mov    DWORD PTR ss:[esp + 0x04], edx)
Symbolic@0x22ecb30 insn@0x0804841e[5]: number_(32, 4) = {defs={0x0804841e}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x0804841e[5]: number_(32, 134513694) = {defs={0x0804841e}, expr=0x0804841e[32]}
Symbolic@0x22ecb30 insn@0x0804841e[5]: add({defs={0x0804841e}, expr=0x0804841e[32]}, {defs={0x0804841e}, expr=4[32]}) = {defs={0x0804841e}, expr=0x08048422[32]}
Symbolic@0x22ecb30 insn@0x0804841e[5]: writeRegister(eip, {defs={0x0804841e}, expr=0x08048422[32]})
Symbolic@0x22ecb30 insn@0x0804841e[5]: readRegister(edx) = {defs={0x08048411}, expr=0x08048480[32]}
Symbolic@0x22ecb30 insn@0x0804841e[5]: readRegister(esp) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}
Symbolic@0x22ecb30 insn@0x0804841e[5]: number_(8, 4) = {defs={0x0804841e}, expr=4[8]}
Symbolic@0x22ecb30 insn@0x0804841e[5]: signExtend({defs={0x0804841e}, expr=4[8]}, 32) = {defs={0x0804841e}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x0804841e[5]: add({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}, {defs={0x0804841e}, expr=4[32]}) = {defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 4[32])}
Symbolic@0x22ecb30 insn@0x0804841e[5]: boolean_(1) = {defs={0x0804841e}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804841e[5]: writeMemory(ss, {defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 4[32])}, {defs={0x08048411}, expr=0x08048480[32]}, {defs={0x0804841e}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804841e[5]: finishInstruction(mov    DWORD PTR ss:[esp + 0x04], edx)
registers:
  edx       = {defs={0x08048411}, expr=0x08048480[32]}
  esp       = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}
  ebp       = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x0804841e}, expr=0x08048422[32]}
  pf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))))}
  sf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
  zf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16433[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804841b}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804841b}, expr=0[1]}
memory:
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 7[32])} value={defs={0x08048411}, expr=8[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 6[32])} value={defs={0x08048411}, expr=4[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 5[32])} value={defs={0x08048411}, expr=-124[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 4[32])} value={defs={0x08048411}, expr=-128[8]}
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
Symbolic@0x22ecb30 insn@0x08048422[6]: startInstruction(mov    DWORD PTR ss:[esp], 0x0000000a)
Symbolic@0x22ecb30 insn@0x08048422[6]: number_(32, 7) = {defs={0x08048422}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x08048422[6]: number_(32, 134513698) = {defs={0x08048422}, expr=0x08048422[32]}
Symbolic@0x22ecb30 insn@0x08048422[6]: add({defs={0x08048422}, expr=0x08048422[32]}, {defs={0x08048422}, expr=7[32]}) = {defs={0x08048422}, expr=0x08048429[32]}
Symbolic@0x22ecb30 insn@0x08048422[6]: writeRegister(eip, {defs={0x08048422}, expr=0x08048429[32]})
Symbolic@0x22ecb30 insn@0x08048422[6]: number_(32, 10) = {defs={0x08048422}, expr=10[32]}
Symbolic@0x22ecb30 insn@0x08048422[6]: readRegister(esp) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}
Symbolic@0x22ecb30 insn@0x08048422[6]: boolean_(1) = {defs={0x08048422}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048422[6]: writeMemory(ss, {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}, {defs={0x08048422}, expr=10[32]}, {defs={0x08048422}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048422[6]: finishInstruction(mov    DWORD PTR ss:[esp], 0x0000000a)
registers:
  edx       = {defs={0x08048411}, expr=0x08048480[32]}
  esp       = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}
  ebp       = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048422}, expr=0x08048429[32]}
  pf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))))}
  sf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
  zf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16433[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804841b}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804841b}, expr=0[1]}
memory:
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 3[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 2[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 1[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])} value={defs={0x08048422}, expr=10[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 7[32])} value={defs={0x08048411}, expr=8[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 6[32])} value={defs={0x08048411}, expr=4[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 5[32])} value={defs={0x08048411}, expr=-124[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 4[32])} value={defs={0x08048411}, expr=-128[8]}
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048429:call   0x080482f0<signal@plt>
Symbolic@0x22ecb30 insn@0x08048429[7]: startInstruction(call   0x080482f0<signal@plt>)
Symbolic@0x22ecb30 insn@0x08048429[7]: number_(32, 5) = {defs={0x08048429}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048429[7]: number_(32, 134513705) = {defs={0x08048429}, expr=0x08048429[32]}
Symbolic@0x22ecb30 insn@0x08048429[7]: add({defs={0x08048429}, expr=0x08048429[32]}, {defs={0x08048429}, expr=5[32]}) = {defs={0x08048429}, expr=0x0804842e[32]}
Symbolic@0x22ecb30 insn@0x08048429[7]: writeRegister(eip, {defs={0x08048429}, expr=0x0804842e[32]})
Symbolic@0x22ecb30 insn@0x08048429[7]: readRegister(esp) = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}
Symbolic@0x22ecb30 insn@0x08048429[7]: number_(32, 18446744073709551612) = {defs={0x08048429}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048429[7]: add({defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])}, {defs={0x08048429}, expr=-4[32]}) = {defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) -4[32])}
Symbolic@0x22ecb30 insn@0x08048429[7]: boolean_(1) = {defs={0x08048429}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048429[7]: readRegister(eip) = {defs={0x08048429}, expr=0x0804842e[32]}
Symbolic@0x22ecb30 insn@0x08048429[7]: writeMemory(ss, {defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) -4[32])}, {defs={0x08048429}, expr=0x0804842e[32]}, {defs={0x08048429}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048429[7]: number_(32, 134513392) = {defs={0x08048429}, expr=0x080482f0[32]}
Symbolic@0x22ecb30 insn@0x08048429[7]: filterCallTarget({defs={0x08048429}, expr=0x080482f0[32]}) = {defs={0x08048429}, expr=0x080482f0[32]}
Symbolic@0x22ecb30 insn@0x08048429[7]: writeRegister(eip, {defs={0x08048429}, expr=0x080482f0[32]})
Symbolic@0x22ecb30 insn@0x08048429[7]: writeRegister(esp, {defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) -4[32])})
Symbolic@0x22ecb30 insn@0x08048429[7]: finishInstruction(call   0x080482f0<signal@plt>)
registers:
  edx       = {defs={0x08048411}, expr=0x08048480[32]}
  esp       = {defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) -4[32])}
  ebp       = {defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048429}, expr=0x080482f0[32]}
  pf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))))}
  sf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
  zf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16433[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804841b}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804841b}, expr=0[1]}
memory:
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) -1[32])} value={defs={0x08048429}, expr=8[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) -2[32])} value={defs={0x08048429}, expr=4[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) -3[32])} value={defs={0x08048429}, expr=-124[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) -4[32])} value={defs={0x08048429}, expr=46[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 3[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 2[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 1[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(bv-and[32] (add[32] esp_0[32] -12[32]) -16[32])} value={defs={0x08048422}, expr=10[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 7[32])} value={defs={0x08048411}, expr=8[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 6[32])} value={defs={0x08048411}, expr=4[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 5[32])} value={defs={0x08048411}, expr=-124[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] esp_0[32] -12[32]) -16[32]) 4[32])} value={defs={0x08048411}, expr=-128[8]}
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  edx       = {defs={0x08048411}, expr=0x08048480[32]}
  esp       = {defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) -4[32])}
  ebp       = {defs={0x08048410}, expr=frame_pointer[32]}
  eip       = {defs={0x08048429}, expr=0x080482f0[32]}
  pf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32])) (extract[1] 1[32] 2[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32])) (extract[1] 2[32] 3[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32])) (extract[1] 3[32] 4[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32])) (extract[1] 4[32] 5[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32])) (extract[1] 5[32] 6[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32])) (extract[1] 6[32] 7[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32])) (extract[1] 7[32] 8[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]))))}
  sf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]))}
  zf        = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16433[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804841b}, expr=0[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804841b}, expr=0[1]}
memory:
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) -1[32])} value={defs={0x08048429}, expr=8[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) -2[32])} value={defs={0x08048429}, expr=4[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) -3[32])} value={defs={0x08048429}, expr=-124[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) -4[32])} value={defs={0x08048429}, expr=46[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) 3[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) 2[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) 1[32])} value={defs={0x08048422}, expr=0[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32])} value={defs={0x08048422}, expr=10[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) 7[32])} value={defs={0x08048411}, expr=8[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) 6[32])} value={defs={0x08048411}, expr=4[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) 5[32])} value={defs={0x08048411}, expr=-124[8]}
  addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] frame_pointer[32] -8[32]) -16[32]) 4[32])} value={defs={0x08048411}, expr=-128[8]}
  addr={defs={0x08048410}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048410}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048410}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x08048429[7]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x804842e:mov    esp, ebp
Symbolic@0x22ecb30 insn@0x0804842e[0]: startInstruction(mov    esp, ebp)
Symbolic@0x22ecb30 insn@0x0804842e[0]: number_(32, 2) = {defs={0x0804842e}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x0804842e[0]: number_(32, 134513710) = {defs={0x0804842e}, expr=0x0804842e[32]}
Symbolic@0x22ecb30 insn@0x0804842e[0]: add({defs={0x0804842e}, expr=0x0804842e[32]}, {defs={0x0804842e}, expr=2[32]}) = {defs={0x0804842e}, expr=0x08048430[32]}
Symbolic@0x22ecb30 insn@0x0804842e[0]: writeRegister(eip, {defs={0x0804842e}, expr=0x08048430[32]})
Symbolic@0x22ecb30 insn@0x0804842e[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x0804842e[0]: writeRegister(esp, ebp_0[32])
Symbolic@0x22ecb30 insn@0x0804842e[0]: finishInstruction(mov    esp, ebp)
registers:
  esp    = ebp_0[32]
  eip    = {defs={0x0804842e}, expr=0x08048430[32]}
memory:

0x8048430:xor    eax, eax
Symbolic@0x22ecb30 insn@0x08048430[1]: startInstruction(xor    eax, eax)
Symbolic@0x22ecb30 insn@0x08048430[1]: number_(32, 2) = {defs={0x08048430}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048430[1]: number_(32, 134513712) = {defs={0x08048430}, expr=0x08048430[32]}
Symbolic@0x22ecb30 insn@0x08048430[1]: add({defs={0x08048430}, expr=0x08048430[32]}, {defs={0x08048430}, expr=2[32]}) = {defs={0x08048430}, expr=0x08048432[32]}
Symbolic@0x22ecb30 insn@0x08048430[1]: writeRegister(eip, {defs={0x08048430}, expr=0x08048432[32]})
Symbolic@0x22ecb30 insn@0x08048430[1]: readRegister(eax) = eax_0[32]
Symbolic@0x22ecb30 insn@0x08048430[1]: readRegister(eax) = eax_0[32]
Symbolic@0x22ecb30 insn@0x08048430[1]: xor_(eax_0[32], eax_0[32]) = {defs={0x08048430}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[32]}, 0, 8) = {defs={0x08048430}, expr=0[8]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[8]}, 1, 2) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[8]}, 0, 1) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: xor_({defs={0x08048430}, expr=0[1]}, {defs={0x08048430}, expr=0[1]}) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[8]}, 3, 4) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[8]}, 2, 3) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: xor_({defs={0x08048430}, expr=0[1]}, {defs={0x08048430}, expr=0[1]}) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[8]}, 5, 6) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[8]}, 4, 5) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: xor_({defs={0x08048430}, expr=0[1]}, {defs={0x08048430}, expr=0[1]}) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[8]}, 7, 8) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[8]}, 6, 7) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: xor_({defs={0x08048430}, expr=0[1]}, {defs={0x08048430}, expr=0[1]}) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: xor_({defs={0x08048430}, expr=0[1]}, {defs={0x08048430}, expr=0[1]}) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: xor_({defs={0x08048430}, expr=0[1]}, {defs={0x08048430}, expr=0[1]}) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: xor_({defs={0x08048430}, expr=0[1]}, {defs={0x08048430}, expr=0[1]}) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: invert({defs={0x08048430}, expr=0[1]}) = {defs={0x08048430}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: writeRegister(pf, {defs={0x08048430}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048430[1]: extract({defs={0x08048430}, expr=0[32]}, 31, 32) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: writeRegister(sf, {defs={0x08048430}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048430[1]: equalToZero({defs={0x08048430}, expr=0[32]}) = {defs={0x08048430}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: writeRegister(zf, {defs={0x08048430}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048430[1]: writeRegister(eax, {defs={0x08048430}, expr=0[32]})
Symbolic@0x22ecb30 insn@0x08048430[1]: boolean_(0) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: writeRegister(of, {defs={0x08048430}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048430[1]: undefined_(1) = v16505[1]
Symbolic@0x22ecb30 insn@0x08048430[1]: writeRegister(af, v16505[1])
Symbolic@0x22ecb30 insn@0x08048430[1]: boolean_(0) = {defs={0x08048430}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048430[1]: writeRegister(cf, {defs={0x08048430}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048430[1]: finishInstruction(xor    eax, eax)
registers:
  eax       = {defs={0x08048430}, expr=0[32]}
  esp       = ebp_0[32]
  eip       = {defs={0x08048430}, expr=0x08048432[32]}
  pf        = {defs={0x08048430}, expr=1[1]}
  sf        = {defs={0x08048430}, expr=0[1]}
  zf        = {defs={0x08048430}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048430}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16505[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048430}, expr=0[1]}
memory:

0x8048432:pop    ebp
Symbolic@0x22ecb30 insn@0x08048432[2]: startInstruction(pop    ebp)
Symbolic@0x22ecb30 insn@0x08048432[2]: number_(32, 1) = {defs={0x08048432}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048432[2]: number_(32, 134513714) = {defs={0x08048432}, expr=0x08048432[32]}
Symbolic@0x22ecb30 insn@0x08048432[2]: add({defs={0x08048432}, expr=0x08048432[32]}, {defs={0x08048432}, expr=1[32]}) = {defs={0x08048432}, expr=0x08048433[32]}
Symbolic@0x22ecb30 insn@0x08048432[2]: writeRegister(eip, {defs={0x08048432}, expr=0x08048433[32]})
Symbolic@0x22ecb30 insn@0x08048432[2]: readRegister(esp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048432[2]: number_(32, 4) = {defs={0x08048432}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048432[2]: add(ebp_0[32], {defs={0x08048432}, expr=4[32]}) = {defs={0x08048432}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048432[2]: writeRegister(esp, {defs={0x08048432}, expr=(add[32] ebp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x08048432[2]: boolean_(1) = {defs={0x08048432}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048432[2]: readMemory(ss, ebp_0[32], {defs={0x08048432}, expr=1[1]}, 32) = v16506[32]
Symbolic@0x22ecb30 insn@0x08048432[2]: writeRegister(ebp, v16506[32])
Symbolic@0x22ecb30 insn@0x08048432[2]: finishInstruction(pop    ebp)
registers:
  eax       = {defs={0x08048430}, expr=0[32]}
  esp       = {defs={0x08048432}, expr=(add[32] ebp_0[32] 4[32])}
  ebp       = v16506[32]
  eip       = {defs={0x08048432}, expr=0x08048433[32]}
  pf        = {defs={0x08048430}, expr=1[1]}
  sf        = {defs={0x08048430}, expr=0[1]}
  zf        = {defs={0x08048430}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048430}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16505[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048430}, expr=0[1]}
memory:
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16506[32])
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16506[32])
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16506[32])
  addr={defs={0x08048432}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16506[32])

0x8048433:ret    
Symbolic@0x22ecb30 insn@0x08048433[3]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x08048433[3]: number_(32, 1) = {defs={0x08048433}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048433[3]: number_(32, 134513715) = {defs={0x08048433}, expr=0x08048433[32]}
Symbolic@0x22ecb30 insn@0x08048433[3]: add({defs={0x08048433}, expr=0x08048433[32]}, {defs={0x08048433}, expr=1[32]}) = {defs={0x08048433}, expr=0x08048434[32]}
Symbolic@0x22ecb30 insn@0x08048433[3]: writeRegister(eip, {defs={0x08048433}, expr=0x08048434[32]})
Symbolic@0x22ecb30 insn@0x08048433[3]: number_(32, 0) = {defs={0x08048433}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048433[3]: readRegister(esp) = {defs={0x08048432}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048433[3]: number_(32, 4) = {defs={0x08048433}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048433[3]: add({defs={0x08048433}, expr=4[32]}, {defs={0x08048433}, expr=0[32]}) = {defs={0x08048433}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048433[3]: add({defs={0x08048432}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x08048433}, expr=4[32]}) = {defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x08048433[3]: boolean_(1) = {defs={0x08048433}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048433[3]: readMemory(ss, {defs={0x08048432}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x08048433}, expr=1[1]}, 32) = v16511[32]
Symbolic@0x22ecb30 insn@0x08048433[3]: filterReturnTarget(v16511[32]) = v16511[32]
Symbolic@0x22ecb30 insn@0x08048433[3]: writeRegister(eip, v16511[32])
Symbolic@0x22ecb30 insn@0x08048433[3]: writeRegister(esp, {defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x08048433[3]: finishInstruction(ret)
registers:
  eax       = {defs={0x08048430}, expr=0[32]}
  esp       = {defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 8[32])}
  ebp       = v16506[32]
  eip       = v16511[32]
  pf        = {defs={0x08048430}, expr=1[1]}
  sf        = {defs={0x08048430}, expr=0[1]}
  zf        = {defs={0x08048430}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048430}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16505[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048430}, expr=0[1]}
memory:
  addr={defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v16511[32])
  addr={defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v16511[32])
  addr={defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v16511[32])
  addr={defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v16511[32])
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16506[32])
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16506[32])
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16506[32])
  addr={defs={0x08048432}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16506[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = {defs={0x08048430}, expr=0[32]}
  esp       = {defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 8[32])}
  ebp       = v16506[32]
  eip       = v16511[32]
  pf        = {defs={0x08048430}, expr=1[1]}
  sf        = {defs={0x08048430}, expr=0[1]}
  zf        = {defs={0x08048430}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048430}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v16505[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048430}, expr=0[1]}
memory:
  addr={defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v16511[32])
  addr={defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v16511[32])
  addr={defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v16511[32])
  addr={defs={0x08048432,0x08048433}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v16511[32])
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16506[32])
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16506[32])
  addr={defs={0x08048432}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16506[32])
  addr={defs={0x08048432}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16506[32])
Symbolic@0x22ecb30 insn@0x08048433[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048440:push   ebp
Symbolic@0x22ecb30 insn@0x08048440[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x08048440[0]: number_(32, 1) = {defs={0x08048440}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048440[0]: number_(32, 134513728) = {defs={0x08048440}, expr=0x08048440[32]}
Symbolic@0x22ecb30 insn@0x08048440[0]: add({defs={0x08048440}, expr=0x08048440[32]}, {defs={0x08048440}, expr=1[32]}) = {defs={0x08048440}, expr=0x08048441[32]}
Symbolic@0x22ecb30 insn@0x08048440[0]: writeRegister(eip, {defs={0x08048440}, expr=0x08048441[32]})
Symbolic@0x22ecb30 insn@0x08048440[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048440[0]: number_(32, 18446744073709551612) = {defs={0x08048440}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048440[0]: add(esp_0[32], {defs={0x08048440}, expr=-4[32]}) = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048440[0]: boolean_(1) = {defs={0x08048440}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048440[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048440[0]: writeMemory(ss, {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x08048440}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048440[0]: writeRegister(esp, {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048440[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048440}, expr=0x08048441[32]}
memory:
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048441:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x08048441[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x08048441[1]: number_(32, 2) = {defs={0x08048441}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048441[1]: number_(32, 134513729) = {defs={0x08048441}, expr=0x08048441[32]}
Symbolic@0x22ecb30 insn@0x08048441[1]: add({defs={0x08048441}, expr=0x08048441[32]}, {defs={0x08048441}, expr=2[32]}) = {defs={0x08048441}, expr=0x08048443[32]}
Symbolic@0x22ecb30 insn@0x08048441[1]: writeRegister(eip, {defs={0x08048441}, expr=0x08048443[32]})
Symbolic@0x22ecb30 insn@0x08048441[1]: readRegister(esp) = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048441[1]: writeRegister(ebp, {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048441[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048441}, expr=0x08048443[32]}
memory:
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048443:sub    esp, 0x08
Symbolic@0x22ecb30 insn@0x08048443[2]: startInstruction(sub    esp, 0x08)
Symbolic@0x22ecb30 insn@0x08048443[2]: number_(32, 3) = {defs={0x08048443}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048443[2]: number_(32, 134513731) = {defs={0x08048443}, expr=0x08048443[32]}
Symbolic@0x22ecb30 insn@0x08048443[2]: add({defs={0x08048443}, expr=0x08048443[32]}, {defs={0x08048443}, expr=3[32]}) = {defs={0x08048443}, expr=0x08048446[32]}
Symbolic@0x22ecb30 insn@0x08048443[2]: writeRegister(eip, {defs={0x08048443}, expr=0x08048446[32]})
Symbolic@0x22ecb30 insn@0x08048443[2]: boolean_(0) = {defs={0x08048443}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048443[2]: number_(32, 8) = {defs={0x08048443}, expr=8[32]}
Symbolic@0x22ecb30 insn@0x08048443[2]: invert({defs={0x08048443}, expr=8[32]}) = {defs={0x08048443}, expr=-9[32]}
Symbolic@0x22ecb30 insn@0x08048443[2]: readRegister(esp) = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048443[2]: invert({defs={0x08048443}, expr=0[1]}) = {defs={0x08048443}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048443[2]: addWithCarries({defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048443}, expr=-9[32]}, {defs={0x08048443}, expr=1[1]}) = {defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048443[2]: also returns: {defs={0x08048440,0x08048443}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}, 0, 8) = {defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 1, 2) = {defs={0x08048440,0x08048443}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 0, 1) = {defs={0x08048440,0x08048443}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: xor_({defs={0x08048440,0x08048443}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048440,0x08048443}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 3, 4) = {defs={0x08048440,0x08048443}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 2, 3) = {defs={0x08048440,0x08048443}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: xor_({defs={0x08048440,0x08048443}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048440,0x08048443}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 5, 6) = {defs={0x08048440,0x08048443}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 4, 5) = {defs={0x08048440,0x08048443}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: xor_({defs={0x08048440,0x08048443}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048440,0x08048443}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 7, 8) = {defs={0x08048440,0x08048443}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 6, 7) = {defs={0x08048440,0x08048443}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: xor_({defs={0x08048440,0x08048443}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048440,0x08048443}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: xor_({defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: xor_({defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: xor_({defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: invert({defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
Symbolic@0x22ecb30 insn@0x08048443[2]: writeRegister(pf, {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))})
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}, 31, 32) = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: writeRegister(sf, {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048443[2]: equalToZero({defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}) = {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: writeRegister(zf, {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 31, 32) = {defs={0x08048440,0x08048443}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 30, 31) = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: extract({defs={0x08048440,0x08048443}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 3, 4) = {defs={0x08048440,0x08048443}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048443[2]: invert({defs={0x08048440,0x08048443}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: writeRegister(af, {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048443[2]: invert({defs={0x08048440,0x08048443}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: writeRegister(cf, {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048443[2]: xor_({defs={0x08048440,0x08048443}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048443[2]: writeRegister(of, {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048443[2]: writeRegister(esp, {defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x08048443[2]: finishInstruction(sub    esp, 0x08)
registers:
  esp       = {defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048443}, expr=0x08048446[32]}
  pf        = {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
Symbolic@0x22ecb30 insn@0x08048446[3]: startInstruction(mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>)
Symbolic@0x22ecb30 insn@0x08048446[3]: number_(32, 7) = {defs={0x08048446}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x08048446[3]: number_(32, 134513734) = {defs={0x08048446}, expr=0x08048446[32]}
Symbolic@0x22ecb30 insn@0x08048446[3]: add({defs={0x08048446}, expr=0x08048446[32]}, {defs={0x08048446}, expr=7[32]}) = {defs={0x08048446}, expr=0x0804844d[32]}
Symbolic@0x22ecb30 insn@0x08048446[3]: writeRegister(eip, {defs={0x08048446}, expr=0x0804844d[32]})
Symbolic@0x22ecb30 insn@0x08048446[3]: number_(32, 134514132) = {defs={0x08048446}, expr=0x080485d4[32]}
Symbolic@0x22ecb30 insn@0x08048446[3]: readRegister(esp) = {defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048446[3]: boolean_(1) = {defs={0x08048446}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048446[3]: writeMemory(ss, {defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x08048446}, expr=0x080485d4[32]}, {defs={0x08048446}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048446[3]: finishInstruction(mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>)
registers:
  esp       = {defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048446}, expr=0x0804844d[32]}
  pf        = {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] esp_0[32] -9[32])} value={defs={0x08048446}, expr=8[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] esp_0[32] -10[32])} value={defs={0x08048446}, expr=4[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] esp_0[32] -11[32])} value={defs={0x08048446}, expr=-123[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] esp_0[32] -12[32])} value={defs={0x08048446}, expr=-44[8]}
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x804844d:call   0x08048300<puts@plt>
Symbolic@0x22ecb30 insn@0x0804844d[4]: startInstruction(call   0x08048300<puts@plt>)
Symbolic@0x22ecb30 insn@0x0804844d[4]: number_(32, 5) = {defs={0x0804844d}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804844d[4]: number_(32, 134513741) = {defs={0x0804844d}, expr=0x0804844d[32]}
Symbolic@0x22ecb30 insn@0x0804844d[4]: add({defs={0x0804844d}, expr=0x0804844d[32]}, {defs={0x0804844d}, expr=5[32]}) = {defs={0x0804844d}, expr=0x08048452[32]}
Symbolic@0x22ecb30 insn@0x0804844d[4]: writeRegister(eip, {defs={0x0804844d}, expr=0x08048452[32]})
Symbolic@0x22ecb30 insn@0x0804844d[4]: readRegister(esp) = {defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x0804844d[4]: number_(32, 18446744073709551612) = {defs={0x0804844d}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x0804844d[4]: add({defs={0x08048440,0x08048443}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x0804844d}, expr=-4[32]}) = {defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x0804844d[4]: boolean_(1) = {defs={0x0804844d}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804844d[4]: readRegister(eip) = {defs={0x0804844d}, expr=0x08048452[32]}
Symbolic@0x22ecb30 insn@0x0804844d[4]: writeMemory(ss, {defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] esp_0[32] -16[32])}, {defs={0x0804844d}, expr=0x08048452[32]}, {defs={0x0804844d}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804844d[4]: number_(32, 134513408) = {defs={0x0804844d}, expr=0x08048300[32]}
Symbolic@0x22ecb30 insn@0x0804844d[4]: filterCallTarget({defs={0x0804844d}, expr=0x08048300[32]}) = {defs={0x0804844d}, expr=0x08048300[32]}
Symbolic@0x22ecb30 insn@0x0804844d[4]: writeRegister(eip, {defs={0x0804844d}, expr=0x08048300[32]})
Symbolic@0x22ecb30 insn@0x0804844d[4]: writeRegister(esp, {defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] esp_0[32] -16[32])})
Symbolic@0x22ecb30 insn@0x0804844d[4]: finishInstruction(call   0x08048300<puts@plt>)
registers:
  esp       = {defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] esp_0[32] -16[32])}
  ebp       = {defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x0804844d}, expr=0x08048300[32]}
  pf        = {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] esp_0[32] -13[32])} value={defs={0x0804844d}, expr=8[8]}
  addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] esp_0[32] -14[32])} value={defs={0x0804844d}, expr=4[8]}
  addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] esp_0[32] -15[32])} value={defs={0x0804844d}, expr=-124[8]}
  addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] esp_0[32] -16[32])} value={defs={0x0804844d}, expr=82[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] esp_0[32] -9[32])} value={defs={0x08048446}, expr=8[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] esp_0[32] -10[32])} value={defs={0x08048446}, expr=4[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] esp_0[32] -11[32])} value={defs={0x08048446}, expr=-123[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] esp_0[32] -12[32])} value={defs={0x08048446}, expr=-44[8]}
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = {defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] frame_pointer[32] -12[32])}
  ebp       = {defs={0x08048440}, expr=frame_pointer[32]}
  eip       = {defs={0x0804844d}, expr=0x08048300[32]}
  pf        = {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 1[32] 2[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 2[32] 3[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 3[32] 4[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 4[32] 5[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 5[32] 6[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 6[32] 7[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 7[32] 8[32] (add[32] frame_pointer[32] -8[32]))))}
  sf        = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] frame_pointer[32] -8[32]))}
  zf        = {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] frame_pointer[32] -8[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] frame_pointer[32] -9[32])} value={defs={0x0804844d}, expr=8[8]}
  addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] frame_pointer[32] -10[32])} value={defs={0x0804844d}, expr=4[8]}
  addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] frame_pointer[32] -11[32])} value={defs={0x0804844d}, expr=-124[8]}
  addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] frame_pointer[32] -12[32])} value={defs={0x0804844d}, expr=82[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] frame_pointer[32] -5[32])} value={defs={0x08048446}, expr=8[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] frame_pointer[32] -6[32])} value={defs={0x08048446}, expr=4[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] frame_pointer[32] -7[32])} value={defs={0x08048446}, expr=-123[8]}
  addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] frame_pointer[32] -8[32])} value={defs={0x08048446}, expr=-44[8]}
  addr={defs={0x08048440}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048440}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048440}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x0804844d[4]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048452:mov    esp, ebp
Symbolic@0x22ecb30 insn@0x08048452[0]: startInstruction(mov    esp, ebp)
Symbolic@0x22ecb30 insn@0x08048452[0]: number_(32, 2) = {defs={0x08048452}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048452[0]: number_(32, 134513746) = {defs={0x08048452}, expr=0x08048452[32]}
Symbolic@0x22ecb30 insn@0x08048452[0]: add({defs={0x08048452}, expr=0x08048452[32]}, {defs={0x08048452}, expr=2[32]}) = {defs={0x08048452}, expr=0x08048454[32]}
Symbolic@0x22ecb30 insn@0x08048452[0]: writeRegister(eip, {defs={0x08048452}, expr=0x08048454[32]})
Symbolic@0x22ecb30 insn@0x08048452[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048452[0]: writeRegister(esp, ebp_0[32])
Symbolic@0x22ecb30 insn@0x08048452[0]: finishInstruction(mov    esp, ebp)
registers:
  esp    = ebp_0[32]
  eip    = {defs={0x08048452}, expr=0x08048454[32]}
memory:

0x8048454:pop    ebp
Symbolic@0x22ecb30 insn@0x08048454[1]: startInstruction(pop    ebp)
Symbolic@0x22ecb30 insn@0x08048454[1]: number_(32, 1) = {defs={0x08048454}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048454[1]: number_(32, 134513748) = {defs={0x08048454}, expr=0x08048454[32]}
Symbolic@0x22ecb30 insn@0x08048454[1]: add({defs={0x08048454}, expr=0x08048454[32]}, {defs={0x08048454}, expr=1[32]}) = {defs={0x08048454}, expr=0x08048455[32]}
Symbolic@0x22ecb30 insn@0x08048454[1]: writeRegister(eip, {defs={0x08048454}, expr=0x08048455[32]})
Symbolic@0x22ecb30 insn@0x08048454[1]: readRegister(esp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048454[1]: number_(32, 4) = {defs={0x08048454}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048454[1]: add(ebp_0[32], {defs={0x08048454}, expr=4[32]}) = {defs={0x08048454}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048454[1]: writeRegister(esp, {defs={0x08048454}, expr=(add[32] ebp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x08048454[1]: boolean_(1) = {defs={0x08048454}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048454[1]: readMemory(ss, ebp_0[32], {defs={0x08048454}, expr=1[1]}, 32) = v16658[32]
Symbolic@0x22ecb30 insn@0x08048454[1]: writeRegister(ebp, v16658[32])
Symbolic@0x22ecb30 insn@0x08048454[1]: finishInstruction(pop    ebp)
registers:
  esp    = {defs={0x08048454}, expr=(add[32] ebp_0[32] 4[32])}
  ebp    = v16658[32]
  eip    = {defs={0x08048454}, expr=0x08048455[32]}
memory:
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16658[32])
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16658[32])
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16658[32])
  addr={defs={0x08048454}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16658[32])

0x8048455:ret    
Symbolic@0x22ecb30 insn@0x08048455[2]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x08048455[2]: number_(32, 1) = {defs={0x08048455}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048455[2]: number_(32, 134513749) = {defs={0x08048455}, expr=0x08048455[32]}
Symbolic@0x22ecb30 insn@0x08048455[2]: add({defs={0x08048455}, expr=0x08048455[32]}, {defs={0x08048455}, expr=1[32]}) = {defs={0x08048455}, expr=0x08048456[32]}
Symbolic@0x22ecb30 insn@0x08048455[2]: writeRegister(eip, {defs={0x08048455}, expr=0x08048456[32]})
Symbolic@0x22ecb30 insn@0x08048455[2]: number_(32, 0) = {defs={0x08048455}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048455[2]: readRegister(esp) = {defs={0x08048454}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x08048455[2]: number_(32, 4) = {defs={0x08048455}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048455[2]: add({defs={0x08048455}, expr=4[32]}, {defs={0x08048455}, expr=0[32]}) = {defs={0x08048455}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048455[2]: add({defs={0x08048454}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x08048455}, expr=4[32]}) = {defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x08048455[2]: boolean_(1) = {defs={0x08048455}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048455[2]: readMemory(ss, {defs={0x08048454}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x08048455}, expr=1[1]}, 32) = v16663[32]
Symbolic@0x22ecb30 insn@0x08048455[2]: filterReturnTarget(v16663[32]) = v16663[32]
Symbolic@0x22ecb30 insn@0x08048455[2]: writeRegister(eip, v16663[32])
Symbolic@0x22ecb30 insn@0x08048455[2]: writeRegister(esp, {defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x08048455[2]: finishInstruction(ret)
registers:
  esp    = {defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v16658[32]
  eip    = v16663[32]
memory:
  addr={defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v16663[32])
  addr={defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v16663[32])
  addr={defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v16663[32])
  addr={defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v16663[32])
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16658[32])
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16658[32])
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16658[32])
  addr={defs={0x08048454}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16658[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v16658[32]
  eip    = v16663[32]
memory:
  addr={defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v16663[32])
  addr={defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v16663[32])
  addr={defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v16663[32])
  addr={defs={0x08048454,0x08048455}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v16663[32])
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v16658[32])
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v16658[32])
  addr={defs={0x08048454}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v16658[32])
  addr={defs={0x08048454}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v16658[32])
Symbolic@0x22ecb30 insn@0x08048455[2]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048460:push   ebp
Symbolic@0x22ecb30 insn@0x08048460[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x08048460[0]: number_(32, 1) = {defs={0x08048460}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048460[0]: number_(32, 134513760) = {defs={0x08048460}, expr=0x08048460[32]}
Symbolic@0x22ecb30 insn@0x08048460[0]: add({defs={0x08048460}, expr=0x08048460[32]}, {defs={0x08048460}, expr=1[32]}) = {defs={0x08048460}, expr=0x08048461[32]}
Symbolic@0x22ecb30 insn@0x08048460[0]: writeRegister(eip, {defs={0x08048460}, expr=0x08048461[32]})
Symbolic@0x22ecb30 insn@0x08048460[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048460[0]: number_(32, 18446744073709551612) = {defs={0x08048460}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048460[0]: add(esp_0[32], {defs={0x08048460}, expr=-4[32]}) = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048460[0]: boolean_(1) = {defs={0x08048460}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048460[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048460[0]: writeMemory(ss, {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x08048460}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048460[0]: writeRegister(esp, {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048460[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048460}, expr=0x08048461[32]}
memory:
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048461:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x08048461[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x08048461[1]: number_(32, 2) = {defs={0x08048461}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048461[1]: number_(32, 134513761) = {defs={0x08048461}, expr=0x08048461[32]}
Symbolic@0x22ecb30 insn@0x08048461[1]: add({defs={0x08048461}, expr=0x08048461[32]}, {defs={0x08048461}, expr=2[32]}) = {defs={0x08048461}, expr=0x08048463[32]}
Symbolic@0x22ecb30 insn@0x08048461[1]: writeRegister(eip, {defs={0x08048461}, expr=0x08048463[32]})
Symbolic@0x22ecb30 insn@0x08048461[1]: readRegister(esp) = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048461[1]: writeRegister(ebp, {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048461[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048461}, expr=0x08048463[32]}
memory:
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048463:sub    esp, 0x08
Symbolic@0x22ecb30 insn@0x08048463[2]: startInstruction(sub    esp, 0x08)
Symbolic@0x22ecb30 insn@0x08048463[2]: number_(32, 3) = {defs={0x08048463}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048463[2]: number_(32, 134513763) = {defs={0x08048463}, expr=0x08048463[32]}
Symbolic@0x22ecb30 insn@0x08048463[2]: add({defs={0x08048463}, expr=0x08048463[32]}, {defs={0x08048463}, expr=3[32]}) = {defs={0x08048463}, expr=0x08048466[32]}
Symbolic@0x22ecb30 insn@0x08048463[2]: writeRegister(eip, {defs={0x08048463}, expr=0x08048466[32]})
Symbolic@0x22ecb30 insn@0x08048463[2]: boolean_(0) = {defs={0x08048463}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048463[2]: number_(32, 8) = {defs={0x08048463}, expr=8[32]}
Symbolic@0x22ecb30 insn@0x08048463[2]: invert({defs={0x08048463}, expr=8[32]}) = {defs={0x08048463}, expr=-9[32]}
Symbolic@0x22ecb30 insn@0x08048463[2]: readRegister(esp) = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048463[2]: invert({defs={0x08048463}, expr=0[1]}) = {defs={0x08048463}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048463[2]: addWithCarries({defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048463}, expr=-9[32]}, {defs={0x08048463}, expr=1[1]}) = {defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048463[2]: also returns: {defs={0x08048460,0x08048463}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}, 0, 8) = {defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 1, 2) = {defs={0x08048460,0x08048463}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 0, 1) = {defs={0x08048460,0x08048463}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: xor_({defs={0x08048460,0x08048463}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048460,0x08048463}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 3, 4) = {defs={0x08048460,0x08048463}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 2, 3) = {defs={0x08048460,0x08048463}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: xor_({defs={0x08048460,0x08048463}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048460,0x08048463}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 5, 6) = {defs={0x08048460,0x08048463}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 4, 5) = {defs={0x08048460,0x08048463}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: xor_({defs={0x08048460,0x08048463}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048460,0x08048463}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 7, 8) = {defs={0x08048460,0x08048463}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 6, 7) = {defs={0x08048460,0x08048463}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: xor_({defs={0x08048460,0x08048463}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048460,0x08048463}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: xor_({defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: xor_({defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: xor_({defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: invert({defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
Symbolic@0x22ecb30 insn@0x08048463[2]: writeRegister(pf, {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))})
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}, 31, 32) = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: writeRegister(sf, {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048463[2]: equalToZero({defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}) = {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: writeRegister(zf, {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 31, 32) = {defs={0x08048460,0x08048463}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 30, 31) = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: extract({defs={0x08048460,0x08048463}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 3, 4) = {defs={0x08048460,0x08048463}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048463[2]: invert({defs={0x08048460,0x08048463}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: writeRegister(af, {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048463[2]: invert({defs={0x08048460,0x08048463}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: writeRegister(cf, {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048463[2]: xor_({defs={0x08048460,0x08048463}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048463[2]: writeRegister(of, {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048463[2]: writeRegister(esp, {defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x08048463[2]: finishInstruction(sub    esp, 0x08)
registers:
  esp       = {defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048463}, expr=0x08048466[32]}
  pf        = {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
Symbolic@0x22ecb30 insn@0x08048466[3]: startInstruction(mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>)
Symbolic@0x22ecb30 insn@0x08048466[3]: number_(32, 7) = {defs={0x08048466}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x08048466[3]: number_(32, 134513766) = {defs={0x08048466}, expr=0x08048466[32]}
Symbolic@0x22ecb30 insn@0x08048466[3]: add({defs={0x08048466}, expr=0x08048466[32]}, {defs={0x08048466}, expr=7[32]}) = {defs={0x08048466}, expr=0x0804846d[32]}
Symbolic@0x22ecb30 insn@0x08048466[3]: writeRegister(eip, {defs={0x08048466}, expr=0x0804846d[32]})
Symbolic@0x22ecb30 insn@0x08048466[3]: number_(32, 134514132) = {defs={0x08048466}, expr=0x080485d4[32]}
Symbolic@0x22ecb30 insn@0x08048466[3]: readRegister(esp) = {defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048466[3]: boolean_(1) = {defs={0x08048466}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048466[3]: writeMemory(ss, {defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x08048466}, expr=0x080485d4[32]}, {defs={0x08048466}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048466[3]: finishInstruction(mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>)
registers:
  esp       = {defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048466}, expr=0x0804846d[32]}
  pf        = {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] esp_0[32] -9[32])} value={defs={0x08048466}, expr=8[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] esp_0[32] -10[32])} value={defs={0x08048466}, expr=4[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] esp_0[32] -11[32])} value={defs={0x08048466}, expr=-123[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] esp_0[32] -12[32])} value={defs={0x08048466}, expr=-44[8]}
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x804846d:call   0x08048300<puts@plt>
Symbolic@0x22ecb30 insn@0x0804846d[4]: startInstruction(call   0x08048300<puts@plt>)
Symbolic@0x22ecb30 insn@0x0804846d[4]: number_(32, 5) = {defs={0x0804846d}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804846d[4]: number_(32, 134513773) = {defs={0x0804846d}, expr=0x0804846d[32]}
Symbolic@0x22ecb30 insn@0x0804846d[4]: add({defs={0x0804846d}, expr=0x0804846d[32]}, {defs={0x0804846d}, expr=5[32]}) = {defs={0x0804846d}, expr=0x08048472[32]}
Symbolic@0x22ecb30 insn@0x0804846d[4]: writeRegister(eip, {defs={0x0804846d}, expr=0x08048472[32]})
Symbolic@0x22ecb30 insn@0x0804846d[4]: readRegister(esp) = {defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x0804846d[4]: number_(32, 18446744073709551612) = {defs={0x0804846d}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x0804846d[4]: add({defs={0x08048460,0x08048463}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x0804846d}, expr=-4[32]}) = {defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x0804846d[4]: boolean_(1) = {defs={0x0804846d}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804846d[4]: readRegister(eip) = {defs={0x0804846d}, expr=0x08048472[32]}
Symbolic@0x22ecb30 insn@0x0804846d[4]: writeMemory(ss, {defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] esp_0[32] -16[32])}, {defs={0x0804846d}, expr=0x08048472[32]}, {defs={0x0804846d}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804846d[4]: number_(32, 134513408) = {defs={0x0804846d}, expr=0x08048300[32]}
Symbolic@0x22ecb30 insn@0x0804846d[4]: filterCallTarget({defs={0x0804846d}, expr=0x08048300[32]}) = {defs={0x0804846d}, expr=0x08048300[32]}
Symbolic@0x22ecb30 insn@0x0804846d[4]: writeRegister(eip, {defs={0x0804846d}, expr=0x08048300[32]})
Symbolic@0x22ecb30 insn@0x0804846d[4]: writeRegister(esp, {defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] esp_0[32] -16[32])})
Symbolic@0x22ecb30 insn@0x0804846d[4]: finishInstruction(call   0x08048300<puts@plt>)
registers:
  esp       = {defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] esp_0[32] -16[32])}
  ebp       = {defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x0804846d}, expr=0x08048300[32]}
  pf        = {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] esp_0[32] -13[32])} value={defs={0x0804846d}, expr=8[8]}
  addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] esp_0[32] -14[32])} value={defs={0x0804846d}, expr=4[8]}
  addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] esp_0[32] -15[32])} value={defs={0x0804846d}, expr=-124[8]}
  addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] esp_0[32] -16[32])} value={defs={0x0804846d}, expr=114[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] esp_0[32] -9[32])} value={defs={0x08048466}, expr=8[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] esp_0[32] -10[32])} value={defs={0x08048466}, expr=4[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] esp_0[32] -11[32])} value={defs={0x08048466}, expr=-123[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] esp_0[32] -12[32])} value={defs={0x08048466}, expr=-44[8]}
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = {defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] frame_pointer[32] -12[32])}
  ebp       = {defs={0x08048460}, expr=frame_pointer[32]}
  eip       = {defs={0x0804846d}, expr=0x08048300[32]}
  pf        = {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 1[32] 2[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 2[32] 3[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 3[32] 4[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 4[32] 5[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 5[32] 6[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 6[32] 7[32] (add[32] frame_pointer[32] -8[32])) (extract[1] 7[32] 8[32] (add[32] frame_pointer[32] -8[32]))))}
  sf        = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] frame_pointer[32] -8[32]))}
  zf        = {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] frame_pointer[32] -8[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] frame_pointer[32] -9[32])} value={defs={0x0804846d}, expr=8[8]}
  addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] frame_pointer[32] -10[32])} value={defs={0x0804846d}, expr=4[8]}
  addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] frame_pointer[32] -11[32])} value={defs={0x0804846d}, expr=-124[8]}
  addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] frame_pointer[32] -12[32])} value={defs={0x0804846d}, expr=114[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] frame_pointer[32] -5[32])} value={defs={0x08048466}, expr=8[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] frame_pointer[32] -6[32])} value={defs={0x08048466}, expr=4[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] frame_pointer[32] -7[32])} value={defs={0x08048466}, expr=-123[8]}
  addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] frame_pointer[32] -8[32])} value={defs={0x08048466}, expr=-44[8]}
  addr={defs={0x08048460}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048460}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048460}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x0804846d[4]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
Symbolic@0x22ecb30 insn@0x08048472[0]: startInstruction(mov    DWORD PTR ss:[esp], 0x00000000)
Symbolic@0x22ecb30 insn@0x08048472[0]: number_(32, 7) = {defs={0x08048472}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x08048472[0]: number_(32, 134513778) = {defs={0x08048472}, expr=0x08048472[32]}
Symbolic@0x22ecb30 insn@0x08048472[0]: add({defs={0x08048472}, expr=0x08048472[32]}, {defs={0x08048472}, expr=7[32]}) = {defs={0x08048472}, expr=0x08048479[32]}
Symbolic@0x22ecb30 insn@0x08048472[0]: writeRegister(eip, {defs={0x08048472}, expr=0x08048479[32]})
Symbolic@0x22ecb30 insn@0x08048472[0]: number_(32, 0) = {defs={0x08048472}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048472[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048472[0]: boolean_(1) = {defs={0x08048472}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048472[0]: writeMemory(ss, esp_0[32], {defs={0x08048472}, expr=0[32]}, {defs={0x08048472}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048472[0]: finishInstruction(mov    DWORD PTR ss:[esp], 0x00000000)
registers:
  eip    = {defs={0x08048472}, expr=0x08048479[32]}
memory:
  addr={defs={0x08048472}, expr=(add[32] esp_0[32] 3[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=(add[32] esp_0[32] 2[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=(add[32] esp_0[32] 1[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=esp_0[32]} value={defs={0x08048472}, expr=0[8]}

0x8048479:call   0x08048320<_exit@plt>
Symbolic@0x22ecb30 insn@0x08048479[1]: startInstruction(call   0x08048320<_exit@plt>)
Symbolic@0x22ecb30 insn@0x08048479[1]: number_(32, 5) = {defs={0x08048479}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048479[1]: number_(32, 134513785) = {defs={0x08048479}, expr=0x08048479[32]}
Symbolic@0x22ecb30 insn@0x08048479[1]: add({defs={0x08048479}, expr=0x08048479[32]}, {defs={0x08048479}, expr=5[32]}) = {defs={0x08048479}, expr=0x0804847e[32]}
Symbolic@0x22ecb30 insn@0x08048479[1]: writeRegister(eip, {defs={0x08048479}, expr=0x0804847e[32]})
Symbolic@0x22ecb30 insn@0x08048479[1]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048479[1]: number_(32, 18446744073709551612) = {defs={0x08048479}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048479[1]: add(esp_0[32], {defs={0x08048479}, expr=-4[32]}) = {defs={0x08048479}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048479[1]: boolean_(1) = {defs={0x08048479}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048479[1]: readRegister(eip) = {defs={0x08048479}, expr=0x0804847e[32]}
Symbolic@0x22ecb30 insn@0x08048479[1]: writeMemory(ss, {defs={0x08048479}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048479}, expr=0x0804847e[32]}, {defs={0x08048479}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048479[1]: number_(32, 134513440) = {defs={0x08048479}, expr=0x08048320[32]}
Symbolic@0x22ecb30 insn@0x08048479[1]: filterCallTarget({defs={0x08048479}, expr=0x08048320[32]}) = {defs={0x08048479}, expr=0x08048320[32]}
Symbolic@0x22ecb30 insn@0x08048479[1]: writeRegister(eip, {defs={0x08048479}, expr=0x08048320[32]})
Symbolic@0x22ecb30 insn@0x08048479[1]: writeRegister(esp, {defs={0x08048479}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048479[1]: finishInstruction(call   0x08048320<_exit@plt>)
registers:
  esp    = {defs={0x08048479}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048479}, expr=0x08048320[32]}
memory:
  addr={defs={0x08048479}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x08048479}, expr=8[8]}
  addr={defs={0x08048479}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x08048479}, expr=4[8]}
  addr={defs={0x08048479}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x08048479}, expr=-124[8]}
  addr={defs={0x08048479}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x08048479}, expr=126[8]}
  addr={defs={0x08048472}, expr=(add[32] esp_0[32] 3[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=(add[32] esp_0[32] 2[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=(add[32] esp_0[32] 1[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=esp_0[32]} value={defs={0x08048472}, expr=0[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x08048479}, expr=frame_pointer[32]}
  eip    = {defs={0x08048479}, expr=0x08048320[32]}
memory:
  addr={defs={0x08048479}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x08048479}, expr=8[8]}
  addr={defs={0x08048479}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x08048479}, expr=4[8]}
  addr={defs={0x08048479}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x08048479}, expr=-124[8]}
  addr={defs={0x08048479}, expr=frame_pointer[32]} value={defs={0x08048479}, expr=126[8]}
  addr={defs={0x08048472}, expr=(add[32] frame_pointer[32] 7[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=(add[32] frame_pointer[32] 6[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=(add[32] frame_pointer[32] 5[32])} value={defs={0x08048472}, expr=0[8]}
  addr={defs={0x08048472}, expr=(add[32] frame_pointer[32] 4[32])} value={defs={0x08048472}, expr=0[8]}
Symbolic@0x22ecb30 insn@0x08048479[1]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048480:push   ebp
Symbolic@0x22ecb30 insn@0x08048480[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x08048480[0]: number_(32, 1) = {defs={0x08048480}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048480[0]: number_(32, 134513792) = {defs={0x08048480}, expr=0x08048480[32]}
Symbolic@0x22ecb30 insn@0x08048480[0]: add({defs={0x08048480}, expr=0x08048480[32]}, {defs={0x08048480}, expr=1[32]}) = {defs={0x08048480}, expr=0x08048481[32]}
Symbolic@0x22ecb30 insn@0x08048480[0]: writeRegister(eip, {defs={0x08048480}, expr=0x08048481[32]})
Symbolic@0x22ecb30 insn@0x08048480[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048480[0]: number_(32, 18446744073709551612) = {defs={0x08048480}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048480[0]: add(esp_0[32], {defs={0x08048480}, expr=-4[32]}) = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048480[0]: boolean_(1) = {defs={0x08048480}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048480[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048480[0]: writeMemory(ss, {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x08048480}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048480[0]: writeRegister(esp, {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048480[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048480}, expr=0x08048481[32]}
memory:
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048481:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x08048481[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x08048481[1]: number_(32, 2) = {defs={0x08048481}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048481[1]: number_(32, 134513793) = {defs={0x08048481}, expr=0x08048481[32]}
Symbolic@0x22ecb30 insn@0x08048481[1]: add({defs={0x08048481}, expr=0x08048481[32]}, {defs={0x08048481}, expr=2[32]}) = {defs={0x08048481}, expr=0x08048483[32]}
Symbolic@0x22ecb30 insn@0x08048481[1]: writeRegister(eip, {defs={0x08048481}, expr=0x08048483[32]})
Symbolic@0x22ecb30 insn@0x08048481[1]: readRegister(esp) = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048481[1]: writeRegister(ebp, {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048481[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048481}, expr=0x08048483[32]}
memory:
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048483:sub    esp, 0x08
Symbolic@0x22ecb30 insn@0x08048483[2]: startInstruction(sub    esp, 0x08)
Symbolic@0x22ecb30 insn@0x08048483[2]: number_(32, 3) = {defs={0x08048483}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048483[2]: number_(32, 134513795) = {defs={0x08048483}, expr=0x08048483[32]}
Symbolic@0x22ecb30 insn@0x08048483[2]: add({defs={0x08048483}, expr=0x08048483[32]}, {defs={0x08048483}, expr=3[32]}) = {defs={0x08048483}, expr=0x08048486[32]}
Symbolic@0x22ecb30 insn@0x08048483[2]: writeRegister(eip, {defs={0x08048483}, expr=0x08048486[32]})
Symbolic@0x22ecb30 insn@0x08048483[2]: boolean_(0) = {defs={0x08048483}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048483[2]: number_(32, 8) = {defs={0x08048483}, expr=8[32]}
Symbolic@0x22ecb30 insn@0x08048483[2]: invert({defs={0x08048483}, expr=8[32]}) = {defs={0x08048483}, expr=-9[32]}
Symbolic@0x22ecb30 insn@0x08048483[2]: readRegister(esp) = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048483[2]: invert({defs={0x08048483}, expr=0[1]}) = {defs={0x08048483}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048483[2]: addWithCarries({defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048483}, expr=-9[32]}, {defs={0x08048483}, expr=1[1]}) = {defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048483[2]: also returns: {defs={0x08048480,0x08048483}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}, 0, 8) = {defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 1, 2) = {defs={0x08048480,0x08048483}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 0, 1) = {defs={0x08048480,0x08048483}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: xor_({defs={0x08048480,0x08048483}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048480,0x08048483}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 3, 4) = {defs={0x08048480,0x08048483}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 2, 3) = {defs={0x08048480,0x08048483}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: xor_({defs={0x08048480,0x08048483}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048480,0x08048483}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 5, 6) = {defs={0x08048480,0x08048483}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 4, 5) = {defs={0x08048480,0x08048483}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: xor_({defs={0x08048480,0x08048483}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048480,0x08048483}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 7, 8) = {defs={0x08048480,0x08048483}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 6, 7) = {defs={0x08048480,0x08048483}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: xor_({defs={0x08048480,0x08048483}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048480,0x08048483}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: xor_({defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: xor_({defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: xor_({defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: invert({defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048480,0x08048483}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
Symbolic@0x22ecb30 insn@0x08048483[2]: writeRegister(pf, {defs={0x08048480,0x08048483}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))})
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}, 31, 32) = {defs={0x08048480,0x08048483}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: writeRegister(sf, {defs={0x08048480,0x08048483}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048483[2]: equalToZero({defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}) = {defs={0x08048480,0x08048483}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: writeRegister(zf, {defs={0x08048480,0x08048483}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 31, 32) = {defs={0x08048480,0x08048483}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 30, 31) = {defs={0x08048480,0x08048483}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: extract({defs={0x08048480,0x08048483}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, 3, 4) = {defs={0x08048480,0x08048483}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}
Symbolic@0x22ecb30 insn@0x08048483[2]: invert({defs={0x08048480,0x08048483}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: writeRegister(af, {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048483[2]: invert({defs={0x08048480,0x08048483}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: writeRegister(cf, {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048483[2]: xor_({defs={0x08048480,0x08048483}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}, {defs={0x08048480,0x08048483}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33]))}) = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
Symbolic@0x22ecb30 insn@0x08048483[2]: writeRegister(of, {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))})
Symbolic@0x22ecb30 insn@0x08048483[2]: writeRegister(esp, {defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x08048483[2]: finishInstruction(sub    esp, 0x08)
registers:
  esp       = {defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048483}, expr=0x08048486[32]}
  pf        = {defs={0x08048480,0x08048483}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048480,0x08048483}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048480,0x08048483}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
memory:
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
Symbolic@0x22ecb30 insn@0x08048486[3]: startInstruction(inc    DWORD PTR ds:[0x080496f8<.bss+4>])
Symbolic@0x22ecb30 insn@0x08048486[3]: number_(32, 6) = {defs={0x08048486}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x08048486[3]: number_(32, 134513798) = {defs={0x08048486}, expr=0x08048486[32]}
Symbolic@0x22ecb30 insn@0x08048486[3]: add({defs={0x08048486}, expr=0x08048486[32]}, {defs={0x08048486}, expr=6[32]}) = {defs={0x08048486}, expr=0x0804848c[32]}
Symbolic@0x22ecb30 insn@0x08048486[3]: writeRegister(eip, {defs={0x08048486}, expr=0x0804848c[32]})
Symbolic@0x22ecb30 insn@0x08048486[3]: number_(32, 134518520) = {defs={0x08048486}, expr=0x080496f8[32]}
Symbolic@0x22ecb30 insn@0x08048486[3]: boolean_(1) = {defs={0x08048486}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048486[3]: readMemory(ds, {defs={0x08048486}, expr=0x080496f8[32]}, {defs={0x08048486}, expr=1[1]}, 32) = v16881[32]
Symbolic@0x22ecb30 insn@0x08048486[3]: boolean_(0) = {defs={0x08048486}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048486[3]: number_(32, 1) = {defs={0x08048486}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048486[3]: addWithCarries(v16881[32], {defs={0x08048486}, expr=1[32]}, {defs={0x08048486}, expr=0[1]}) = {defs={0x08048486}, expr=(add[32] v16881[32] 1[32])}
Symbolic@0x22ecb30 insn@0x08048486[3]: also returns: {defs={0x08048486}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(add[32] v16881[32] 1[32])}, 0, 8) = {defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}, 1, 2) = {defs={0x08048486}, expr=(extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}, 0, 1) = {defs={0x08048486}, expr=(extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: xor_({defs={0x08048486}, expr=(extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32]))}, {defs={0x08048486}, expr=(extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32]))}) = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}, 3, 4) = {defs={0x08048486}, expr=(extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}, 2, 3) = {defs={0x08048486}, expr=(extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: xor_({defs={0x08048486}, expr=(extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32]))}, {defs={0x08048486}, expr=(extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32]))}) = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}, 5, 6) = {defs={0x08048486}, expr=(extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}, 4, 5) = {defs={0x08048486}, expr=(extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: xor_({defs={0x08048486}, expr=(extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32]))}, {defs={0x08048486}, expr=(extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32]))}) = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}, 7, 8) = {defs={0x08048486}, expr=(extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}, 6, 7) = {defs={0x08048486}, expr=(extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: xor_({defs={0x08048486}, expr=(extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32]))}, {defs={0x08048486}, expr=(extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32]))}) = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048486[3]: xor_({defs={0x08048486}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])))}, {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])))}) = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048486[3]: xor_({defs={0x08048486}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])))}, {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32])))}) = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048486[3]: xor_({defs={0x08048486}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])))}, {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32])))}) = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048486[3]: invert({defs={0x08048486}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32])))}) = {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32]))))}
Symbolic@0x22ecb30 insn@0x08048486[3]: writeRegister(pf, {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32]))))})
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(add[32] v16881[32] 1[32])}, 31, 32) = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: writeRegister(sf, {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v16881[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x08048486[3]: equalToZero({defs={0x08048486}, expr=(add[32] v16881[32] 1[32])}) = {defs={0x08048486}, expr=(zerop[1] (add[32] v16881[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: writeRegister(zf, {defs={0x08048486}, expr=(zerop[1] (add[32] v16881[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}, 31, 32) = {defs={0x08048486}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}, 30, 31) = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: extract({defs={0x08048486}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}, 3, 4) = {defs={0x08048486}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}
Symbolic@0x22ecb30 insn@0x08048486[3]: writeRegister(af, {defs={0x08048486}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))})
Symbolic@0x22ecb30 insn@0x08048486[3]: xor_({defs={0x08048486}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}, {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}) = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048486[3]: writeRegister(of, {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])))})
Symbolic@0x22ecb30 insn@0x08048486[3]: number_(32, 134518520) = {defs={0x08048486}, expr=0x080496f8[32]}
Symbolic@0x22ecb30 insn@0x08048486[3]: boolean_(1) = {defs={0x08048486}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048486[3]: writeMemory(ds, {defs={0x08048486}, expr=0x080496f8[32]}, {defs={0x08048486}, expr=(add[32] v16881[32] 1[32])}, {defs={0x08048486}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048486[3]: finishInstruction(inc    DWORD PTR ds:[0x080496f8<.bss+4>])
registers:
  esp       = {defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048486}, expr=0x0804848c[32]}
  pf        = {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32]))))}
  sf        = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v16881[32] 1[32]))}
  zf        = {defs={0x08048486}, expr=(zerop[1] (add[32] v16881[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048486}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])))}
memory:
  addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496fb[32]} value=(extract[8] 24[32] 32[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496fa[32]} value=(extract[8] 16[32] 24[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496f9[32]} value=(extract[8] 8[32] 16[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496f8[32]} value=(extract[8] 0[32] 8[32] v16881[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
Symbolic@0x22ecb30 insn@0x0804848c[4]: startInstruction(mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>)
Symbolic@0x22ecb30 insn@0x0804848c[4]: number_(32, 7) = {defs={0x0804848c}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x0804848c[4]: number_(32, 134513804) = {defs={0x0804848c}, expr=0x0804848c[32]}
Symbolic@0x22ecb30 insn@0x0804848c[4]: add({defs={0x0804848c}, expr=0x0804848c[32]}, {defs={0x0804848c}, expr=7[32]}) = {defs={0x0804848c}, expr=0x08048493[32]}
Symbolic@0x22ecb30 insn@0x0804848c[4]: writeRegister(eip, {defs={0x0804848c}, expr=0x08048493[32]})
Symbolic@0x22ecb30 insn@0x0804848c[4]: number_(32, 134514132) = {defs={0x0804848c}, expr=0x080485d4[32]}
Symbolic@0x22ecb30 insn@0x0804848c[4]: readRegister(esp) = {defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x0804848c[4]: boolean_(1) = {defs={0x0804848c}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804848c[4]: writeMemory(ss, {defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x0804848c}, expr=0x080485d4[32]}, {defs={0x0804848c}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804848c[4]: finishInstruction(mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>)
registers:
  esp       = {defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x0804848c}, expr=0x08048493[32]}
  pf        = {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32]))))}
  sf        = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v16881[32] 1[32]))}
  zf        = {defs={0x08048486}, expr=(zerop[1] (add[32] v16881[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048486}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])))}
memory:
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] esp_0[32] -9[32])} value={defs={0x0804848c}, expr=8[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] esp_0[32] -10[32])} value={defs={0x0804848c}, expr=4[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] esp_0[32] -11[32])} value={defs={0x0804848c}, expr=-123[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] esp_0[32] -12[32])} value={defs={0x0804848c}, expr=-44[8]}
  addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496fb[32]} value=(extract[8] 24[32] 32[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496fa[32]} value=(extract[8] 16[32] 24[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496f9[32]} value=(extract[8] 8[32] 16[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496f8[32]} value=(extract[8] 0[32] 8[32] v16881[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048493:call   0x08048300<puts@plt>
Symbolic@0x22ecb30 insn@0x08048493[5]: startInstruction(call   0x08048300<puts@plt>)
Symbolic@0x22ecb30 insn@0x08048493[5]: number_(32, 5) = {defs={0x08048493}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048493[5]: number_(32, 134513811) = {defs={0x08048493}, expr=0x08048493[32]}
Symbolic@0x22ecb30 insn@0x08048493[5]: add({defs={0x08048493}, expr=0x08048493[32]}, {defs={0x08048493}, expr=5[32]}) = {defs={0x08048493}, expr=0x08048498[32]}
Symbolic@0x22ecb30 insn@0x08048493[5]: writeRegister(eip, {defs={0x08048493}, expr=0x08048498[32]})
Symbolic@0x22ecb30 insn@0x08048493[5]: readRegister(esp) = {defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048493[5]: number_(32, 18446744073709551612) = {defs={0x08048493}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048493[5]: add({defs={0x08048480,0x08048483}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x08048493}, expr=-4[32]}) = {defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x08048493[5]: boolean_(1) = {defs={0x08048493}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048493[5]: readRegister(eip) = {defs={0x08048493}, expr=0x08048498[32]}
Symbolic@0x22ecb30 insn@0x08048493[5]: writeMemory(ss, {defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] esp_0[32] -16[32])}, {defs={0x08048493}, expr=0x08048498[32]}, {defs={0x08048493}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048493[5]: number_(32, 134513408) = {defs={0x08048493}, expr=0x08048300[32]}
Symbolic@0x22ecb30 insn@0x08048493[5]: filterCallTarget({defs={0x08048493}, expr=0x08048300[32]}) = {defs={0x08048493}, expr=0x08048300[32]}
Symbolic@0x22ecb30 insn@0x08048493[5]: writeRegister(eip, {defs={0x08048493}, expr=0x08048300[32]})
Symbolic@0x22ecb30 insn@0x08048493[5]: writeRegister(esp, {defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] esp_0[32] -16[32])})
Symbolic@0x22ecb30 insn@0x08048493[5]: finishInstruction(call   0x08048300<puts@plt>)
registers:
  esp       = {defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] esp_0[32] -16[32])}
  ebp       = {defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048493}, expr=0x08048300[32]}
  pf        = {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32]))))}
  sf        = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v16881[32] 1[32]))}
  zf        = {defs={0x08048486}, expr=(zerop[1] (add[32] v16881[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048486}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -4[32])) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])))}
memory:
  addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] esp_0[32] -13[32])} value={defs={0x08048493}, expr=8[8]}
  addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] esp_0[32] -14[32])} value={defs={0x08048493}, expr=4[8]}
  addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] esp_0[32] -15[32])} value={defs={0x08048493}, expr=-124[8]}
  addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] esp_0[32] -16[32])} value={defs={0x08048493}, expr=-104[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] esp_0[32] -9[32])} value={defs={0x0804848c}, expr=8[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] esp_0[32] -10[32])} value={defs={0x0804848c}, expr=4[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] esp_0[32] -11[32])} value={defs={0x0804848c}, expr=-123[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] esp_0[32] -12[32])} value={defs={0x0804848c}, expr=-44[8]}
  addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496fb[32]} value=(extract[8] 24[32] 32[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496fa[32]} value=(extract[8] 16[32] 24[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496f9[32]} value=(extract[8] 8[32] 16[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496f8[32]} value=(extract[8] 0[32] 8[32] v16881[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = {defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] frame_pointer[32] -12[32])}
  ebp       = {defs={0x08048480}, expr=frame_pointer[32]}
  eip       = {defs={0x08048493}, expr=0x08048300[32]}
  pf        = {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v16881[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v16881[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v16881[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v16881[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v16881[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v16881[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v16881[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v16881[32] 1[32]))))}
  sf        = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v16881[32] 1[32]))}
  zf        = {defs={0x08048486}, expr=(zerop[1] (add[32] v16881[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048486}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] frame_pointer[32]) (add[33] (uextend[33] 33[32] frame_pointer[32]) 4294967288[33]) 4294967287[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v16881[32]) (add[33] (uextend[33] 33[32] v16881[32]) 1[33]) 1[33])))}
memory:
  addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] frame_pointer[32] -9[32])} value={defs={0x08048493}, expr=8[8]}
  addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] frame_pointer[32] -10[32])} value={defs={0x08048493}, expr=4[8]}
  addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] frame_pointer[32] -11[32])} value={defs={0x08048493}, expr=-124[8]}
  addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] frame_pointer[32] -12[32])} value={defs={0x08048493}, expr=-104[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] frame_pointer[32] -5[32])} value={defs={0x0804848c}, expr=8[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] frame_pointer[32] -6[32])} value={defs={0x0804848c}, expr=4[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] frame_pointer[32] -7[32])} value={defs={0x0804848c}, expr=-123[8]}
  addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] frame_pointer[32] -8[32])} value={defs={0x0804848c}, expr=-44[8]}
  addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v16881[32] 1[32]))}
  addr={defs={0x08048486}, expr=0x080496fb[32]} value=(extract[8] 24[32] 32[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496fa[32]} value=(extract[8] 16[32] 24[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496f9[32]} value=(extract[8] 8[32] 16[32] v16881[32])
  addr={defs={0x08048486}, expr=0x080496f8[32]} value=(extract[8] 0[32] 8[32] v16881[32])
  addr={defs={0x08048480}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048480}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048480}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x08048493[5]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
Symbolic@0x22ecb30 insn@0x08048498[0]: startInstruction(mov    DWORD PTR ss:[esp], 0x00000000)
Symbolic@0x22ecb30 insn@0x08048498[0]: number_(32, 7) = {defs={0x08048498}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x08048498[0]: number_(32, 134513816) = {defs={0x08048498}, expr=0x08048498[32]}
Symbolic@0x22ecb30 insn@0x08048498[0]: add({defs={0x08048498}, expr=0x08048498[32]}, {defs={0x08048498}, expr=7[32]}) = {defs={0x08048498}, expr=0x0804849f[32]}
Symbolic@0x22ecb30 insn@0x08048498[0]: writeRegister(eip, {defs={0x08048498}, expr=0x0804849f[32]})
Symbolic@0x22ecb30 insn@0x08048498[0]: number_(32, 0) = {defs={0x08048498}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048498[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048498[0]: boolean_(1) = {defs={0x08048498}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048498[0]: writeMemory(ss, esp_0[32], {defs={0x08048498}, expr=0[32]}, {defs={0x08048498}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048498[0]: finishInstruction(mov    DWORD PTR ss:[esp], 0x00000000)
registers:
  eip    = {defs={0x08048498}, expr=0x0804849f[32]}
memory:
  addr={defs={0x08048498}, expr=(add[32] esp_0[32] 3[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=(add[32] esp_0[32] 2[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=(add[32] esp_0[32] 1[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=esp_0[32]} value={defs={0x08048498}, expr=0[8]}

0x804849f:call   0x08048320<_exit@plt>
Symbolic@0x22ecb30 insn@0x0804849f[1]: startInstruction(call   0x08048320<_exit@plt>)
Symbolic@0x22ecb30 insn@0x0804849f[1]: number_(32, 5) = {defs={0x0804849f}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: number_(32, 134513823) = {defs={0x0804849f}, expr=0x0804849f[32]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: add({defs={0x0804849f}, expr=0x0804849f[32]}, {defs={0x0804849f}, expr=5[32]}) = {defs={0x0804849f}, expr=0x080484a4[32]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: writeRegister(eip, {defs={0x0804849f}, expr=0x080484a4[32]})
Symbolic@0x22ecb30 insn@0x0804849f[1]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x0804849f[1]: number_(32, 18446744073709551612) = {defs={0x0804849f}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: add(esp_0[32], {defs={0x0804849f}, expr=-4[32]}) = {defs={0x0804849f}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x0804849f[1]: boolean_(1) = {defs={0x0804849f}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: readRegister(eip) = {defs={0x0804849f}, expr=0x080484a4[32]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: writeMemory(ss, {defs={0x0804849f}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x0804849f}, expr=0x080484a4[32]}, {defs={0x0804849f}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804849f[1]: number_(32, 134513440) = {defs={0x0804849f}, expr=0x08048320[32]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: filterCallTarget({defs={0x0804849f}, expr=0x08048320[32]}) = {defs={0x0804849f}, expr=0x08048320[32]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: writeRegister(eip, {defs={0x0804849f}, expr=0x08048320[32]})
Symbolic@0x22ecb30 insn@0x0804849f[1]: writeRegister(esp, {defs={0x0804849f}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x0804849f[1]: finishInstruction(call   0x08048320<_exit@plt>)
registers:
  esp    = {defs={0x0804849f}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x0804849f}, expr=0x08048320[32]}
memory:
  addr={defs={0x0804849f}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x0804849f}, expr=8[8]}
  addr={defs={0x0804849f}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x0804849f}, expr=4[8]}
  addr={defs={0x0804849f}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x0804849f}, expr=-124[8]}
  addr={defs={0x0804849f}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x0804849f}, expr=-92[8]}
  addr={defs={0x08048498}, expr=(add[32] esp_0[32] 3[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=(add[32] esp_0[32] 2[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=(add[32] esp_0[32] 1[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=esp_0[32]} value={defs={0x08048498}, expr=0[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x0804849f}, expr=frame_pointer[32]}
  eip    = {defs={0x0804849f}, expr=0x08048320[32]}
memory:
  addr={defs={0x0804849f}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x0804849f}, expr=8[8]}
  addr={defs={0x0804849f}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x0804849f}, expr=4[8]}
  addr={defs={0x0804849f}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x0804849f}, expr=-124[8]}
  addr={defs={0x0804849f}, expr=frame_pointer[32]} value={defs={0x0804849f}, expr=-92[8]}
  addr={defs={0x08048498}, expr=(add[32] frame_pointer[32] 7[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=(add[32] frame_pointer[32] 6[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=(add[32] frame_pointer[32] 5[32])} value={defs={0x08048498}, expr=0[8]}
  addr={defs={0x08048498}, expr=(add[32] frame_pointer[32] 4[32])} value={defs={0x08048498}, expr=0[8]}
Symbolic@0x22ecb30 insn@0x0804849f[1]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80484b0:push   ebp
Symbolic@0x22ecb30 insn@0x080484b0[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x080484b0[0]: number_(32, 1) = {defs={0x080484b0}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484b0[0]: number_(32, 134513840) = {defs={0x080484b0}, expr=0x080484b0[32]}
Symbolic@0x22ecb30 insn@0x080484b0[0]: add({defs={0x080484b0}, expr=0x080484b0[32]}, {defs={0x080484b0}, expr=1[32]}) = {defs={0x080484b0}, expr=0x080484b1[32]}
Symbolic@0x22ecb30 insn@0x080484b0[0]: writeRegister(eip, {defs={0x080484b0}, expr=0x080484b1[32]})
Symbolic@0x22ecb30 insn@0x080484b0[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080484b0[0]: number_(32, 18446744073709551612) = {defs={0x080484b0}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080484b0[0]: add(esp_0[32], {defs={0x080484b0}, expr=-4[32]}) = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080484b0[0]: boolean_(1) = {defs={0x080484b0}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484b0[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080484b0[0]: writeMemory(ss, {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x080484b0}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080484b0[0]: writeRegister(esp, {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080484b0[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080484b0}, expr=0x080484b1[32]}
memory:
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80484b1:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x080484b1[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x080484b1[1]: number_(32, 2) = {defs={0x080484b1}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080484b1[1]: number_(32, 134513841) = {defs={0x080484b1}, expr=0x080484b1[32]}
Symbolic@0x22ecb30 insn@0x080484b1[1]: add({defs={0x080484b1}, expr=0x080484b1[32]}, {defs={0x080484b1}, expr=2[32]}) = {defs={0x080484b1}, expr=0x080484b3[32]}
Symbolic@0x22ecb30 insn@0x080484b1[1]: writeRegister(eip, {defs={0x080484b1}, expr=0x080484b3[32]})
Symbolic@0x22ecb30 insn@0x080484b1[1]: readRegister(esp) = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080484b1[1]: writeRegister(ebp, {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080484b1[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080484b1}, expr=0x080484b3[32]}
memory:
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80484b3:push   edi
Symbolic@0x22ecb30 insn@0x080484b3[2]: startInstruction(push   edi)
Symbolic@0x22ecb30 insn@0x080484b3[2]: number_(32, 1) = {defs={0x080484b3}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484b3[2]: number_(32, 134513843) = {defs={0x080484b3}, expr=0x080484b3[32]}
Symbolic@0x22ecb30 insn@0x080484b3[2]: add({defs={0x080484b3}, expr=0x080484b3[32]}, {defs={0x080484b3}, expr=1[32]}) = {defs={0x080484b3}, expr=0x080484b4[32]}
Symbolic@0x22ecb30 insn@0x080484b3[2]: writeRegister(eip, {defs={0x080484b3}, expr=0x080484b4[32]})
Symbolic@0x22ecb30 insn@0x080484b3[2]: readRegister(esp) = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080484b3[2]: number_(32, 18446744073709551612) = {defs={0x080484b3}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080484b3[2]: add({defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080484b3}, expr=-4[32]}) = {defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x080484b3[2]: boolean_(1) = {defs={0x080484b3}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484b3[2]: readRegister(edi) = edi_0[32]
Symbolic@0x22ecb30 insn@0x080484b3[2]: writeMemory(ss, {defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])}, edi_0[32], {defs={0x080484b3}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080484b3[2]: writeRegister(esp, {defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])})
Symbolic@0x22ecb30 insn@0x080484b3[2]: finishInstruction(push   edi)
registers:
  esp    = {defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])}
  ebp    = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080484b3}, expr=0x080484b4[32]}
memory:
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80484b4:push   esi
Symbolic@0x22ecb30 insn@0x080484b4[3]: startInstruction(push   esi)
Symbolic@0x22ecb30 insn@0x080484b4[3]: number_(32, 1) = {defs={0x080484b4}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484b4[3]: number_(32, 134513844) = {defs={0x080484b4}, expr=0x080484b4[32]}
Symbolic@0x22ecb30 insn@0x080484b4[3]: add({defs={0x080484b4}, expr=0x080484b4[32]}, {defs={0x080484b4}, expr=1[32]}) = {defs={0x080484b4}, expr=0x080484b5[32]}
Symbolic@0x22ecb30 insn@0x080484b4[3]: writeRegister(eip, {defs={0x080484b4}, expr=0x080484b5[32]})
Symbolic@0x22ecb30 insn@0x080484b4[3]: readRegister(esp) = {defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x080484b4[3]: number_(32, 18446744073709551612) = {defs={0x080484b4}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080484b4[3]: add({defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])}, {defs={0x080484b4}, expr=-4[32]}) = {defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x080484b4[3]: boolean_(1) = {defs={0x080484b4}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484b4[3]: readRegister(esi) = esi_0[32]
Symbolic@0x22ecb30 insn@0x080484b4[3]: writeMemory(ss, {defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])}, esi_0[32], {defs={0x080484b4}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080484b4[3]: writeRegister(esp, {defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x080484b4[3]: finishInstruction(push   esi)
registers:
  esp    = {defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])}
  ebp    = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080484b4}, expr=0x080484b5[32]}
memory:
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80484b5:push   ebx
Symbolic@0x22ecb30 insn@0x080484b5[4]: startInstruction(push   ebx)
Symbolic@0x22ecb30 insn@0x080484b5[4]: number_(32, 1) = {defs={0x080484b5}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484b5[4]: number_(32, 134513845) = {defs={0x080484b5}, expr=0x080484b5[32]}
Symbolic@0x22ecb30 insn@0x080484b5[4]: add({defs={0x080484b5}, expr=0x080484b5[32]}, {defs={0x080484b5}, expr=1[32]}) = {defs={0x080484b5}, expr=0x080484b6[32]}
Symbolic@0x22ecb30 insn@0x080484b5[4]: writeRegister(eip, {defs={0x080484b5}, expr=0x080484b6[32]})
Symbolic@0x22ecb30 insn@0x080484b5[4]: readRegister(esp) = {defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x080484b5[4]: number_(32, 18446744073709551612) = {defs={0x080484b5}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080484b5[4]: add({defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x080484b5}, expr=-4[32]}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x080484b5[4]: boolean_(1) = {defs={0x080484b5}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484b5[4]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x080484b5[4]: writeMemory(ss, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])}, ebx_0[32], {defs={0x080484b5}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080484b5[4]: writeRegister(esp, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])})
Symbolic@0x22ecb30 insn@0x080484b5[4]: finishInstruction(push   ebx)
registers:
  esp    = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])}
  ebp    = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080484b5}, expr=0x080484b6[32]}
memory:
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80484b6:sub    esp, 0x0c
Symbolic@0x22ecb30 insn@0x080484b6[5]: startInstruction(sub    esp, 0x0c)
Symbolic@0x22ecb30 insn@0x080484b6[5]: number_(32, 3) = {defs={0x080484b6}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080484b6[5]: number_(32, 134513846) = {defs={0x080484b6}, expr=0x080484b6[32]}
Symbolic@0x22ecb30 insn@0x080484b6[5]: add({defs={0x080484b6}, expr=0x080484b6[32]}, {defs={0x080484b6}, expr=3[32]}) = {defs={0x080484b6}, expr=0x080484b9[32]}
Symbolic@0x22ecb30 insn@0x080484b6[5]: writeRegister(eip, {defs={0x080484b6}, expr=0x080484b9[32]})
Symbolic@0x22ecb30 insn@0x080484b6[5]: boolean_(0) = {defs={0x080484b6}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080484b6[5]: number_(32, 12) = {defs={0x080484b6}, expr=12[32]}
Symbolic@0x22ecb30 insn@0x080484b6[5]: invert({defs={0x080484b6}, expr=12[32]}) = {defs={0x080484b6}, expr=-13[32]}
Symbolic@0x22ecb30 insn@0x080484b6[5]: readRegister(esp) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x080484b6[5]: invert({defs={0x080484b6}, expr=0[1]}) = {defs={0x080484b6}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484b6[5]: addWithCarries({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])}, {defs={0x080484b6}, expr=-13[32]}, {defs={0x080484b6}, expr=1[1]}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] esp_0[32] -28[32])}
Symbolic@0x22ecb30 insn@0x080484b6[5]: also returns: {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] esp_0[32] -28[32])}, 0, 8) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 1, 2) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 0, 1) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: xor_({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32]))}, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32]))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 3, 4) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 2, 3) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: xor_({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32]))}, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32]))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 5, 6) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 4, 5) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: xor_({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32]))}, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32]))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 7, 8) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 6, 7) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: xor_({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32]))}, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: xor_({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])))}, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: xor_({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])))}, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: xor_({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])))}, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: invert({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: writeRegister(pf, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))))})
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] esp_0[32] -28[32])}, 31, 32) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: writeRegister(sf, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -28[32]))})
Symbolic@0x22ecb30 insn@0x080484b6[5]: equalToZero({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] esp_0[32] -28[32])}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: writeRegister(zf, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] esp_0[32] -28[32]))})
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}, 31, 32) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}, 30, 31) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: extract({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}, 3, 4) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: invert({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: writeRegister(af, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))})
Symbolic@0x22ecb30 insn@0x080484b6[5]: invert({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: writeRegister(cf, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))})
Symbolic@0x22ecb30 insn@0x080484b6[5]: xor_({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
Symbolic@0x22ecb30 insn@0x080484b6[5]: writeRegister(of, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))})
Symbolic@0x22ecb30 insn@0x080484b6[5]: writeRegister(esp, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] esp_0[32] -28[32])})
Symbolic@0x22ecb30 insn@0x080484b6[5]: finishInstruction(sub    esp, 0x0c)
registers:
  esp       = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] esp_0[32] -28[32])}
  ebp       = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x080484b6}, expr=0x080484b9[32]}
  pf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))))}
  sf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -28[32]))}
  zf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] esp_0[32] -28[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
memory:
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80484b9:call   0x080484be<<Insn>>
Symbolic@0x22ecb30 insn@0x080484b9[6]: startInstruction(call   0x080484be<<Insn>>)
Symbolic@0x22ecb30 insn@0x080484b9[6]: number_(32, 5) = {defs={0x080484b9}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080484b9[6]: number_(32, 134513849) = {defs={0x080484b9}, expr=0x080484b9[32]}
Symbolic@0x22ecb30 insn@0x080484b9[6]: add({defs={0x080484b9}, expr=0x080484b9[32]}, {defs={0x080484b9}, expr=5[32]}) = {defs={0x080484b9}, expr=0x080484be[32]}
Symbolic@0x22ecb30 insn@0x080484b9[6]: writeRegister(eip, {defs={0x080484b9}, expr=0x080484be[32]})
Symbolic@0x22ecb30 insn@0x080484b9[6]: readRegister(esp) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] esp_0[32] -28[32])}
Symbolic@0x22ecb30 insn@0x080484b9[6]: number_(32, 18446744073709551612) = {defs={0x080484b9}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080484b9[6]: add({defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] esp_0[32] -28[32])}, {defs={0x080484b9}, expr=-4[32]}) = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] esp_0[32] -32[32])}
Symbolic@0x22ecb30 insn@0x080484b9[6]: boolean_(1) = {defs={0x080484b9}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484b9[6]: readRegister(eip) = {defs={0x080484b9}, expr=0x080484be[32]}
Symbolic@0x22ecb30 insn@0x080484b9[6]: writeMemory(ss, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] esp_0[32] -32[32])}, {defs={0x080484b9}, expr=0x080484be[32]}, {defs={0x080484b9}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080484b9[6]: number_(32, 134513854) = {defs={0x080484b9}, expr=0x080484be[32]}
Symbolic@0x22ecb30 insn@0x080484b9[6]: filterCallTarget({defs={0x080484b9}, expr=0x080484be[32]}) = {defs={0x080484b9}, expr=0x080484be[32]}
Symbolic@0x22ecb30 insn@0x080484b9[6]: writeRegister(eip, {defs={0x080484b9}, expr=0x080484be[32]})
Symbolic@0x22ecb30 insn@0x080484b9[6]: writeRegister(esp, {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] esp_0[32] -32[32])})
Symbolic@0x22ecb30 insn@0x080484b9[6]: finishInstruction(call   0x080484be<<Insn>>)
registers:
  esp       = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] esp_0[32] -32[32])}
  ebp       = {defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x080484b9}, expr=0x080484be[32]}
  pf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))))}
  sf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -28[32]))}
  zf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] esp_0[32] -28[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
memory:
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] esp_0[32] -29[32])} value={defs={0x080484b9}, expr=8[8]}
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] esp_0[32] -30[32])} value={defs={0x080484b9}, expr=4[8]}
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] esp_0[32] -31[32])} value={defs={0x080484b9}, expr=-124[8]}
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] esp_0[32] -32[32])} value={defs={0x080484b9}, expr=-66[8]}
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] esp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] frame_pointer[32] -28[32])}
  ebp       = {defs={0x080484b0}, expr=frame_pointer[32]}
  eip       = {defs={0x080484b9}, expr=0x080484be[32]}
  pf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 1[32] 2[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 2[32] 3[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 3[32] 4[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 4[32] 5[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 5[32] 6[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 6[32] 7[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 7[32] 8[32] (add[32] frame_pointer[32] -24[32]))))}
  sf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] frame_pointer[32] -24[32]))}
  zf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] frame_pointer[32] -24[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) 4294967284[33]) 4294967283[33])))}
memory:
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] frame_pointer[32] -25[32])} value={defs={0x080484b9}, expr=8[8]}
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] frame_pointer[32] -26[32])} value={defs={0x080484b9}, expr=4[8]}
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] frame_pointer[32] -27[32])} value={defs={0x080484b9}, expr=-124[8]}
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] frame_pointer[32] -28[32])} value={defs={0x080484b9}, expr=-66[8]}
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] frame_pointer[32] -9[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] frame_pointer[32] -10[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] frame_pointer[32] -11[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] frame_pointer[32] -12[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] frame_pointer[32] -5[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] frame_pointer[32] -6[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] frame_pointer[32] -7[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] frame_pointer[32] -8[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] frame_pointer[32] -1[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] frame_pointer[32] -2[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] frame_pointer[32] -3[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x080484b0,0x080484b3}, expr=(add[32] frame_pointer[32] -4[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x080484b0}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080484b0}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x080484b9[6]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80484be:pop    ebx
Symbolic@0x22ecb30 insn@0x080484be[0]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x080484be[0]: number_(32, 1) = {defs={0x080484be}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484be[0]: number_(32, 134513854) = {defs={0x080484be}, expr=0x080484be[32]}
Symbolic@0x22ecb30 insn@0x080484be[0]: add({defs={0x080484be}, expr=0x080484be[32]}, {defs={0x080484be}, expr=1[32]}) = {defs={0x080484be}, expr=0x080484bf[32]}
Symbolic@0x22ecb30 insn@0x080484be[0]: writeRegister(eip, {defs={0x080484be}, expr=0x080484bf[32]})
Symbolic@0x22ecb30 insn@0x080484be[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080484be[0]: number_(32, 4) = {defs={0x080484be}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080484be[0]: add(esp_0[32], {defs={0x080484be}, expr=4[32]}) = {defs={0x080484be}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080484be[0]: writeRegister(esp, {defs={0x080484be}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x080484be[0]: boolean_(1) = {defs={0x080484be}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484be[0]: readMemory(ss, esp_0[32], {defs={0x080484be}, expr=1[1]}, 32) = v17099[32]
Symbolic@0x22ecb30 insn@0x080484be[0]: writeRegister(ebx, v17099[32])
Symbolic@0x22ecb30 insn@0x080484be[0]: finishInstruction(pop    ebx)
registers:
  ebx    = v17099[32]
  esp    = {defs={0x080484be}, expr=(add[32] esp_0[32] 4[32])}
  eip    = {defs={0x080484be}, expr=0x080484bf[32]}
memory:
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17099[32])
  addr={defs={0x080484be}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17099[32])

0x80484bf:add    ebx, 0x0000120a
Symbolic@0x22ecb30 insn@0x080484bf[1]: startInstruction(add    ebx, 0x0000120a)
Symbolic@0x22ecb30 insn@0x080484bf[1]: number_(32, 6) = {defs={0x080484bf}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x080484bf[1]: number_(32, 134513855) = {defs={0x080484bf}, expr=0x080484bf[32]}
Symbolic@0x22ecb30 insn@0x080484bf[1]: add({defs={0x080484bf}, expr=0x080484bf[32]}, {defs={0x080484bf}, expr=6[32]}) = {defs={0x080484bf}, expr=0x080484c5[32]}
Symbolic@0x22ecb30 insn@0x080484bf[1]: writeRegister(eip, {defs={0x080484bf}, expr=0x080484c5[32]})
Symbolic@0x22ecb30 insn@0x080484bf[1]: boolean_(0) = {defs={0x080484bf}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080484bf[1]: number_(32, 4618) = {defs={0x080484bf}, expr=4618[32]}
Symbolic@0x22ecb30 insn@0x080484bf[1]: readRegister(ebx) = v17099[32]
Symbolic@0x22ecb30 insn@0x080484bf[1]: addWithCarries(v17099[32], {defs={0x080484bf}, expr=4618[32]}, {defs={0x080484bf}, expr=0[1]}) = {defs={0x080484bf}, expr=(add[32] v17099[32] 4618[32])}
Symbolic@0x22ecb30 insn@0x080484bf[1]: also returns: {defs={0x080484bf}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(add[32] v17099[32] 4618[32])}, 0, 8) = {defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}, 1, 2) = {defs={0x080484bf}, expr=(extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}, 0, 1) = {defs={0x080484bf}, expr=(extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: xor_({defs={0x080484bf}, expr=(extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32]))}, {defs={0x080484bf}, expr=(extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32]))}) = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}, 3, 4) = {defs={0x080484bf}, expr=(extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}, 2, 3) = {defs={0x080484bf}, expr=(extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: xor_({defs={0x080484bf}, expr=(extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32]))}, {defs={0x080484bf}, expr=(extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32]))}) = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}, 5, 6) = {defs={0x080484bf}, expr=(extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}, 4, 5) = {defs={0x080484bf}, expr=(extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: xor_({defs={0x080484bf}, expr=(extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32]))}, {defs={0x080484bf}, expr=(extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32]))}) = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}, 7, 8) = {defs={0x080484bf}, expr=(extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[8] 0[32] 8[32] (add[32] v17099[32] 4618[32]))}, 6, 7) = {defs={0x080484bf}, expr=(extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: xor_({defs={0x080484bf}, expr=(extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32]))}, {defs={0x080484bf}, expr=(extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32]))}) = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32])))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: xor_({defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])))}, {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])))}) = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: xor_({defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])))}, {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32])))}) = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32])))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: xor_({defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])))}, {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32])))}) = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])) (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32])))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: invert({defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])) (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32])))}) = {defs={0x080484bf}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])) (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32]))))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: writeRegister(pf, {defs={0x080484bf}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])) (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32]))))})
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(add[32] v17099[32] 4618[32])}, 31, 32) = {defs={0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: writeRegister(sf, {defs={0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v17099[32] 4618[32]))})
Symbolic@0x22ecb30 insn@0x080484bf[1]: equalToZero({defs={0x080484bf}, expr=(add[32] v17099[32] 4618[32])}) = {defs={0x080484bf}, expr=(zerop[1] (add[32] v17099[32] 4618[32]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: writeRegister(zf, {defs={0x080484bf}, expr=(zerop[1] (add[32] v17099[32] 4618[32]))})
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}, 31, 32) = {defs={0x080484bf}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}, 30, 31) = {defs={0x080484bf}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: extract({defs={0x080484bf}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}, 3, 4) = {defs={0x080484bf}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: writeRegister(af, {defs={0x080484bf}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))})
Symbolic@0x22ecb30 insn@0x080484bf[1]: writeRegister(cf, {defs={0x080484bf}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))})
Symbolic@0x22ecb30 insn@0x080484bf[1]: xor_({defs={0x080484bf}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}, {defs={0x080484bf}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}) = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])))}
Symbolic@0x22ecb30 insn@0x080484bf[1]: writeRegister(of, {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])))})
Symbolic@0x22ecb30 insn@0x080484bf[1]: writeRegister(ebx, {defs={0x080484bf}, expr=(add[32] v17099[32] 4618[32])})
Symbolic@0x22ecb30 insn@0x080484bf[1]: finishInstruction(add    ebx, 0x0000120a)
registers:
  ebx       = {defs={0x080484bf}, expr=(add[32] v17099[32] 4618[32])}
  esp       = {defs={0x080484be}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x080484bf}, expr=0x080484c5[32]}
  pf        = {defs={0x080484bf}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])) (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32]))))}
  sf        = {defs={0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v17099[32] 4618[32]))}
  zf        = {defs={0x080484bf}, expr=(zerop[1] (add[32] v17099[32] 4618[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484bf}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484bf}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])))}
memory:
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17099[32])
  addr={defs={0x080484be}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17099[32])

0x80484c5:call   0x080482c8<_init>
Symbolic@0x22ecb30 insn@0x080484c5[2]: startInstruction(call   0x080482c8<_init>)
Symbolic@0x22ecb30 insn@0x080484c5[2]: number_(32, 5) = {defs={0x080484c5}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: number_(32, 134513861) = {defs={0x080484c5}, expr=0x080484c5[32]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: add({defs={0x080484c5}, expr=0x080484c5[32]}, {defs={0x080484c5}, expr=5[32]}) = {defs={0x080484c5}, expr=0x080484ca[32]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: writeRegister(eip, {defs={0x080484c5}, expr=0x080484ca[32]})
Symbolic@0x22ecb30 insn@0x080484c5[2]: readRegister(esp) = {defs={0x080484be}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080484c5[2]: number_(32, 18446744073709551612) = {defs={0x080484c5}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: add({defs={0x080484be}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x080484c5}, expr=-4[32]}) = {defs={0x080484be,0x080484c5}, expr=esp_0[32]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: boolean_(1) = {defs={0x080484c5}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: readRegister(eip) = {defs={0x080484c5}, expr=0x080484ca[32]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: writeMemory(ss, {defs={0x080484be,0x080484c5}, expr=esp_0[32]}, {defs={0x080484c5}, expr=0x080484ca[32]}, {defs={0x080484c5}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080484c5[2]: number_(32, 134513352) = {defs={0x080484c5}, expr=0x080482c8[32]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: filterCallTarget({defs={0x080484c5}, expr=0x080482c8[32]}) = {defs={0x080484c5}, expr=0x080482c8[32]}
Symbolic@0x22ecb30 insn@0x080484c5[2]: writeRegister(eip, {defs={0x080484c5}, expr=0x080482c8[32]})
Symbolic@0x22ecb30 insn@0x080484c5[2]: writeRegister(esp, {defs={0x080484be,0x080484c5}, expr=esp_0[32]})
Symbolic@0x22ecb30 insn@0x080484c5[2]: finishInstruction(call   0x080482c8<_init>)
registers:
  ebx       = {defs={0x080484bf}, expr=(add[32] v17099[32] 4618[32])}
  eip       = {defs={0x080484c5}, expr=0x080482c8[32]}
  pf        = {defs={0x080484bf}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])) (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32]))))}
  sf        = {defs={0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v17099[32] 4618[32]))}
  zf        = {defs={0x080484bf}, expr=(zerop[1] (add[32] v17099[32] 4618[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484bf}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484bf}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])))}
memory:
  addr={defs={0x080484be,0x080484c5}, expr=(add[32] esp_0[32] 3[32])} value={defs={0x080484c5}, expr=8[8]}
  addr={defs={0x080484be,0x080484c5}, expr=(add[32] esp_0[32] 2[32])} value={defs={0x080484c5}, expr=4[8]}
  addr={defs={0x080484be,0x080484c5}, expr=(add[32] esp_0[32] 1[32])} value={defs={0x080484c5}, expr=-124[8]}
  addr={defs={0x080484be,0x080484c5}, expr=esp_0[32]} value={defs={0x080484c5}, expr=-54[8]}
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17099[32])
  addr={defs={0x080484be}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17099[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  ebx       = {defs={0x080484bf}, expr=(add[32] v17099[32] 4618[32])}
  esp       = {defs={0x080484be,0x080484c5}, expr=(add[32] frame_pointer[32] 4[32])}
  eip       = {defs={0x080484c5}, expr=0x080482c8[32]}
  pf        = {defs={0x080484bf}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17099[32] 4618[32])) (extract[1] 1[32] 2[32] (add[32] v17099[32] 4618[32])) (extract[1] 2[32] 3[32] (add[32] v17099[32] 4618[32])) (extract[1] 3[32] 4[32] (add[32] v17099[32] 4618[32])) (extract[1] 4[32] 5[32] (add[32] v17099[32] 4618[32])) (extract[1] 5[32] 6[32] (add[32] v17099[32] 4618[32])) (extract[1] 6[32] 7[32] (add[32] v17099[32] 4618[32])) (extract[1] 7[32] 8[32] (add[32] v17099[32] 4618[32]))))}
  sf        = {defs={0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v17099[32] 4618[32]))}
  zf        = {defs={0x080484bf}, expr=(zerop[1] (add[32] v17099[32] 4618[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484bf}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484bf}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484bf}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17099[32]) (add[33] (uextend[33] 33[32] v17099[32]) 4618[33]) 4618[33])))}
memory:
  addr={defs={0x080484be,0x080484c5}, expr=(add[32] frame_pointer[32] 7[32])} value={defs={0x080484c5}, expr=8[8]}
  addr={defs={0x080484be,0x080484c5}, expr=(add[32] frame_pointer[32] 6[32])} value={defs={0x080484c5}, expr=4[8]}
  addr={defs={0x080484be,0x080484c5}, expr=(add[32] frame_pointer[32] 5[32])} value={defs={0x080484c5}, expr=-124[8]}
  addr={defs={0x080484be,0x080484c5}, expr=(add[32] frame_pointer[32] 4[32])} value={defs={0x080484c5}, expr=-54[8]}
  addr={defs={0x080484be}, expr=(add[32] frame_pointer[32] 7[32])} value=(extract[8] 24[32] 32[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] frame_pointer[32] 6[32])} value=(extract[8] 16[32] 24[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] frame_pointer[32] 5[32])} value=(extract[8] 8[32] 16[32] v17099[32])
  addr={defs={0x080484be}, expr=(add[32] frame_pointer[32] 4[32])} value=(extract[8] 0[32] 8[32] v17099[32])
Symbolic@0x22ecb30 insn@0x080484c5[2]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
Symbolic@0x22ecb30 insn@0x080484ca[0]: startInstruction(lea    eax, [ebx + 0xffffff20<-0x000000e0>])
Symbolic@0x22ecb30 insn@0x080484ca[0]: number_(32, 6) = {defs={0x080484ca}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x080484ca[0]: number_(32, 134513866) = {defs={0x080484ca}, expr=0x080484ca[32]}
Symbolic@0x22ecb30 insn@0x080484ca[0]: add({defs={0x080484ca}, expr=0x080484ca[32]}, {defs={0x080484ca}, expr=6[32]}) = {defs={0x080484ca}, expr=0x080484d0[32]}
Symbolic@0x22ecb30 insn@0x080484ca[0]: writeRegister(eip, {defs={0x080484ca}, expr=0x080484d0[32]})
Symbolic@0x22ecb30 insn@0x080484ca[0]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x080484ca[0]: number_(32, 18446744073709551392) = {defs={0x080484ca}, expr=-224[32]}
Symbolic@0x22ecb30 insn@0x080484ca[0]: add(ebx_0[32], {defs={0x080484ca}, expr=-224[32]}) = {defs={0x080484ca}, expr=(add[32] ebx_0[32] -224[32])}
Symbolic@0x22ecb30 insn@0x080484ca[0]: writeRegister(eax, {defs={0x080484ca}, expr=(add[32] ebx_0[32] -224[32])})
Symbolic@0x22ecb30 insn@0x080484ca[0]: finishInstruction(lea    eax, [ebx + 0xffffff20<-0x000000e0>])
registers:
  eax    = {defs={0x080484ca}, expr=(add[32] ebx_0[32] -224[32])}
  eip    = {defs={0x080484ca}, expr=0x080484d0[32]}
memory:

0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
Symbolic@0x22ecb30 insn@0x080484d0[1]: startInstruction(lea    edx, [ebx + 0xffffff20<-0x000000e0>])
Symbolic@0x22ecb30 insn@0x080484d0[1]: number_(32, 6) = {defs={0x080484d0}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x080484d0[1]: number_(32, 134513872) = {defs={0x080484d0}, expr=0x080484d0[32]}
Symbolic@0x22ecb30 insn@0x080484d0[1]: add({defs={0x080484d0}, expr=0x080484d0[32]}, {defs={0x080484d0}, expr=6[32]}) = {defs={0x080484d0}, expr=0x080484d6[32]}
Symbolic@0x22ecb30 insn@0x080484d0[1]: writeRegister(eip, {defs={0x080484d0}, expr=0x080484d6[32]})
Symbolic@0x22ecb30 insn@0x080484d0[1]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x080484d0[1]: number_(32, 18446744073709551392) = {defs={0x080484d0}, expr=-224[32]}
Symbolic@0x22ecb30 insn@0x080484d0[1]: add(ebx_0[32], {defs={0x080484d0}, expr=-224[32]}) = {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}
Symbolic@0x22ecb30 insn@0x080484d0[1]: writeRegister(edx, {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])})
Symbolic@0x22ecb30 insn@0x080484d0[1]: finishInstruction(lea    edx, [ebx + 0xffffff20<-0x000000e0>])
registers:
  eax    = {defs={0x080484ca}, expr=(add[32] ebx_0[32] -224[32])}
  edx    = {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}
  eip    = {defs={0x080484d0}, expr=0x080484d6[32]}
memory:

0x80484d6:sub    eax, edx
Symbolic@0x22ecb30 insn@0x080484d6[2]: startInstruction(sub    eax, edx)
Symbolic@0x22ecb30 insn@0x080484d6[2]: number_(32, 2) = {defs={0x080484d6}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080484d6[2]: number_(32, 134513878) = {defs={0x080484d6}, expr=0x080484d6[32]}
Symbolic@0x22ecb30 insn@0x080484d6[2]: add({defs={0x080484d6}, expr=0x080484d6[32]}, {defs={0x080484d6}, expr=2[32]}) = {defs={0x080484d6}, expr=0x080484d8[32]}
Symbolic@0x22ecb30 insn@0x080484d6[2]: writeRegister(eip, {defs={0x080484d6}, expr=0x080484d8[32]})
Symbolic@0x22ecb30 insn@0x080484d6[2]: boolean_(0) = {defs={0x080484d6}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080484d6[2]: readRegister(edx) = {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}
Symbolic@0x22ecb30 insn@0x080484d6[2]: invert({defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}) = {defs={0x080484d0,0x080484d6}, expr=(invert[32] (add[32] ebx_0[32] -224[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: readRegister(eax) = {defs={0x080484ca}, expr=(add[32] ebx_0[32] -224[32])}
Symbolic@0x22ecb30 insn@0x080484d6[2]: invert({defs={0x080484d6}, expr=0[1]}) = {defs={0x080484d6}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484d6[2]: addWithCarries({defs={0x080484ca}, expr=(add[32] ebx_0[32] -224[32])}, {defs={0x080484d0,0x080484d6}, expr=(invert[32] (add[32] ebx_0[32] -224[32]))}, {defs={0x080484d6}, expr=1[1]}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}
Symbolic@0x22ecb30 insn@0x080484d6[2]: also returns: {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}, 0, 8) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 1, 2) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 0, 1) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: xor_({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 3, 4) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 2, 3) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: xor_({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 5, 6) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 4, 5) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: xor_({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 7, 8) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 6, 7) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: xor_({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: xor_({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: xor_({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: xor_({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: invert({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: writeRegister(pf, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))})
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}, 31, 32) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: writeRegister(sf, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))})
Symbolic@0x22ecb30 insn@0x080484d6[2]: equalToZero({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(zerop[1] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: writeRegister(zf, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(zerop[1] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))})
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}, 31, 32) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}, 30, 31) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}, 3, 4) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: invert({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: writeRegister(af, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x080484d6[2]: invert({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: writeRegister(cf, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x080484d6[2]: xor_({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33])))}) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x080484d6[2]: writeRegister(of, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x080484d6[2]: writeRegister(eax, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])})
Symbolic@0x22ecb30 insn@0x080484d6[2]: finishInstruction(sub    eax, edx)
registers:
  eax       = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}
  edx       = {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}
  eip       = {defs={0x080484d6}, expr=0x080484d8[32]}
  pf        = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
  sf        = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
  zf        = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(zerop[1] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
memory:

0x80484d8:sar    eax, 0x02
Symbolic@0x22ecb30 insn@0x080484d8[3]: startInstruction(sar    eax, 0x02)
Symbolic@0x22ecb30 insn@0x080484d8[3]: number_(32, 3) = {defs={0x080484d8}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: number_(32, 134513880) = {defs={0x080484d8}, expr=0x080484d8[32]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: add({defs={0x080484d8}, expr=0x080484d8[32]}, {defs={0x080484d8}, expr=3[32]}) = {defs={0x080484d8}, expr=0x080484db[32]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: writeRegister(eip, {defs={0x080484d8}, expr=0x080484db[32]})
Symbolic@0x22ecb30 insn@0x080484d8[3]: number_(8, 2) = {defs={0x080484d8}, expr=2[8]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: undefined_(32) = v17175[32]
Symbolic@0x22ecb30 insn@0x080484d8[3]: readRegister(eax) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484d8}, expr=2[8]}, 0, 5) = {defs={0x080484d8}, expr=2[5]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: equalToZero({defs={0x080484d8}, expr=2[5]}) = {defs={0x080484d8}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484d8}, expr=2[8]}, 5, 8) = {defs={0x080484d8}, expr=0[3]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: equalToZero({defs={0x080484d8}, expr=0[3]}) = {defs={0x080484d8}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: invert({defs={0x080484d8}, expr=1[1]}) = {defs={0x080484d8}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: number_(5, 31) = {defs={0x080484d8}, expr=-1[5]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: add({defs={0x080484d8}, expr=2[5]}, {defs={0x080484d8}, expr=-1[5]}) = {defs={0x080484d8}, expr=1[5]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: equalToZero({defs={0x080484d8}, expr=1[5]}) = {defs={0x080484d8}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: shiftRightArithmetic({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}, {defs={0x080484d8}, expr=2[5]}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}, 31, 32) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 31, 32) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: undefined_(1) = v17176[1]
Symbolic@0x22ecb30 insn@0x080484d8[3]: readRegister(af) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: ite({defs={0x080484d8}, expr=0[1]}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}, v17176[1]) = {defs={0x080484d8}, expr=v17176[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: writeRegister(af, {defs={0x080484d8}, expr=v17176[1]})
Symbolic@0x22ecb30 insn@0x080484d8[3]: add({defs={0x080484d8}, expr=2[5]}, {defs={0x080484d8}, expr=-1[5]}) = {defs={0x080484d8}, expr=1[5]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: shiftRight({defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])}, {defs={0x080484d8}, expr=1[5]}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 0, 1) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: ite({defs={0x080484d8}, expr=0[1]}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: readRegister(cf) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: ite({defs={0x080484d8}, expr=0[1]}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: writeRegister(cf, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))})
Symbolic@0x22ecb30 insn@0x080484d8[3]: undefined_(1) = v17177[1]
Symbolic@0x22ecb30 insn@0x080484d8[3]: readRegister(of) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: ite({defs={0x080484d8}, expr=0[1]}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] ebx_0[32] -224[32])) (uextend[33] 33[32] (invert[32] (add[32] ebx_0[32] -224[32]))) 1[33]))))}, v17177[1]) = {defs={0x080484d8}, expr=v17177[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: boolean_(0) = {defs={0x080484d8}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: ite({defs={0x080484d8}, expr=0[1]}, {defs={0x080484d8}, expr=0[1]}, {defs={0x080484d8}, expr=v17177[1]}) = {defs={0x080484d8}, expr=v17177[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: writeRegister(of, {defs={0x080484d8}, expr=v17177[1]})
Symbolic@0x22ecb30 insn@0x080484d8[3]: invert({defs={0x080484d8}, expr=0[1]}) = {defs={0x080484d8}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 0, 8) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, 31, 32) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: readRegister(pf) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, 1, 2) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, 0, 1) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: xor_({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, 3, 4) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, 2, 3) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: xor_({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, 5, 6) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, 4, 5) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: xor_({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, 7, 8) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: extract({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, 6, 7) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: xor_({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: xor_({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: xor_({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: xor_({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: invert({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: ite({defs={0x080484d8}, expr=1[1]}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: writeRegister(pf, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))))})
Symbolic@0x22ecb30 insn@0x080484d8[3]: readRegister(sf) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: ite({defs={0x080484d8}, expr=1[1]}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: writeRegister(sf, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))})
Symbolic@0x22ecb30 insn@0x080484d8[3]: readRegister(zf) = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(zerop[1] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: equalToZero({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: ite({defs={0x080484d8}, expr=1[1]}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}, {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(zerop[1] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484d8[3]: writeRegister(zf, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))})
Symbolic@0x22ecb30 insn@0x080484d8[3]: writeRegister(eax, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))})
Symbolic@0x22ecb30 insn@0x080484d8[3]: finishInstruction(sar    eax, 0x02)
registers:
  eax       = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
  edx       = {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}
  eip       = {defs={0x080484d8}, expr=0x080484db[32]}
  pf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))))}
  sf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  zf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484d8}, expr=v17176[1]}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484d8}, expr=v17177[1]}
memory:

0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
Symbolic@0x22ecb30 insn@0x080484db[4]: startInstruction(mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax)
Symbolic@0x22ecb30 insn@0x080484db[4]: number_(32, 3) = {defs={0x080484db}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080484db[4]: number_(32, 134513883) = {defs={0x080484db}, expr=0x080484db[32]}
Symbolic@0x22ecb30 insn@0x080484db[4]: add({defs={0x080484db}, expr=0x080484db[32]}, {defs={0x080484db}, expr=3[32]}) = {defs={0x080484db}, expr=0x080484de[32]}
Symbolic@0x22ecb30 insn@0x080484db[4]: writeRegister(eip, {defs={0x080484db}, expr=0x080484de[32]})
Symbolic@0x22ecb30 insn@0x080484db[4]: readRegister(eax) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
Symbolic@0x22ecb30 insn@0x080484db[4]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080484db[4]: number_(8, 18446744073709551600) = {defs={0x080484db}, expr=-16[8]}
Symbolic@0x22ecb30 insn@0x080484db[4]: signExtend({defs={0x080484db}, expr=-16[8]}, 32) = {defs={0x080484db}, expr=-16[32]}
Symbolic@0x22ecb30 insn@0x080484db[4]: add(ebp_0[32], {defs={0x080484db}, expr=-16[32]}) = {defs={0x080484db}, expr=(add[32] ebp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x080484db[4]: boolean_(1) = {defs={0x080484db}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484db[4]: writeMemory(ss, {defs={0x080484db}, expr=(add[32] ebp_0[32] -16[32])}, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}, {defs={0x080484db}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080484db[4]: finishInstruction(mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax)
registers:
  eax       = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
  edx       = {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}
  eip       = {defs={0x080484db}, expr=0x080484de[32]}
  pf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))))}
  sf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  zf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484d8}, expr=v17176[1]}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484d8}, expr=v17177[1]}
memory:
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -13[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -14[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -15[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}

0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
Symbolic@0x22ecb30 insn@0x080484de[5]: startInstruction(jne    0x080484f0<<StaticData@0x080484e8>+8>)
Symbolic@0x22ecb30 insn@0x080484de[5]: number_(32, 2) = {defs={0x080484de}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080484de[5]: number_(32, 134513886) = {defs={0x080484de}, expr=0x080484de[32]}
Symbolic@0x22ecb30 insn@0x080484de[5]: add({defs={0x080484de}, expr=0x080484de[32]}, {defs={0x080484de}, expr=2[32]}) = {defs={0x080484de}, expr=0x080484e0[32]}
Symbolic@0x22ecb30 insn@0x080484de[5]: writeRegister(eip, {defs={0x080484de}, expr=0x080484e0[32]})
Symbolic@0x22ecb30 insn@0x080484de[5]: readRegister(zf) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484de[5]: invert({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484de}, expr=(invert[1] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}
Symbolic@0x22ecb30 insn@0x080484de[5]: readRegister(eip) = {defs={0x080484de}, expr=0x080484e0[32]}
Symbolic@0x22ecb30 insn@0x080484de[5]: number_(32, 134513904) = {defs={0x080484de}, expr=0x080484f0[32]}
Symbolic@0x22ecb30 insn@0x080484de[5]: ite({defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484de}, expr=(invert[1] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))))}, {defs={0x080484de}, expr=0x080484f0[32]}, {defs={0x080484de}, expr=0x080484e0[32]}) = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484de}, expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))) 0x080484f0[32] 0x080484e0[32])}
Symbolic@0x22ecb30 insn@0x080484de[5]: writeRegister(eip, {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484de}, expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))) 0x080484f0[32] 0x080484e0[32])})
Symbolic@0x22ecb30 insn@0x080484de[5]: finishInstruction(jne    0x080484f0<<StaticData@0x080484e8>+8>)
registers:
  eax       = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
  edx       = {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}
  eip       = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484de}, expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))) 0x080484f0[32] 0x080484e0[32])}
  pf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))))}
  sf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  zf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484d8}, expr=v17176[1]}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484d8}, expr=v17177[1]}
memory:
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -13[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -14[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -15[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))}
  edx       = {defs={0x080484d0}, expr=(add[32] ebx_0[32] -224[32])}
  esp       = (add[32] frame_pointer[32] 4[32])
  eip       = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484de}, expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))) 0x080484f0[32] 0x080484e0[32])}
  pf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))))}
  sf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  zf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484d8}, expr=v17176[1]}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484d8}, expr=v17177[1]}
memory:
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -13[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -14[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -15[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
  addr={defs={0x080484db}, expr=(add[32] ebp_0[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] ebx_0[32] -224[32])) ebx_0[32] -223[32])))}
Symbolic@0x22ecb30 insn@0x080484de[5]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80484e0:add    esp, 0x0c
Symbolic@0x22ecb30 insn@0x080484e0[0]: startInstruction(add    esp, 0x0c)
Symbolic@0x22ecb30 insn@0x080484e0[0]: number_(32, 3) = {defs={0x080484e0}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080484e0[0]: number_(32, 134513888) = {defs={0x080484e0}, expr=0x080484e0[32]}
Symbolic@0x22ecb30 insn@0x080484e0[0]: add({defs={0x080484e0}, expr=0x080484e0[32]}, {defs={0x080484e0}, expr=3[32]}) = {defs={0x080484e0}, expr=0x080484e3[32]}
Symbolic@0x22ecb30 insn@0x080484e0[0]: writeRegister(eip, {defs={0x080484e0}, expr=0x080484e3[32]})
Symbolic@0x22ecb30 insn@0x080484e0[0]: boolean_(0) = {defs={0x080484e0}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080484e0[0]: number_(32, 12) = {defs={0x080484e0}, expr=12[32]}
Symbolic@0x22ecb30 insn@0x080484e0[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080484e0[0]: addWithCarries(esp_0[32], {defs={0x080484e0}, expr=12[32]}, {defs={0x080484e0}, expr=0[1]}) = {defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])}
Symbolic@0x22ecb30 insn@0x080484e0[0]: also returns: {defs={0x080484e0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])}, 0, 8) = {defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 1, 2) = {defs={0x080484e0}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 0, 1) = {defs={0x080484e0}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: xor_({defs={0x080484e0}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32]))}, {defs={0x080484e0}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32]))}) = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 3, 4) = {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 2, 3) = {defs={0x080484e0}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: xor_({defs={0x080484e0}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32]))}, {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32]))}) = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 5, 6) = {defs={0x080484e0}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 4, 5) = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: xor_({defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32]))}, {defs={0x080484e0}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32]))}) = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 7, 8) = {defs={0x080484e0}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 6, 7) = {defs={0x080484e0}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: xor_({defs={0x080484e0}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32]))}, {defs={0x080484e0}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))}) = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: xor_({defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])))}, {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])))}) = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: xor_({defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])))}, {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}) = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: xor_({defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])))}, {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}) = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: invert({defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}) = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: writeRegister(pf, {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))})
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])}, 31, 32) = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: writeRegister(sf, {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))})
Symbolic@0x22ecb30 insn@0x080484e0[0]: equalToZero({defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])}) = {defs={0x080484e0}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: writeRegister(zf, {defs={0x080484e0}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))})
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}, 31, 32) = {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}, 30, 31) = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: extract({defs={0x080484e0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}, 3, 4) = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: writeRegister(af, {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))})
Symbolic@0x22ecb30 insn@0x080484e0[0]: writeRegister(cf, {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))})
Symbolic@0x22ecb30 insn@0x080484e0[0]: xor_({defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}, {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}) = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
Symbolic@0x22ecb30 insn@0x080484e0[0]: writeRegister(of, {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))})
Symbolic@0x22ecb30 insn@0x080484e0[0]: writeRegister(esp, {defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])})
Symbolic@0x22ecb30 insn@0x080484e0[0]: finishInstruction(add    esp, 0x0c)
registers:
  esp       = {defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])}
  eip       = {defs={0x080484e0}, expr=0x080484e3[32]}
  pf        = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x080484e0}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:

0x80484e3:pop    ebx
Symbolic@0x22ecb30 insn@0x080484e3[1]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x080484e3[1]: number_(32, 1) = {defs={0x080484e3}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484e3[1]: number_(32, 134513891) = {defs={0x080484e3}, expr=0x080484e3[32]}
Symbolic@0x22ecb30 insn@0x080484e3[1]: add({defs={0x080484e3}, expr=0x080484e3[32]}, {defs={0x080484e3}, expr=1[32]}) = {defs={0x080484e3}, expr=0x080484e4[32]}
Symbolic@0x22ecb30 insn@0x080484e3[1]: writeRegister(eip, {defs={0x080484e3}, expr=0x080484e4[32]})
Symbolic@0x22ecb30 insn@0x080484e3[1]: readRegister(esp) = {defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])}
Symbolic@0x22ecb30 insn@0x080484e3[1]: number_(32, 4) = {defs={0x080484e3}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080484e3[1]: add({defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])}, {defs={0x080484e3}, expr=4[32]}) = {defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 16[32])}
Symbolic@0x22ecb30 insn@0x080484e3[1]: writeRegister(esp, {defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 16[32])})
Symbolic@0x22ecb30 insn@0x080484e3[1]: boolean_(1) = {defs={0x080484e3}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484e3[1]: readMemory(ss, {defs={0x080484e0}, expr=(add[32] esp_0[32] 12[32])}, {defs={0x080484e3}, expr=1[1]}, 32) = v17249[32]
Symbolic@0x22ecb30 insn@0x080484e3[1]: writeRegister(ebx, v17249[32])
Symbolic@0x22ecb30 insn@0x080484e3[1]: finishInstruction(pop    ebx)
registers:
  ebx       = v17249[32]
  esp       = {defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 16[32])}
  eip       = {defs={0x080484e3}, expr=0x080484e4[32]}
  pf        = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x080484e0}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17249[32])

0x80484e4:pop    esi
Symbolic@0x22ecb30 insn@0x080484e4[2]: startInstruction(pop    esi)
Symbolic@0x22ecb30 insn@0x080484e4[2]: number_(32, 1) = {defs={0x080484e4}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484e4[2]: number_(32, 134513892) = {defs={0x080484e4}, expr=0x080484e4[32]}
Symbolic@0x22ecb30 insn@0x080484e4[2]: add({defs={0x080484e4}, expr=0x080484e4[32]}, {defs={0x080484e4}, expr=1[32]}) = {defs={0x080484e4}, expr=0x080484e5[32]}
Symbolic@0x22ecb30 insn@0x080484e4[2]: writeRegister(eip, {defs={0x080484e4}, expr=0x080484e5[32]})
Symbolic@0x22ecb30 insn@0x080484e4[2]: readRegister(esp) = {defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 16[32])}
Symbolic@0x22ecb30 insn@0x080484e4[2]: number_(32, 4) = {defs={0x080484e4}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080484e4[2]: add({defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 16[32])}, {defs={0x080484e4}, expr=4[32]}) = {defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 20[32])}
Symbolic@0x22ecb30 insn@0x080484e4[2]: writeRegister(esp, {defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 20[32])})
Symbolic@0x22ecb30 insn@0x080484e4[2]: boolean_(1) = {defs={0x080484e4}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484e4[2]: readMemory(ss, {defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 16[32])}, {defs={0x080484e4}, expr=1[1]}, 32) = v17254[32]
Symbolic@0x22ecb30 insn@0x080484e4[2]: writeRegister(esi, v17254[32])
Symbolic@0x22ecb30 insn@0x080484e4[2]: finishInstruction(pop    esi)
registers:
  ebx       = v17249[32]
  esp       = {defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 20[32])}
  esi       = v17254[32]
  eip       = {defs={0x080484e4}, expr=0x080484e5[32]}
  pf        = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x080484e0}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 19[32])} value=(extract[8] 24[32] 32[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 18[32])} value=(extract[8] 16[32] 24[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 17[32])} value=(extract[8] 8[32] 16[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 16[32])} value=(extract[8] 0[32] 8[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17249[32])

0x80484e5:pop    edi
Symbolic@0x22ecb30 insn@0x080484e5[3]: startInstruction(pop    edi)
Symbolic@0x22ecb30 insn@0x080484e5[3]: number_(32, 1) = {defs={0x080484e5}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484e5[3]: number_(32, 134513893) = {defs={0x080484e5}, expr=0x080484e5[32]}
Symbolic@0x22ecb30 insn@0x080484e5[3]: add({defs={0x080484e5}, expr=0x080484e5[32]}, {defs={0x080484e5}, expr=1[32]}) = {defs={0x080484e5}, expr=0x080484e6[32]}
Symbolic@0x22ecb30 insn@0x080484e5[3]: writeRegister(eip, {defs={0x080484e5}, expr=0x080484e6[32]})
Symbolic@0x22ecb30 insn@0x080484e5[3]: readRegister(esp) = {defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 20[32])}
Symbolic@0x22ecb30 insn@0x080484e5[3]: number_(32, 4) = {defs={0x080484e5}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080484e5[3]: add({defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 20[32])}, {defs={0x080484e5}, expr=4[32]}) = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 24[32])}
Symbolic@0x22ecb30 insn@0x080484e5[3]: writeRegister(esp, {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 24[32])})
Symbolic@0x22ecb30 insn@0x080484e5[3]: boolean_(1) = {defs={0x080484e5}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484e5[3]: readMemory(ss, {defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 20[32])}, {defs={0x080484e5}, expr=1[1]}, 32) = v17259[32]
Symbolic@0x22ecb30 insn@0x080484e5[3]: writeRegister(edi, v17259[32])
Symbolic@0x22ecb30 insn@0x080484e5[3]: finishInstruction(pop    edi)
registers:
  ebx       = v17249[32]
  esp       = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 24[32])}
  esi       = v17254[32]
  edi       = v17259[32]
  eip       = {defs={0x080484e5}, expr=0x080484e6[32]}
  pf        = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x080484e0}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 23[32])} value=(extract[8] 24[32] 32[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 22[32])} value=(extract[8] 16[32] 24[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 21[32])} value=(extract[8] 8[32] 16[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 20[32])} value=(extract[8] 0[32] 8[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 19[32])} value=(extract[8] 24[32] 32[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 18[32])} value=(extract[8] 16[32] 24[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 17[32])} value=(extract[8] 8[32] 16[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 16[32])} value=(extract[8] 0[32] 8[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17249[32])

0x80484e6:pop    ebp
Symbolic@0x22ecb30 insn@0x080484e6[4]: startInstruction(pop    ebp)
Symbolic@0x22ecb30 insn@0x080484e6[4]: number_(32, 1) = {defs={0x080484e6}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484e6[4]: number_(32, 134513894) = {defs={0x080484e6}, expr=0x080484e6[32]}
Symbolic@0x22ecb30 insn@0x080484e6[4]: add({defs={0x080484e6}, expr=0x080484e6[32]}, {defs={0x080484e6}, expr=1[32]}) = {defs={0x080484e6}, expr=0x080484e7[32]}
Symbolic@0x22ecb30 insn@0x080484e6[4]: writeRegister(eip, {defs={0x080484e6}, expr=0x080484e7[32]})
Symbolic@0x22ecb30 insn@0x080484e6[4]: readRegister(esp) = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 24[32])}
Symbolic@0x22ecb30 insn@0x080484e6[4]: number_(32, 4) = {defs={0x080484e6}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080484e6[4]: add({defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 24[32])}, {defs={0x080484e6}, expr=4[32]}) = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 28[32])}
Symbolic@0x22ecb30 insn@0x080484e6[4]: writeRegister(esp, {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 28[32])})
Symbolic@0x22ecb30 insn@0x080484e6[4]: boolean_(1) = {defs={0x080484e6}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484e6[4]: readMemory(ss, {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 24[32])}, {defs={0x080484e6}, expr=1[1]}, 32) = v17264[32]
Symbolic@0x22ecb30 insn@0x080484e6[4]: writeRegister(ebp, v17264[32])
Symbolic@0x22ecb30 insn@0x080484e6[4]: finishInstruction(pop    ebp)
registers:
  ebx       = v17249[32]
  esp       = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 28[32])}
  ebp       = v17264[32]
  esi       = v17254[32]
  edi       = v17259[32]
  eip       = {defs={0x080484e6}, expr=0x080484e7[32]}
  pf        = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x080484e0}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 27[32])} value=(extract[8] 24[32] 32[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 26[32])} value=(extract[8] 16[32] 24[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 25[32])} value=(extract[8] 8[32] 16[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 24[32])} value=(extract[8] 0[32] 8[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 23[32])} value=(extract[8] 24[32] 32[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 22[32])} value=(extract[8] 16[32] 24[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 21[32])} value=(extract[8] 8[32] 16[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 20[32])} value=(extract[8] 0[32] 8[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 19[32])} value=(extract[8] 24[32] 32[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 18[32])} value=(extract[8] 16[32] 24[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 17[32])} value=(extract[8] 8[32] 16[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 16[32])} value=(extract[8] 0[32] 8[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17249[32])

0x80484e7:ret    
Symbolic@0x22ecb30 insn@0x080484e7[5]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x080484e7[5]: number_(32, 1) = {defs={0x080484e7}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080484e7[5]: number_(32, 134513895) = {defs={0x080484e7}, expr=0x080484e7[32]}
Symbolic@0x22ecb30 insn@0x080484e7[5]: add({defs={0x080484e7}, expr=0x080484e7[32]}, {defs={0x080484e7}, expr=1[32]}) = {defs={0x080484e7}, expr=0x080484e8[32]}
Symbolic@0x22ecb30 insn@0x080484e7[5]: writeRegister(eip, {defs={0x080484e7}, expr=0x080484e8[32]})
Symbolic@0x22ecb30 insn@0x080484e7[5]: number_(32, 0) = {defs={0x080484e7}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080484e7[5]: readRegister(esp) = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 28[32])}
Symbolic@0x22ecb30 insn@0x080484e7[5]: number_(32, 4) = {defs={0x080484e7}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080484e7[5]: add({defs={0x080484e7}, expr=4[32]}, {defs={0x080484e7}, expr=0[32]}) = {defs={0x080484e7}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080484e7[5]: add({defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 28[32])}, {defs={0x080484e7}, expr=4[32]}) = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] esp_0[32] 32[32])}
Symbolic@0x22ecb30 insn@0x080484e7[5]: boolean_(1) = {defs={0x080484e7}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080484e7[5]: readMemory(ss, {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 28[32])}, {defs={0x080484e7}, expr=1[1]}, 32) = v17269[32]
Symbolic@0x22ecb30 insn@0x080484e7[5]: filterReturnTarget(v17269[32]) = v17269[32]
Symbolic@0x22ecb30 insn@0x080484e7[5]: writeRegister(eip, v17269[32])
Symbolic@0x22ecb30 insn@0x080484e7[5]: writeRegister(esp, {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] esp_0[32] 32[32])})
Symbolic@0x22ecb30 insn@0x080484e7[5]: finishInstruction(ret)
registers:
  ebx       = v17249[32]
  esp       = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] esp_0[32] 32[32])}
  ebp       = v17264[32]
  esi       = v17254[32]
  edi       = v17259[32]
  eip       = v17269[32]
  pf        = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x080484e0}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] esp_0[32] 31[32])} value=(extract[8] 24[32] 32[32] v17269[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] esp_0[32] 30[32])} value=(extract[8] 16[32] 24[32] v17269[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] esp_0[32] 29[32])} value=(extract[8] 8[32] 16[32] v17269[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] esp_0[32] 28[32])} value=(extract[8] 0[32] 8[32] v17269[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 27[32])} value=(extract[8] 24[32] 32[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 26[32])} value=(extract[8] 16[32] 24[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 25[32])} value=(extract[8] 8[32] 16[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] esp_0[32] 24[32])} value=(extract[8] 0[32] 8[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 23[32])} value=(extract[8] 24[32] 32[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 22[32])} value=(extract[8] 16[32] 24[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 21[32])} value=(extract[8] 8[32] 16[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] esp_0[32] 20[32])} value=(extract[8] 0[32] 8[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 19[32])} value=(extract[8] 24[32] 32[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 18[32])} value=(extract[8] 16[32] 24[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 17[32])} value=(extract[8] 8[32] 16[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] esp_0[32] 16[32])} value=(extract[8] 0[32] 8[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17249[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  ebx       = v17249[32]
  esp       = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] frame_pointer[32] 36[32])}
  ebp       = v17264[32]
  esi       = v17254[32]
  edi       = v17259[32]
  eip       = v17269[32]
  pf        = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 1[32] 2[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 2[32] 3[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 3[32] 4[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 4[32] 5[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 5[32] 6[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 6[32] 7[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 7[32] 8[32] (add[32] frame_pointer[32] 16[32]))))}
  sf        = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] frame_pointer[32] 16[32]))}
  zf        = {defs={0x080484e0}, expr=(zerop[1] (add[32] frame_pointer[32] 16[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080484e0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080484e0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) 12[33]) 12[33])))}
memory:
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] frame_pointer[32] 35[32])} value=(extract[8] 24[32] 32[32] v17269[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] frame_pointer[32] 34[32])} value=(extract[8] 16[32] 24[32] v17269[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] frame_pointer[32] 33[32])} value=(extract[8] 8[32] 16[32] v17269[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] frame_pointer[32] 32[32])} value=(extract[8] 0[32] 8[32] v17269[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] frame_pointer[32] 31[32])} value=(extract[8] 24[32] 32[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] frame_pointer[32] 30[32])} value=(extract[8] 16[32] 24[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] frame_pointer[32] 29[32])} value=(extract[8] 8[32] 16[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] frame_pointer[32] 28[32])} value=(extract[8] 0[32] 8[32] v17264[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] frame_pointer[32] 27[32])} value=(extract[8] 24[32] 32[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] frame_pointer[32] 26[32])} value=(extract[8] 16[32] 24[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] frame_pointer[32] 25[32])} value=(extract[8] 8[32] 16[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] frame_pointer[32] 24[32])} value=(extract[8] 0[32] 8[32] v17259[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] frame_pointer[32] 23[32])} value=(extract[8] 24[32] 32[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] frame_pointer[32] 22[32])} value=(extract[8] 16[32] 24[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] frame_pointer[32] 21[32])} value=(extract[8] 8[32] 16[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] frame_pointer[32] 20[32])} value=(extract[8] 0[32] 8[32] v17254[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] frame_pointer[32] 19[32])} value=(extract[8] 24[32] 32[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] frame_pointer[32] 18[32])} value=(extract[8] 16[32] 24[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] frame_pointer[32] 17[32])} value=(extract[8] 8[32] 16[32] v17249[32])
  addr={defs={0x080484e0,0x080484e3}, expr=(add[32] frame_pointer[32] 16[32])} value=(extract[8] 0[32] 8[32] v17249[32])
Symbolic@0x22ecb30 insn@0x080484e7[5]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048520:push   ebp
Symbolic@0x22ecb30 insn@0x08048520[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x08048520[0]: number_(32, 1) = {defs={0x08048520}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048520[0]: number_(32, 134513952) = {defs={0x08048520}, expr=0x08048520[32]}
Symbolic@0x22ecb30 insn@0x08048520[0]: add({defs={0x08048520}, expr=0x08048520[32]}, {defs={0x08048520}, expr=1[32]}) = {defs={0x08048520}, expr=0x08048521[32]}
Symbolic@0x22ecb30 insn@0x08048520[0]: writeRegister(eip, {defs={0x08048520}, expr=0x08048521[32]})
Symbolic@0x22ecb30 insn@0x08048520[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048520[0]: number_(32, 18446744073709551612) = {defs={0x08048520}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048520[0]: add(esp_0[32], {defs={0x08048520}, expr=-4[32]}) = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048520[0]: boolean_(1) = {defs={0x08048520}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048520[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048520[0]: writeMemory(ss, {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x08048520}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048520[0]: writeRegister(esp, {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048520[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048520}, expr=0x08048521[32]}
memory:
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048521:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x08048521[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x08048521[1]: number_(32, 2) = {defs={0x08048521}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048521[1]: number_(32, 134513953) = {defs={0x08048521}, expr=0x08048521[32]}
Symbolic@0x22ecb30 insn@0x08048521[1]: add({defs={0x08048521}, expr=0x08048521[32]}, {defs={0x08048521}, expr=2[32]}) = {defs={0x08048521}, expr=0x08048523[32]}
Symbolic@0x22ecb30 insn@0x08048521[1]: writeRegister(eip, {defs={0x08048521}, expr=0x08048523[32]})
Symbolic@0x22ecb30 insn@0x08048521[1]: readRegister(esp) = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048521[1]: writeRegister(ebp, {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048521[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048521}, expr=0x08048523[32]}
memory:
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048523:push   edi
Symbolic@0x22ecb30 insn@0x08048523[2]: startInstruction(push   edi)
Symbolic@0x22ecb30 insn@0x08048523[2]: number_(32, 1) = {defs={0x08048523}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048523[2]: number_(32, 134513955) = {defs={0x08048523}, expr=0x08048523[32]}
Symbolic@0x22ecb30 insn@0x08048523[2]: add({defs={0x08048523}, expr=0x08048523[32]}, {defs={0x08048523}, expr=1[32]}) = {defs={0x08048523}, expr=0x08048524[32]}
Symbolic@0x22ecb30 insn@0x08048523[2]: writeRegister(eip, {defs={0x08048523}, expr=0x08048524[32]})
Symbolic@0x22ecb30 insn@0x08048523[2]: readRegister(esp) = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048523[2]: number_(32, 18446744073709551612) = {defs={0x08048523}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048523[2]: add({defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048523}, expr=-4[32]}) = {defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x08048523[2]: boolean_(1) = {defs={0x08048523}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048523[2]: readRegister(edi) = edi_0[32]
Symbolic@0x22ecb30 insn@0x08048523[2]: writeMemory(ss, {defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])}, edi_0[32], {defs={0x08048523}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048523[2]: writeRegister(esp, {defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])})
Symbolic@0x22ecb30 insn@0x08048523[2]: finishInstruction(push   edi)
registers:
  esp    = {defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])}
  ebp    = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048523}, expr=0x08048524[32]}
memory:
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048524:push   esi
Symbolic@0x22ecb30 insn@0x08048524[3]: startInstruction(push   esi)
Symbolic@0x22ecb30 insn@0x08048524[3]: number_(32, 1) = {defs={0x08048524}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048524[3]: number_(32, 134513956) = {defs={0x08048524}, expr=0x08048524[32]}
Symbolic@0x22ecb30 insn@0x08048524[3]: add({defs={0x08048524}, expr=0x08048524[32]}, {defs={0x08048524}, expr=1[32]}) = {defs={0x08048524}, expr=0x08048525[32]}
Symbolic@0x22ecb30 insn@0x08048524[3]: writeRegister(eip, {defs={0x08048524}, expr=0x08048525[32]})
Symbolic@0x22ecb30 insn@0x08048524[3]: readRegister(esp) = {defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x08048524[3]: number_(32, 18446744073709551612) = {defs={0x08048524}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048524[3]: add({defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])}, {defs={0x08048524}, expr=-4[32]}) = {defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048524[3]: boolean_(1) = {defs={0x08048524}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048524[3]: readRegister(esi) = esi_0[32]
Symbolic@0x22ecb30 insn@0x08048524[3]: writeMemory(ss, {defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])}, esi_0[32], {defs={0x08048524}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048524[3]: writeRegister(esp, {defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x08048524[3]: finishInstruction(push   esi)
registers:
  esp    = {defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])}
  ebp    = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048524}, expr=0x08048525[32]}
memory:
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048525:push   ebx
Symbolic@0x22ecb30 insn@0x08048525[4]: startInstruction(push   ebx)
Symbolic@0x22ecb30 insn@0x08048525[4]: number_(32, 1) = {defs={0x08048525}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048525[4]: number_(32, 134513957) = {defs={0x08048525}, expr=0x08048525[32]}
Symbolic@0x22ecb30 insn@0x08048525[4]: add({defs={0x08048525}, expr=0x08048525[32]}, {defs={0x08048525}, expr=1[32]}) = {defs={0x08048525}, expr=0x08048526[32]}
Symbolic@0x22ecb30 insn@0x08048525[4]: writeRegister(eip, {defs={0x08048525}, expr=0x08048526[32]})
Symbolic@0x22ecb30 insn@0x08048525[4]: readRegister(esp) = {defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048525[4]: number_(32, 18446744073709551612) = {defs={0x08048525}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048525[4]: add({defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x08048525}, expr=-4[32]}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x08048525[4]: boolean_(1) = {defs={0x08048525}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048525[4]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x08048525[4]: writeMemory(ss, {defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])}, ebx_0[32], {defs={0x08048525}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048525[4]: writeRegister(esp, {defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])})
Symbolic@0x22ecb30 insn@0x08048525[4]: finishInstruction(push   ebx)
registers:
  esp    = {defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])}
  ebp    = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048525}, expr=0x08048526[32]}
memory:
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048526:sub    esp, 0x0c
Symbolic@0x22ecb30 insn@0x08048526[5]: startInstruction(sub    esp, 0x0c)
Symbolic@0x22ecb30 insn@0x08048526[5]: number_(32, 3) = {defs={0x08048526}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048526[5]: number_(32, 134513958) = {defs={0x08048526}, expr=0x08048526[32]}
Symbolic@0x22ecb30 insn@0x08048526[5]: add({defs={0x08048526}, expr=0x08048526[32]}, {defs={0x08048526}, expr=3[32]}) = {defs={0x08048526}, expr=0x08048529[32]}
Symbolic@0x22ecb30 insn@0x08048526[5]: writeRegister(eip, {defs={0x08048526}, expr=0x08048529[32]})
Symbolic@0x22ecb30 insn@0x08048526[5]: boolean_(0) = {defs={0x08048526}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048526[5]: number_(32, 12) = {defs={0x08048526}, expr=12[32]}
Symbolic@0x22ecb30 insn@0x08048526[5]: invert({defs={0x08048526}, expr=12[32]}) = {defs={0x08048526}, expr=-13[32]}
Symbolic@0x22ecb30 insn@0x08048526[5]: readRegister(esp) = {defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x08048526[5]: invert({defs={0x08048526}, expr=0[1]}) = {defs={0x08048526}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048526[5]: addWithCarries({defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])}, {defs={0x08048526}, expr=-13[32]}, {defs={0x08048526}, expr=1[1]}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] esp_0[32] -28[32])}
Symbolic@0x22ecb30 insn@0x08048526[5]: also returns: {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] esp_0[32] -28[32])}, 0, 8) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 1, 2) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 0, 1) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: xor_({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32]))}, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32]))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 3, 4) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 2, 3) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: xor_({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32]))}, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32]))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 5, 6) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 4, 5) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: xor_({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32]))}, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32]))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 7, 8) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -28[32]))}, 6, 7) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: xor_({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32]))}, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: xor_({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])))}, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: xor_({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])))}, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: xor_({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])))}, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: invert({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32])))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))))}
Symbolic@0x22ecb30 insn@0x08048526[5]: writeRegister(pf, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))))})
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] esp_0[32] -28[32])}, 31, 32) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: writeRegister(sf, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -28[32]))})
Symbolic@0x22ecb30 insn@0x08048526[5]: equalToZero({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] esp_0[32] -28[32])}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] esp_0[32] -28[32]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: writeRegister(zf, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] esp_0[32] -28[32]))})
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}, 31, 32) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}, 30, 31) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: extract({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}, 3, 4) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}
Symbolic@0x22ecb30 insn@0x08048526[5]: invert({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: writeRegister(af, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))})
Symbolic@0x22ecb30 insn@0x08048526[5]: invert({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: writeRegister(cf, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))})
Symbolic@0x22ecb30 insn@0x08048526[5]: xor_({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33]))}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
Symbolic@0x22ecb30 insn@0x08048526[5]: writeRegister(of, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))})
Symbolic@0x22ecb30 insn@0x08048526[5]: writeRegister(esp, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] esp_0[32] -28[32])})
Symbolic@0x22ecb30 insn@0x08048526[5]: finishInstruction(sub    esp, 0x0c)
registers:
  esp       = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] esp_0[32] -28[32])}
  ebp       = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048526}, expr=0x08048529[32]}
  pf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))))}
  sf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -28[32]))}
  zf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] esp_0[32] -28[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
memory:
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048529:call   0x0804852e<<Insn>>
Symbolic@0x22ecb30 insn@0x08048529[6]: startInstruction(call   0x0804852e<<Insn>>)
Symbolic@0x22ecb30 insn@0x08048529[6]: number_(32, 5) = {defs={0x08048529}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048529[6]: number_(32, 134513961) = {defs={0x08048529}, expr=0x08048529[32]}
Symbolic@0x22ecb30 insn@0x08048529[6]: add({defs={0x08048529}, expr=0x08048529[32]}, {defs={0x08048529}, expr=5[32]}) = {defs={0x08048529}, expr=0x0804852e[32]}
Symbolic@0x22ecb30 insn@0x08048529[6]: writeRegister(eip, {defs={0x08048529}, expr=0x0804852e[32]})
Symbolic@0x22ecb30 insn@0x08048529[6]: readRegister(esp) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] esp_0[32] -28[32])}
Symbolic@0x22ecb30 insn@0x08048529[6]: number_(32, 18446744073709551612) = {defs={0x08048529}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048529[6]: add({defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] esp_0[32] -28[32])}, {defs={0x08048529}, expr=-4[32]}) = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] esp_0[32] -32[32])}
Symbolic@0x22ecb30 insn@0x08048529[6]: boolean_(1) = {defs={0x08048529}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048529[6]: readRegister(eip) = {defs={0x08048529}, expr=0x0804852e[32]}
Symbolic@0x22ecb30 insn@0x08048529[6]: writeMemory(ss, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] esp_0[32] -32[32])}, {defs={0x08048529}, expr=0x0804852e[32]}, {defs={0x08048529}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048529[6]: number_(32, 134513966) = {defs={0x08048529}, expr=0x0804852e[32]}
Symbolic@0x22ecb30 insn@0x08048529[6]: filterCallTarget({defs={0x08048529}, expr=0x0804852e[32]}) = {defs={0x08048529}, expr=0x0804852e[32]}
Symbolic@0x22ecb30 insn@0x08048529[6]: writeRegister(eip, {defs={0x08048529}, expr=0x0804852e[32]})
Symbolic@0x22ecb30 insn@0x08048529[6]: writeRegister(esp, {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] esp_0[32] -32[32])})
Symbolic@0x22ecb30 insn@0x08048529[6]: finishInstruction(call   0x0804852e<<Insn>>)
registers:
  esp       = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] esp_0[32] -32[32])}
  ebp       = {defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048529}, expr=0x0804852e[32]}
  pf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -28[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -28[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -28[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -28[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -28[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -28[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -28[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -28[32]))))}
  sf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -28[32]))}
  zf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] esp_0[32] -28[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -16[32])) 4294967284[33]) 4294967283[33])))}
memory:
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] esp_0[32] -29[32])} value={defs={0x08048529}, expr=8[8]}
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] esp_0[32] -30[32])} value={defs={0x08048529}, expr=4[8]}
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] esp_0[32] -31[32])} value={defs={0x08048529}, expr=-123[8]}
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] esp_0[32] -32[32])} value={defs={0x08048529}, expr=46[8]}
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] esp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] frame_pointer[32] -28[32])}
  ebp       = {defs={0x08048520}, expr=frame_pointer[32]}
  eip       = {defs={0x08048529}, expr=0x0804852e[32]}
  pf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 1[32] 2[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 2[32] 3[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 3[32] 4[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 4[32] 5[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 5[32] 6[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 6[32] 7[32] (add[32] frame_pointer[32] -24[32])) (extract[1] 7[32] 8[32] (add[32] frame_pointer[32] -24[32]))))}
  sf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] frame_pointer[32] -24[32]))}
  zf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] frame_pointer[32] -24[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) 4294967284[33]) 4294967283[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) 4294967284[33]) 4294967283[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] -12[32])) 4294967284[33]) 4294967283[33])))}
memory:
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] frame_pointer[32] -25[32])} value={defs={0x08048529}, expr=8[8]}
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] frame_pointer[32] -26[32])} value={defs={0x08048529}, expr=4[8]}
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] frame_pointer[32] -27[32])} value={defs={0x08048529}, expr=-123[8]}
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] frame_pointer[32] -28[32])} value={defs={0x08048529}, expr=46[8]}
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] frame_pointer[32] -9[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] frame_pointer[32] -10[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] frame_pointer[32] -11[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] frame_pointer[32] -12[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] frame_pointer[32] -5[32])} value=(extract[8] 24[32] 32[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] frame_pointer[32] -6[32])} value=(extract[8] 16[32] 24[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] frame_pointer[32] -7[32])} value=(extract[8] 8[32] 16[32] esi_0[32])
  addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] frame_pointer[32] -8[32])} value=(extract[8] 0[32] 8[32] esi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] frame_pointer[32] -1[32])} value=(extract[8] 24[32] 32[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] frame_pointer[32] -2[32])} value=(extract[8] 16[32] 24[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] frame_pointer[32] -3[32])} value=(extract[8] 8[32] 16[32] edi_0[32])
  addr={defs={0x08048520,0x08048523}, expr=(add[32] frame_pointer[32] -4[32])} value=(extract[8] 0[32] 8[32] edi_0[32])
  addr={defs={0x08048520}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048520}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048520}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x08048529[6]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x804852e:pop    ebx
Symbolic@0x22ecb30 insn@0x0804852e[0]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x0804852e[0]: number_(32, 1) = {defs={0x0804852e}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x0804852e[0]: number_(32, 134513966) = {defs={0x0804852e}, expr=0x0804852e[32]}
Symbolic@0x22ecb30 insn@0x0804852e[0]: add({defs={0x0804852e}, expr=0x0804852e[32]}, {defs={0x0804852e}, expr=1[32]}) = {defs={0x0804852e}, expr=0x0804852f[32]}
Symbolic@0x22ecb30 insn@0x0804852e[0]: writeRegister(eip, {defs={0x0804852e}, expr=0x0804852f[32]})
Symbolic@0x22ecb30 insn@0x0804852e[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x0804852e[0]: number_(32, 4) = {defs={0x0804852e}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x0804852e[0]: add(esp_0[32], {defs={0x0804852e}, expr=4[32]}) = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x0804852e[0]: writeRegister(esp, {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x0804852e[0]: boolean_(1) = {defs={0x0804852e}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804852e[0]: readMemory(ss, esp_0[32], {defs={0x0804852e}, expr=1[1]}, 32) = v17416[32]
Symbolic@0x22ecb30 insn@0x0804852e[0]: writeRegister(ebx, v17416[32])
Symbolic@0x22ecb30 insn@0x0804852e[0]: finishInstruction(pop    ebx)
registers:
  ebx    = v17416[32]
  esp    = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip    = {defs={0x0804852e}, expr=0x0804852f[32]}
memory:
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x804852f:add    ebx, 0x0000119a
Symbolic@0x22ecb30 insn@0x0804852f[1]: startInstruction(add    ebx, 0x0000119a)
Symbolic@0x22ecb30 insn@0x0804852f[1]: number_(32, 6) = {defs={0x0804852f}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x0804852f[1]: number_(32, 134513967) = {defs={0x0804852f}, expr=0x0804852f[32]}
Symbolic@0x22ecb30 insn@0x0804852f[1]: add({defs={0x0804852f}, expr=0x0804852f[32]}, {defs={0x0804852f}, expr=6[32]}) = {defs={0x0804852f}, expr=0x08048535[32]}
Symbolic@0x22ecb30 insn@0x0804852f[1]: writeRegister(eip, {defs={0x0804852f}, expr=0x08048535[32]})
Symbolic@0x22ecb30 insn@0x0804852f[1]: boolean_(0) = {defs={0x0804852f}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x0804852f[1]: number_(32, 4506) = {defs={0x0804852f}, expr=4506[32]}
Symbolic@0x22ecb30 insn@0x0804852f[1]: readRegister(ebx) = v17416[32]
Symbolic@0x22ecb30 insn@0x0804852f[1]: addWithCarries(v17416[32], {defs={0x0804852f}, expr=4506[32]}, {defs={0x0804852f}, expr=0[1]}) = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
Symbolic@0x22ecb30 insn@0x0804852f[1]: also returns: {defs={0x0804852f}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}, 0, 8) = {defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}, 1, 2) = {defs={0x0804852f}, expr=(extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}, 0, 1) = {defs={0x0804852f}, expr=(extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: xor_({defs={0x0804852f}, expr=(extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32]))}, {defs={0x0804852f}, expr=(extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32]))}) = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}, 3, 4) = {defs={0x0804852f}, expr=(extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}, 2, 3) = {defs={0x0804852f}, expr=(extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: xor_({defs={0x0804852f}, expr=(extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32]))}, {defs={0x0804852f}, expr=(extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32]))}) = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}, 5, 6) = {defs={0x0804852f}, expr=(extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}, 4, 5) = {defs={0x0804852f}, expr=(extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: xor_({defs={0x0804852f}, expr=(extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32]))}, {defs={0x0804852f}, expr=(extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32]))}) = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}, 7, 8) = {defs={0x0804852f}, expr=(extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[8] 0[32] 8[32] (add[32] v17416[32] 4506[32]))}, 6, 7) = {defs={0x0804852f}, expr=(extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: xor_({defs={0x0804852f}, expr=(extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32]))}, {defs={0x0804852f}, expr=(extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32]))}) = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32])))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: xor_({defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])))}, {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])))}) = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: xor_({defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])))}, {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32])))}) = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32])))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: xor_({defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])))}, {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32])))}) = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])) (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32])))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: invert({defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])) (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32])))}) = {defs={0x0804852f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])) (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32]))))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: writeRegister(pf, {defs={0x0804852f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])) (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32]))))})
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}, 31, 32) = {defs={0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: writeRegister(sf, {defs={0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v17416[32] 4506[32]))})
Symbolic@0x22ecb30 insn@0x0804852f[1]: equalToZero({defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}) = {defs={0x0804852f}, expr=(zerop[1] (add[32] v17416[32] 4506[32]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: writeRegister(zf, {defs={0x0804852f}, expr=(zerop[1] (add[32] v17416[32] 4506[32]))})
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}, 31, 32) = {defs={0x0804852f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}, 30, 31) = {defs={0x0804852f}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: extract({defs={0x0804852f}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}, 3, 4) = {defs={0x0804852f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: writeRegister(af, {defs={0x0804852f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))})
Symbolic@0x22ecb30 insn@0x0804852f[1]: writeRegister(cf, {defs={0x0804852f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))})
Symbolic@0x22ecb30 insn@0x0804852f[1]: xor_({defs={0x0804852f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}, {defs={0x0804852f}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}) = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])))}
Symbolic@0x22ecb30 insn@0x0804852f[1]: writeRegister(of, {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])))})
Symbolic@0x22ecb30 insn@0x0804852f[1]: writeRegister(ebx, {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])})
Symbolic@0x22ecb30 insn@0x0804852f[1]: finishInstruction(add    ebx, 0x0000119a)
registers:
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x0804852f}, expr=0x08048535[32]}
  pf        = {defs={0x0804852f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])) (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32]))))}
  sf        = {defs={0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v17416[32] 4506[32]))}
  zf        = {defs={0x0804852f}, expr=(zerop[1] (add[32] v17416[32] 4506[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804852f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])))}
memory:
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
Symbolic@0x22ecb30 insn@0x08048535[2]: startInstruction(lea    eax, [ebx + 0xffffff20<-0x000000e0>])
Symbolic@0x22ecb30 insn@0x08048535[2]: number_(32, 6) = {defs={0x08048535}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x08048535[2]: number_(32, 134513973) = {defs={0x08048535}, expr=0x08048535[32]}
Symbolic@0x22ecb30 insn@0x08048535[2]: add({defs={0x08048535}, expr=0x08048535[32]}, {defs={0x08048535}, expr=6[32]}) = {defs={0x08048535}, expr=0x0804853b[32]}
Symbolic@0x22ecb30 insn@0x08048535[2]: writeRegister(eip, {defs={0x08048535}, expr=0x0804853b[32]})
Symbolic@0x22ecb30 insn@0x08048535[2]: readRegister(ebx) = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
Symbolic@0x22ecb30 insn@0x08048535[2]: number_(32, 18446744073709551392) = {defs={0x08048535}, expr=-224[32]}
Symbolic@0x22ecb30 insn@0x08048535[2]: add({defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}, {defs={0x08048535}, expr=-224[32]}) = {defs={0x0804852f,0x08048535}, expr=(add[32] v17416[32] 4282[32])}
Symbolic@0x22ecb30 insn@0x08048535[2]: writeRegister(eax, {defs={0x0804852f,0x08048535}, expr=(add[32] v17416[32] 4282[32])})
Symbolic@0x22ecb30 insn@0x08048535[2]: finishInstruction(lea    eax, [ebx + 0xffffff20<-0x000000e0>])
registers:
  eax       = {defs={0x0804852f,0x08048535}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x08048535}, expr=0x0804853b[32]}
  pf        = {defs={0x0804852f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])) (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32]))))}
  sf        = {defs={0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v17416[32] 4506[32]))}
  zf        = {defs={0x0804852f}, expr=(zerop[1] (add[32] v17416[32] 4506[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804852f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])))}
memory:
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
Symbolic@0x22ecb30 insn@0x0804853b[3]: startInstruction(lea    edx, [ebx + 0xffffff20<-0x000000e0>])
Symbolic@0x22ecb30 insn@0x0804853b[3]: number_(32, 6) = {defs={0x0804853b}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x0804853b[3]: number_(32, 134513979) = {defs={0x0804853b}, expr=0x0804853b[32]}
Symbolic@0x22ecb30 insn@0x0804853b[3]: add({defs={0x0804853b}, expr=0x0804853b[32]}, {defs={0x0804853b}, expr=6[32]}) = {defs={0x0804853b}, expr=0x08048541[32]}
Symbolic@0x22ecb30 insn@0x0804853b[3]: writeRegister(eip, {defs={0x0804853b}, expr=0x08048541[32]})
Symbolic@0x22ecb30 insn@0x0804853b[3]: readRegister(ebx) = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
Symbolic@0x22ecb30 insn@0x0804853b[3]: number_(32, 18446744073709551392) = {defs={0x0804853b}, expr=-224[32]}
Symbolic@0x22ecb30 insn@0x0804853b[3]: add({defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}, {defs={0x0804853b}, expr=-224[32]}) = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
Symbolic@0x22ecb30 insn@0x0804853b[3]: writeRegister(edx, {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])})
Symbolic@0x22ecb30 insn@0x0804853b[3]: finishInstruction(lea    edx, [ebx + 0xffffff20<-0x000000e0>])
registers:
  eax       = {defs={0x0804852f,0x08048535}, expr=(add[32] v17416[32] 4282[32])}
  edx       = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x0804853b}, expr=0x08048541[32]}
  pf        = {defs={0x0804852f}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17416[32] 4506[32])) (extract[1] 1[32] 2[32] (add[32] v17416[32] 4506[32])) (extract[1] 2[32] 3[32] (add[32] v17416[32] 4506[32])) (extract[1] 3[32] 4[32] (add[32] v17416[32] 4506[32])) (extract[1] 4[32] 5[32] (add[32] v17416[32] 4506[32])) (extract[1] 5[32] 6[32] (add[32] v17416[32] 4506[32])) (extract[1] 6[32] 7[32] (add[32] v17416[32] 4506[32])) (extract[1] 7[32] 8[32] (add[32] v17416[32] 4506[32]))))}
  sf        = {defs={0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v17416[32] 4506[32]))}
  zf        = {defs={0x0804852f}, expr=(zerop[1] (add[32] v17416[32] 4506[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804852f}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804852f}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17416[32]) (add[33] (uextend[33] 33[32] v17416[32]) 4506[33]) 4506[33])))}
memory:
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x8048541:sub    eax, edx
Symbolic@0x22ecb30 insn@0x08048541[4]: startInstruction(sub    eax, edx)
Symbolic@0x22ecb30 insn@0x08048541[4]: number_(32, 2) = {defs={0x08048541}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048541[4]: number_(32, 134513985) = {defs={0x08048541}, expr=0x08048541[32]}
Symbolic@0x22ecb30 insn@0x08048541[4]: add({defs={0x08048541}, expr=0x08048541[32]}, {defs={0x08048541}, expr=2[32]}) = {defs={0x08048541}, expr=0x08048543[32]}
Symbolic@0x22ecb30 insn@0x08048541[4]: writeRegister(eip, {defs={0x08048541}, expr=0x08048543[32]})
Symbolic@0x22ecb30 insn@0x08048541[4]: boolean_(0) = {defs={0x08048541}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048541[4]: readRegister(edx) = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
Symbolic@0x22ecb30 insn@0x08048541[4]: invert({defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}) = {defs={0x0804852f,0x0804853b,0x08048541}, expr=(invert[32] (add[32] v17416[32] 4282[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: readRegister(eax) = {defs={0x0804852f,0x08048535}, expr=(add[32] v17416[32] 4282[32])}
Symbolic@0x22ecb30 insn@0x08048541[4]: invert({defs={0x08048541}, expr=0[1]}) = {defs={0x08048541}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048541[4]: addWithCarries({defs={0x0804852f,0x08048535}, expr=(add[32] v17416[32] 4282[32])}, {defs={0x0804852f,0x0804853b,0x08048541}, expr=(invert[32] (add[32] v17416[32] 4282[32]))}, {defs={0x08048541}, expr=1[1]}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}
Symbolic@0x22ecb30 insn@0x08048541[4]: also returns: {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}, 0, 8) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 1, 2) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 0, 1) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 3, 4) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 2, 3) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 5, 6) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 4, 5) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 7, 8) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 6, 7) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048541[4]: writeRegister(pf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))})
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: writeRegister(sf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))})
Symbolic@0x22ecb30 insn@0x08048541[4]: equalToZero({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(zerop[1] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048541[4]: writeRegister(zf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(zerop[1] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))})
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}, 30, 31) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}, 3, 4) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048541[4]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048541[4]: writeRegister(af, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x08048541[4]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048541[4]: writeRegister(cf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x08048541[4]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048541[4]: writeRegister(of, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x08048541[4]: writeRegister(eax, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])})
Symbolic@0x22ecb30 insn@0x08048541[4]: finishInstruction(sub    eax, edx)
registers:
  eax       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}
  edx       = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x08048541}, expr=0x08048543[32]}
  pf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
  sf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
  zf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(zerop[1] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
memory:
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x8048543:sar    eax, 0x02
Symbolic@0x22ecb30 insn@0x08048543[5]: startInstruction(sar    eax, 0x02)
Symbolic@0x22ecb30 insn@0x08048543[5]: number_(32, 3) = {defs={0x08048543}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048543[5]: number_(32, 134513987) = {defs={0x08048543}, expr=0x08048543[32]}
Symbolic@0x22ecb30 insn@0x08048543[5]: add({defs={0x08048543}, expr=0x08048543[32]}, {defs={0x08048543}, expr=3[32]}) = {defs={0x08048543}, expr=0x08048546[32]}
Symbolic@0x22ecb30 insn@0x08048543[5]: writeRegister(eip, {defs={0x08048543}, expr=0x08048546[32]})
Symbolic@0x22ecb30 insn@0x08048543[5]: number_(8, 2) = {defs={0x08048543}, expr=2[8]}
Symbolic@0x22ecb30 insn@0x08048543[5]: undefined_(32) = v17421[32]
Symbolic@0x22ecb30 insn@0x08048543[5]: readRegister(eax) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x08048543}, expr=2[8]}, 0, 5) = {defs={0x08048543}, expr=2[5]}
Symbolic@0x22ecb30 insn@0x08048543[5]: equalToZero({defs={0x08048543}, expr=2[5]}) = {defs={0x08048543}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x08048543}, expr=2[8]}, 5, 8) = {defs={0x08048543}, expr=0[3]}
Symbolic@0x22ecb30 insn@0x08048543[5]: equalToZero({defs={0x08048543}, expr=0[3]}) = {defs={0x08048543}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: invert({defs={0x08048543}, expr=1[1]}) = {defs={0x08048543}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: number_(5, 31) = {defs={0x08048543}, expr=-1[5]}
Symbolic@0x22ecb30 insn@0x08048543[5]: add({defs={0x08048543}, expr=2[5]}, {defs={0x08048543}, expr=-1[5]}) = {defs={0x08048543}, expr=1[5]}
Symbolic@0x22ecb30 insn@0x08048543[5]: equalToZero({defs={0x08048543}, expr=1[5]}) = {defs={0x08048543}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: shiftRightArithmetic({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}, {defs={0x08048543}, expr=2[5]}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: undefined_(1) = v17422[1]
Symbolic@0x22ecb30 insn@0x08048543[5]: readRegister(af) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: ite({defs={0x08048543}, expr=0[1]}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}, v17422[1]) = {defs={0x08048543}, expr=v17422[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: writeRegister(af, {defs={0x08048543}, expr=v17422[1]})
Symbolic@0x22ecb30 insn@0x08048543[5]: add({defs={0x08048543}, expr=2[5]}, {defs={0x08048543}, expr=-1[5]}) = {defs={0x08048543}, expr=1[5]}
Symbolic@0x22ecb30 insn@0x08048543[5]: shiftRight({defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])}, {defs={0x08048543}, expr=1[5]}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 0, 1) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: ite({defs={0x08048543}, expr=0[1]}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: readRegister(cf) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: ite({defs={0x08048543}, expr=0[1]}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: writeRegister(cf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))})
Symbolic@0x22ecb30 insn@0x08048543[5]: undefined_(1) = v17423[1]
Symbolic@0x22ecb30 insn@0x08048543[5]: readRegister(of) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: ite({defs={0x08048543}, expr=0[1]}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) (add[33] (uextend[33] 33[32] (add[32] v17416[32] 4282[32])) (uextend[33] 33[32] (invert[32] (add[32] v17416[32] 4282[32]))) 1[33]))))}, v17423[1]) = {defs={0x08048543}, expr=v17423[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: boolean_(0) = {defs={0x08048543}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: ite({defs={0x08048543}, expr=0[1]}, {defs={0x08048543}, expr=0[1]}, {defs={0x08048543}, expr=v17423[1]}) = {defs={0x08048543}, expr=v17423[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: writeRegister(of, {defs={0x08048543}, expr=v17423[1]})
Symbolic@0x22ecb30 insn@0x08048543[5]: invert({defs={0x08048543}, expr=0[1]}) = {defs={0x08048543}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 0, 8) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: readRegister(pf) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 1, 2) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 0, 1) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 3, 4) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 2, 3) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 5, 6) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 4, 5) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 7, 8) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 6, 7) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: ite({defs={0x08048543}, expr=1[1]}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}
Symbolic@0x22ecb30 insn@0x08048543[5]: writeRegister(pf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))})
Symbolic@0x22ecb30 insn@0x08048543[5]: readRegister(sf) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048543[5]: ite({defs={0x08048543}, expr=1[1]}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: writeRegister(sf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))})
Symbolic@0x22ecb30 insn@0x08048543[5]: readRegister(zf) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(zerop[1] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048543[5]: equalToZero({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: ite({defs={0x08048543}, expr=1[1]}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(zerop[1] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x08048543[5]: writeRegister(zf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))})
Symbolic@0x22ecb30 insn@0x08048543[5]: writeRegister(eax, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))})
Symbolic@0x22ecb30 insn@0x08048543[5]: finishInstruction(sar    eax, 0x02)
registers:
  eax       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
  edx       = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x08048543}, expr=0x08048546[32]}
  pf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}
  sf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  zf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048543}, expr=v17422[1]}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048543}, expr=v17423[1]}
memory:
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
Symbolic@0x22ecb30 insn@0x08048546[6]: startInstruction(mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax)
Symbolic@0x22ecb30 insn@0x08048546[6]: number_(32, 3) = {defs={0x08048546}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048546[6]: number_(32, 134513990) = {defs={0x08048546}, expr=0x08048546[32]}
Symbolic@0x22ecb30 insn@0x08048546[6]: add({defs={0x08048546}, expr=0x08048546[32]}, {defs={0x08048546}, expr=3[32]}) = {defs={0x08048546}, expr=0x08048549[32]}
Symbolic@0x22ecb30 insn@0x08048546[6]: writeRegister(eip, {defs={0x08048546}, expr=0x08048549[32]})
Symbolic@0x22ecb30 insn@0x08048546[6]: readRegister(eax) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048546[6]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048546[6]: number_(8, 18446744073709551600) = {defs={0x08048546}, expr=-16[8]}
Symbolic@0x22ecb30 insn@0x08048546[6]: signExtend({defs={0x08048546}, expr=-16[8]}, 32) = {defs={0x08048546}, expr=-16[32]}
Symbolic@0x22ecb30 insn@0x08048546[6]: add(ebp_0[32], {defs={0x08048546}, expr=-16[32]}) = {defs={0x08048546}, expr=(add[32] ebp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x08048546[6]: boolean_(1) = {defs={0x08048546}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048546[6]: writeMemory(ss, {defs={0x08048546}, expr=(add[32] ebp_0[32] -16[32])}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, {defs={0x08048546}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048546[6]: finishInstruction(mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax)
registers:
  eax       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
  edx       = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x08048546}, expr=0x08048549[32]}
  pf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}
  sf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  zf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048543}, expr=v17422[1]}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048543}, expr=v17423[1]}
memory:
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -13[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -14[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -15[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -16[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x8048549:dec    eax
Symbolic@0x22ecb30 insn@0x08048549[7]: startInstruction(dec    eax)
Symbolic@0x22ecb30 insn@0x08048549[7]: number_(32, 1) = {defs={0x08048549}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048549[7]: number_(32, 134513993) = {defs={0x08048549}, expr=0x08048549[32]}
Symbolic@0x22ecb30 insn@0x08048549[7]: add({defs={0x08048549}, expr=0x08048549[32]}, {defs={0x08048549}, expr=1[32]}) = {defs={0x08048549}, expr=0x0804854a[32]}
Symbolic@0x22ecb30 insn@0x08048549[7]: writeRegister(eip, {defs={0x08048549}, expr=0x0804854a[32]})
Symbolic@0x22ecb30 insn@0x08048549[7]: readRegister(eax) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: boolean_(0) = {defs={0x08048549}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048549[7]: number_(32, 18446744073709551615) = {defs={0x08048549}, expr=-1[32]}
Symbolic@0x22ecb30 insn@0x08048549[7]: addWithCarries({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, {defs={0x08048549}, expr=-1[32]}, {defs={0x08048549}, expr=0[1]}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}
Symbolic@0x22ecb30 insn@0x08048549[7]: also returns: {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}, 0, 8) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, 1, 2) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, 0, 1) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, 3, 4) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, 2, 3) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, 5, 6) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, 4, 5) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, 7, 8) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, 6, 7) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))))}
Symbolic@0x22ecb30 insn@0x08048549[7]: writeRegister(pf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))))})
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: writeRegister(sf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))})
Symbolic@0x22ecb30 insn@0x08048549[7]: equalToZero({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: writeRegister(zf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))})
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}, 30, 31) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}, 3, 4) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}
Symbolic@0x22ecb30 insn@0x08048549[7]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: writeRegister(af, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])))})
Symbolic@0x22ecb30 insn@0x08048549[7]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])))}
Symbolic@0x22ecb30 insn@0x08048549[7]: writeRegister(of, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])))})
Symbolic@0x22ecb30 insn@0x08048549[7]: writeRegister(eax, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])})
Symbolic@0x22ecb30 insn@0x08048549[7]: finishInstruction(dec    eax)
registers:
  eax       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}
  edx       = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x08048549}, expr=0x0804854a[32]}
  pf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 1[32] 2[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 2[32] 3[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 3[32] 4[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 4[32] 5[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 5[32] 6[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 6[32] 7[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (extract[1] 7[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))))}
  sf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
  zf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 4294967295[33]) 4294967295[33])))}
memory:
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -13[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -14[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -15[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -16[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x804854a:cmp    eax, 0xff<-0x01>
Symbolic@0x22ecb30 insn@0x0804854a[8]: startInstruction(cmp    eax, 0xff<-0x01>)
Symbolic@0x22ecb30 insn@0x0804854a[8]: number_(32, 3) = {defs={0x0804854a}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x0804854a[8]: number_(32, 134513994) = {defs={0x0804854a}, expr=0x0804854a[32]}
Symbolic@0x22ecb30 insn@0x0804854a[8]: add({defs={0x0804854a}, expr=0x0804854a[32]}, {defs={0x0804854a}, expr=3[32]}) = {defs={0x0804854a}, expr=0x0804854d[32]}
Symbolic@0x22ecb30 insn@0x0804854a[8]: writeRegister(eip, {defs={0x0804854a}, expr=0x0804854d[32]})
Symbolic@0x22ecb30 insn@0x0804854a[8]: boolean_(0) = {defs={0x0804854a}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x0804854a[8]: number_(32, 18446744073709551615) = {defs={0x0804854a}, expr=-1[32]}
Symbolic@0x22ecb30 insn@0x0804854a[8]: invert({defs={0x0804854a}, expr=-1[32]}) = {defs={0x0804854a}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x0804854a[8]: readRegister(eax) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}
Symbolic@0x22ecb30 insn@0x0804854a[8]: invert({defs={0x0804854a}, expr=0[1]}) = {defs={0x0804854a}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804854a[8]: addWithCarries({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}, {defs={0x0804854a}, expr=0[32]}, {defs={0x0804854a}, expr=1[1]}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: also returns: {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 0, 8) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 1, 2) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 0, 1) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 3, 4) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 2, 3) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 5, 6) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 4, 5) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 7, 8) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, 6, 7) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: writeRegister(pf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))})
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: writeRegister(sf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))})
Symbolic@0x22ecb30 insn@0x0804854a[8]: equalToZero({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: writeRegister(zf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))})
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}, 31, 32) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}, 30, 31) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: extract({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}, 3, 4) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: writeRegister(af, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x0804854a[8]: invert({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: writeRegister(cf, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x0804854a[8]: xor_({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33]))}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x0804854a[8]: writeRegister(of, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x0804854a[8]: finishInstruction(cmp    eax, 0xff<-0x01>)
registers:
  eax       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}
  edx       = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x0804854a}, expr=0x0804854d[32]}
  pf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}
  sf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  zf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
memory:
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -13[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -14[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -15[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -16[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])

0x804854d:je     0x0804856b<<Insn>>
Symbolic@0x22ecb30 insn@0x0804854d[9]: startInstruction(je     0x0804856b<<Insn>>)
Symbolic@0x22ecb30 insn@0x0804854d[9]: number_(32, 2) = {defs={0x0804854d}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x0804854d[9]: number_(32, 134513997) = {defs={0x0804854d}, expr=0x0804854d[32]}
Symbolic@0x22ecb30 insn@0x0804854d[9]: add({defs={0x0804854d}, expr=0x0804854d[32]}, {defs={0x0804854d}, expr=2[32]}) = {defs={0x0804854d}, expr=0x0804854f[32]}
Symbolic@0x22ecb30 insn@0x0804854d[9]: writeRegister(eip, {defs={0x0804854d}, expr=0x0804854f[32]})
Symbolic@0x22ecb30 insn@0x0804854d[9]: readRegister(zf) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
Symbolic@0x22ecb30 insn@0x0804854d[9]: readRegister(eip) = {defs={0x0804854d}, expr=0x0804854f[32]}
Symbolic@0x22ecb30 insn@0x0804854d[9]: number_(32, 134514027) = {defs={0x0804854d}, expr=0x0804856b[32]}
Symbolic@0x22ecb30 insn@0x0804854d[9]: ite({defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}, {defs={0x0804854d}, expr=0x0804856b[32]}, {defs={0x0804854d}, expr=0x0804854f[32]}) = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d}, expr=(ite[32] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 0x0804856b[32] 0x0804854f[32])}
Symbolic@0x22ecb30 insn@0x0804854d[9]: writeRegister(eip, {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d}, expr=(ite[32] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 0x0804856b[32] 0x0804854f[32])})
Symbolic@0x22ecb30 insn@0x0804854d[9]: finishInstruction(je     0x0804856b<<Insn>>)
registers:
  eax       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}
  edx       = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d}, expr=(ite[32] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 0x0804856b[32] 0x0804854f[32])}
  pf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}
  sf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  zf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
memory:
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -13[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -14[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -15[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -16[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v17416[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])}
  edx       = {defs={0x0804852f,0x0804853b}, expr=(add[32] v17416[32] 4282[32])}
  ebx       = {defs={0x0804852f}, expr=(add[32] v17416[32] 4506[32])}
  esp       = {defs={0x0804852e}, expr=(add[32] frame_pointer[32] 8[32])}
  eip       = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d}, expr=(ite[32] (zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) 0x0804856b[32] 0x0804854f[32])}
  pf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 1[32] 2[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 2[32] 3[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 3[32] 4[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 4[32] 5[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 5[32] 6[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 6[32] 7[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32]))) (extract[1] 7[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))))}
  sf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  zf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])) -1[32])) 1[33]) 0[33])))}
memory:
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -13[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -14[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -15[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x08048546}, expr=(add[32] ebp_0[32] -16[32])} value={defs={0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (invert[32] (add[32] v17416[32] 4282[32])) v17416[32] 4283[32])))}
  addr={defs={0x0804852e}, expr=(add[32] frame_pointer[32] 7[32])} value=(extract[8] 24[32] 32[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] frame_pointer[32] 6[32])} value=(extract[8] 16[32] 24[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] frame_pointer[32] 5[32])} value=(extract[8] 8[32] 16[32] v17416[32])
  addr={defs={0x0804852e}, expr=(add[32] frame_pointer[32] 4[32])} value=(extract[8] 0[32] 8[32] v17416[32])
Symbolic@0x22ecb30 insn@0x0804854d[9]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x804854f:lea    esi, [edx + eax*0x04]
Symbolic@0x22ecb30 insn@0x0804854f[0]: startInstruction(lea    esi, [edx + eax*0x04])
Symbolic@0x22ecb30 insn@0x0804854f[0]: number_(32, 3) = {defs={0x0804854f}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x0804854f[0]: number_(32, 134513999) = {defs={0x0804854f}, expr=0x0804854f[32]}
Symbolic@0x22ecb30 insn@0x0804854f[0]: add({defs={0x0804854f}, expr=0x0804854f[32]}, {defs={0x0804854f}, expr=3[32]}) = {defs={0x0804854f}, expr=0x08048552[32]}
Symbolic@0x22ecb30 insn@0x0804854f[0]: writeRegister(eip, {defs={0x0804854f}, expr=0x08048552[32]})
Symbolic@0x22ecb30 insn@0x0804854f[0]: readRegister(edx) = edx_0[32]
Symbolic@0x22ecb30 insn@0x0804854f[0]: readRegister(eax) = eax_0[32]
Symbolic@0x22ecb30 insn@0x0804854f[0]: number_(8, 4) = {defs={0x0804854f}, expr=4[8]}
Symbolic@0x22ecb30 insn@0x0804854f[0]: signExtend({defs={0x0804854f}, expr=4[8]}, 32) = {defs={0x0804854f}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x0804854f[0]: unsignedMultiply(eax_0[32], {defs={0x0804854f}, expr=4[32]}) = {defs={0x0804854f}, expr=(umul[64] eax_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x0804854f[0]: extract({defs={0x0804854f}, expr=(umul[64] eax_0[32] 4[32])}, 0, 32) = {defs={0x0804854f}, expr=(extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32]))}
Symbolic@0x22ecb30 insn@0x0804854f[0]: add(edx_0[32], {defs={0x0804854f}, expr=(extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32]))}) = {defs={0x0804854f}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
Symbolic@0x22ecb30 insn@0x0804854f[0]: writeRegister(esi, {defs={0x0804854f}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])})
Symbolic@0x22ecb30 insn@0x0804854f[0]: finishInstruction(lea    esi, [edx + eax*0x04])
registers:
  esi    = {defs={0x0804854f}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
  eip    = {defs={0x0804854f}, expr=0x08048552[32]}
memory:

0x8048552:xor    edi, edi
Symbolic@0x22ecb30 insn@0x08048552[1]: startInstruction(xor    edi, edi)
Symbolic@0x22ecb30 insn@0x08048552[1]: number_(32, 2) = {defs={0x08048552}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048552[1]: number_(32, 134514002) = {defs={0x08048552}, expr=0x08048552[32]}
Symbolic@0x22ecb30 insn@0x08048552[1]: add({defs={0x08048552}, expr=0x08048552[32]}, {defs={0x08048552}, expr=2[32]}) = {defs={0x08048552}, expr=0x08048554[32]}
Symbolic@0x22ecb30 insn@0x08048552[1]: writeRegister(eip, {defs={0x08048552}, expr=0x08048554[32]})
Symbolic@0x22ecb30 insn@0x08048552[1]: readRegister(edi) = edi_0[32]
Symbolic@0x22ecb30 insn@0x08048552[1]: readRegister(edi) = edi_0[32]
Symbolic@0x22ecb30 insn@0x08048552[1]: xor_(edi_0[32], edi_0[32]) = {defs={0x08048552}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[32]}, 0, 8) = {defs={0x08048552}, expr=0[8]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[8]}, 1, 2) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[8]}, 0, 1) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: xor_({defs={0x08048552}, expr=0[1]}, {defs={0x08048552}, expr=0[1]}) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[8]}, 3, 4) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[8]}, 2, 3) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: xor_({defs={0x08048552}, expr=0[1]}, {defs={0x08048552}, expr=0[1]}) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[8]}, 5, 6) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[8]}, 4, 5) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: xor_({defs={0x08048552}, expr=0[1]}, {defs={0x08048552}, expr=0[1]}) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[8]}, 7, 8) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[8]}, 6, 7) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: xor_({defs={0x08048552}, expr=0[1]}, {defs={0x08048552}, expr=0[1]}) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: xor_({defs={0x08048552}, expr=0[1]}, {defs={0x08048552}, expr=0[1]}) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: xor_({defs={0x08048552}, expr=0[1]}, {defs={0x08048552}, expr=0[1]}) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: xor_({defs={0x08048552}, expr=0[1]}, {defs={0x08048552}, expr=0[1]}) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: invert({defs={0x08048552}, expr=0[1]}) = {defs={0x08048552}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: writeRegister(pf, {defs={0x08048552}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048552[1]: extract({defs={0x08048552}, expr=0[32]}, 31, 32) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: writeRegister(sf, {defs={0x08048552}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048552[1]: equalToZero({defs={0x08048552}, expr=0[32]}) = {defs={0x08048552}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: writeRegister(zf, {defs={0x08048552}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048552[1]: writeRegister(edi, {defs={0x08048552}, expr=0[32]})
Symbolic@0x22ecb30 insn@0x08048552[1]: boolean_(0) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: writeRegister(of, {defs={0x08048552}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048552[1]: undefined_(1) = v17495[1]
Symbolic@0x22ecb30 insn@0x08048552[1]: writeRegister(af, v17495[1])
Symbolic@0x22ecb30 insn@0x08048552[1]: boolean_(0) = {defs={0x08048552}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048552[1]: writeRegister(cf, {defs={0x08048552}, expr=0[1]})
Symbolic@0x22ecb30 insn@0x08048552[1]: finishInstruction(xor    edi, edi)
registers:
  esi       = {defs={0x0804854f}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
  edi       = {defs={0x08048552}, expr=0[32]}
  eip       = {defs={0x08048552}, expr=0x08048554[32]}
  pf        = {defs={0x08048552}, expr=1[1]}
  sf        = {defs={0x08048552}, expr=0[1]}
  zf        = {defs={0x08048552}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048552}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v17495[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048552}, expr=0[1]}
memory:

0x8048554:lea    esi, [esi + 0x00000000]
Symbolic@0x22ecb30 insn@0x08048554[2]: startInstruction(lea    esi, [esi + 0x00000000])
Symbolic@0x22ecb30 insn@0x08048554[2]: number_(32, 6) = {defs={0x08048554}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x08048554[2]: number_(32, 134514004) = {defs={0x08048554}, expr=0x08048554[32]}
Symbolic@0x22ecb30 insn@0x08048554[2]: add({defs={0x08048554}, expr=0x08048554[32]}, {defs={0x08048554}, expr=6[32]}) = {defs={0x08048554}, expr=0x0804855a[32]}
Symbolic@0x22ecb30 insn@0x08048554[2]: writeRegister(eip, {defs={0x08048554}, expr=0x0804855a[32]})
Symbolic@0x22ecb30 insn@0x08048554[2]: readRegister(esi) = {defs={0x0804854f}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
Symbolic@0x22ecb30 insn@0x08048554[2]: number_(32, 0) = {defs={0x08048554}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048554[2]: add({defs={0x0804854f}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}, {defs={0x08048554}, expr=0[32]}) = {defs={0x0804854f,0x08048554}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
Symbolic@0x22ecb30 insn@0x08048554[2]: writeRegister(esi, {defs={0x0804854f,0x08048554}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])})
Symbolic@0x22ecb30 insn@0x08048554[2]: finishInstruction(lea    esi, [esi + 0x00000000])
registers:
  esi       = {defs={0x0804854f,0x08048554}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
  edi       = {defs={0x08048552}, expr=0[32]}
  eip       = {defs={0x08048554}, expr=0x0804855a[32]}
  pf        = {defs={0x08048552}, expr=1[1]}
  sf        = {defs={0x08048552}, expr=0[1]}
  zf        = {defs={0x08048552}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048552}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v17495[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048552}, expr=0[1]}
memory:

0x804855a:lea    edi, [edi + 0x00000000]
Symbolic@0x22ecb30 insn@0x0804855a[3]: startInstruction(lea    edi, [edi + 0x00000000])
Symbolic@0x22ecb30 insn@0x0804855a[3]: number_(32, 6) = {defs={0x0804855a}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x0804855a[3]: number_(32, 134514010) = {defs={0x0804855a}, expr=0x0804855a[32]}
Symbolic@0x22ecb30 insn@0x0804855a[3]: add({defs={0x0804855a}, expr=0x0804855a[32]}, {defs={0x0804855a}, expr=6[32]}) = {defs={0x0804855a}, expr=0x08048560[32]}
Symbolic@0x22ecb30 insn@0x0804855a[3]: writeRegister(eip, {defs={0x0804855a}, expr=0x08048560[32]})
Symbolic@0x22ecb30 insn@0x0804855a[3]: readRegister(edi) = {defs={0x08048552}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x0804855a[3]: number_(32, 0) = {defs={0x0804855a}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x0804855a[3]: add({defs={0x08048552}, expr=0[32]}, {defs={0x0804855a}, expr=0[32]}) = {defs={0x08048552,0x0804855a}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x0804855a[3]: writeRegister(edi, {defs={0x08048552,0x0804855a}, expr=0[32]})
Symbolic@0x22ecb30 insn@0x0804855a[3]: finishInstruction(lea    edi, [edi + 0x00000000])
registers:
  esi       = {defs={0x0804854f,0x08048554}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
  edi       = {defs={0x08048552,0x0804855a}, expr=0[32]}
  eip       = {defs={0x0804855a}, expr=0x08048560[32]}
  pf        = {defs={0x08048552}, expr=1[1]}
  sf        = {defs={0x08048552}, expr=0[1]}
  zf        = {defs={0x08048552}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048552}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v17495[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048552}, expr=0[1]}
memory:

0x8048560:call   DWORD PTR ds:[esi]
Symbolic@0x22ecb30 insn@0x08048560[4]: startInstruction(call   DWORD PTR ds:[esi])
Symbolic@0x22ecb30 insn@0x08048560[4]: number_(32, 2) = {defs={0x08048560}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048560[4]: number_(32, 134514016) = {defs={0x08048560}, expr=0x08048560[32]}
Symbolic@0x22ecb30 insn@0x08048560[4]: add({defs={0x08048560}, expr=0x08048560[32]}, {defs={0x08048560}, expr=2[32]}) = {defs={0x08048560}, expr=0x08048562[32]}
Symbolic@0x22ecb30 insn@0x08048560[4]: writeRegister(eip, {defs={0x08048560}, expr=0x08048562[32]})
Symbolic@0x22ecb30 insn@0x08048560[4]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048560[4]: number_(32, 18446744073709551612) = {defs={0x08048560}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048560[4]: add(esp_0[32], {defs={0x08048560}, expr=-4[32]}) = {defs={0x08048560}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048560[4]: boolean_(1) = {defs={0x08048560}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048560[4]: readRegister(eip) = {defs={0x08048560}, expr=0x08048562[32]}
Symbolic@0x22ecb30 insn@0x08048560[4]: writeMemory(ss, {defs={0x08048560}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048560}, expr=0x08048562[32]}, {defs={0x08048560}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048560[4]: readRegister(esi) = {defs={0x0804854f,0x08048554}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
Symbolic@0x22ecb30 insn@0x08048560[4]: boolean_(1) = {defs={0x08048560}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048560[4]: readMemory(ds, {defs={0x0804854f,0x08048554}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}, {defs={0x08048560}, expr=1[1]}, 32) = v17496[32]
Symbolic@0x22ecb30 insn@0x08048560[4]: filterCallTarget(v17496[32]) = v17496[32]
Symbolic@0x22ecb30 insn@0x08048560[4]: writeRegister(eip, v17496[32])
Symbolic@0x22ecb30 insn@0x08048560[4]: writeRegister(esp, {defs={0x08048560}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048560[4]: finishInstruction(call   DWORD PTR ds:[esi])
registers:
  esp       = {defs={0x08048560}, expr=(add[32] esp_0[32] -4[32])}
  esi       = {defs={0x0804854f,0x08048554}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
  edi       = {defs={0x08048552,0x0804855a}, expr=0[32]}
  eip       = v17496[32]
  pf        = {defs={0x08048552}, expr=1[1]}
  sf        = {defs={0x08048552}, expr=0[1]}
  zf        = {defs={0x08048552}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048552}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v17495[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048552}, expr=0[1]}
memory:
  addr={defs={0x0804854f,0x08048554,0x08048560}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17496[32])
  addr={defs={0x0804854f,0x08048554,0x08048560}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17496[32])
  addr={defs={0x0804854f,0x08048554,0x08048560}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17496[32])
  addr={defs={0x0804854f,0x08048554,0x08048560}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])} value=(extract[8] 0[32] 8[32] v17496[32])
  addr={defs={0x08048560}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x08048560}, expr=8[8]}
  addr={defs={0x08048560}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x08048560}, expr=4[8]}
  addr={defs={0x08048560}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x08048560}, expr=-123[8]}
  addr={defs={0x08048560}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x08048560}, expr=98[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = {defs={0x08048560}, expr=frame_pointer[32]}
  esi       = {defs={0x0804854f,0x08048554}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])}
  edi       = {defs={0x08048552,0x0804855a}, expr=0[32]}
  eip       = v17496[32]
  pf        = {defs={0x08048552}, expr=1[1]}
  sf        = {defs={0x08048552}, expr=0[1]}
  zf        = {defs={0x08048552}, expr=1[1]}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048552}, expr=0[1]}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = v17495[1]
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048552}, expr=0[1]}
memory:
  addr={defs={0x0804854f,0x08048554,0x08048560}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17496[32])
  addr={defs={0x0804854f,0x08048554,0x08048560}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17496[32])
  addr={defs={0x0804854f,0x08048554,0x08048560}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17496[32])
  addr={defs={0x0804854f,0x08048554,0x08048560}, expr=(add[32] (extract[32] 0[32] 32[32] (umul[64] eax_0[32] 4[32])) edx_0[32])} value=(extract[8] 0[32] 8[32] v17496[32])
  addr={defs={0x08048560}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x08048560}, expr=8[8]}
  addr={defs={0x08048560}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x08048560}, expr=4[8]}
  addr={defs={0x08048560}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x08048560}, expr=-123[8]}
  addr={defs={0x08048560}, expr=frame_pointer[32]} value={defs={0x08048560}, expr=98[8]}
Symbolic@0x22ecb30 insn@0x08048560[4]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048562:inc    edi
Symbolic@0x22ecb30 insn@0x08048562[0]: startInstruction(inc    edi)
Symbolic@0x22ecb30 insn@0x08048562[0]: number_(32, 1) = {defs={0x08048562}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048562[0]: number_(32, 134514018) = {defs={0x08048562}, expr=0x08048562[32]}
Symbolic@0x22ecb30 insn@0x08048562[0]: add({defs={0x08048562}, expr=0x08048562[32]}, {defs={0x08048562}, expr=1[32]}) = {defs={0x08048562}, expr=0x08048563[32]}
Symbolic@0x22ecb30 insn@0x08048562[0]: writeRegister(eip, {defs={0x08048562}, expr=0x08048563[32]})
Symbolic@0x22ecb30 insn@0x08048562[0]: readRegister(edi) = edi_0[32]
Symbolic@0x22ecb30 insn@0x08048562[0]: boolean_(0) = {defs={0x08048562}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048562[0]: number_(32, 1) = {defs={0x08048562}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048562[0]: addWithCarries(edi_0[32], {defs={0x08048562}, expr=1[32]}, {defs={0x08048562}, expr=0[1]}) = {defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}
Symbolic@0x22ecb30 insn@0x08048562[0]: also returns: {defs={0x08048562}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}, 0, 8) = {defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}, 1, 2) = {defs={0x08048562}, expr=(extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}, 0, 1) = {defs={0x08048562}, expr=(extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: xor_({defs={0x08048562}, expr=(extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32]))}, {defs={0x08048562}, expr=(extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32]))}) = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}, 3, 4) = {defs={0x08048562}, expr=(extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}, 2, 3) = {defs={0x08048562}, expr=(extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: xor_({defs={0x08048562}, expr=(extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32]))}, {defs={0x08048562}, expr=(extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32]))}) = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}, 5, 6) = {defs={0x08048562}, expr=(extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}, 4, 5) = {defs={0x08048562}, expr=(extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: xor_({defs={0x08048562}, expr=(extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32]))}, {defs={0x08048562}, expr=(extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32]))}) = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}, 7, 8) = {defs={0x08048562}, expr=(extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[8] 0[32] 8[32] (add[32] edi_0[32] 1[32]))}, 6, 7) = {defs={0x08048562}, expr=(extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: xor_({defs={0x08048562}, expr=(extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32]))}, {defs={0x08048562}, expr=(extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32]))}) = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048562[0]: xor_({defs={0x08048562}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])))}, {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])))}) = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048562[0]: xor_({defs={0x08048562}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])))}, {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32])))}) = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048562[0]: xor_({defs={0x08048562}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])))}, {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32])))}) = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048562[0]: invert({defs={0x08048562}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32])))}) = {defs={0x08048562}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32]))))}
Symbolic@0x22ecb30 insn@0x08048562[0]: writeRegister(pf, {defs={0x08048562}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32]))))})
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}, 31, 32) = {defs={0x08048562}, expr=(extract[1] 31[32] 32[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: writeRegister(sf, {defs={0x08048562}, expr=(extract[1] 31[32] 32[32] (add[32] edi_0[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x08048562[0]: equalToZero({defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}) = {defs={0x08048562}, expr=(zerop[1] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: writeRegister(zf, {defs={0x08048562}, expr=(zerop[1] (add[32] edi_0[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}, 31, 32) = {defs={0x08048562}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}, 30, 31) = {defs={0x08048562}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: extract({defs={0x08048562}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}, 3, 4) = {defs={0x08048562}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}
Symbolic@0x22ecb30 insn@0x08048562[0]: writeRegister(af, {defs={0x08048562}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))})
Symbolic@0x22ecb30 insn@0x08048562[0]: xor_({defs={0x08048562}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}, {defs={0x08048562}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}) = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048562[0]: writeRegister(of, {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33])))})
Symbolic@0x22ecb30 insn@0x08048562[0]: writeRegister(edi, {defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])})
Symbolic@0x22ecb30 insn@0x08048562[0]: finishInstruction(inc    edi)
registers:
  edi       = {defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}
  eip       = {defs={0x08048562}, expr=0x08048563[32]}
  REG8.0    = (extract[2] 0[32] 2[32] eflags_0[32])
  pf        = {defs={0x08048562}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] edi_0[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] edi_0[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] edi_0[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] edi_0[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] edi_0[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] edi_0[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] edi_0[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] edi_0[32] 1[32]))))}
  sf        = {defs={0x08048562}, expr=(extract[1] 31[32] 32[32] (add[32] edi_0[32] 1[32]))}
  zf        = {defs={0x08048562}, expr=(zerop[1] (add[32] edi_0[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048562}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] edi_0[32]) (add[33] (uextend[33] 33[32] edi_0[32]) 1[33]) 1[33])))}
memory:

0x8048563:sub    esi, 0x04
Symbolic@0x22ecb30 insn@0x08048563[1]: startInstruction(sub    esi, 0x04)
Symbolic@0x22ecb30 insn@0x08048563[1]: number_(32, 3) = {defs={0x08048563}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048563[1]: number_(32, 134514019) = {defs={0x08048563}, expr=0x08048563[32]}
Symbolic@0x22ecb30 insn@0x08048563[1]: add({defs={0x08048563}, expr=0x08048563[32]}, {defs={0x08048563}, expr=3[32]}) = {defs={0x08048563}, expr=0x08048566[32]}
Symbolic@0x22ecb30 insn@0x08048563[1]: writeRegister(eip, {defs={0x08048563}, expr=0x08048566[32]})
Symbolic@0x22ecb30 insn@0x08048563[1]: boolean_(0) = {defs={0x08048563}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048563[1]: number_(32, 4) = {defs={0x08048563}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048563[1]: invert({defs={0x08048563}, expr=4[32]}) = {defs={0x08048563}, expr=-5[32]}
Symbolic@0x22ecb30 insn@0x08048563[1]: readRegister(esi) = esi_0[32]
Symbolic@0x22ecb30 insn@0x08048563[1]: invert({defs={0x08048563}, expr=0[1]}) = {defs={0x08048563}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048563[1]: addWithCarries(esi_0[32], {defs={0x08048563}, expr=-5[32]}, {defs={0x08048563}, expr=1[1]}) = {defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048563[1]: also returns: {defs={0x08048563}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])}, 0, 8) = {defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}, 1, 2) = {defs={0x08048563}, expr=(extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}, 0, 1) = {defs={0x08048563}, expr=(extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: xor_({defs={0x08048563}, expr=(extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32]))}, {defs={0x08048563}, expr=(extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32]))}) = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}, 3, 4) = {defs={0x08048563}, expr=(extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}, 2, 3) = {defs={0x08048563}, expr=(extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: xor_({defs={0x08048563}, expr=(extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32]))}, {defs={0x08048563}, expr=(extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32]))}) = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}, 5, 6) = {defs={0x08048563}, expr=(extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}, 4, 5) = {defs={0x08048563}, expr=(extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: xor_({defs={0x08048563}, expr=(extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32]))}, {defs={0x08048563}, expr=(extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32]))}) = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}, 7, 8) = {defs={0x08048563}, expr=(extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[8] 0[32] 8[32] (add[32] esi_0[32] -4[32]))}, 6, 7) = {defs={0x08048563}, expr=(extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: xor_({defs={0x08048563}, expr=(extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32]))}, {defs={0x08048563}, expr=(extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32]))}) = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: xor_({defs={0x08048563}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])))}, {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])))}) = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: xor_({defs={0x08048563}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])))}, {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32])))}) = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: xor_({defs={0x08048563}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])))}, {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32])))}) = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: invert({defs={0x08048563}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32])))}) = {defs={0x08048563}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32]))))}
Symbolic@0x22ecb30 insn@0x08048563[1]: writeRegister(pf, {defs={0x08048563}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32]))))})
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])}, 31, 32) = {defs={0x08048563}, expr=(extract[1] 31[32] 32[32] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: writeRegister(sf, {defs={0x08048563}, expr=(extract[1] 31[32] 32[32] (add[32] esi_0[32] -4[32]))})
Symbolic@0x22ecb30 insn@0x08048563[1]: equalToZero({defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])}) = {defs={0x08048563}, expr=(zerop[1] (add[32] esi_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: writeRegister(zf, {defs={0x08048563}, expr=(zerop[1] (add[32] esi_0[32] -4[32]))})
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}, 31, 32) = {defs={0x08048563}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}, 30, 31) = {defs={0x08048563}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: extract({defs={0x08048563}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}, 3, 4) = {defs={0x08048563}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x08048563[1]: invert({defs={0x08048563}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}) = {defs={0x08048563}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: writeRegister(af, {defs={0x08048563}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x08048563[1]: invert({defs={0x08048563}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}) = {defs={0x08048563}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: writeRegister(cf, {defs={0x08048563}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x08048563[1]: xor_({defs={0x08048563}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}, {defs={0x08048563}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33]))}) = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x08048563[1]: writeRegister(of, {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x08048563[1]: writeRegister(esi, {defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048563[1]: finishInstruction(sub    esi, 0x04)
registers:
  esi       = {defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])}
  edi       = {defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}
  eip       = {defs={0x08048563}, expr=0x08048566[32]}
  pf        = {defs={0x08048563}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esi_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] esi_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] esi_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] esi_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] esi_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] esi_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] esi_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] esi_0[32] -4[32]))))}
  sf        = {defs={0x08048563}, expr=(extract[1] 31[32] 32[32] (add[32] esi_0[32] -4[32]))}
  zf        = {defs={0x08048563}, expr=(zerop[1] (add[32] esi_0[32] -4[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048563}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048563}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esi_0[32]) (add[33] (uextend[33] 33[32] esi_0[32]) 4294967292[33]) 4294967291[33])))}
memory:

0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
Symbolic@0x22ecb30 insn@0x08048566[2]: startInstruction(cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi)
Symbolic@0x22ecb30 insn@0x08048566[2]: number_(32, 3) = {defs={0x08048566}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048566[2]: number_(32, 134514022) = {defs={0x08048566}, expr=0x08048566[32]}
Symbolic@0x22ecb30 insn@0x08048566[2]: add({defs={0x08048566}, expr=0x08048566[32]}, {defs={0x08048566}, expr=3[32]}) = {defs={0x08048566}, expr=0x08048569[32]}
Symbolic@0x22ecb30 insn@0x08048566[2]: writeRegister(eip, {defs={0x08048566}, expr=0x08048569[32]})
Symbolic@0x22ecb30 insn@0x08048566[2]: boolean_(0) = {defs={0x08048566}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048566[2]: readRegister(edi) = {defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}
Symbolic@0x22ecb30 insn@0x08048566[2]: invert({defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}) = {defs={0x08048562,0x08048566}, expr=(invert[32] (add[32] edi_0[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048566[2]: number_(8, 18446744073709551600) = {defs={0x08048566}, expr=-16[8]}
Symbolic@0x22ecb30 insn@0x08048566[2]: signExtend({defs={0x08048566}, expr=-16[8]}, 32) = {defs={0x08048566}, expr=-16[32]}
Symbolic@0x22ecb30 insn@0x08048566[2]: add(ebp_0[32], {defs={0x08048566}, expr=-16[32]}) = {defs={0x08048566}, expr=(add[32] ebp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x08048566[2]: boolean_(1) = {defs={0x08048566}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048566[2]: readMemory(ss, {defs={0x08048566}, expr=(add[32] ebp_0[32] -16[32])}, {defs={0x08048566}, expr=1[1]}, 32) = v17572[32]
Symbolic@0x22ecb30 insn@0x08048566[2]: invert({defs={0x08048566}, expr=0[1]}) = {defs={0x08048566}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048566[2]: addWithCarries(v17572[32], {defs={0x08048562,0x08048566}, expr=(invert[32] (add[32] edi_0[32] 1[32]))}, {defs={0x08048566}, expr=1[1]}) = {defs={0x08048562,0x08048566}, expr=(add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])}
Symbolic@0x22ecb30 insn@0x08048566[2]: also returns: {defs={0x08048562,0x08048566}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])}, 0, 8) = {defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, 1, 2) = {defs={0x08048562,0x08048566}, expr=(extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, 0, 1) = {defs={0x08048562,0x08048566}, expr=(extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: xor_({defs={0x08048562,0x08048566}, expr=(extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, {defs={0x08048562,0x08048566}, expr=(extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}) = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, 3, 4) = {defs={0x08048562,0x08048566}, expr=(extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, 2, 3) = {defs={0x08048562,0x08048566}, expr=(extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: xor_({defs={0x08048562,0x08048566}, expr=(extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, {defs={0x08048562,0x08048566}, expr=(extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}) = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, 5, 6) = {defs={0x08048562,0x08048566}, expr=(extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, 4, 5) = {defs={0x08048562,0x08048566}, expr=(extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: xor_({defs={0x08048562,0x08048566}, expr=(extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, {defs={0x08048562,0x08048566}, expr=(extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}) = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, 7, 8) = {defs={0x08048562,0x08048566}, expr=(extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[8] 0[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, 6, 7) = {defs={0x08048562,0x08048566}, expr=(extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: xor_({defs={0x08048562,0x08048566}, expr=(extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}, {defs={0x08048562,0x08048566}, expr=(extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}) = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: xor_({defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}, {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}) = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: xor_({defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}, {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}) = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: xor_({defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}, {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}) = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: invert({defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}) = {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))))}
Symbolic@0x22ecb30 insn@0x08048566[2]: writeRegister(pf, {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))))})
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])}, 31, 32) = {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: writeRegister(sf, {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x08048566[2]: equalToZero({defs={0x08048562,0x08048566}, expr=(add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])}) = {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048566[2]: writeRegister(zf, {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}, 31, 32) = {defs={0x08048562,0x08048566}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}, 30, 31) = {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: extract({defs={0x08048562,0x08048566}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}, 3, 4) = {defs={0x08048562,0x08048566}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}
Symbolic@0x22ecb30 insn@0x08048566[2]: invert({defs={0x08048562,0x08048566}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}) = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048566[2]: writeRegister(af, {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x08048566[2]: invert({defs={0x08048562,0x08048566}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}) = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048566[2]: writeRegister(cf, {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x08048566[2]: xor_({defs={0x08048562,0x08048566}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}, {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33])))}) = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
Symbolic@0x22ecb30 insn@0x08048566[2]: writeRegister(of, {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))})
Symbolic@0x22ecb30 insn@0x08048566[2]: finishInstruction(cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi)
registers:
  esi       = {defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])}
  edi       = {defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}
  eip       = {defs={0x08048566}, expr=0x08048569[32]}
  pf        = {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))))}
  sf        = {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
  zf        = {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
memory:
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] v17572[32])

0x8048569:jne    0x08048560<<Insn>>
Symbolic@0x22ecb30 insn@0x08048569[3]: startInstruction(jne    0x08048560<<Insn>>)
Symbolic@0x22ecb30 insn@0x08048569[3]: number_(32, 2) = {defs={0x08048569}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048569[3]: number_(32, 134514025) = {defs={0x08048569}, expr=0x08048569[32]}
Symbolic@0x22ecb30 insn@0x08048569[3]: add({defs={0x08048569}, expr=0x08048569[32]}, {defs={0x08048569}, expr=2[32]}) = {defs={0x08048569}, expr=0x0804856b[32]}
Symbolic@0x22ecb30 insn@0x08048569[3]: writeRegister(eip, {defs={0x08048569}, expr=0x0804856b[32]})
Symbolic@0x22ecb30 insn@0x08048569[3]: readRegister(zf) = {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048569[3]: invert({defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}) = {defs={0x08048562,0x08048566,0x08048569}, expr=(invert[1] (zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048569[3]: readRegister(eip) = {defs={0x08048569}, expr=0x0804856b[32]}
Symbolic@0x22ecb30 insn@0x08048569[3]: number_(32, 134514016) = {defs={0x08048569}, expr=0x08048560[32]}
Symbolic@0x22ecb30 insn@0x08048569[3]: ite({defs={0x08048562,0x08048566,0x08048569}, expr=(invert[1] (zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])))}, {defs={0x08048569}, expr=0x08048560[32]}, {defs={0x08048569}, expr=0x0804856b[32]}) = {defs={0x08048562,0x08048566,0x08048569}, expr=(ite[32] (invert[1] (zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))) 0x08048560[32] 0x0804856b[32])}
Symbolic@0x22ecb30 insn@0x08048569[3]: writeRegister(eip, {defs={0x08048562,0x08048566,0x08048569}, expr=(ite[32] (invert[1] (zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))) 0x08048560[32] 0x0804856b[32])})
Symbolic@0x22ecb30 insn@0x08048569[3]: finishInstruction(jne    0x08048560<<Insn>>)
registers:
  esi       = {defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])}
  edi       = {defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}
  eip       = {defs={0x08048562,0x08048566,0x08048569}, expr=(ite[32] (invert[1] (zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))) 0x08048560[32] 0x0804856b[32])}
  pf        = {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))))}
  sf        = {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
  zf        = {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
memory:
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] v17572[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp       = (add[32] frame_pointer[32] 4[32])
  esi       = {defs={0x08048563}, expr=(add[32] esi_0[32] -4[32])}
  edi       = {defs={0x08048562}, expr=(add[32] edi_0[32] 1[32])}
  eip       = {defs={0x08048562,0x08048566,0x08048569}, expr=(ite[32] (invert[1] (zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))) 0x08048560[32] 0x0804856b[32])}
  pf        = {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))))}
  sf        = {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
  zf        = {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] (invert[32] (add[32] edi_0[32] 1[32])) v17572[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) (add[33] (uextend[33] 33[32] v17572[32]) (uextend[33] 33[32] (invert[32] (add[32] edi_0[32] 1[32]))) 1[33]))))}
memory:
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -13[32])} value=(extract[8] 24[32] 32[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -14[32])} value=(extract[8] 16[32] 24[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -15[32])} value=(extract[8] 8[32] 16[32] v17572[32])
  addr={defs={0x08048566}, expr=(add[32] ebp_0[32] -16[32])} value=(extract[8] 0[32] 8[32] v17572[32])
Symbolic@0x22ecb30 insn@0x08048569[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x804856b:call   0x080485b0<_fini>
Symbolic@0x22ecb30 insn@0x0804856b[0]: startInstruction(call   0x080485b0<_fini>)
Symbolic@0x22ecb30 insn@0x0804856b[0]: number_(32, 5) = {defs={0x0804856b}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: number_(32, 134514027) = {defs={0x0804856b}, expr=0x0804856b[32]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: add({defs={0x0804856b}, expr=0x0804856b[32]}, {defs={0x0804856b}, expr=5[32]}) = {defs={0x0804856b}, expr=0x08048570[32]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: writeRegister(eip, {defs={0x0804856b}, expr=0x08048570[32]})
Symbolic@0x22ecb30 insn@0x0804856b[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x0804856b[0]: number_(32, 18446744073709551612) = {defs={0x0804856b}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: add(esp_0[32], {defs={0x0804856b}, expr=-4[32]}) = {defs={0x0804856b}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x0804856b[0]: boolean_(1) = {defs={0x0804856b}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: readRegister(eip) = {defs={0x0804856b}, expr=0x08048570[32]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: writeMemory(ss, {defs={0x0804856b}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x0804856b}, expr=0x08048570[32]}, {defs={0x0804856b}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x0804856b[0]: number_(32, 134514096) = {defs={0x0804856b}, expr=0x080485b0[32]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: filterCallTarget({defs={0x0804856b}, expr=0x080485b0[32]}) = {defs={0x0804856b}, expr=0x080485b0[32]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: writeRegister(eip, {defs={0x0804856b}, expr=0x080485b0[32]})
Symbolic@0x22ecb30 insn@0x0804856b[0]: writeRegister(esp, {defs={0x0804856b}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x0804856b[0]: finishInstruction(call   0x080485b0<_fini>)
registers:
  esp    = {defs={0x0804856b}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x0804856b}, expr=0x080485b0[32]}
memory:
  addr={defs={0x0804856b}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x0804856b}, expr=8[8]}
  addr={defs={0x0804856b}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x0804856b}, expr=4[8]}
  addr={defs={0x0804856b}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x0804856b}, expr=-123[8]}
  addr={defs={0x0804856b}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x0804856b}, expr=112[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x0804856b}, expr=frame_pointer[32]}
  eip    = {defs={0x0804856b}, expr=0x080485b0[32]}
memory:
  addr={defs={0x0804856b}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x0804856b}, expr=8[8]}
  addr={defs={0x0804856b}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x0804856b}, expr=4[8]}
  addr={defs={0x0804856b}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x0804856b}, expr=-123[8]}
  addr={defs={0x0804856b}, expr=frame_pointer[32]} value={defs={0x0804856b}, expr=112[8]}
Symbolic@0x22ecb30 insn@0x0804856b[0]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048570:add    esp, 0x0c
Symbolic@0x22ecb30 insn@0x08048570[0]: startInstruction(add    esp, 0x0c)
Symbolic@0x22ecb30 insn@0x08048570[0]: number_(32, 3) = {defs={0x08048570}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048570[0]: number_(32, 134514032) = {defs={0x08048570}, expr=0x08048570[32]}
Symbolic@0x22ecb30 insn@0x08048570[0]: add({defs={0x08048570}, expr=0x08048570[32]}, {defs={0x08048570}, expr=3[32]}) = {defs={0x08048570}, expr=0x08048573[32]}
Symbolic@0x22ecb30 insn@0x08048570[0]: writeRegister(eip, {defs={0x08048570}, expr=0x08048573[32]})
Symbolic@0x22ecb30 insn@0x08048570[0]: boolean_(0) = {defs={0x08048570}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048570[0]: number_(32, 12) = {defs={0x08048570}, expr=12[32]}
Symbolic@0x22ecb30 insn@0x08048570[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048570[0]: addWithCarries(esp_0[32], {defs={0x08048570}, expr=12[32]}, {defs={0x08048570}, expr=0[1]}) = {defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])}
Symbolic@0x22ecb30 insn@0x08048570[0]: also returns: {defs={0x08048570}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])}, 0, 8) = {defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 1, 2) = {defs={0x08048570}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 0, 1) = {defs={0x08048570}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: xor_({defs={0x08048570}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32]))}, {defs={0x08048570}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32]))}) = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 3, 4) = {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 2, 3) = {defs={0x08048570}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: xor_({defs={0x08048570}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32]))}, {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32]))}) = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 5, 6) = {defs={0x08048570}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 4, 5) = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: xor_({defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32]))}, {defs={0x08048570}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32]))}) = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 7, 8) = {defs={0x08048570}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] 12[32]))}, 6, 7) = {defs={0x08048570}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: xor_({defs={0x08048570}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32]))}, {defs={0x08048570}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))}) = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x08048570[0]: xor_({defs={0x08048570}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])))}, {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])))}) = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x08048570[0]: xor_({defs={0x08048570}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])))}, {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}) = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x08048570[0]: xor_({defs={0x08048570}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])))}, {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}) = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}
Symbolic@0x22ecb30 insn@0x08048570[0]: invert({defs={0x08048570}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32])))}) = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
Symbolic@0x22ecb30 insn@0x08048570[0]: writeRegister(pf, {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))})
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])}, 31, 32) = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: writeRegister(sf, {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))})
Symbolic@0x22ecb30 insn@0x08048570[0]: equalToZero({defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])}) = {defs={0x08048570}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: writeRegister(zf, {defs={0x08048570}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))})
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}, 31, 32) = {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}, 30, 31) = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: extract({defs={0x08048570}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}, 3, 4) = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
Symbolic@0x22ecb30 insn@0x08048570[0]: writeRegister(af, {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))})
Symbolic@0x22ecb30 insn@0x08048570[0]: writeRegister(cf, {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))})
Symbolic@0x22ecb30 insn@0x08048570[0]: xor_({defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}, {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}) = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
Symbolic@0x22ecb30 insn@0x08048570[0]: writeRegister(of, {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))})
Symbolic@0x22ecb30 insn@0x08048570[0]: writeRegister(esp, {defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])})
Symbolic@0x22ecb30 insn@0x08048570[0]: finishInstruction(add    esp, 0x0c)
registers:
  esp       = {defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])}
  eip       = {defs={0x08048570}, expr=0x08048573[32]}
  pf        = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x08048570}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:

0x8048573:pop    ebx
Symbolic@0x22ecb30 insn@0x08048573[1]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x08048573[1]: number_(32, 1) = {defs={0x08048573}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048573[1]: number_(32, 134514035) = {defs={0x08048573}, expr=0x08048573[32]}
Symbolic@0x22ecb30 insn@0x08048573[1]: add({defs={0x08048573}, expr=0x08048573[32]}, {defs={0x08048573}, expr=1[32]}) = {defs={0x08048573}, expr=0x08048574[32]}
Symbolic@0x22ecb30 insn@0x08048573[1]: writeRegister(eip, {defs={0x08048573}, expr=0x08048574[32]})
Symbolic@0x22ecb30 insn@0x08048573[1]: readRegister(esp) = {defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])}
Symbolic@0x22ecb30 insn@0x08048573[1]: number_(32, 4) = {defs={0x08048573}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048573[1]: add({defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])}, {defs={0x08048573}, expr=4[32]}) = {defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 16[32])}
Symbolic@0x22ecb30 insn@0x08048573[1]: writeRegister(esp, {defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 16[32])})
Symbolic@0x22ecb30 insn@0x08048573[1]: boolean_(1) = {defs={0x08048573}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048573[1]: readMemory(ss, {defs={0x08048570}, expr=(add[32] esp_0[32] 12[32])}, {defs={0x08048573}, expr=1[1]}, 32) = v17719[32]
Symbolic@0x22ecb30 insn@0x08048573[1]: writeRegister(ebx, v17719[32])
Symbolic@0x22ecb30 insn@0x08048573[1]: finishInstruction(pop    ebx)
registers:
  ebx       = v17719[32]
  esp       = {defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 16[32])}
  eip       = {defs={0x08048573}, expr=0x08048574[32]}
  pf        = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x08048570}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17719[32])

0x8048574:pop    esi
Symbolic@0x22ecb30 insn@0x08048574[2]: startInstruction(pop    esi)
Symbolic@0x22ecb30 insn@0x08048574[2]: number_(32, 1) = {defs={0x08048574}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048574[2]: number_(32, 134514036) = {defs={0x08048574}, expr=0x08048574[32]}
Symbolic@0x22ecb30 insn@0x08048574[2]: add({defs={0x08048574}, expr=0x08048574[32]}, {defs={0x08048574}, expr=1[32]}) = {defs={0x08048574}, expr=0x08048575[32]}
Symbolic@0x22ecb30 insn@0x08048574[2]: writeRegister(eip, {defs={0x08048574}, expr=0x08048575[32]})
Symbolic@0x22ecb30 insn@0x08048574[2]: readRegister(esp) = {defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 16[32])}
Symbolic@0x22ecb30 insn@0x08048574[2]: number_(32, 4) = {defs={0x08048574}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048574[2]: add({defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 16[32])}, {defs={0x08048574}, expr=4[32]}) = {defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 20[32])}
Symbolic@0x22ecb30 insn@0x08048574[2]: writeRegister(esp, {defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 20[32])})
Symbolic@0x22ecb30 insn@0x08048574[2]: boolean_(1) = {defs={0x08048574}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048574[2]: readMemory(ss, {defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 16[32])}, {defs={0x08048574}, expr=1[1]}, 32) = v17724[32]
Symbolic@0x22ecb30 insn@0x08048574[2]: writeRegister(esi, v17724[32])
Symbolic@0x22ecb30 insn@0x08048574[2]: finishInstruction(pop    esi)
registers:
  ebx       = v17719[32]
  esp       = {defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 20[32])}
  esi       = v17724[32]
  eip       = {defs={0x08048574}, expr=0x08048575[32]}
  pf        = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x08048570}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 19[32])} value=(extract[8] 24[32] 32[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 18[32])} value=(extract[8] 16[32] 24[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 17[32])} value=(extract[8] 8[32] 16[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 16[32])} value=(extract[8] 0[32] 8[32] v17724[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17719[32])

0x8048575:pop    edi
Symbolic@0x22ecb30 insn@0x08048575[3]: startInstruction(pop    edi)
Symbolic@0x22ecb30 insn@0x08048575[3]: number_(32, 1) = {defs={0x08048575}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048575[3]: number_(32, 134514037) = {defs={0x08048575}, expr=0x08048575[32]}
Symbolic@0x22ecb30 insn@0x08048575[3]: add({defs={0x08048575}, expr=0x08048575[32]}, {defs={0x08048575}, expr=1[32]}) = {defs={0x08048575}, expr=0x08048576[32]}
Symbolic@0x22ecb30 insn@0x08048575[3]: writeRegister(eip, {defs={0x08048575}, expr=0x08048576[32]})
Symbolic@0x22ecb30 insn@0x08048575[3]: readRegister(esp) = {defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 20[32])}
Symbolic@0x22ecb30 insn@0x08048575[3]: number_(32, 4) = {defs={0x08048575}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048575[3]: add({defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 20[32])}, {defs={0x08048575}, expr=4[32]}) = {defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 24[32])}
Symbolic@0x22ecb30 insn@0x08048575[3]: writeRegister(esp, {defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 24[32])})
Symbolic@0x22ecb30 insn@0x08048575[3]: boolean_(1) = {defs={0x08048575}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048575[3]: readMemory(ss, {defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 20[32])}, {defs={0x08048575}, expr=1[1]}, 32) = v17729[32]
Symbolic@0x22ecb30 insn@0x08048575[3]: writeRegister(edi, v17729[32])
Symbolic@0x22ecb30 insn@0x08048575[3]: finishInstruction(pop    edi)
registers:
  ebx       = v17719[32]
  esp       = {defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 24[32])}
  esi       = v17724[32]
  edi       = v17729[32]
  eip       = {defs={0x08048575}, expr=0x08048576[32]}
  pf        = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x08048570}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 23[32])} value=(extract[8] 24[32] 32[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 22[32])} value=(extract[8] 16[32] 24[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 21[32])} value=(extract[8] 8[32] 16[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 20[32])} value=(extract[8] 0[32] 8[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 19[32])} value=(extract[8] 24[32] 32[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 18[32])} value=(extract[8] 16[32] 24[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 17[32])} value=(extract[8] 8[32] 16[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 16[32])} value=(extract[8] 0[32] 8[32] v17724[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17719[32])

0x8048576:pop    ebp
Symbolic@0x22ecb30 insn@0x08048576[4]: startInstruction(pop    ebp)
Symbolic@0x22ecb30 insn@0x08048576[4]: number_(32, 1) = {defs={0x08048576}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048576[4]: number_(32, 134514038) = {defs={0x08048576}, expr=0x08048576[32]}
Symbolic@0x22ecb30 insn@0x08048576[4]: add({defs={0x08048576}, expr=0x08048576[32]}, {defs={0x08048576}, expr=1[32]}) = {defs={0x08048576}, expr=0x08048577[32]}
Symbolic@0x22ecb30 insn@0x08048576[4]: writeRegister(eip, {defs={0x08048576}, expr=0x08048577[32]})
Symbolic@0x22ecb30 insn@0x08048576[4]: readRegister(esp) = {defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 24[32])}
Symbolic@0x22ecb30 insn@0x08048576[4]: number_(32, 4) = {defs={0x08048576}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048576[4]: add({defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 24[32])}, {defs={0x08048576}, expr=4[32]}) = {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 28[32])}
Symbolic@0x22ecb30 insn@0x08048576[4]: writeRegister(esp, {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 28[32])})
Symbolic@0x22ecb30 insn@0x08048576[4]: boolean_(1) = {defs={0x08048576}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048576[4]: readMemory(ss, {defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 24[32])}, {defs={0x08048576}, expr=1[1]}, 32) = v17734[32]
Symbolic@0x22ecb30 insn@0x08048576[4]: writeRegister(ebp, v17734[32])
Symbolic@0x22ecb30 insn@0x08048576[4]: finishInstruction(pop    ebp)
registers:
  ebx       = v17719[32]
  esp       = {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 28[32])}
  ebp       = v17734[32]
  esi       = v17724[32]
  edi       = v17729[32]
  eip       = {defs={0x08048576}, expr=0x08048577[32]}
  pf        = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x08048570}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 27[32])} value=(extract[8] 24[32] 32[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 26[32])} value=(extract[8] 16[32] 24[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 25[32])} value=(extract[8] 8[32] 16[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 24[32])} value=(extract[8] 0[32] 8[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 23[32])} value=(extract[8] 24[32] 32[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 22[32])} value=(extract[8] 16[32] 24[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 21[32])} value=(extract[8] 8[32] 16[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 20[32])} value=(extract[8] 0[32] 8[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 19[32])} value=(extract[8] 24[32] 32[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 18[32])} value=(extract[8] 16[32] 24[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 17[32])} value=(extract[8] 8[32] 16[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 16[32])} value=(extract[8] 0[32] 8[32] v17724[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17719[32])

0x8048577:ret    
Symbolic@0x22ecb30 insn@0x08048577[5]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x08048577[5]: number_(32, 1) = {defs={0x08048577}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048577[5]: number_(32, 134514039) = {defs={0x08048577}, expr=0x08048577[32]}
Symbolic@0x22ecb30 insn@0x08048577[5]: add({defs={0x08048577}, expr=0x08048577[32]}, {defs={0x08048577}, expr=1[32]}) = {defs={0x08048577}, expr=0x08048578[32]}
Symbolic@0x22ecb30 insn@0x08048577[5]: writeRegister(eip, {defs={0x08048577}, expr=0x08048578[32]})
Symbolic@0x22ecb30 insn@0x08048577[5]: number_(32, 0) = {defs={0x08048577}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048577[5]: readRegister(esp) = {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 28[32])}
Symbolic@0x22ecb30 insn@0x08048577[5]: number_(32, 4) = {defs={0x08048577}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048577[5]: add({defs={0x08048577}, expr=4[32]}, {defs={0x08048577}, expr=0[32]}) = {defs={0x08048577}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048577[5]: add({defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 28[32])}, {defs={0x08048577}, expr=4[32]}) = {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] esp_0[32] 32[32])}
Symbolic@0x22ecb30 insn@0x08048577[5]: boolean_(1) = {defs={0x08048577}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048577[5]: readMemory(ss, {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 28[32])}, {defs={0x08048577}, expr=1[1]}, 32) = v17739[32]
Symbolic@0x22ecb30 insn@0x08048577[5]: filterReturnTarget(v17739[32]) = v17739[32]
Symbolic@0x22ecb30 insn@0x08048577[5]: writeRegister(eip, v17739[32])
Symbolic@0x22ecb30 insn@0x08048577[5]: writeRegister(esp, {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] esp_0[32] 32[32])})
Symbolic@0x22ecb30 insn@0x08048577[5]: finishInstruction(ret)
registers:
  ebx       = v17719[32]
  esp       = {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] esp_0[32] 32[32])}
  ebp       = v17734[32]
  esi       = v17724[32]
  edi       = v17729[32]
  eip       = v17739[32]
  pf        = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] 12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] 12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] 12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] 12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] 12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] 12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] 12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] 12[32]))))}
  sf        = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] 12[32]))}
  zf        = {defs={0x08048570}, expr=(zerop[1] (add[32] esp_0[32] 12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] esp_0[32]) (add[33] (uextend[33] 33[32] esp_0[32]) 12[33]) 12[33])))}
memory:
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] esp_0[32] 31[32])} value=(extract[8] 24[32] 32[32] v17739[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] esp_0[32] 30[32])} value=(extract[8] 16[32] 24[32] v17739[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] esp_0[32] 29[32])} value=(extract[8] 8[32] 16[32] v17739[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] esp_0[32] 28[32])} value=(extract[8] 0[32] 8[32] v17739[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 27[32])} value=(extract[8] 24[32] 32[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 26[32])} value=(extract[8] 16[32] 24[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 25[32])} value=(extract[8] 8[32] 16[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] esp_0[32] 24[32])} value=(extract[8] 0[32] 8[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 23[32])} value=(extract[8] 24[32] 32[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 22[32])} value=(extract[8] 16[32] 24[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 21[32])} value=(extract[8] 8[32] 16[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] esp_0[32] 20[32])} value=(extract[8] 0[32] 8[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 19[32])} value=(extract[8] 24[32] 32[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 18[32])} value=(extract[8] 16[32] 24[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 17[32])} value=(extract[8] 8[32] 16[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] esp_0[32] 16[32])} value=(extract[8] 0[32] 8[32] v17724[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v17719[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  ebx       = v17719[32]
  esp       = {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] frame_pointer[32] 36[32])}
  ebp       = v17734[32]
  esi       = v17724[32]
  edi       = v17729[32]
  eip       = v17739[32]
  pf        = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 1[32] 2[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 2[32] 3[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 3[32] 4[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 4[32] 5[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 5[32] 6[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 6[32] 7[32] (add[32] frame_pointer[32] 16[32])) (extract[1] 7[32] 8[32] (add[32] frame_pointer[32] 16[32]))))}
  sf        = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] frame_pointer[32] 16[32]))}
  zf        = {defs={0x08048570}, expr=(zerop[1] (add[32] frame_pointer[32] 16[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048570}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) 12[33]) 12[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048570}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) 12[33]) 12[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) 12[33]) 12[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) (add[33] (uextend[33] 33[32] (add[32] frame_pointer[32] 4[32])) 12[33]) 12[33])))}
memory:
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] frame_pointer[32] 35[32])} value=(extract[8] 24[32] 32[32] v17739[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] frame_pointer[32] 34[32])} value=(extract[8] 16[32] 24[32] v17739[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] frame_pointer[32] 33[32])} value=(extract[8] 8[32] 16[32] v17739[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] frame_pointer[32] 32[32])} value=(extract[8] 0[32] 8[32] v17739[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] frame_pointer[32] 31[32])} value=(extract[8] 24[32] 32[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] frame_pointer[32] 30[32])} value=(extract[8] 16[32] 24[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] frame_pointer[32] 29[32])} value=(extract[8] 8[32] 16[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] frame_pointer[32] 28[32])} value=(extract[8] 0[32] 8[32] v17734[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] frame_pointer[32] 27[32])} value=(extract[8] 24[32] 32[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] frame_pointer[32] 26[32])} value=(extract[8] 16[32] 24[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] frame_pointer[32] 25[32])} value=(extract[8] 8[32] 16[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] frame_pointer[32] 24[32])} value=(extract[8] 0[32] 8[32] v17729[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] frame_pointer[32] 23[32])} value=(extract[8] 24[32] 32[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] frame_pointer[32] 22[32])} value=(extract[8] 16[32] 24[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] frame_pointer[32] 21[32])} value=(extract[8] 8[32] 16[32] v17724[32])
  addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] frame_pointer[32] 20[32])} value=(extract[8] 0[32] 8[32] v17724[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] frame_pointer[32] 19[32])} value=(extract[8] 24[32] 32[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] frame_pointer[32] 18[32])} value=(extract[8] 16[32] 24[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] frame_pointer[32] 17[32])} value=(extract[8] 8[32] 16[32] v17719[32])
  addr={defs={0x08048570,0x08048573}, expr=(add[32] frame_pointer[32] 16[32])} value=(extract[8] 0[32] 8[32] v17719[32])
Symbolic@0x22ecb30 insn@0x08048577[5]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048580:push   ebp
Symbolic@0x22ecb30 insn@0x08048580[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x08048580[0]: number_(32, 1) = {defs={0x08048580}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048580[0]: number_(32, 134514048) = {defs={0x08048580}, expr=0x08048580[32]}
Symbolic@0x22ecb30 insn@0x08048580[0]: add({defs={0x08048580}, expr=0x08048580[32]}, {defs={0x08048580}, expr=1[32]}) = {defs={0x08048580}, expr=0x08048581[32]}
Symbolic@0x22ecb30 insn@0x08048580[0]: writeRegister(eip, {defs={0x08048580}, expr=0x08048581[32]})
Symbolic@0x22ecb30 insn@0x08048580[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x08048580[0]: number_(32, 18446744073709551612) = {defs={0x08048580}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048580[0]: add(esp_0[32], {defs={0x08048580}, expr=-4[32]}) = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048580[0]: boolean_(1) = {defs={0x08048580}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048580[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x08048580[0]: writeMemory(ss, {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x08048580}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048580[0]: writeRegister(esp, {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048580[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048580}, expr=0x08048581[32]}
memory:
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048581:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x08048581[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x08048581[1]: number_(32, 2) = {defs={0x08048581}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048581[1]: number_(32, 134514049) = {defs={0x08048581}, expr=0x08048581[32]}
Symbolic@0x22ecb30 insn@0x08048581[1]: add({defs={0x08048581}, expr=0x08048581[32]}, {defs={0x08048581}, expr=2[32]}) = {defs={0x08048581}, expr=0x08048583[32]}
Symbolic@0x22ecb30 insn@0x08048581[1]: writeRegister(eip, {defs={0x08048581}, expr=0x08048583[32]})
Symbolic@0x22ecb30 insn@0x08048581[1]: readRegister(esp) = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048581[1]: writeRegister(ebp, {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x08048581[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048581}, expr=0x08048583[32]}
memory:
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048583:push   ebx
Symbolic@0x22ecb30 insn@0x08048583[2]: startInstruction(push   ebx)
Symbolic@0x22ecb30 insn@0x08048583[2]: number_(32, 1) = {defs={0x08048583}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x08048583[2]: number_(32, 134514051) = {defs={0x08048583}, expr=0x08048583[32]}
Symbolic@0x22ecb30 insn@0x08048583[2]: add({defs={0x08048583}, expr=0x08048583[32]}, {defs={0x08048583}, expr=1[32]}) = {defs={0x08048583}, expr=0x08048584[32]}
Symbolic@0x22ecb30 insn@0x08048583[2]: writeRegister(eip, {defs={0x08048583}, expr=0x08048584[32]})
Symbolic@0x22ecb30 insn@0x08048583[2]: readRegister(esp) = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x08048583[2]: number_(32, 18446744073709551612) = {defs={0x08048583}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x08048583[2]: add({defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x08048583}, expr=-4[32]}) = {defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x08048583[2]: boolean_(1) = {defs={0x08048583}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048583[2]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x08048583[2]: writeMemory(ss, {defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])}, ebx_0[32], {defs={0x08048583}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x08048583[2]: writeRegister(esp, {defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])})
Symbolic@0x22ecb30 insn@0x08048583[2]: finishInstruction(push   ebx)
registers:
  esp    = {defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])}
  ebp    = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x08048583}, expr=0x08048584[32]}
memory:
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048584:sub    esp, 0x04
Symbolic@0x22ecb30 insn@0x08048584[3]: startInstruction(sub    esp, 0x04)
Symbolic@0x22ecb30 insn@0x08048584[3]: number_(32, 3) = {defs={0x08048584}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048584[3]: number_(32, 134514052) = {defs={0x08048584}, expr=0x08048584[32]}
Symbolic@0x22ecb30 insn@0x08048584[3]: add({defs={0x08048584}, expr=0x08048584[32]}, {defs={0x08048584}, expr=3[32]}) = {defs={0x08048584}, expr=0x08048587[32]}
Symbolic@0x22ecb30 insn@0x08048584[3]: writeRegister(eip, {defs={0x08048584}, expr=0x08048587[32]})
Symbolic@0x22ecb30 insn@0x08048584[3]: boolean_(0) = {defs={0x08048584}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048584[3]: number_(32, 4) = {defs={0x08048584}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x08048584[3]: invert({defs={0x08048584}, expr=4[32]}) = {defs={0x08048584}, expr=-5[32]}
Symbolic@0x22ecb30 insn@0x08048584[3]: readRegister(esp) = {defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x08048584[3]: invert({defs={0x08048584}, expr=0[1]}) = {defs={0x08048584}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048584[3]: addWithCarries({defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])}, {defs={0x08048584}, expr=-5[32]}, {defs={0x08048584}, expr=1[1]}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x08048584[3]: also returns: {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}, 0, 8) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 1, 2) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 0, 1) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: xor_({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 3, 4) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 2, 3) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: xor_({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 5, 6) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 4, 5) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: xor_({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 7, 8) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[8] 0[32] 8[32] (add[32] esp_0[32] -12[32]))}, 6, 7) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: xor_({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32]))}, {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: xor_({defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: xor_({defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: xor_({defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])))}, {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: invert({defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32])))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
Symbolic@0x22ecb30 insn@0x08048584[3]: writeRegister(pf, {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))})
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}, 31, 32) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: writeRegister(sf, {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048584[3]: equalToZero({defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: writeRegister(zf, {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))})
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}, 31, 32) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}, 30, 31) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: extract({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}, 3, 4) = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x08048584[3]: invert({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: writeRegister(af, {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x08048584[3]: invert({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: writeRegister(cf, {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x08048584[3]: xor_({defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}, {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33]))}) = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x08048584[3]: writeRegister(of, {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x08048584[3]: writeRegister(esp, {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x08048584[3]: finishInstruction(sub    esp, 0x04)
registers:
  esp       = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048584}, expr=0x08048587[32]}
  pf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
memory:
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048587:mov    ebx, 0x080495e8<.ctors>
Symbolic@0x22ecb30 insn@0x08048587[4]: startInstruction(mov    ebx, 0x080495e8<.ctors>)
Symbolic@0x22ecb30 insn@0x08048587[4]: number_(32, 5) = {defs={0x08048587}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x08048587[4]: number_(32, 134514055) = {defs={0x08048587}, expr=0x08048587[32]}
Symbolic@0x22ecb30 insn@0x08048587[4]: add({defs={0x08048587}, expr=0x08048587[32]}, {defs={0x08048587}, expr=5[32]}) = {defs={0x08048587}, expr=0x0804858c[32]}
Symbolic@0x22ecb30 insn@0x08048587[4]: writeRegister(eip, {defs={0x08048587}, expr=0x0804858c[32]})
Symbolic@0x22ecb30 insn@0x08048587[4]: number_(32, 134518248) = {defs={0x08048587}, expr=0x080495e8[32]}
Symbolic@0x22ecb30 insn@0x08048587[4]: writeRegister(ebx, {defs={0x08048587}, expr=0x080495e8[32]})
Symbolic@0x22ecb30 insn@0x08048587[4]: finishInstruction(mov    ebx, 0x080495e8<.ctors>)
registers:
  ebx       = {defs={0x08048587}, expr=0x080495e8[32]}
  esp       = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048587}, expr=0x0804858c[32]}
  pf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
memory:
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
Symbolic@0x22ecb30 insn@0x0804858c[5]: startInstruction(mov    eax, DWORD PTR ds:[0x080495e8<.ctors>])
Symbolic@0x22ecb30 insn@0x0804858c[5]: number_(32, 5) = {defs={0x0804858c}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x0804858c[5]: number_(32, 134514060) = {defs={0x0804858c}, expr=0x0804858c[32]}
Symbolic@0x22ecb30 insn@0x0804858c[5]: add({defs={0x0804858c}, expr=0x0804858c[32]}, {defs={0x0804858c}, expr=5[32]}) = {defs={0x0804858c}, expr=0x08048591[32]}
Symbolic@0x22ecb30 insn@0x0804858c[5]: writeRegister(eip, {defs={0x0804858c}, expr=0x08048591[32]})
Symbolic@0x22ecb30 insn@0x0804858c[5]: number_(32, 134518248) = {defs={0x0804858c}, expr=0x080495e8[32]}
Symbolic@0x22ecb30 insn@0x0804858c[5]: boolean_(1) = {defs={0x0804858c}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x0804858c[5]: readMemory(ds, {defs={0x0804858c}, expr=0x080495e8[32]}, {defs={0x0804858c}, expr=1[1]}, 32) = v17815[32]
Symbolic@0x22ecb30 insn@0x0804858c[5]: writeRegister(eax, v17815[32])
Symbolic@0x22ecb30 insn@0x0804858c[5]: finishInstruction(mov    eax, DWORD PTR ds:[0x080495e8<.ctors>])
registers:
  eax       = v17815[32]
  ebx       = {defs={0x08048587}, expr=0x080495e8[32]}
  esp       = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x0804858c}, expr=0x08048591[32]}
  pf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] esp_0[32] -12[32])) (extract[1] 1[32] 2[32] (add[32] esp_0[32] -12[32])) (extract[1] 2[32] 3[32] (add[32] esp_0[32] -12[32])) (extract[1] 3[32] 4[32] (add[32] esp_0[32] -12[32])) (extract[1] 4[32] 5[32] (add[32] esp_0[32] -12[32])) (extract[1] 5[32] 6[32] (add[32] esp_0[32] -12[32])) (extract[1] 6[32] 7[32] (add[32] esp_0[32] -12[32])) (extract[1] 7[32] 8[32] (add[32] esp_0[32] -12[32]))))}
  sf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] esp_0[32] -12[32]))}
  zf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] esp_0[32] -12[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) (add[33] (uextend[33] 33[32] (add[32] esp_0[32] -8[32])) 4294967292[33]) 4294967291[33])))}
memory:
  addr={defs={0x0804858c}, expr=0x080495eb[32]} value=(extract[8] 24[32] 32[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495ea[32]} value=(extract[8] 16[32] 24[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495e9[32]} value=(extract[8] 8[32] 16[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495e8[32]} value=(extract[8] 0[32] 8[32] v17815[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048591:cmp    eax, 0xff<-0x01>
Symbolic@0x22ecb30 insn@0x08048591[6]: startInstruction(cmp    eax, 0xff<-0x01>)
Symbolic@0x22ecb30 insn@0x08048591[6]: number_(32, 3) = {defs={0x08048591}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048591[6]: number_(32, 134514065) = {defs={0x08048591}, expr=0x08048591[32]}
Symbolic@0x22ecb30 insn@0x08048591[6]: add({defs={0x08048591}, expr=0x08048591[32]}, {defs={0x08048591}, expr=3[32]}) = {defs={0x08048591}, expr=0x08048594[32]}
Symbolic@0x22ecb30 insn@0x08048591[6]: writeRegister(eip, {defs={0x08048591}, expr=0x08048594[32]})
Symbolic@0x22ecb30 insn@0x08048591[6]: boolean_(0) = {defs={0x08048591}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x08048591[6]: number_(32, 18446744073709551615) = {defs={0x08048591}, expr=-1[32]}
Symbolic@0x22ecb30 insn@0x08048591[6]: invert({defs={0x08048591}, expr=-1[32]}) = {defs={0x08048591}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048591[6]: readRegister(eax) = v17815[32]
Symbolic@0x22ecb30 insn@0x08048591[6]: invert({defs={0x08048591}, expr=0[1]}) = {defs={0x08048591}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x08048591[6]: addWithCarries(v17815[32], {defs={0x08048591}, expr=0[32]}, {defs={0x08048591}, expr=1[1]}) = {defs={0x08048591}, expr=(add[32] v17815[32] 1[32])}
Symbolic@0x22ecb30 insn@0x08048591[6]: also returns: {defs={0x08048591}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(add[32] v17815[32] 1[32])}, 0, 8) = {defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}, 1, 2) = {defs={0x08048591}, expr=(extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}, 0, 1) = {defs={0x08048591}, expr=(extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: xor_({defs={0x08048591}, expr=(extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32]))}, {defs={0x08048591}, expr=(extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32]))}) = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}, 3, 4) = {defs={0x08048591}, expr=(extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}, 2, 3) = {defs={0x08048591}, expr=(extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: xor_({defs={0x08048591}, expr=(extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32]))}, {defs={0x08048591}, expr=(extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32]))}) = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}, 5, 6) = {defs={0x08048591}, expr=(extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}, 4, 5) = {defs={0x08048591}, expr=(extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: xor_({defs={0x08048591}, expr=(extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32]))}, {defs={0x08048591}, expr=(extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32]))}) = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}, 7, 8) = {defs={0x08048591}, expr=(extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[8] 0[32] 8[32] (add[32] v17815[32] 1[32]))}, 6, 7) = {defs={0x08048591}, expr=(extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: xor_({defs={0x08048591}, expr=(extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32]))}, {defs={0x08048591}, expr=(extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32]))}) = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: xor_({defs={0x08048591}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])))}, {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])))}) = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: xor_({defs={0x08048591}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])))}, {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32])))}) = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: xor_({defs={0x08048591}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])))}, {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32])))}) = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: invert({defs={0x08048591}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32])))}) = {defs={0x08048591}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32]))))}
Symbolic@0x22ecb30 insn@0x08048591[6]: writeRegister(pf, {defs={0x08048591}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32]))))})
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(add[32] v17815[32] 1[32])}, 31, 32) = {defs={0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: writeRegister(sf, {defs={0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] v17815[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x08048591[6]: equalToZero({defs={0x08048591}, expr=(add[32] v17815[32] 1[32])}) = {defs={0x08048591}, expr=(zerop[1] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: writeRegister(zf, {defs={0x08048591}, expr=(zerop[1] (add[32] v17815[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}, 31, 32) = {defs={0x08048591}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}, 30, 31) = {defs={0x08048591}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: extract({defs={0x08048591}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}, 3, 4) = {defs={0x08048591}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x08048591[6]: invert({defs={0x08048591}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}) = {defs={0x08048591}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: writeRegister(af, {defs={0x08048591}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x08048591[6]: invert({defs={0x08048591}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}) = {defs={0x08048591}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: writeRegister(cf, {defs={0x08048591}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x08048591[6]: xor_({defs={0x08048591}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}, {defs={0x08048591}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33]))}) = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x08048591[6]: writeRegister(of, {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x08048591[6]: finishInstruction(cmp    eax, 0xff<-0x01>)
registers:
  eax       = v17815[32]
  ebx       = {defs={0x08048587}, expr=0x080495e8[32]}
  esp       = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048591}, expr=0x08048594[32]}
  pf        = {defs={0x08048591}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32]))))}
  sf        = {defs={0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] v17815[32] 1[32]))}
  zf        = {defs={0x08048591}, expr=(zerop[1] (add[32] v17815[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048591}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048591}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
memory:
  addr={defs={0x0804858c}, expr=0x080495eb[32]} value=(extract[8] 24[32] 32[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495ea[32]} value=(extract[8] 16[32] 24[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495e9[32]} value=(extract[8] 8[32] 16[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495e8[32]} value=(extract[8] 0[32] 8[32] v17815[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x8048594:je     0x080485ac<<Insn>>
Symbolic@0x22ecb30 insn@0x08048594[7]: startInstruction(je     0x080485ac<<Insn>>)
Symbolic@0x22ecb30 insn@0x08048594[7]: number_(32, 2) = {defs={0x08048594}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x08048594[7]: number_(32, 134514068) = {defs={0x08048594}, expr=0x08048594[32]}
Symbolic@0x22ecb30 insn@0x08048594[7]: add({defs={0x08048594}, expr=0x08048594[32]}, {defs={0x08048594}, expr=2[32]}) = {defs={0x08048594}, expr=0x08048596[32]}
Symbolic@0x22ecb30 insn@0x08048594[7]: writeRegister(eip, {defs={0x08048594}, expr=0x08048596[32]})
Symbolic@0x22ecb30 insn@0x08048594[7]: readRegister(zf) = {defs={0x08048591}, expr=(zerop[1] (add[32] v17815[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x08048594[7]: readRegister(eip) = {defs={0x08048594}, expr=0x08048596[32]}
Symbolic@0x22ecb30 insn@0x08048594[7]: number_(32, 134514092) = {defs={0x08048594}, expr=0x080485ac[32]}
Symbolic@0x22ecb30 insn@0x08048594[7]: ite({defs={0x08048591}, expr=(zerop[1] (add[32] v17815[32] 1[32]))}, {defs={0x08048594}, expr=0x080485ac[32]}, {defs={0x08048594}, expr=0x08048596[32]}) = {defs={0x08048591,0x08048594}, expr=(ite[32] (zerop[1] (add[32] v17815[32] 1[32])) 0x080485ac[32] 0x08048596[32])}
Symbolic@0x22ecb30 insn@0x08048594[7]: writeRegister(eip, {defs={0x08048591,0x08048594}, expr=(ite[32] (zerop[1] (add[32] v17815[32] 1[32])) 0x080485ac[32] 0x08048596[32])})
Symbolic@0x22ecb30 insn@0x08048594[7]: finishInstruction(je     0x080485ac<<Insn>>)
registers:
  eax       = v17815[32]
  ebx       = {defs={0x08048587}, expr=0x080495e8[32]}
  esp       = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] esp_0[32] -12[32])}
  ebp       = {defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])}
  eip       = {defs={0x08048591,0x08048594}, expr=(ite[32] (zerop[1] (add[32] v17815[32] 1[32])) 0x080485ac[32] 0x08048596[32])}
  pf        = {defs={0x08048591}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32]))))}
  sf        = {defs={0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] v17815[32] 1[32]))}
  zf        = {defs={0x08048591}, expr=(zerop[1] (add[32] v17815[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048591}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048591}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
memory:
  addr={defs={0x0804858c}, expr=0x080495eb[32]} value=(extract[8] 24[32] 32[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495ea[32]} value=(extract[8] 16[32] 24[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495e9[32]} value=(extract[8] 8[32] 16[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495e8[32]} value=(extract[8] 0[32] 8[32] v17815[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = v17815[32]
  ebx       = {defs={0x08048587}, expr=0x080495e8[32]}
  esp       = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] frame_pointer[32] -8[32])}
  ebp       = {defs={0x08048580}, expr=frame_pointer[32]}
  eip       = {defs={0x08048591,0x08048594}, expr=(ite[32] (zerop[1] (add[32] v17815[32] 1[32])) 0x080485ac[32] 0x08048596[32])}
  pf        = {defs={0x08048591}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17815[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17815[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17815[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17815[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17815[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17815[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17815[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17815[32] 1[32]))))}
  sf        = {defs={0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] v17815[32] 1[32]))}
  zf        = {defs={0x08048591}, expr=(zerop[1] (add[32] v17815[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x08048591}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x08048591}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x08048591}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17815[32]) (add[33] (uextend[33] 33[32] v17815[32]) 1[33]) 0[33])))}
memory:
  addr={defs={0x0804858c}, expr=0x080495eb[32]} value=(extract[8] 24[32] 32[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495ea[32]} value=(extract[8] 16[32] 24[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495e9[32]} value=(extract[8] 8[32] 16[32] v17815[32])
  addr={defs={0x0804858c}, expr=0x080495e8[32]} value=(extract[8] 0[32] 8[32] v17815[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] frame_pointer[32] -1[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] frame_pointer[32] -2[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] frame_pointer[32] -3[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x08048580,0x08048583}, expr=(add[32] frame_pointer[32] -4[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x08048580}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x08048580}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x08048580}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x08048594[7]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x8048596:lea    esi, [esi + 0x00]
Symbolic@0x22ecb30 insn@0x08048596[0]: startInstruction(lea    esi, [esi + 0x00])
Symbolic@0x22ecb30 insn@0x08048596[0]: number_(32, 3) = {defs={0x08048596}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x08048596[0]: number_(32, 134514070) = {defs={0x08048596}, expr=0x08048596[32]}
Symbolic@0x22ecb30 insn@0x08048596[0]: add({defs={0x08048596}, expr=0x08048596[32]}, {defs={0x08048596}, expr=3[32]}) = {defs={0x08048596}, expr=0x08048599[32]}
Symbolic@0x22ecb30 insn@0x08048596[0]: writeRegister(eip, {defs={0x08048596}, expr=0x08048599[32]})
Symbolic@0x22ecb30 insn@0x08048596[0]: readRegister(esi) = esi_0[32]
Symbolic@0x22ecb30 insn@0x08048596[0]: number_(8, 0) = {defs={0x08048596}, expr=0[8]}
Symbolic@0x22ecb30 insn@0x08048596[0]: signExtend({defs={0x08048596}, expr=0[8]}, 32) = {defs={0x08048596}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048596[0]: add(esi_0[32], {defs={0x08048596}, expr=0[32]}) = {defs={0x08048596}, expr=esi_0[32]}
Symbolic@0x22ecb30 insn@0x08048596[0]: writeRegister(esi, {defs={0x08048596}, expr=esi_0[32]})
Symbolic@0x22ecb30 insn@0x08048596[0]: finishInstruction(lea    esi, [esi + 0x00])
registers:
  eip    = {defs={0x08048596}, expr=0x08048599[32]}
memory:

0x8048599:lea    edi, [edi + 0x00000000]
Symbolic@0x22ecb30 insn@0x08048599[1]: startInstruction(lea    edi, [edi + 0x00000000])
Symbolic@0x22ecb30 insn@0x08048599[1]: number_(32, 7) = {defs={0x08048599}, expr=7[32]}
Symbolic@0x22ecb30 insn@0x08048599[1]: number_(32, 134514073) = {defs={0x08048599}, expr=0x08048599[32]}
Symbolic@0x22ecb30 insn@0x08048599[1]: add({defs={0x08048599}, expr=0x08048599[32]}, {defs={0x08048599}, expr=7[32]}) = {defs={0x08048599}, expr=0x080485a0[32]}
Symbolic@0x22ecb30 insn@0x08048599[1]: writeRegister(eip, {defs={0x08048599}, expr=0x080485a0[32]})
Symbolic@0x22ecb30 insn@0x08048599[1]: readRegister(edi) = edi_0[32]
Symbolic@0x22ecb30 insn@0x08048599[1]: number_(32, 0) = {defs={0x08048599}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x08048599[1]: add(edi_0[32], {defs={0x08048599}, expr=0[32]}) = {defs={0x08048599}, expr=edi_0[32]}
Symbolic@0x22ecb30 insn@0x08048599[1]: writeRegister(edi, {defs={0x08048599}, expr=edi_0[32]})
Symbolic@0x22ecb30 insn@0x08048599[1]: finishInstruction(lea    edi, [edi + 0x00000000])
registers:
  eip    = {defs={0x08048599}, expr=0x080485a0[32]}
memory:

0x80485a0:sub    ebx, 0x04
Symbolic@0x22ecb30 insn@0x080485a0[2]: startInstruction(sub    ebx, 0x04)
Symbolic@0x22ecb30 insn@0x080485a0[2]: number_(32, 3) = {defs={0x080485a0}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080485a0[2]: number_(32, 134514080) = {defs={0x080485a0}, expr=0x080485a0[32]}
Symbolic@0x22ecb30 insn@0x080485a0[2]: add({defs={0x080485a0}, expr=0x080485a0[32]}, {defs={0x080485a0}, expr=3[32]}) = {defs={0x080485a0}, expr=0x080485a3[32]}
Symbolic@0x22ecb30 insn@0x080485a0[2]: writeRegister(eip, {defs={0x080485a0}, expr=0x080485a3[32]})
Symbolic@0x22ecb30 insn@0x080485a0[2]: boolean_(0) = {defs={0x080485a0}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080485a0[2]: number_(32, 4) = {defs={0x080485a0}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485a0[2]: invert({defs={0x080485a0}, expr=4[32]}) = {defs={0x080485a0}, expr=-5[32]}
Symbolic@0x22ecb30 insn@0x080485a0[2]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x080485a0[2]: invert({defs={0x080485a0}, expr=0[1]}) = {defs={0x080485a0}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485a0[2]: addWithCarries(ebx_0[32], {defs={0x080485a0}, expr=-5[32]}, {defs={0x080485a0}, expr=1[1]}) = {defs={0x080485a0}, expr=(add[32] ebx_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080485a0[2]: also returns: {defs={0x080485a0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(add[32] ebx_0[32] -4[32])}, 0, 8) = {defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}, 1, 2) = {defs={0x080485a0}, expr=(extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}, 0, 1) = {defs={0x080485a0}, expr=(extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: xor_({defs={0x080485a0}, expr=(extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32]))}, {defs={0x080485a0}, expr=(extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32]))}) = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}, 3, 4) = {defs={0x080485a0}, expr=(extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}, 2, 3) = {defs={0x080485a0}, expr=(extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: xor_({defs={0x080485a0}, expr=(extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32]))}, {defs={0x080485a0}, expr=(extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32]))}) = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}, 5, 6) = {defs={0x080485a0}, expr=(extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}, 4, 5) = {defs={0x080485a0}, expr=(extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: xor_({defs={0x080485a0}, expr=(extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32]))}, {defs={0x080485a0}, expr=(extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32]))}) = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}, 7, 8) = {defs={0x080485a0}, expr=(extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[8] 0[32] 8[32] (add[32] ebx_0[32] -4[32]))}, 6, 7) = {defs={0x080485a0}, expr=(extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: xor_({defs={0x080485a0}, expr=(extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32]))}, {defs={0x080485a0}, expr=(extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32]))}) = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: xor_({defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])))}, {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])))}) = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: xor_({defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])))}, {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32])))}) = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: xor_({defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])))}, {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32])))}) = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: invert({defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32])))}) = {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32]))))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: writeRegister(pf, {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32]))))})
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(add[32] ebx_0[32] -4[32])}, 31, 32) = {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: writeRegister(sf, {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] ebx_0[32] -4[32]))})
Symbolic@0x22ecb30 insn@0x080485a0[2]: equalToZero({defs={0x080485a0}, expr=(add[32] ebx_0[32] -4[32])}) = {defs={0x080485a0}, expr=(zerop[1] (add[32] ebx_0[32] -4[32]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: writeRegister(zf, {defs={0x080485a0}, expr=(zerop[1] (add[32] ebx_0[32] -4[32]))})
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}, 31, 32) = {defs={0x080485a0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}, 30, 31) = {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: extract({defs={0x080485a0}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}, 3, 4) = {defs={0x080485a0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: invert({defs={0x080485a0}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}) = {defs={0x080485a0}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: writeRegister(af, {defs={0x080485a0}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x080485a0[2]: invert({defs={0x080485a0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}) = {defs={0x080485a0}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: writeRegister(cf, {defs={0x080485a0}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x080485a0[2]: xor_({defs={0x080485a0}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}, {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33]))}) = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
Symbolic@0x22ecb30 insn@0x080485a0[2]: writeRegister(of, {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))})
Symbolic@0x22ecb30 insn@0x080485a0[2]: writeRegister(ebx, {defs={0x080485a0}, expr=(add[32] ebx_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080485a0[2]: finishInstruction(sub    ebx, 0x04)
registers:
  ebx       = {defs={0x080485a0}, expr=(add[32] ebx_0[32] -4[32])}
  eip       = {defs={0x080485a0}, expr=0x080485a3[32]}
  pf        = {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32]))))}
  sf        = {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] ebx_0[32] -4[32]))}
  zf        = {defs={0x080485a0}, expr=(zerop[1] (add[32] ebx_0[32] -4[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485a0}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485a0}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
memory:

0x80485a3:call   eax
Symbolic@0x22ecb30 insn@0x080485a3[3]: startInstruction(call   eax)
Symbolic@0x22ecb30 insn@0x080485a3[3]: number_(32, 2) = {defs={0x080485a3}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080485a3[3]: number_(32, 134514083) = {defs={0x080485a3}, expr=0x080485a3[32]}
Symbolic@0x22ecb30 insn@0x080485a3[3]: add({defs={0x080485a3}, expr=0x080485a3[32]}, {defs={0x080485a3}, expr=2[32]}) = {defs={0x080485a3}, expr=0x080485a5[32]}
Symbolic@0x22ecb30 insn@0x080485a3[3]: writeRegister(eip, {defs={0x080485a3}, expr=0x080485a5[32]})
Symbolic@0x22ecb30 insn@0x080485a3[3]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080485a3[3]: number_(32, 18446744073709551612) = {defs={0x080485a3}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080485a3[3]: add(esp_0[32], {defs={0x080485a3}, expr=-4[32]}) = {defs={0x080485a3}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080485a3[3]: boolean_(1) = {defs={0x080485a3}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485a3[3]: readRegister(eip) = {defs={0x080485a3}, expr=0x080485a5[32]}
Symbolic@0x22ecb30 insn@0x080485a3[3]: writeMemory(ss, {defs={0x080485a3}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080485a3}, expr=0x080485a5[32]}, {defs={0x080485a3}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080485a3[3]: readRegister(eax) = eax_0[32]
Symbolic@0x22ecb30 insn@0x080485a3[3]: filterCallTarget(eax_0[32]) = eax_0[32]
Symbolic@0x22ecb30 insn@0x080485a3[3]: writeRegister(eip, eax_0[32])
Symbolic@0x22ecb30 insn@0x080485a3[3]: writeRegister(esp, {defs={0x080485a3}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080485a3[3]: finishInstruction(call   eax)
registers:
  ebx       = {defs={0x080485a0}, expr=(add[32] ebx_0[32] -4[32])}
  esp       = {defs={0x080485a3}, expr=(add[32] esp_0[32] -4[32])}
  eip       = eax_0[32]
  pf        = {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32]))))}
  sf        = {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] ebx_0[32] -4[32]))}
  zf        = {defs={0x080485a0}, expr=(zerop[1] (add[32] ebx_0[32] -4[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485a0}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485a0}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
memory:
  addr={defs={0x080485a3}, expr=(add[32] esp_0[32] -1[32])} value={defs={0x080485a3}, expr=8[8]}
  addr={defs={0x080485a3}, expr=(add[32] esp_0[32] -2[32])} value={defs={0x080485a3}, expr=4[8]}
  addr={defs={0x080485a3}, expr=(add[32] esp_0[32] -3[32])} value={defs={0x080485a3}, expr=-123[8]}
  addr={defs={0x080485a3}, expr=(add[32] esp_0[32] -4[32])} value={defs={0x080485a3}, expr=-91[8]}
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  ebx       = {defs={0x080485a0}, expr=(add[32] ebx_0[32] -4[32])}
  esp       = {defs={0x080485a3}, expr=frame_pointer[32]}
  eip       = eax_0[32]
  pf        = {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] ebx_0[32] -4[32])) (extract[1] 1[32] 2[32] (add[32] ebx_0[32] -4[32])) (extract[1] 2[32] 3[32] (add[32] ebx_0[32] -4[32])) (extract[1] 3[32] 4[32] (add[32] ebx_0[32] -4[32])) (extract[1] 4[32] 5[32] (add[32] ebx_0[32] -4[32])) (extract[1] 5[32] 6[32] (add[32] ebx_0[32] -4[32])) (extract[1] 6[32] 7[32] (add[32] ebx_0[32] -4[32])) (extract[1] 7[32] 8[32] (add[32] ebx_0[32] -4[32]))))}
  sf        = {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] ebx_0[32] -4[32]))}
  zf        = {defs={0x080485a0}, expr=(zerop[1] (add[32] ebx_0[32] -4[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485a0}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485a0}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] ebx_0[32]) (add[33] (uextend[33] 33[32] ebx_0[32]) 4294967292[33]) 4294967291[33])))}
memory:
  addr={defs={0x080485a3}, expr=(add[32] frame_pointer[32] 3[32])} value={defs={0x080485a3}, expr=8[8]}
  addr={defs={0x080485a3}, expr=(add[32] frame_pointer[32] 2[32])} value={defs={0x080485a3}, expr=4[8]}
  addr={defs={0x080485a3}, expr=(add[32] frame_pointer[32] 1[32])} value={defs={0x080485a3}, expr=-123[8]}
  addr={defs={0x080485a3}, expr=frame_pointer[32]} value={defs={0x080485a3}, expr=-91[8]}
Symbolic@0x22ecb30 insn@0x080485a3[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80485a5:mov    eax, DWORD PTR ds:[ebx]
Symbolic@0x22ecb30 insn@0x080485a5[0]: startInstruction(mov    eax, DWORD PTR ds:[ebx])
Symbolic@0x22ecb30 insn@0x080485a5[0]: number_(32, 2) = {defs={0x080485a5}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080485a5[0]: number_(32, 134514085) = {defs={0x080485a5}, expr=0x080485a5[32]}
Symbolic@0x22ecb30 insn@0x080485a5[0]: add({defs={0x080485a5}, expr=0x080485a5[32]}, {defs={0x080485a5}, expr=2[32]}) = {defs={0x080485a5}, expr=0x080485a7[32]}
Symbolic@0x22ecb30 insn@0x080485a5[0]: writeRegister(eip, {defs={0x080485a5}, expr=0x080485a7[32]})
Symbolic@0x22ecb30 insn@0x080485a5[0]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x080485a5[0]: boolean_(1) = {defs={0x080485a5}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485a5[0]: readMemory(ds, ebx_0[32], {defs={0x080485a5}, expr=1[1]}, 32) = v17962[32]
Symbolic@0x22ecb30 insn@0x080485a5[0]: writeRegister(eax, v17962[32])
Symbolic@0x22ecb30 insn@0x080485a5[0]: finishInstruction(mov    eax, DWORD PTR ds:[ebx])
registers:
  eax    = v17962[32]
  eip    = {defs={0x080485a5}, expr=0x080485a7[32]}
memory:
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17962[32])
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17962[32])
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17962[32])
  addr={defs={0x080485a5}, expr=ebx_0[32]} value=(extract[8] 0[32] 8[32] v17962[32])

0x80485a7:cmp    eax, 0xff<-0x01>
Symbolic@0x22ecb30 insn@0x080485a7[1]: startInstruction(cmp    eax, 0xff<-0x01>)
Symbolic@0x22ecb30 insn@0x080485a7[1]: number_(32, 3) = {defs={0x080485a7}, expr=3[32]}
Symbolic@0x22ecb30 insn@0x080485a7[1]: number_(32, 134514087) = {defs={0x080485a7}, expr=0x080485a7[32]}
Symbolic@0x22ecb30 insn@0x080485a7[1]: add({defs={0x080485a7}, expr=0x080485a7[32]}, {defs={0x080485a7}, expr=3[32]}) = {defs={0x080485a7}, expr=0x080485aa[32]}
Symbolic@0x22ecb30 insn@0x080485a7[1]: writeRegister(eip, {defs={0x080485a7}, expr=0x080485aa[32]})
Symbolic@0x22ecb30 insn@0x080485a7[1]: boolean_(0) = {defs={0x080485a7}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080485a7[1]: number_(32, 18446744073709551615) = {defs={0x080485a7}, expr=-1[32]}
Symbolic@0x22ecb30 insn@0x080485a7[1]: invert({defs={0x080485a7}, expr=-1[32]}) = {defs={0x080485a7}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080485a7[1]: readRegister(eax) = v17962[32]
Symbolic@0x22ecb30 insn@0x080485a7[1]: invert({defs={0x080485a7}, expr=0[1]}) = {defs={0x080485a7}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485a7[1]: addWithCarries(v17962[32], {defs={0x080485a7}, expr=0[32]}, {defs={0x080485a7}, expr=1[1]}) = {defs={0x080485a7}, expr=(add[32] v17962[32] 1[32])}
Symbolic@0x22ecb30 insn@0x080485a7[1]: also returns: {defs={0x080485a7}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(add[32] v17962[32] 1[32])}, 0, 8) = {defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}, 1, 2) = {defs={0x080485a7}, expr=(extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}, 0, 1) = {defs={0x080485a7}, expr=(extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: xor_({defs={0x080485a7}, expr=(extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32]))}, {defs={0x080485a7}, expr=(extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32]))}) = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}, 3, 4) = {defs={0x080485a7}, expr=(extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}, 2, 3) = {defs={0x080485a7}, expr=(extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: xor_({defs={0x080485a7}, expr=(extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32]))}, {defs={0x080485a7}, expr=(extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32]))}) = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}, 5, 6) = {defs={0x080485a7}, expr=(extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}, 4, 5) = {defs={0x080485a7}, expr=(extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: xor_({defs={0x080485a7}, expr=(extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32]))}, {defs={0x080485a7}, expr=(extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32]))}) = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}, 7, 8) = {defs={0x080485a7}, expr=(extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[8] 0[32] 8[32] (add[32] v17962[32] 1[32]))}, 6, 7) = {defs={0x080485a7}, expr=(extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: xor_({defs={0x080485a7}, expr=(extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32]))}, {defs={0x080485a7}, expr=(extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32]))}) = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: xor_({defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])))}, {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])))}) = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: xor_({defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])))}, {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32])))}) = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: xor_({defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])))}, {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32])))}) = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: invert({defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32])))}) = {defs={0x080485a7}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32]))))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: writeRegister(pf, {defs={0x080485a7}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32]))))})
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(add[32] v17962[32] 1[32])}, 31, 32) = {defs={0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: writeRegister(sf, {defs={0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v17962[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x080485a7[1]: equalToZero({defs={0x080485a7}, expr=(add[32] v17962[32] 1[32])}) = {defs={0x080485a7}, expr=(zerop[1] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: writeRegister(zf, {defs={0x080485a7}, expr=(zerop[1] (add[32] v17962[32] 1[32]))})
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}, 31, 32) = {defs={0x080485a7}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}, 30, 31) = {defs={0x080485a7}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: extract({defs={0x080485a7}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}, 3, 4) = {defs={0x080485a7}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: invert({defs={0x080485a7}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}) = {defs={0x080485a7}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: writeRegister(af, {defs={0x080485a7}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x080485a7[1]: invert({defs={0x080485a7}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}) = {defs={0x080485a7}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: writeRegister(cf, {defs={0x080485a7}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x080485a7[1]: xor_({defs={0x080485a7}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}, {defs={0x080485a7}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33]))}) = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
Symbolic@0x22ecb30 insn@0x080485a7[1]: writeRegister(of, {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))})
Symbolic@0x22ecb30 insn@0x080485a7[1]: finishInstruction(cmp    eax, 0xff<-0x01>)
registers:
  eax       = v17962[32]
  eip       = {defs={0x080485a7}, expr=0x080485aa[32]}
  pf        = {defs={0x080485a7}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32]))))}
  sf        = {defs={0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v17962[32] 1[32]))}
  zf        = {defs={0x080485a7}, expr=(zerop[1] (add[32] v17962[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485a7}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485a7}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
memory:
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17962[32])
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17962[32])
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17962[32])
  addr={defs={0x080485a5}, expr=ebx_0[32]} value=(extract[8] 0[32] 8[32] v17962[32])

0x80485aa:jne    0x080485a0<<Insn>>
Symbolic@0x22ecb30 insn@0x080485aa[2]: startInstruction(jne    0x080485a0<<Insn>>)
Symbolic@0x22ecb30 insn@0x080485aa[2]: number_(32, 2) = {defs={0x080485aa}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080485aa[2]: number_(32, 134514090) = {defs={0x080485aa}, expr=0x080485aa[32]}
Symbolic@0x22ecb30 insn@0x080485aa[2]: add({defs={0x080485aa}, expr=0x080485aa[32]}, {defs={0x080485aa}, expr=2[32]}) = {defs={0x080485aa}, expr=0x080485ac[32]}
Symbolic@0x22ecb30 insn@0x080485aa[2]: writeRegister(eip, {defs={0x080485aa}, expr=0x080485ac[32]})
Symbolic@0x22ecb30 insn@0x080485aa[2]: readRegister(zf) = {defs={0x080485a7}, expr=(zerop[1] (add[32] v17962[32] 1[32]))}
Symbolic@0x22ecb30 insn@0x080485aa[2]: invert({defs={0x080485a7}, expr=(zerop[1] (add[32] v17962[32] 1[32]))}) = {defs={0x080485a7,0x080485aa}, expr=(invert[1] (zerop[1] (add[32] v17962[32] 1[32])))}
Symbolic@0x22ecb30 insn@0x080485aa[2]: readRegister(eip) = {defs={0x080485aa}, expr=0x080485ac[32]}
Symbolic@0x22ecb30 insn@0x080485aa[2]: number_(32, 134514080) = {defs={0x080485aa}, expr=0x080485a0[32]}
Symbolic@0x22ecb30 insn@0x080485aa[2]: ite({defs={0x080485a7,0x080485aa}, expr=(invert[1] (zerop[1] (add[32] v17962[32] 1[32])))}, {defs={0x080485aa}, expr=0x080485a0[32]}, {defs={0x080485aa}, expr=0x080485ac[32]}) = {defs={0x080485a7,0x080485aa}, expr=(ite[32] (invert[1] (zerop[1] (add[32] v17962[32] 1[32]))) 0x080485a0[32] 0x080485ac[32])}
Symbolic@0x22ecb30 insn@0x080485aa[2]: writeRegister(eip, {defs={0x080485a7,0x080485aa}, expr=(ite[32] (invert[1] (zerop[1] (add[32] v17962[32] 1[32]))) 0x080485a0[32] 0x080485ac[32])})
Symbolic@0x22ecb30 insn@0x080485aa[2]: finishInstruction(jne    0x080485a0<<Insn>>)
registers:
  eax       = v17962[32]
  eip       = {defs={0x080485a7,0x080485aa}, expr=(ite[32] (invert[1] (zerop[1] (add[32] v17962[32] 1[32]))) 0x080485a0[32] 0x080485ac[32])}
  pf        = {defs={0x080485a7}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32]))))}
  sf        = {defs={0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v17962[32] 1[32]))}
  zf        = {defs={0x080485a7}, expr=(zerop[1] (add[32] v17962[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485a7}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485a7}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
memory:
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17962[32])
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17962[32])
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17962[32])
  addr={defs={0x080485a5}, expr=ebx_0[32]} value=(extract[8] 0[32] 8[32] v17962[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax       = v17962[32]
  esp       = (add[32] frame_pointer[32] 4[32])
  eip       = {defs={0x080485a7,0x080485aa}, expr=(ite[32] (invert[1] (zerop[1] (add[32] v17962[32] 1[32]))) 0x080485a0[32] 0x080485ac[32])}
  pf        = {defs={0x080485a7}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v17962[32] 1[32])) (extract[1] 1[32] 2[32] (add[32] v17962[32] 1[32])) (extract[1] 2[32] 3[32] (add[32] v17962[32] 1[32])) (extract[1] 3[32] 4[32] (add[32] v17962[32] 1[32])) (extract[1] 4[32] 5[32] (add[32] v17962[32] 1[32])) (extract[1] 5[32] 6[32] (add[32] v17962[32] 1[32])) (extract[1] 6[32] 7[32] (add[32] v17962[32] 1[32])) (extract[1] 7[32] 8[32] (add[32] v17962[32] 1[32]))))}
  sf        = {defs={0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v17962[32] 1[32]))}
  zf        = {defs={0x080485a7}, expr=(zerop[1] (add[32] v17962[32] 1[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485a7}, expr=(invert[1] (extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485a7}, expr=(invert[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485a7}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v17962[32]) (add[33] (uextend[33] 33[32] v17962[32]) 1[33]) 0[33])))}
memory:
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v17962[32])
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v17962[32])
  addr={defs={0x080485a5}, expr=(add[32] ebx_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v17962[32])
  addr={defs={0x080485a5}, expr=ebx_0[32]} value=(extract[8] 0[32] 8[32] v17962[32])
Symbolic@0x22ecb30 insn@0x080485aa[2]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80485ac:pop    eax
Symbolic@0x22ecb30 insn@0x080485ac[0]: startInstruction(pop    eax)
Symbolic@0x22ecb30 insn@0x080485ac[0]: number_(32, 1) = {defs={0x080485ac}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485ac[0]: number_(32, 134514092) = {defs={0x080485ac}, expr=0x080485ac[32]}
Symbolic@0x22ecb30 insn@0x080485ac[0]: add({defs={0x080485ac}, expr=0x080485ac[32]}, {defs={0x080485ac}, expr=1[32]}) = {defs={0x080485ac}, expr=0x080485ad[32]}
Symbolic@0x22ecb30 insn@0x080485ac[0]: writeRegister(eip, {defs={0x080485ac}, expr=0x080485ad[32]})
Symbolic@0x22ecb30 insn@0x080485ac[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080485ac[0]: number_(32, 4) = {defs={0x080485ac}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485ac[0]: add(esp_0[32], {defs={0x080485ac}, expr=4[32]}) = {defs={0x080485ac}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080485ac[0]: writeRegister(esp, {defs={0x080485ac}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x080485ac[0]: boolean_(1) = {defs={0x080485ac}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485ac[0]: readMemory(ss, esp_0[32], {defs={0x080485ac}, expr=1[1]}, 32) = v18038[32]
Symbolic@0x22ecb30 insn@0x080485ac[0]: writeRegister(eax, v18038[32])
Symbolic@0x22ecb30 insn@0x080485ac[0]: finishInstruction(pop    eax)
registers:
  eax    = v18038[32]
  esp    = {defs={0x080485ac}, expr=(add[32] esp_0[32] 4[32])}
  eip    = {defs={0x080485ac}, expr=0x080485ad[32]}
memory:
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18038[32])
  addr={defs={0x080485ac}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18038[32])

0x80485ad:pop    ebx
Symbolic@0x22ecb30 insn@0x080485ad[1]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x080485ad[1]: number_(32, 1) = {defs={0x080485ad}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485ad[1]: number_(32, 134514093) = {defs={0x080485ad}, expr=0x080485ad[32]}
Symbolic@0x22ecb30 insn@0x080485ad[1]: add({defs={0x080485ad}, expr=0x080485ad[32]}, {defs={0x080485ad}, expr=1[32]}) = {defs={0x080485ad}, expr=0x080485ae[32]}
Symbolic@0x22ecb30 insn@0x080485ad[1]: writeRegister(eip, {defs={0x080485ad}, expr=0x080485ae[32]})
Symbolic@0x22ecb30 insn@0x080485ad[1]: readRegister(esp) = {defs={0x080485ac}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080485ad[1]: number_(32, 4) = {defs={0x080485ad}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485ad[1]: add({defs={0x080485ac}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x080485ad}, expr=4[32]}) = {defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x080485ad[1]: writeRegister(esp, {defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x080485ad[1]: boolean_(1) = {defs={0x080485ad}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485ad[1]: readMemory(ss, {defs={0x080485ac}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x080485ad}, expr=1[1]}, 32) = v18043[32]
Symbolic@0x22ecb30 insn@0x080485ad[1]: writeRegister(ebx, v18043[32])
Symbolic@0x22ecb30 insn@0x080485ad[1]: finishInstruction(pop    ebx)
registers:
  eax    = v18038[32]
  ebx    = v18043[32]
  esp    = {defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 8[32])}
  eip    = {defs={0x080485ad}, expr=0x080485ae[32]}
memory:
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v18043[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18038[32])
  addr={defs={0x080485ac}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18038[32])

0x80485ae:pop    ebp
Symbolic@0x22ecb30 insn@0x080485ae[2]: startInstruction(pop    ebp)
Symbolic@0x22ecb30 insn@0x080485ae[2]: number_(32, 1) = {defs={0x080485ae}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485ae[2]: number_(32, 134514094) = {defs={0x080485ae}, expr=0x080485ae[32]}
Symbolic@0x22ecb30 insn@0x080485ae[2]: add({defs={0x080485ae}, expr=0x080485ae[32]}, {defs={0x080485ae}, expr=1[32]}) = {defs={0x080485ae}, expr=0x080485af[32]}
Symbolic@0x22ecb30 insn@0x080485ae[2]: writeRegister(eip, {defs={0x080485ae}, expr=0x080485af[32]})
Symbolic@0x22ecb30 insn@0x080485ae[2]: readRegister(esp) = {defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x080485ae[2]: number_(32, 4) = {defs={0x080485ae}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485ae[2]: add({defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 8[32])}, {defs={0x080485ae}, expr=4[32]}) = {defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 12[32])}
Symbolic@0x22ecb30 insn@0x080485ae[2]: writeRegister(esp, {defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 12[32])})
Symbolic@0x22ecb30 insn@0x080485ae[2]: boolean_(1) = {defs={0x080485ae}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485ae[2]: readMemory(ss, {defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 8[32])}, {defs={0x080485ae}, expr=1[1]}, 32) = v18048[32]
Symbolic@0x22ecb30 insn@0x080485ae[2]: writeRegister(ebp, v18048[32])
Symbolic@0x22ecb30 insn@0x080485ae[2]: finishInstruction(pop    ebp)
registers:
  eax    = v18038[32]
  ebx    = v18043[32]
  esp    = {defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 12[32])}
  ebp    = v18048[32]
  eip    = {defs={0x080485ae}, expr=0x080485af[32]}
memory:
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 11[32])} value=(extract[8] 24[32] 32[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 10[32])} value=(extract[8] 16[32] 24[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 9[32])} value=(extract[8] 8[32] 16[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 8[32])} value=(extract[8] 0[32] 8[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v18043[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18038[32])
  addr={defs={0x080485ac}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18038[32])

0x80485af:ret    
Symbolic@0x22ecb30 insn@0x080485af[3]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x080485af[3]: number_(32, 1) = {defs={0x080485af}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485af[3]: number_(32, 134514095) = {defs={0x080485af}, expr=0x080485af[32]}
Symbolic@0x22ecb30 insn@0x080485af[3]: add({defs={0x080485af}, expr=0x080485af[32]}, {defs={0x080485af}, expr=1[32]}) = {defs={0x080485af}, expr=0x080485b0[32]}
Symbolic@0x22ecb30 insn@0x080485af[3]: writeRegister(eip, {defs={0x080485af}, expr=0x080485b0[32]})
Symbolic@0x22ecb30 insn@0x080485af[3]: number_(32, 0) = {defs={0x080485af}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080485af[3]: readRegister(esp) = {defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 12[32])}
Symbolic@0x22ecb30 insn@0x080485af[3]: number_(32, 4) = {defs={0x080485af}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485af[3]: add({defs={0x080485af}, expr=4[32]}, {defs={0x080485af}, expr=0[32]}) = {defs={0x080485af}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485af[3]: add({defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 12[32])}, {defs={0x080485af}, expr=4[32]}) = {defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] esp_0[32] 16[32])}
Symbolic@0x22ecb30 insn@0x080485af[3]: boolean_(1) = {defs={0x080485af}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485af[3]: readMemory(ss, {defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 12[32])}, {defs={0x080485af}, expr=1[1]}, 32) = v18053[32]
Symbolic@0x22ecb30 insn@0x080485af[3]: filterReturnTarget(v18053[32]) = v18053[32]
Symbolic@0x22ecb30 insn@0x080485af[3]: writeRegister(eip, v18053[32])
Symbolic@0x22ecb30 insn@0x080485af[3]: writeRegister(esp, {defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] esp_0[32] 16[32])})
Symbolic@0x22ecb30 insn@0x080485af[3]: finishInstruction(ret)
registers:
  eax    = v18038[32]
  ebx    = v18043[32]
  esp    = {defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] esp_0[32] 16[32])}
  ebp    = v18048[32]
  eip    = v18053[32]
memory:
  addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] esp_0[32] 15[32])} value=(extract[8] 24[32] 32[32] v18053[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] esp_0[32] 14[32])} value=(extract[8] 16[32] 24[32] v18053[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] esp_0[32] 13[32])} value=(extract[8] 8[32] 16[32] v18053[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] esp_0[32] 12[32])} value=(extract[8] 0[32] 8[32] v18053[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 11[32])} value=(extract[8] 24[32] 32[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 10[32])} value=(extract[8] 16[32] 24[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 9[32])} value=(extract[8] 8[32] 16[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] esp_0[32] 8[32])} value=(extract[8] 0[32] 8[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v18043[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18038[32])
  addr={defs={0x080485ac}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18038[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax    = v18038[32]
  ebx    = v18043[32]
  esp    = {defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] frame_pointer[32] 20[32])}
  ebp    = v18048[32]
  eip    = v18053[32]
memory:
  addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] frame_pointer[32] 19[32])} value=(extract[8] 24[32] 32[32] v18053[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] frame_pointer[32] 18[32])} value=(extract[8] 16[32] 24[32] v18053[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] frame_pointer[32] 17[32])} value=(extract[8] 8[32] 16[32] v18053[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] frame_pointer[32] 16[32])} value=(extract[8] 0[32] 8[32] v18053[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] frame_pointer[32] 15[32])} value=(extract[8] 24[32] 32[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] frame_pointer[32] 14[32])} value=(extract[8] 16[32] 24[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] frame_pointer[32] 13[32])} value=(extract[8] 8[32] 16[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] frame_pointer[32] 12[32])} value=(extract[8] 0[32] 8[32] v18048[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] frame_pointer[32] 11[32])} value=(extract[8] 24[32] 32[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] frame_pointer[32] 10[32])} value=(extract[8] 16[32] 24[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] frame_pointer[32] 9[32])} value=(extract[8] 8[32] 16[32] v18043[32])
  addr={defs={0x080485ac,0x080485ad}, expr=(add[32] frame_pointer[32] 8[32])} value=(extract[8] 0[32] 8[32] v18043[32])
  addr={defs={0x080485ac}, expr=(add[32] frame_pointer[32] 7[32])} value=(extract[8] 24[32] 32[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] frame_pointer[32] 6[32])} value=(extract[8] 16[32] 24[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] frame_pointer[32] 5[32])} value=(extract[8] 8[32] 16[32] v18038[32])
  addr={defs={0x080485ac}, expr=(add[32] frame_pointer[32] 4[32])} value=(extract[8] 0[32] 8[32] v18038[32])
Symbolic@0x22ecb30 insn@0x080485af[3]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80485b0:push   ebp
Symbolic@0x22ecb30 insn@0x080485b0[0]: startInstruction(push   ebp)
Symbolic@0x22ecb30 insn@0x080485b0[0]: number_(32, 1) = {defs={0x080485b0}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485b0[0]: number_(32, 134514096) = {defs={0x080485b0}, expr=0x080485b0[32]}
Symbolic@0x22ecb30 insn@0x080485b0[0]: add({defs={0x080485b0}, expr=0x080485b0[32]}, {defs={0x080485b0}, expr=1[32]}) = {defs={0x080485b0}, expr=0x080485b1[32]}
Symbolic@0x22ecb30 insn@0x080485b0[0]: writeRegister(eip, {defs={0x080485b0}, expr=0x080485b1[32]})
Symbolic@0x22ecb30 insn@0x080485b0[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080485b0[0]: number_(32, 18446744073709551612) = {defs={0x080485b0}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080485b0[0]: add(esp_0[32], {defs={0x080485b0}, expr=-4[32]}) = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080485b0[0]: boolean_(1) = {defs={0x080485b0}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485b0[0]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080485b0[0]: writeMemory(ss, {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}, ebp_0[32], {defs={0x080485b0}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080485b0[0]: writeRegister(esp, {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080485b0[0]: finishInstruction(push   ebp)
registers:
  esp    = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080485b0}, expr=0x080485b1[32]}
memory:
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80485b1:mov    ebp, esp
Symbolic@0x22ecb30 insn@0x080485b1[1]: startInstruction(mov    ebp, esp)
Symbolic@0x22ecb30 insn@0x080485b1[1]: number_(32, 2) = {defs={0x080485b1}, expr=2[32]}
Symbolic@0x22ecb30 insn@0x080485b1[1]: number_(32, 134514097) = {defs={0x080485b1}, expr=0x080485b1[32]}
Symbolic@0x22ecb30 insn@0x080485b1[1]: add({defs={0x080485b1}, expr=0x080485b1[32]}, {defs={0x080485b1}, expr=2[32]}) = {defs={0x080485b1}, expr=0x080485b3[32]}
Symbolic@0x22ecb30 insn@0x080485b1[1]: writeRegister(eip, {defs={0x080485b1}, expr=0x080485b3[32]})
Symbolic@0x22ecb30 insn@0x080485b1[1]: readRegister(esp) = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080485b1[1]: writeRegister(ebp, {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])})
Symbolic@0x22ecb30 insn@0x080485b1[1]: finishInstruction(mov    ebp, esp)
registers:
  esp    = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
  ebp    = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080485b1}, expr=0x080485b3[32]}
memory:
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80485b3:push   ebx
Symbolic@0x22ecb30 insn@0x080485b3[2]: startInstruction(push   ebx)
Symbolic@0x22ecb30 insn@0x080485b3[2]: number_(32, 1) = {defs={0x080485b3}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485b3[2]: number_(32, 134514099) = {defs={0x080485b3}, expr=0x080485b3[32]}
Symbolic@0x22ecb30 insn@0x080485b3[2]: add({defs={0x080485b3}, expr=0x080485b3[32]}, {defs={0x080485b3}, expr=1[32]}) = {defs={0x080485b3}, expr=0x080485b4[32]}
Symbolic@0x22ecb30 insn@0x080485b3[2]: writeRegister(eip, {defs={0x080485b3}, expr=0x080485b4[32]})
Symbolic@0x22ecb30 insn@0x080485b3[2]: readRegister(esp) = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
Symbolic@0x22ecb30 insn@0x080485b3[2]: number_(32, 18446744073709551612) = {defs={0x080485b3}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080485b3[2]: add({defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}, {defs={0x080485b3}, expr=-4[32]}) = {defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x080485b3[2]: boolean_(1) = {defs={0x080485b3}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485b3[2]: readRegister(ebx) = ebx_0[32]
Symbolic@0x22ecb30 insn@0x080485b3[2]: writeMemory(ss, {defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])}, ebx_0[32], {defs={0x080485b3}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080485b3[2]: writeRegister(esp, {defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])})
Symbolic@0x22ecb30 insn@0x080485b3[2]: finishInstruction(push   ebx)
registers:
  esp    = {defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])}
  ebp    = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080485b3}, expr=0x080485b4[32]}
memory:
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80485b4:push   eax
Symbolic@0x22ecb30 insn@0x080485b4[3]: startInstruction(push   eax)
Symbolic@0x22ecb30 insn@0x080485b4[3]: number_(32, 1) = {defs={0x080485b4}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485b4[3]: number_(32, 134514100) = {defs={0x080485b4}, expr=0x080485b4[32]}
Symbolic@0x22ecb30 insn@0x080485b4[3]: add({defs={0x080485b4}, expr=0x080485b4[32]}, {defs={0x080485b4}, expr=1[32]}) = {defs={0x080485b4}, expr=0x080485b5[32]}
Symbolic@0x22ecb30 insn@0x080485b4[3]: writeRegister(eip, {defs={0x080485b4}, expr=0x080485b5[32]})
Symbolic@0x22ecb30 insn@0x080485b4[3]: readRegister(esp) = {defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])}
Symbolic@0x22ecb30 insn@0x080485b4[3]: number_(32, 18446744073709551612) = {defs={0x080485b4}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080485b4[3]: add({defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])}, {defs={0x080485b4}, expr=-4[32]}) = {defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x080485b4[3]: boolean_(1) = {defs={0x080485b4}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485b4[3]: readRegister(eax) = eax_0[32]
Symbolic@0x22ecb30 insn@0x080485b4[3]: writeMemory(ss, {defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -12[32])}, eax_0[32], {defs={0x080485b4}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080485b4[3]: writeRegister(esp, {defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -12[32])})
Symbolic@0x22ecb30 insn@0x080485b4[3]: finishInstruction(push   eax)
registers:
  esp    = {defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -12[32])}
  ebp    = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080485b4}, expr=0x080485b5[32]}
memory:
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])

0x80485b5:call   0x080485ba<<Insn>>
Symbolic@0x22ecb30 insn@0x080485b5[4]: startInstruction(call   0x080485ba<<Insn>>)
Symbolic@0x22ecb30 insn@0x080485b5[4]: number_(32, 5) = {defs={0x080485b5}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080485b5[4]: number_(32, 134514101) = {defs={0x080485b5}, expr=0x080485b5[32]}
Symbolic@0x22ecb30 insn@0x080485b5[4]: add({defs={0x080485b5}, expr=0x080485b5[32]}, {defs={0x080485b5}, expr=5[32]}) = {defs={0x080485b5}, expr=0x080485ba[32]}
Symbolic@0x22ecb30 insn@0x080485b5[4]: writeRegister(eip, {defs={0x080485b5}, expr=0x080485ba[32]})
Symbolic@0x22ecb30 insn@0x080485b5[4]: readRegister(esp) = {defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -12[32])}
Symbolic@0x22ecb30 insn@0x080485b5[4]: number_(32, 18446744073709551612) = {defs={0x080485b5}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080485b5[4]: add({defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -12[32])}, {defs={0x080485b5}, expr=-4[32]}) = {defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] esp_0[32] -16[32])}
Symbolic@0x22ecb30 insn@0x080485b5[4]: boolean_(1) = {defs={0x080485b5}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485b5[4]: readRegister(eip) = {defs={0x080485b5}, expr=0x080485ba[32]}
Symbolic@0x22ecb30 insn@0x080485b5[4]: writeMemory(ss, {defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] esp_0[32] -16[32])}, {defs={0x080485b5}, expr=0x080485ba[32]}, {defs={0x080485b5}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080485b5[4]: number_(32, 134514106) = {defs={0x080485b5}, expr=0x080485ba[32]}
Symbolic@0x22ecb30 insn@0x080485b5[4]: filterCallTarget({defs={0x080485b5}, expr=0x080485ba[32]}) = {defs={0x080485b5}, expr=0x080485ba[32]}
Symbolic@0x22ecb30 insn@0x080485b5[4]: writeRegister(eip, {defs={0x080485b5}, expr=0x080485ba[32]})
Symbolic@0x22ecb30 insn@0x080485b5[4]: writeRegister(esp, {defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] esp_0[32] -16[32])})
Symbolic@0x22ecb30 insn@0x080485b5[4]: finishInstruction(call   0x080485ba<<Insn>>)
registers:
  esp    = {defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] esp_0[32] -16[32])}
  ebp    = {defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])}
  eip    = {defs={0x080485b5}, expr=0x080485ba[32]}
memory:
  addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] esp_0[32] -13[32])} value={defs={0x080485b5}, expr=8[8]}
  addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] esp_0[32] -14[32])} value={defs={0x080485b5}, expr=4[8]}
  addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] esp_0[32] -15[32])} value={defs={0x080485b5}, expr=-123[8]}
  addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] esp_0[32] -16[32])} value={defs={0x080485b5}, expr=-70[8]}
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -9[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -10[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -11[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] esp_0[32] -12[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -5[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -6[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -7[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] esp_0[32] -8[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -1[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -3[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] esp_0[32] -4[32])} value=(extract[8] 0[32] 8[32] ebp_0[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  esp    = {defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] frame_pointer[32] -12[32])}
  ebp    = {defs={0x080485b0}, expr=frame_pointer[32]}
  eip    = {defs={0x080485b5}, expr=0x080485ba[32]}
memory:
  addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] frame_pointer[32] -9[32])} value={defs={0x080485b5}, expr=8[8]}
  addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] frame_pointer[32] -10[32])} value={defs={0x080485b5}, expr=4[8]}
  addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] frame_pointer[32] -11[32])} value={defs={0x080485b5}, expr=-123[8]}
  addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] frame_pointer[32] -12[32])} value={defs={0x080485b5}, expr=-70[8]}
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] frame_pointer[32] -5[32])} value=(extract[8] 24[32] 32[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] frame_pointer[32] -6[32])} value=(extract[8] 16[32] 24[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] frame_pointer[32] -7[32])} value=(extract[8] 8[32] 16[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] frame_pointer[32] -8[32])} value=(extract[8] 0[32] 8[32] eax_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] frame_pointer[32] -1[32])} value=(extract[8] 24[32] 32[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] frame_pointer[32] -2[32])} value=(extract[8] 16[32] 24[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] frame_pointer[32] -3[32])} value=(extract[8] 8[32] 16[32] ebx_0[32])
  addr={defs={0x080485b0,0x080485b3}, expr=(add[32] frame_pointer[32] -4[32])} value=(extract[8] 0[32] 8[32] ebx_0[32])
  addr={defs={0x080485b0}, expr=(add[32] frame_pointer[32] 3[32])} value=(extract[8] 24[32] 32[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] frame_pointer[32] 2[32])} value=(extract[8] 16[32] 24[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=(add[32] frame_pointer[32] 1[32])} value=(extract[8] 8[32] 16[32] ebp_0[32])
  addr={defs={0x080485b0}, expr=frame_pointer[32]} value=(extract[8] 0[32] 8[32] ebp_0[32])
Symbolic@0x22ecb30 insn@0x080485b5[4]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80485ba:pop    ebx
Symbolic@0x22ecb30 insn@0x080485ba[0]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x080485ba[0]: number_(32, 1) = {defs={0x080485ba}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485ba[0]: number_(32, 134514106) = {defs={0x080485ba}, expr=0x080485ba[32]}
Symbolic@0x22ecb30 insn@0x080485ba[0]: add({defs={0x080485ba}, expr=0x080485ba[32]}, {defs={0x080485ba}, expr=1[32]}) = {defs={0x080485ba}, expr=0x080485bb[32]}
Symbolic@0x22ecb30 insn@0x080485ba[0]: writeRegister(eip, {defs={0x080485ba}, expr=0x080485bb[32]})
Symbolic@0x22ecb30 insn@0x080485ba[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080485ba[0]: number_(32, 4) = {defs={0x080485ba}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485ba[0]: add(esp_0[32], {defs={0x080485ba}, expr=4[32]}) = {defs={0x080485ba}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080485ba[0]: writeRegister(esp, {defs={0x080485ba}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x080485ba[0]: boolean_(1) = {defs={0x080485ba}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485ba[0]: readMemory(ss, esp_0[32], {defs={0x080485ba}, expr=1[1]}, 32) = v18200[32]
Symbolic@0x22ecb30 insn@0x080485ba[0]: writeRegister(ebx, v18200[32])
Symbolic@0x22ecb30 insn@0x080485ba[0]: finishInstruction(pop    ebx)
registers:
  ebx    = v18200[32]
  esp    = {defs={0x080485ba}, expr=(add[32] esp_0[32] 4[32])}
  eip    = {defs={0x080485ba}, expr=0x080485bb[32]}
memory:
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18200[32])
  addr={defs={0x080485ba}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18200[32])

0x80485bb:add    ebx, 0x0000110e
Symbolic@0x22ecb30 insn@0x080485bb[1]: startInstruction(add    ebx, 0x0000110e)
Symbolic@0x22ecb30 insn@0x080485bb[1]: number_(32, 6) = {defs={0x080485bb}, expr=6[32]}
Symbolic@0x22ecb30 insn@0x080485bb[1]: number_(32, 134514107) = {defs={0x080485bb}, expr=0x080485bb[32]}
Symbolic@0x22ecb30 insn@0x080485bb[1]: add({defs={0x080485bb}, expr=0x080485bb[32]}, {defs={0x080485bb}, expr=6[32]}) = {defs={0x080485bb}, expr=0x080485c1[32]}
Symbolic@0x22ecb30 insn@0x080485bb[1]: writeRegister(eip, {defs={0x080485bb}, expr=0x080485c1[32]})
Symbolic@0x22ecb30 insn@0x080485bb[1]: boolean_(0) = {defs={0x080485bb}, expr=0[1]}
Symbolic@0x22ecb30 insn@0x080485bb[1]: number_(32, 4366) = {defs={0x080485bb}, expr=4366[32]}
Symbolic@0x22ecb30 insn@0x080485bb[1]: readRegister(ebx) = v18200[32]
Symbolic@0x22ecb30 insn@0x080485bb[1]: addWithCarries(v18200[32], {defs={0x080485bb}, expr=4366[32]}, {defs={0x080485bb}, expr=0[1]}) = {defs={0x080485bb}, expr=(add[32] v18200[32] 4366[32])}
Symbolic@0x22ecb30 insn@0x080485bb[1]: also returns: {defs={0x080485bb}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(add[32] v18200[32] 4366[32])}, 0, 8) = {defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}, 1, 2) = {defs={0x080485bb}, expr=(extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}, 0, 1) = {defs={0x080485bb}, expr=(extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: xor_({defs={0x080485bb}, expr=(extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32]))}, {defs={0x080485bb}, expr=(extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32]))}) = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}, 3, 4) = {defs={0x080485bb}, expr=(extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}, 2, 3) = {defs={0x080485bb}, expr=(extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: xor_({defs={0x080485bb}, expr=(extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32]))}, {defs={0x080485bb}, expr=(extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32]))}) = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}, 5, 6) = {defs={0x080485bb}, expr=(extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}, 4, 5) = {defs={0x080485bb}, expr=(extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: xor_({defs={0x080485bb}, expr=(extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32]))}, {defs={0x080485bb}, expr=(extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32]))}) = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}, 7, 8) = {defs={0x080485bb}, expr=(extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[8] 0[32] 8[32] (add[32] v18200[32] 4366[32]))}, 6, 7) = {defs={0x080485bb}, expr=(extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: xor_({defs={0x080485bb}, expr=(extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32]))}, {defs={0x080485bb}, expr=(extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32]))}) = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32])))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: xor_({defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])))}, {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])))}) = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: xor_({defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])))}, {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32])))}) = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32])))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: xor_({defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])))}, {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32])))}) = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])) (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32])))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: invert({defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])) (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32])))}) = {defs={0x080485bb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])) (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32]))))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: writeRegister(pf, {defs={0x080485bb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])) (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32]))))})
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(add[32] v18200[32] 4366[32])}, 31, 32) = {defs={0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: writeRegister(sf, {defs={0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v18200[32] 4366[32]))})
Symbolic@0x22ecb30 insn@0x080485bb[1]: equalToZero({defs={0x080485bb}, expr=(add[32] v18200[32] 4366[32])}) = {defs={0x080485bb}, expr=(zerop[1] (add[32] v18200[32] 4366[32]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: writeRegister(zf, {defs={0x080485bb}, expr=(zerop[1] (add[32] v18200[32] 4366[32]))})
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}, 31, 32) = {defs={0x080485bb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}, 30, 31) = {defs={0x080485bb}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: extract({defs={0x080485bb}, expr=(extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}, 3, 4) = {defs={0x080485bb}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: writeRegister(af, {defs={0x080485bb}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))})
Symbolic@0x22ecb30 insn@0x080485bb[1]: writeRegister(cf, {defs={0x080485bb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))})
Symbolic@0x22ecb30 insn@0x080485bb[1]: xor_({defs={0x080485bb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}, {defs={0x080485bb}, expr=(extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}) = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])))}
Symbolic@0x22ecb30 insn@0x080485bb[1]: writeRegister(of, {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])))})
Symbolic@0x22ecb30 insn@0x080485bb[1]: writeRegister(ebx, {defs={0x080485bb}, expr=(add[32] v18200[32] 4366[32])})
Symbolic@0x22ecb30 insn@0x080485bb[1]: finishInstruction(add    ebx, 0x0000110e)
registers:
  ebx       = {defs={0x080485bb}, expr=(add[32] v18200[32] 4366[32])}
  esp       = {defs={0x080485ba}, expr=(add[32] esp_0[32] 4[32])}
  eip       = {defs={0x080485bb}, expr=0x080485c1[32]}
  pf        = {defs={0x080485bb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])) (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32]))))}
  sf        = {defs={0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v18200[32] 4366[32]))}
  zf        = {defs={0x080485bb}, expr=(zerop[1] (add[32] v18200[32] 4366[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485bb}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485bb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])))}
memory:
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18200[32])
  addr={defs={0x080485ba}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18200[32])

0x80485c1:call   0x08048390<__do_global_dtors_aux>
Symbolic@0x22ecb30 insn@0x080485c1[2]: startInstruction(call   0x08048390<__do_global_dtors_aux>)
Symbolic@0x22ecb30 insn@0x080485c1[2]: number_(32, 5) = {defs={0x080485c1}, expr=5[32]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: number_(32, 134514113) = {defs={0x080485c1}, expr=0x080485c1[32]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: add({defs={0x080485c1}, expr=0x080485c1[32]}, {defs={0x080485c1}, expr=5[32]}) = {defs={0x080485c1}, expr=0x080485c6[32]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: writeRegister(eip, {defs={0x080485c1}, expr=0x080485c6[32]})
Symbolic@0x22ecb30 insn@0x080485c1[2]: readRegister(esp) = {defs={0x080485ba}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080485c1[2]: number_(32, 18446744073709551612) = {defs={0x080485c1}, expr=-4[32]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: add({defs={0x080485ba}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x080485c1}, expr=-4[32]}) = {defs={0x080485ba,0x080485c1}, expr=esp_0[32]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: boolean_(1) = {defs={0x080485c1}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: readRegister(eip) = {defs={0x080485c1}, expr=0x080485c6[32]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: writeMemory(ss, {defs={0x080485ba,0x080485c1}, expr=esp_0[32]}, {defs={0x080485c1}, expr=0x080485c6[32]}, {defs={0x080485c1}, expr=1[1]})
Symbolic@0x22ecb30 insn@0x080485c1[2]: number_(32, 134513552) = {defs={0x080485c1}, expr=0x08048390[32]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: filterCallTarget({defs={0x080485c1}, expr=0x08048390[32]}) = {defs={0x080485c1}, expr=0x08048390[32]}
Symbolic@0x22ecb30 insn@0x080485c1[2]: writeRegister(eip, {defs={0x080485c1}, expr=0x08048390[32]})
Symbolic@0x22ecb30 insn@0x080485c1[2]: writeRegister(esp, {defs={0x080485ba,0x080485c1}, expr=esp_0[32]})
Symbolic@0x22ecb30 insn@0x080485c1[2]: finishInstruction(call   0x08048390<__do_global_dtors_aux>)
registers:
  ebx       = {defs={0x080485bb}, expr=(add[32] v18200[32] 4366[32])}
  eip       = {defs={0x080485c1}, expr=0x08048390[32]}
  pf        = {defs={0x080485bb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])) (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32]))))}
  sf        = {defs={0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v18200[32] 4366[32]))}
  zf        = {defs={0x080485bb}, expr=(zerop[1] (add[32] v18200[32] 4366[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485bb}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485bb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])))}
memory:
  addr={defs={0x080485ba,0x080485c1}, expr=(add[32] esp_0[32] 3[32])} value={defs={0x080485c1}, expr=8[8]}
  addr={defs={0x080485ba,0x080485c1}, expr=(add[32] esp_0[32] 2[32])} value={defs={0x080485c1}, expr=4[8]}
  addr={defs={0x080485ba,0x080485c1}, expr=(add[32] esp_0[32] 1[32])} value={defs={0x080485c1}, expr=-123[8]}
  addr={defs={0x080485ba,0x080485c1}, expr=esp_0[32]} value={defs={0x080485c1}, expr=-58[8]}
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18200[32])
  addr={defs={0x080485ba}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18200[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  ebx       = {defs={0x080485bb}, expr=(add[32] v18200[32] 4366[32])}
  esp       = {defs={0x080485ba,0x080485c1}, expr=(add[32] frame_pointer[32] 4[32])}
  eip       = {defs={0x080485c1}, expr=0x08048390[32]}
  pf        = {defs={0x080485bb}, expr=(invert[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[32] v18200[32] 4366[32])) (extract[1] 1[32] 2[32] (add[32] v18200[32] 4366[32])) (extract[1] 2[32] 3[32] (add[32] v18200[32] 4366[32])) (extract[1] 3[32] 4[32] (add[32] v18200[32] 4366[32])) (extract[1] 4[32] 5[32] (add[32] v18200[32] 4366[32])) (extract[1] 5[32] 6[32] (add[32] v18200[32] 4366[32])) (extract[1] 6[32] 7[32] (add[32] v18200[32] 4366[32])) (extract[1] 7[32] 8[32] (add[32] v18200[32] 4366[32]))))}
  sf        = {defs={0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v18200[32] 4366[32]))}
  zf        = {defs={0x080485bb}, expr=(zerop[1] (add[32] v18200[32] 4366[32]))}
  REG8.0@3  = (extract[1] 3[32] 4[32] eflags_0[32])
  REG8.0@5  = (extract[1] 5[32] 6[32] eflags_0[32])
  af        = {defs={0x080485bb}, expr=(extract[1] 4[32] 5[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
  REG8.0@1  = (extract[1] 1[32] 2[32] eflags_0[32])
  cf        = {defs={0x080485bb}, expr=(extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33]))}
  REG8.0@8  = (extract[3] 8[32] 11[32] eflags_0[32])
  REG8.0@12 = (extract[20] 12[32] 32[32] eflags_0[32])
  of        = {defs={0x080485bb}, expr=(bv-xor[1] (extract[1] 32[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])) (extract[1] 31[32] 32[32] (bv-xor[33] (uextend[33] 33[32] v18200[32]) (add[33] (uextend[33] 33[32] v18200[32]) 4366[33]) 4366[33])))}
memory:
  addr={defs={0x080485ba,0x080485c1}, expr=(add[32] frame_pointer[32] 7[32])} value={defs={0x080485c1}, expr=8[8]}
  addr={defs={0x080485ba,0x080485c1}, expr=(add[32] frame_pointer[32] 6[32])} value={defs={0x080485c1}, expr=4[8]}
  addr={defs={0x080485ba,0x080485c1}, expr=(add[32] frame_pointer[32] 5[32])} value={defs={0x080485c1}, expr=-123[8]}
  addr={defs={0x080485ba,0x080485c1}, expr=(add[32] frame_pointer[32] 4[32])} value={defs={0x080485c1}, expr=-58[8]}
  addr={defs={0x080485ba}, expr=(add[32] frame_pointer[32] 7[32])} value=(extract[8] 24[32] 32[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] frame_pointer[32] 6[32])} value=(extract[8] 16[32] 24[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] frame_pointer[32] 5[32])} value=(extract[8] 8[32] 16[32] v18200[32])
  addr={defs={0x080485ba}, expr=(add[32] frame_pointer[32] 4[32])} value=(extract[8] 0[32] 8[32] v18200[32])
Symbolic@0x22ecb30 insn@0x080485c1[2]: operators destroyed
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
Original state:
registers:
  eax    = eax_0[32]
  ecx    = ecx_0[32]
  edx    = edx_0[32]
  ebx    = ebx_0[32]
  esp    = esp_0[32]
  ebp    = ebp_0[32]
  esi    = esi_0[32]
  edi    = edi_0[32]
  es     = es_0[16]
  cs     = cs_0[16]
  ss     = ss_0[16]
  ds     = ds_0[16]
  fs     = fs_0[16]
  gs     = gs_0[16]
  cr0    = cr0_0[32]
  cr1    = cr1_0[32]
  cr2    = cr2_0[32]
  cr3    = cr3_0[32]
  cr4    = cr4_0[32]
  dr0    = dr0_0[32]
  dr1    = dr1_0[32]
  dr2    = dr2_0[32]
  dr3    = dr3_0[32]
  dr6    = dr6_0[32]
  dr7    = dr7_0[32]
  eip    = eip_0[32]
  eflags = eflags_0[32]
memory:

0x80485c6:pop    eax
Symbolic@0x22ecb30 insn@0x080485c6[0]: startInstruction(pop    eax)
Symbolic@0x22ecb30 insn@0x080485c6[0]: number_(32, 1) = {defs={0x080485c6}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485c6[0]: number_(32, 134514118) = {defs={0x080485c6}, expr=0x080485c6[32]}
Symbolic@0x22ecb30 insn@0x080485c6[0]: add({defs={0x080485c6}, expr=0x080485c6[32]}, {defs={0x080485c6}, expr=1[32]}) = {defs={0x080485c6}, expr=0x080485c7[32]}
Symbolic@0x22ecb30 insn@0x080485c6[0]: writeRegister(eip, {defs={0x080485c6}, expr=0x080485c7[32]})
Symbolic@0x22ecb30 insn@0x080485c6[0]: readRegister(esp) = esp_0[32]
Symbolic@0x22ecb30 insn@0x080485c6[0]: number_(32, 4) = {defs={0x080485c6}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485c6[0]: add(esp_0[32], {defs={0x080485c6}, expr=4[32]}) = {defs={0x080485c6}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080485c6[0]: writeRegister(esp, {defs={0x080485c6}, expr=(add[32] esp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x080485c6[0]: boolean_(1) = {defs={0x080485c6}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485c6[0]: readMemory(ss, esp_0[32], {defs={0x080485c6}, expr=1[1]}, 32) = v18276[32]
Symbolic@0x22ecb30 insn@0x080485c6[0]: writeRegister(eax, v18276[32])
Symbolic@0x22ecb30 insn@0x080485c6[0]: finishInstruction(pop    eax)
registers:
  eax    = v18276[32]
  esp    = {defs={0x080485c6}, expr=(add[32] esp_0[32] 4[32])}
  eip    = {defs={0x080485c6}, expr=0x080485c7[32]}
memory:
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18276[32])
  addr={defs={0x080485c6}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18276[32])

0x80485c7:pop    ebx
Symbolic@0x22ecb30 insn@0x080485c7[1]: startInstruction(pop    ebx)
Symbolic@0x22ecb30 insn@0x080485c7[1]: number_(32, 1) = {defs={0x080485c7}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485c7[1]: number_(32, 134514119) = {defs={0x080485c7}, expr=0x080485c7[32]}
Symbolic@0x22ecb30 insn@0x080485c7[1]: add({defs={0x080485c7}, expr=0x080485c7[32]}, {defs={0x080485c7}, expr=1[32]}) = {defs={0x080485c7}, expr=0x080485c8[32]}
Symbolic@0x22ecb30 insn@0x080485c7[1]: writeRegister(eip, {defs={0x080485c7}, expr=0x080485c8[32]})
Symbolic@0x22ecb30 insn@0x080485c7[1]: readRegister(esp) = {defs={0x080485c6}, expr=(add[32] esp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080485c7[1]: number_(32, 4) = {defs={0x080485c7}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485c7[1]: add({defs={0x080485c6}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x080485c7}, expr=4[32]}) = {defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x080485c7[1]: writeRegister(esp, {defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x080485c7[1]: boolean_(1) = {defs={0x080485c7}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485c7[1]: readMemory(ss, {defs={0x080485c6}, expr=(add[32] esp_0[32] 4[32])}, {defs={0x080485c7}, expr=1[1]}, 32) = v18281[32]
Symbolic@0x22ecb30 insn@0x080485c7[1]: writeRegister(ebx, v18281[32])
Symbolic@0x22ecb30 insn@0x080485c7[1]: finishInstruction(pop    ebx)
registers:
  eax    = v18276[32]
  ebx    = v18281[32]
  esp    = {defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 8[32])}
  eip    = {defs={0x080485c7}, expr=0x080485c8[32]}
memory:
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v18281[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18276[32])
  addr={defs={0x080485c6}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18276[32])

0x80485c8:leave  
Symbolic@0x22ecb30 insn@0x080485c8[2]: startInstruction(leave)
Symbolic@0x22ecb30 insn@0x080485c8[2]: number_(32, 1) = {defs={0x080485c8}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485c8[2]: number_(32, 134514120) = {defs={0x080485c8}, expr=0x080485c8[32]}
Symbolic@0x22ecb30 insn@0x080485c8[2]: add({defs={0x080485c8}, expr=0x080485c8[32]}, {defs={0x080485c8}, expr=1[32]}) = {defs={0x080485c8}, expr=0x080485c9[32]}
Symbolic@0x22ecb30 insn@0x080485c8[2]: writeRegister(eip, {defs={0x080485c8}, expr=0x080485c9[32]})
Symbolic@0x22ecb30 insn@0x080485c8[2]: readRegister(ebp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080485c8[2]: writeRegister(esp, ebp_0[32])
Symbolic@0x22ecb30 insn@0x080485c8[2]: readRegister(esp) = ebp_0[32]
Symbolic@0x22ecb30 insn@0x080485c8[2]: number_(32, 4) = {defs={0x080485c8}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485c8[2]: add(ebp_0[32], {defs={0x080485c8}, expr=4[32]}) = {defs={0x080485c8}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080485c8[2]: boolean_(1) = {defs={0x080485c8}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485c8[2]: readMemory(ss, ebp_0[32], {defs={0x080485c8}, expr=1[1]}, 32) = v18286[32]
Symbolic@0x22ecb30 insn@0x080485c8[2]: writeRegister(ebp, v18286[32])
Symbolic@0x22ecb30 insn@0x080485c8[2]: writeRegister(esp, {defs={0x080485c8}, expr=(add[32] ebp_0[32] 4[32])})
Symbolic@0x22ecb30 insn@0x080485c8[2]: finishInstruction(leave)
registers:
  eax    = v18276[32]
  ebx    = v18281[32]
  esp    = {defs={0x080485c8}, expr=(add[32] ebp_0[32] 4[32])}
  ebp    = v18286[32]
  eip    = {defs={0x080485c8}, expr=0x080485c9[32]}
memory:
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18286[32])
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18286[32])
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18286[32])
  addr={defs={0x080485c8}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v18286[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v18281[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18276[32])
  addr={defs={0x080485c6}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18276[32])

0x80485c9:ret    
Symbolic@0x22ecb30 insn@0x080485c9[3]: startInstruction(ret)
Symbolic@0x22ecb30 insn@0x080485c9[3]: number_(32, 1) = {defs={0x080485c9}, expr=1[32]}
Symbolic@0x22ecb30 insn@0x080485c9[3]: number_(32, 134514121) = {defs={0x080485c9}, expr=0x080485c9[32]}
Symbolic@0x22ecb30 insn@0x080485c9[3]: add({defs={0x080485c9}, expr=0x080485c9[32]}, {defs={0x080485c9}, expr=1[32]}) = {defs={0x080485c9}, expr=0x080485ca[32]}
Symbolic@0x22ecb30 insn@0x080485c9[3]: writeRegister(eip, {defs={0x080485c9}, expr=0x080485ca[32]})
Symbolic@0x22ecb30 insn@0x080485c9[3]: number_(32, 0) = {defs={0x080485c9}, expr=0[32]}
Symbolic@0x22ecb30 insn@0x080485c9[3]: readRegister(esp) = {defs={0x080485c8}, expr=(add[32] ebp_0[32] 4[32])}
Symbolic@0x22ecb30 insn@0x080485c9[3]: number_(32, 4) = {defs={0x080485c9}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485c9[3]: add({defs={0x080485c9}, expr=4[32]}, {defs={0x080485c9}, expr=0[32]}) = {defs={0x080485c9}, expr=4[32]}
Symbolic@0x22ecb30 insn@0x080485c9[3]: add({defs={0x080485c8}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x080485c9}, expr=4[32]}) = {defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 8[32])}
Symbolic@0x22ecb30 insn@0x080485c9[3]: boolean_(1) = {defs={0x080485c9}, expr=1[1]}
Symbolic@0x22ecb30 insn@0x080485c9[3]: readMemory(ss, {defs={0x080485c8}, expr=(add[32] ebp_0[32] 4[32])}, {defs={0x080485c9}, expr=1[1]}, 32) = v18291[32]
Symbolic@0x22ecb30 insn@0x080485c9[3]: filterReturnTarget(v18291[32]) = v18291[32]
Symbolic@0x22ecb30 insn@0x080485c9[3]: writeRegister(eip, v18291[32])
Symbolic@0x22ecb30 insn@0x080485c9[3]: writeRegister(esp, {defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 8[32])})
Symbolic@0x22ecb30 insn@0x080485c9[3]: finishInstruction(ret)
registers:
  eax    = v18276[32]
  ebx    = v18281[32]
  esp    = {defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v18286[32]
  eip    = v18291[32]
memory:
  addr={defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v18291[32])
  addr={defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v18291[32])
  addr={defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v18291[32])
  addr={defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v18291[32])
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18286[32])
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18286[32])
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18286[32])
  addr={defs={0x080485c8}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v18286[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] esp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v18281[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] esp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18276[32])
  addr={defs={0x080485c6}, expr=esp_0[32]} value=(extract[8] 0[32] 8[32] v18276[32])
Substituting from esp_0[32] to (add[32] frame_pointer[32] 4[32])
Substituted state:
registers:
  eax    = v18276[32]
  ebx    = v18281[32]
  esp    = {defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 8[32])}
  ebp    = v18286[32]
  eip    = v18291[32]
memory:
  addr={defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 7[32])} value=(extract[8] 24[32] 32[32] v18291[32])
  addr={defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 6[32])} value=(extract[8] 16[32] 24[32] v18291[32])
  addr={defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 5[32])} value=(extract[8] 8[32] 16[32] v18291[32])
  addr={defs={0x080485c8,0x080485c9}, expr=(add[32] ebp_0[32] 4[32])} value=(extract[8] 0[32] 8[32] v18291[32])
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 3[32])} value=(extract[8] 24[32] 32[32] v18286[32])
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 2[32])} value=(extract[8] 16[32] 24[32] v18286[32])
  addr={defs={0x080485c8}, expr=(add[32] ebp_0[32] 1[32])} value=(extract[8] 8[32] 16[32] v18286[32])
  addr={defs={0x080485c8}, expr=ebp_0[32]} value=(extract[8] 0[32] 8[32] v18286[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] frame_pointer[32] 11[32])} value=(extract[8] 24[32] 32[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] frame_pointer[32] 10[32])} value=(extract[8] 16[32] 24[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] frame_pointer[32] 9[32])} value=(extract[8] 8[32] 16[32] v18281[32])
  addr={defs={0x080485c6,0x080485c7}, expr=(add[32] frame_pointer[32] 8[32])} value=(extract[8] 0[32] 8[32] v18281[32])
  addr={defs={0x080485c6}, expr=(add[32] frame_pointer[32] 7[32])} value=(extract[8] 24[32] 32[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] frame_pointer[32] 6[32])} value=(extract[8] 16[32] 24[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] frame_pointer[32] 5[32])} value=(extract[8] 8[32] 16[32] v18276[32])
  addr={defs={0x080485c6}, expr=(add[32] frame_pointer[32] 4[32])} value=(extract[8] 0[32] 8[32] v18276[32])
Symbolic@0x22ecb30 insn@0x080485c9[3]: operators destroyed
analyzed headers: 1
