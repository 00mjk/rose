=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
== PartialSymbolic ==
registers:
    esp    = v2-0x4[32]
    ebp    = v3[32]
    eip    = 0x80482c9[32]
memory:
    addr=v2-0x4[32] value=v3[32]
== Symbolic ==
registers:
    esp    = {defs={0x080482c8}, expr=(add[32] v1[32] -4[32])}
    ebp    = {defs={}, expr=v2[32]}
    eip    = {defs={0x080482c8}, expr=0x080482c9[32]}
memory:
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 3[32])} value={defs={0x080482c8}, expr=(extract[8] 24[32] 32[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 2[32])} value={defs={0x080482c8}, expr=(extract[8] 16[32] 24[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 1[32])} value={defs={0x080482c8}, expr=(extract[8] 8[32] 16[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] v1[32] -4[32])} value={defs={0x080482c8}, expr=(extract[8] 0[32] 8[32] v2[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080482c9[32]
memory:
0x80482c9:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v2-0x4[32]
    ebp    = v2-0x4[32]
    eip    = 0x80482cb[32]
memory:
    addr=v2-0x4[32] value=v3[32]
== Symbolic ==
registers:
    esp    = {defs={0x080482c8}, expr=(add[32] v1[32] -4[32])}
    ebp    = {defs={0x080482c8}, expr=(add[32] v1[32] -4[32])}
    eip    = {defs={0x080482c9}, expr=0x080482cb[32]}
memory:
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 3[32])} value={defs={0x080482c8}, expr=(extract[8] 24[32] 32[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 2[32])} value={defs={0x080482c8}, expr=(extract[8] 16[32] 24[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 1[32])} value={defs={0x080482c8}, expr=(extract[8] 8[32] 16[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] v1[32] -4[32])} value={defs={0x080482c8}, expr=(extract[8] 0[32] 8[32] v2[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080482cb[32]
memory:
0x80482cb:sub    esp, 0x08
== PartialSymbolic ==
registers:
    esp    = v2-0xc[32]
    ebp    = v2-0x4[32]
    eip    = 0x80482ce[32]
    pf     = -v18+0x1[1]
    sf     = v19[1]
    zf     = v20[1]
    af     = -v23+0x1[1]
    cf     = -v21+0x1[1]
    of     = v24[1]
memory:
    addr=v2-0x4[32] value=v3[32]
== Symbolic ==
registers:
    esp    = {defs={0x080482c8,0x080482cb}, expr=(add[32] (add[32] v1[32] -4[32]) -8[32])}
    ebp    = {defs={0x080482c8}, expr=(add[32] v1[32] -4[32])}
    eip    = {defs={0x080482cb}, expr=0x080482ce[32]}
    pf     = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))}
    zf     = {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] (add[32] v1[32] -4[32]) -8[32]))}
    af     = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 3[32])} value={defs={0x080482c8}, expr=(extract[8] 24[32] 32[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 2[32])} value={defs={0x080482c8}, expr=(extract[8] 16[32] 24[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 1[32])} value={defs={0x080482c8}, expr=(extract[8] 8[32] 16[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] v1[32] -4[32])} value={defs={0x080482c8}, expr=(extract[8] 0[32] 8[32] v2[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080482ce[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80482ce:call   0x08048364<call_gmon_start>
== PartialSymbolic ==
registers:
    esp    = v2-0x10[32]
    ebp    = v2-0x4[32]
    eip    = 0x8048364[32]
    pf     = -v18+0x1[1]
    sf     = v19[1]
    zf     = v20[1]
    af     = -v23+0x1[1]
    cf     = -v21+0x1[1]
    of     = v24[1]
memory:
    addr=v2-0x10[32] value=0x80482d3[32]
    addr=v2-0x4[32] value=v3[32]
== Symbolic ==
registers:
    esp    = {defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] v1[32] -4[32]) -8[32]) -4[32])}
    ebp    = {defs={0x080482c8}, expr=(add[32] v1[32] -4[32])}
    eip    = {defs={}, expr=0x08048364[32]}
    pf     = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x080482c8,0x080482cb}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1[32] -4[32]) -8[32]))}
    zf     = {defs={0x080482c8,0x080482cb}, expr=(zerop[1] (add[32] (add[32] v1[32] -4[32]) -8[32]))}
    af     = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x080482c8,0x080482cb}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x080482c8,0x080482cb}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] (add[32] v1[32] -4[32]) -8[32]) -4[32]) 3[32])} value={defs={0x080482ce}, expr=8[8]}
    addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] (add[32] v1[32] -4[32]) -8[32]) -4[32]) 2[32])} value={defs={0x080482ce}, expr=4[8]}
    addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] (add[32] v1[32] -4[32]) -8[32]) -4[32]) 1[32])} value={defs={0x080482ce}, expr=-126[8]}
    addr={defs={0x080482c8,0x080482cb,0x080482ce}, expr=(add[32] (add[32] (add[32] v1[32] -4[32]) -8[32]) -4[32])} value={defs={0x080482ce}, expr=-45[8]}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 3[32])} value={defs={0x080482c8}, expr=(extract[8] 24[32] 32[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 2[32])} value={defs={0x080482c8}, expr=(extract[8] 16[32] 24[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] (add[32] v1[32] -4[32]) 1[32])} value={defs={0x080482c8}, expr=(extract[8] 8[32] 16[32] v2[32])}
    addr={defs={0x080482c8}, expr=(add[32] v1[32] -4[32])} value={defs={0x080482c8}, expr=(extract[8] 0[32] 8[32] v2[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048364[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
== PartialSymbolic ==
registers:
    esp    = v26-0x4[32]
    eip    = 0x80483d0[32]
memory:
    addr=v26-0x4[32] value=0x80482d8[32]
== Symbolic ==
registers:
    esp    = {defs={0x080482d3}, expr=(add[32] v4[32] -4[32])}
    eip    = {defs={}, expr=0x080483d0[32]}
memory:
    addr={defs={0x080482d3}, expr=(add[32] (add[32] v4[32] -4[32]) 3[32])} value={defs={0x080482d3}, expr=8[8]}
    addr={defs={0x080482d3}, expr=(add[32] (add[32] v4[32] -4[32]) 2[32])} value={defs={0x080482d3}, expr=4[8]}
    addr={defs={0x080482d3}, expr=(add[32] (add[32] v4[32] -4[32]) 1[32])} value={defs={0x080482d3}, expr=-126[8]}
    addr={defs={0x080482d3}, expr=(add[32] v4[32] -4[32])} value={defs={0x080482d3}, expr=-40[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x080483d0[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
== PartialSymbolic ==
registers:
    esp    = v28-0x4[32]
    eip    = 0x8048580[32]
memory:
    addr=v28-0x4[32] value=0x80482dd[32]
== Symbolic ==
registers:
    esp    = {defs={0x080482d8}, expr=(add[32] v6[32] -4[32])}
    eip    = {defs={}, expr=0x08048580[32]}
memory:
    addr={defs={0x080482d8}, expr=(add[32] (add[32] v6[32] -4[32]) 3[32])} value={defs={0x080482d8}, expr=8[8]}
    addr={defs={0x080482d8}, expr=(add[32] (add[32] v6[32] -4[32]) 2[32])} value={defs={0x080482d8}, expr=4[8]}
    addr={defs={0x080482d8}, expr=(add[32] (add[32] v6[32] -4[32]) 1[32])} value={defs={0x080482d8}, expr=-126[8]}
    addr={defs={0x080482d8}, expr=(add[32] v6[32] -4[32])} value={defs={0x080482d8}, expr=-35[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x08048580[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
== PartialSymbolic ==
registers:
    esp    = v30+0x4[32]
    ebp    = v31[32]
    eip    = 0x80482de[32]
memory:
    addr=v30[32] value=v31[32]
== Symbolic ==
registers:
    esp    = {defs={0x080482dd}, expr=(add[32] v8[32] 4[32])}
    ebp    = {defs={0x080482dd}, expr=v9[32]}
    eip    = {defs={0x080482dd}, expr=0x080482de[32]}
memory:
    addr={defs={0x080482dd}, expr=(add[32] v8[32] 3[32])} value={defs={0x080482dd}, expr=(extract[8] 24[32] 32[32] v9[32])}
    addr={defs={0x080482dd}, expr=(add[32] v8[32] 2[32])} value={defs={0x080482dd}, expr=(extract[8] 16[32] 24[32] v9[32])}
    addr={defs={0x080482dd}, expr=(add[32] v8[32] 1[32])} value={defs={0x080482dd}, expr=(extract[8] 8[32] 16[32] v9[32])}
    addr={defs={}, expr=v8[32]} value={defs={0x080482dd}, expr=(extract[8] 0[32] 8[32] v9[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080482de[32]
memory:
0x80482de:ret    
== PartialSymbolic ==
registers:
    esp    = v30+0x8[32]
    ebp    = v31[32]
    eip    = v33[32]
memory:
    addr=v30+0x4[32] value=v33[32]
    addr=v30[32] value=v31[32]
== Symbolic ==
registers:
    esp    = {defs={0x080482dd,0x080482de}, expr=(add[32] (add[32] v8[32] 4[32]) 4[32])}
    ebp    = {defs={0x080482dd}, expr=v9[32]}
    eip    = {defs={0x080482de}, expr=v14[32]}
memory:
    addr={defs={0x080482dd,0x080482de}, expr=(add[32] (add[32] v8[32] 4[32]) 3[32])} value={defs={0x080482de}, expr=(extract[8] 24[32] 32[32] v14[32])}
    addr={defs={0x080482dd,0x080482de}, expr=(add[32] (add[32] v8[32] 4[32]) 2[32])} value={defs={0x080482de}, expr=(extract[8] 16[32] 24[32] v14[32])}
    addr={defs={0x080482dd,0x080482de}, expr=(add[32] (add[32] v8[32] 4[32]) 1[32])} value={defs={0x080482de}, expr=(extract[8] 8[32] 16[32] v14[32])}
    addr={defs={0x080482dd}, expr=(add[32] v8[32] 4[32])} value={defs={0x080482de}, expr=(extract[8] 0[32] 8[32] v14[32])}
    addr={defs={0x080482dd}, expr=(add[32] v8[32] 3[32])} value={defs={0x080482dd}, expr=(extract[8] 24[32] 32[32] v9[32])}
    addr={defs={0x080482dd}, expr=(add[32] v8[32] 2[32])} value={defs={0x080482dd}, expr=(extract[8] 16[32] 24[32] v9[32])}
    addr={defs={0x080482dd}, expr=(add[32] v8[32] 1[32])} value={defs={0x080482dd}, expr=(extract[8] 8[32] 16[32] v9[32])}
    addr={defs={}, expr=v8[32]} value={defs={0x080482dd}, expr=(extract[8] 0[32] 8[32] v9[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
== PartialSymbolic ==
registers:
    eip    = v36[32]
memory:
    addr=0x80496d4[32] value=v36[32]
== Symbolic ==
registers:
    eip    = {defs={0x080482f0}, expr=v20[32]}
memory:
    addr={defs={0x080482f0}, expr=0x080496d7[32]} value={defs={0x080482f0}, expr=(extract[8] 24[32] 32[32] v20[32])}
    addr={defs={0x080482f0}, expr=0x080496d6[32]} value={defs={0x080482f0}, expr=(extract[8] 16[32] 24[32] v20[32])}
    addr={defs={0x080482f0}, expr=0x080496d5[32]} value={defs={0x080482f0}, expr=(extract[8] 8[32] 16[32] v20[32])}
    addr={defs={0x080482f0}, expr=0x080496d4[32]} value={defs={0x080482f0}, expr=(extract[8] 0[32] 8[32] v20[32])}
== Interval ==
registers:
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
== PartialSymbolic ==
registers:
    eip    = v39[32]
memory:
    addr=0x80496d8[32] value=v39[32]
== Symbolic ==
registers:
    eip    = {defs={0x08048300}, expr=v26[32]}
memory:
    addr={defs={0x08048300}, expr=0x080496db[32]} value={defs={0x08048300}, expr=(extract[8] 24[32] 32[32] v26[32])}
    addr={defs={0x08048300}, expr=0x080496da[32]} value={defs={0x08048300}, expr=(extract[8] 16[32] 24[32] v26[32])}
    addr={defs={0x08048300}, expr=0x080496d9[32]} value={defs={0x08048300}, expr=(extract[8] 8[32] 16[32] v26[32])}
    addr={defs={0x08048300}, expr=0x080496d8[32]} value={defs={0x08048300}, expr=(extract[8] 0[32] 8[32] v26[32])}
== Interval ==
registers:
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
== PartialSymbolic ==
registers:
    eip    = v42[32]
memory:
    addr=0x80496dc[32] value=v42[32]
== Symbolic ==
registers:
    eip    = {defs={0x08048310}, expr=v32[32]}
memory:
    addr={defs={0x08048310}, expr=0x080496df[32]} value={defs={0x08048310}, expr=(extract[8] 24[32] 32[32] v32[32])}
    addr={defs={0x08048310}, expr=0x080496de[32]} value={defs={0x08048310}, expr=(extract[8] 16[32] 24[32] v32[32])}
    addr={defs={0x08048310}, expr=0x080496dd[32]} value={defs={0x08048310}, expr=(extract[8] 8[32] 16[32] v32[32])}
    addr={defs={0x08048310}, expr=0x080496dc[32]} value={defs={0x08048310}, expr=(extract[8] 0[32] 8[32] v32[32])}
== Interval ==
registers:
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
== PartialSymbolic ==
registers:
    eip    = v45[32]
memory:
    addr=0x80496e0[32] value=v45[32]
== Symbolic ==
registers:
    eip    = {defs={0x08048320}, expr=v38[32]}
memory:
    addr={defs={0x08048320}, expr=0x080496e3[32]} value={defs={0x08048320}, expr=(extract[8] 24[32] 32[32] v38[32])}
    addr={defs={0x08048320}, expr=0x080496e2[32]} value={defs={0x08048320}, expr=(extract[8] 16[32] 24[32] v38[32])}
    addr={defs={0x08048320}, expr=0x080496e1[32]} value={defs={0x08048320}, expr=(extract[8] 8[32] 16[32] v38[32])}
    addr={defs={0x08048320}, expr=0x080496e0[32]} value={defs={0x08048320}, expr=(extract[8] 0[32] 8[32] v38[32])}
== Interval ==
registers:
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
== PartialSymbolic ==
registers:
    eip    = v48[32]
memory:
    addr=0x80496e4[32] value=v48[32]
== Symbolic ==
registers:
    eip    = {defs={0x08048330}, expr=v44[32]}
memory:
    addr={defs={0x08048330}, expr=0x080496e7[32]} value={defs={0x08048330}, expr=(extract[8] 24[32] 32[32] v44[32])}
    addr={defs={0x08048330}, expr=0x080496e6[32]} value={defs={0x08048330}, expr=(extract[8] 16[32] 24[32] v44[32])}
    addr={defs={0x08048330}, expr=0x080496e5[32]} value={defs={0x08048330}, expr=(extract[8] 8[32] 16[32] v44[32])}
    addr={defs={0x08048330}, expr=0x080496e4[32]} value={defs={0x08048330}, expr=(extract[8] 0[32] 8[32] v44[32])}
== Interval ==
registers:
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
== PartialSymbolic ==
registers:
    ebp    = 0x0[32]
    eip    = 0x8048342[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v52[1]
    cf     = 0x0[1]
memory:
== Symbolic ==
registers:
    ebp    = {defs={0x08048340}, expr=0[32]}
    eip    = {defs={0x08048340}, expr=0x08048342[32]}
    pf     = {defs={0x08048340}, expr=1[1]}
    sf     = {defs={0x08048340}, expr=0[1]}
    zf     = {defs={0x08048340}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v51[1]}
    cf     = {defs={}, expr=0[1]}
memory:
== Interval ==
registers:
    ebp    = doubleword[32]
    eip    = 0x08048342[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048342:pop    esi
== PartialSymbolic ==
registers:
    esp    = v53+0x4[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048343[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v52[1]
    cf     = 0x0[1]
memory:
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048342}, expr=0x08048343[32]}
    pf     = {defs={0x08048340}, expr=1[1]}
    sf     = {defs={0x08048340}, expr=0[1]}
    zf     = {defs={0x08048340}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v51[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048343[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048343:mov    ecx, esp
== PartialSymbolic ==
registers:
    ecx    = v53+0x4[32]
    esp    = v53+0x4[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048345[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v52[1]
    cf     = 0x0[1]
memory:
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    esp    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048343}, expr=0x08048345[32]}
    pf     = {defs={0x08048340}, expr=1[1]}
    sf     = {defs={0x08048340}, expr=0[1]}
    zf     = {defs={0x08048340}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v51[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    ecx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048345[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048345:and    esp, 0xf0<-0x10>
== PartialSymbolic ==
registers:
    ecx    = v53+0x4[32]
    esp    = v56[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048348[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    esp    = {defs={0x08048342,0x08048345}, expr=(bv-and[32] (add[32] v52[32] 4[32]) -16[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048345}, expr=0x08048348[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    ecx    = doubleword[32]
    esp    = 0[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048348[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048348:push   eax
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    esp    = v56-0x4[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048349[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    esp    = {defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048348}, expr=0x08048349[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    esp    = 0xfffffffc[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048349[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048349:push   esp
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    esp    = v56-0x8[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x804834a[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0x8[32] value=v56-0x4[32]
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    esp    = {defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048349}, expr=0x0804834a[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    esp    = 0xfffffff8[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x0804834a[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x804834a:push   edx
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    edx    = v75[32]
    esp    = v56-0xc[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x804834b[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0xc[32] value=v75[32]
    addr=v56-0x8[32] value=v56-0x4[32]
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    edx    = {defs={}, expr=v60[32]}
    esp    = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x0804834a}, expr=0x0804834b[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    edx    = doubleword[32]
    esp    = 0xfffffff4[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x0804834b[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x804834b:push   0x08048520<__libc_csu_fini>
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    edx    = v75[32]
    esp    = v56-0x10[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048350[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0x10[32] value=0x8048520[32]
    addr=v56-0xc[32] value=v75[32]
    addr=v56-0x8[32] value=v56-0x4[32]
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    edx    = {defs={}, expr=v60[32]}
    esp    = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x0804834b}, expr=0x08048350[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    edx    = doubleword[32]
    esp    = 0xfffffff0[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048350[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048350:push   0x080484b0<__libc_csu_init>
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    edx    = v75[32]
    esp    = v56-0x14[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048355[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0x14[32] value=0x80484b0[32]
    addr=v56-0x10[32] value=0x8048520[32]
    addr=v56-0xc[32] value=v75[32]
    addr=v56-0x8[32] value=v56-0x4[32]
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    edx    = {defs={}, expr=v60[32]}
    esp    = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048350}, expr=0x08048355[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    edx    = doubleword[32]
    esp    = 0xffffffec[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048355[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048355:push   ecx
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    edx    = v75[32]
    esp    = v56-0x18[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048356[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0x18[32] value=v53+0x4[32]
    addr=v56-0x14[32] value=0x80484b0[32]
    addr=v56-0x10[32] value=0x8048520[32]
    addr=v56-0xc[32] value=v75[32]
    addr=v56-0x8[32] value=v56-0x4[32]
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    edx    = {defs={}, expr=v60[32]}
    esp    = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048355}, expr=0x08048356[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 24[32] 32[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 16[32] 24[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 8[32] 16[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 0[32] 8[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    edx    = doubleword[32]
    esp    = 0xffffffe8[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048356[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048356:push   esi
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    edx    = v75[32]
    esp    = v56-0x1c[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048357[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0x1c[32] value=v54[32]
    addr=v56-0x18[32] value=v53+0x4[32]
    addr=v56-0x14[32] value=0x80484b0[32]
    addr=v56-0x10[32] value=0x8048520[32]
    addr=v56-0xc[32] value=v75[32]
    addr=v56-0x8[32] value=v56-0x4[32]
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    edx    = {defs={}, expr=v60[32]}
    esp    = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048356}, expr=0x08048357[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 0[32] 8[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 24[32] 32[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 16[32] 24[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 8[32] 16[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 0[32] 8[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    edx    = doubleword[32]
    esp    = 0xffffffe4[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048357[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048357:push   0x08048410<main>
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    edx    = v75[32]
    esp    = v56-0x20[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x804835c[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0x20[32] value=0x8048410[32]
    addr=v56-0x1c[32] value=v54[32]
    addr=v56-0x18[32] value=v53+0x4[32]
    addr=v56-0x14[32] value=0x80484b0[32]
    addr=v56-0x10[32] value=0x8048520[32]
    addr=v56-0xc[32] value=v75[32]
    addr=v56-0x8[32] value=v56-0x4[32]
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    edx    = {defs={}, expr=v60[32]}
    esp    = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={0x08048357}, expr=0x0804835c[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048357}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048357}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048357}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048357}, expr=16[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 0[32] 8[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 24[32] 32[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 16[32] 24[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 8[32] 16[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 0[32] 8[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    edx    = doubleword[32]
    esp    = 0xffffffe0[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x0804835c[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x804835c:call   0x08048310<__libc_start_main@plt>
== PartialSymbolic ==
registers:
    eax    = v74[32]
    ecx    = v53+0x4[32]
    edx    = v75[32]
    esp    = v56-0x24[32]
    ebp    = 0x0[32]
    esi    = v54[32]
    eip    = 0x8048310[32]
    pf     = -v70+0x1[1]
    sf     = v71[1]
    zf     = v72[1]
    of     = 0x0[1]
    af     = v73[1]
    cf     = 0x0[1]
memory:
    addr=v56-0x24[32] value=0x8048361[32]
    addr=v56-0x20[32] value=0x8048410[32]
    addr=v56-0x1c[32] value=v54[32]
    addr=v56-0x18[32] value=v53+0x4[32]
    addr=v56-0x14[32] value=0x80484b0[32]
    addr=v56-0x10[32] value=0x8048520[32]
    addr=v56-0xc[32] value=v75[32]
    addr=v56-0x8[32] value=v56-0x4[32]
    addr=v56-0x4[32] value=v74[32]
    addr=v53[32] value=v54[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v59[32]}
    ecx    = {defs={0x08048342}, expr=(add[32] v52[32] 4[32])}
    edx    = {defs={}, expr=v60[32]}
    esp    = {defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048340}, expr=0[32]}
    esi    = {defs={0x08048342}, expr=v53[32]}
    eip    = {defs={}, expr=0x08048310[32]}
    pf     = {defs={0x08048342,0x08048345}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32])))))))}
    sf     = {defs={0x08048342,0x08048345}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    zf     = {defs={0x08048342,0x08048345}, expr=(zerop[1] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v58[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804835c}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804835c}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804835c}, expr=-125[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804835c}, expr=97[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048357}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048357}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048357}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048357}, expr=16[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048356}, expr=(extract[8] 0[32] 8[32] v53[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 24[32] 32[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 16[32] 24[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 8[32] 16[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048355}, expr=(extract[8] 0[32] 8[32] (add[32] v52[32] 4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048350}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048350}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048350}, expr=-124[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048350}, expr=-80[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834b}, expr=8[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834b}, expr=4[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834b}, expr=-123[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834b}, expr=32[8]}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x0804834a}, expr=(extract[8] 24[32] 32[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x0804834a}, expr=(extract[8] 16[32] 24[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x0804834a}, expr=(extract[8] 8[32] 16[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])} value={defs={0x0804834a}, expr=(extract[8] 0[32] 8[32] v60[32])}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) -4[32])} value={defs={0x08048342,0x08048345,0x08048348,0x08048349}, expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]))}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048348}, expr=(extract[8] 24[32] 32[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048348}, expr=(extract[8] 16[32] 24[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048348}, expr=(extract[8] 8[32] 16[32] v59[32])}
    addr={defs={0x08048342,0x08048345,0x08048348}, expr=(add[32] (bv-and[32] (add[32] v52[32] 4[32]) -16[32]) -4[32])} value={defs={0x08048348}, expr=(extract[8] 0[32] 8[32] v59[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 3[32])} value={defs={0x08048342}, expr=(extract[8] 24[32] 32[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 2[32])} value={defs={0x08048342}, expr=(extract[8] 16[32] 24[32] v53[32])}
    addr={defs={0x08048342}, expr=(add[32] v52[32] 1[32])} value={defs={0x08048342}, expr=(extract[8] 8[32] 16[32] v53[32])}
    addr={defs={}, expr=v52[32]} value={defs={0x08048342}, expr=(extract[8] 0[32] 8[32] v53[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ecx    = doubleword[32]
    edx    = doubleword[32]
    esp    = 0xffffffdc[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048310[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
== PartialSymbolic ==
registers:
    eip    = 0x8048361[32]
memory:
== Symbolic ==
registers:
    eip    = {defs={}, expr=0x08048361[32]}
memory:
== Interval ==
registers:
    eip    = 0x08048361[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
== PartialSymbolic ==
registers:
    esp    = v78-0x4[32]
    ebp    = v79[32]
    eip    = 0x8048365[32]
memory:
    addr=v78-0x4[32] value=v79[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048364}, expr=(add[32] v63[32] -4[32])}
    ebp    = {defs={}, expr=v64[32]}
    eip    = {defs={0x08048364}, expr=0x08048365[32]}
memory:
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] v63[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v64[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048365[32]
memory:
0x8048365:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v78-0x4[32]
    ebp    = v78-0x4[32]
    eip    = 0x8048367[32]
memory:
    addr=v78-0x4[32] value=v79[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048364}, expr=(add[32] v63[32] -4[32])}
    ebp    = {defs={0x08048364}, expr=(add[32] v63[32] -4[32])}
    eip    = {defs={0x08048365}, expr=0x08048367[32]}
memory:
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] v63[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v64[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048367[32]
memory:
0x8048367:push   ebx
== PartialSymbolic ==
registers:
    ebx    = v80[32]
    esp    = v78-0x8[32]
    ebp    = v78-0x4[32]
    eip    = 0x8048368[32]
memory:
    addr=v78-0x8[32] value=v80[32]
    addr=v78-0x4[32] value=v79[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v65[32]}
    esp    = {defs={0x08048364,0x08048367}, expr=(add[32] (add[32] v63[32] -4[32]) -4[32])}
    ebp    = {defs={0x08048364}, expr=(add[32] v63[32] -4[32])}
    eip    = {defs={0x08048367}, expr=0x08048368[32]}
memory:
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048367}, expr=(extract[8] 24[32] 32[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048367}, expr=(extract[8] 16[32] 24[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048367}, expr=(extract[8] 8[32] 16[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] v63[32] -4[32]) -4[32])} value={defs={0x08048367}, expr=(extract[8] 0[32] 8[32] v65[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] v63[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v64[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048368[32]
memory:
0x8048368:push   ecx
== PartialSymbolic ==
registers:
    ecx    = v81[32]
    ebx    = v80[32]
    esp    = v78-0xc[32]
    ebp    = v78-0x4[32]
    eip    = 0x8048369[32]
memory:
    addr=v78-0xc[32] value=v81[32]
    addr=v78-0x8[32] value=v80[32]
    addr=v78-0x4[32] value=v79[32]
== Symbolic ==
registers:
    ecx    = {defs={}, expr=v66[32]}
    ebx    = {defs={}, expr=v65[32]}
    esp    = {defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048364}, expr=(add[32] v63[32] -4[32])}
    eip    = {defs={0x08048368}, expr=0x08048369[32]}
memory:
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048368}, expr=(extract[8] 24[32] 32[32] v66[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048368}, expr=(extract[8] 16[32] 24[32] v66[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048368}, expr=(extract[8] 8[32] 16[32] v66[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048368}, expr=(extract[8] 0[32] 8[32] v66[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048367}, expr=(extract[8] 24[32] 32[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048367}, expr=(extract[8] 16[32] 24[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048367}, expr=(extract[8] 8[32] 16[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] v63[32] -4[32]) -4[32])} value={defs={0x08048367}, expr=(extract[8] 0[32] 8[32] v65[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] v63[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v64[32])}
== Interval ==
registers:
    ecx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048369[32]
memory:
0x8048369:call   0x0804836e<<Insn>>
== PartialSymbolic ==
registers:
    ecx    = v81[32]
    ebx    = v80[32]
    esp    = v78-0x10[32]
    ebp    = v78-0x4[32]
    eip    = 0x804836e[32]
memory:
    addr=v78-0x10[32] value=0x804836e[32]
    addr=v78-0xc[32] value=v81[32]
    addr=v78-0x8[32] value=v80[32]
    addr=v78-0x4[32] value=v79[32]
== Symbolic ==
registers:
    ecx    = {defs={}, expr=v66[32]}
    ebx    = {defs={}, expr=v65[32]}
    esp    = {defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048364}, expr=(add[32] v63[32] -4[32])}
    eip    = {defs={}, expr=0x0804836e[32]}
memory:
    addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048369}, expr=8[8]}
    addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048369}, expr=4[8]}
    addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048369}, expr=-125[8]}
    addr={defs={0x08048364,0x08048367,0x08048368,0x08048369}, expr=(add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048369}, expr=110[8]}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048368}, expr=(extract[8] 24[32] 32[32] v66[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048368}, expr=(extract[8] 16[32] 24[32] v66[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048368}, expr=(extract[8] 8[32] 16[32] v66[32])}
    addr={defs={0x08048364,0x08048367,0x08048368}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048368}, expr=(extract[8] 0[32] 8[32] v66[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048367}, expr=(extract[8] 24[32] 32[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048367}, expr=(extract[8] 16[32] 24[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] (add[32] v63[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048367}, expr=(extract[8] 8[32] 16[32] v65[32])}
    addr={defs={0x08048364,0x08048367}, expr=(add[32] (add[32] v63[32] -4[32]) -4[32])} value={defs={0x08048367}, expr=(extract[8] 0[32] 8[32] v65[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 3[32])} value={defs={0x08048364}, expr=(extract[8] 24[32] 32[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 2[32])} value={defs={0x08048364}, expr=(extract[8] 16[32] 24[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] (add[32] v63[32] -4[32]) 1[32])} value={defs={0x08048364}, expr=(extract[8] 8[32] 16[32] v64[32])}
    addr={defs={0x08048364}, expr=(add[32] v63[32] -4[32])} value={defs={0x08048364}, expr=(extract[8] 0[32] 8[32] v64[32])}
== Interval ==
registers:
    ecx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804836e[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
== PartialSymbolic ==
registers:
    ebx    = v84[32]
    esp    = v83+0x4[32]
    eip    = 0x804836f[32]
memory:
    addr=v83[32] value=v84[32]
== Symbolic ==
registers:
    ebx    = {defs={0x0804836e}, expr=v69[32]}
    esp    = {defs={0x0804836e}, expr=(add[32] v68[32] 4[32])}
    eip    = {defs={0x0804836e}, expr=0x0804836f[32]}
memory:
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v69[32])}
    addr={defs={}, expr=v68[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v69[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x0804836f[32]
memory:
0x804836f:add    ebx, 0x0000135a
== PartialSymbolic ==
registers:
    ebx    = v84+0x135a[32]
    esp    = v83+0x4[32]
    eip    = 0x8048375[32]
    pf     = -v100+0x1[1]
    sf     = v101[1]
    zf     = v102[1]
    af     = v105[1]
    cf     = v103[1]
    of     = v106[1]
memory:
    addr=v83[32] value=v84[32]
== Symbolic ==
registers:
    ebx    = {defs={0x0804836e,0x0804836f}, expr=(add[32] v69[32] 4954[32])}
    esp    = {defs={0x0804836e}, expr=(add[32] v68[32] 4[32])}
    eip    = {defs={0x0804836f}, expr=0x08048375[32]}
    pf     = {defs={0x0804836e,0x0804836f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32])))))))}
    sf     = {defs={0x0804836e,0x0804836f}, expr=(extract[1] 31[32] 32[32] (add[32] v69[32] 4954[32]))}
    zf     = {defs={0x0804836e,0x0804836f}, expr=(zerop[1] (add[32] v69[32] 4954[32]))}
    af     = {defs={0x0804836e,0x0804836f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v69[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v69[32]) 4954[33])))))}
    cf     = {defs={0x0804836e,0x0804836f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v69[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v69[32]) 4954[33])))))}
    of     = {defs={0x0804836e,0x0804836f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v69[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v69[32]) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v69[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v69[32]) 4954[33]))))))}
memory:
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v69[32])}
    addr={defs={}, expr=v68[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v69[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048375[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
== PartialSymbolic ==
registers:
    edx    = v107[32]
    ebx    = v84+0x135a[32]
    esp    = v83+0x4[32]
    eip    = 0x804837b[32]
    pf     = -v100+0x1[1]
    sf     = v101[1]
    zf     = v102[1]
    af     = v105[1]
    cf     = v103[1]
    of     = v106[1]
memory:
    addr=v84+0x1356[32] value=v107[32]
    addr=v83[32] value=v84[32]
== Symbolic ==
registers:
    edx    = {defs={0x08048375}, expr=v74[32]}
    ebx    = {defs={0x0804836e,0x0804836f}, expr=(add[32] v69[32] 4954[32])}
    esp    = {defs={0x0804836e}, expr=(add[32] v68[32] 4[32])}
    eip    = {defs={0x08048375}, expr=0x0804837b[32]}
    pf     = {defs={0x0804836e,0x0804836f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v69[32] 4954[32])))))))}
    sf     = {defs={0x0804836e,0x0804836f}, expr=(extract[1] 31[32] 32[32] (add[32] v69[32] 4954[32]))}
    zf     = {defs={0x0804836e,0x0804836f}, expr=(zerop[1] (add[32] v69[32] 4954[32]))}
    af     = {defs={0x0804836e,0x0804836f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v69[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v69[32]) 4954[33])))))}
    cf     = {defs={0x0804836e,0x0804836f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v69[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v69[32]) 4954[33])))))}
    of     = {defs={0x0804836e,0x0804836f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v69[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v69[32]) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v69[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v69[32]) 4954[33]))))))}
memory:
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 3[32])} value={defs={0x08048375}, expr=(extract[8] 24[32] 32[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 2[32])} value={defs={0x08048375}, expr=(extract[8] 16[32] 24[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 1[32])} value={defs={0x08048375}, expr=(extract[8] 8[32] 16[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] v69[32] 4954[32]) -4[32])} value={defs={0x08048375}, expr=(extract[8] 0[32] 8[32] v74[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v69[32])}
    addr={defs={}, expr=v68[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v69[32])}
== Interval ==
registers:
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x0804837b[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804837b:test   edx, edx
== PartialSymbolic ==
registers:
    edx    = v107[32]
    ebx    = v84+0x135a[32]
    esp    = v83+0x4[32]
    eip    = 0x804837d[32]
    pf     = -v153+0x1[1]
    sf     = v154[1]
    zf     = v155[1]
    af     = v156[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v84+0x1356[32] value=v107[32]
    addr=v83[32] value=v84[32]
== Symbolic ==
registers:
    edx    = {defs={0x08048375}, expr=v74[32]}
    ebx    = {defs={0x0804836e,0x0804836f}, expr=(add[32] v69[32] 4954[32])}
    esp    = {defs={0x0804836e}, expr=(add[32] v68[32] 4[32])}
    eip    = {defs={0x0804837b}, expr=0x0804837d[32]}
    pf     = {defs={0x08048375,0x0804837b}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32])))))))}
    sf     = {defs={0x08048375,0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v74[32] v74[32]))}
    zf     = {defs={0x08048375,0x0804837b}, expr=(zerop[1] (bv-and[32] v74[32] v74[32]))}
    af     = {defs={}, expr=v79[1]}
    cf     = {defs={}, expr=0[1]}
    of     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 3[32])} value={defs={0x08048375}, expr=(extract[8] 24[32] 32[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 2[32])} value={defs={0x08048375}, expr=(extract[8] 16[32] 24[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 1[32])} value={defs={0x08048375}, expr=(extract[8] 8[32] 16[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] v69[32] 4954[32]) -4[32])} value={defs={0x08048375}, expr=(extract[8] 0[32] 8[32] v74[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v69[32])}
    addr={defs={}, expr=v68[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v69[32])}
== Interval ==
registers:
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x0804837d[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    af     = 0..1[1]
    cf     = 0[1]
    of     = 0[1]
memory:
0x804837d:je     0x08048384<<Insn>>
== PartialSymbolic ==
registers:
    edx    = v107[32]
    ebx    = v84+0x135a[32]
    esp    = v83+0x4[32]
    eip    = v157[32]
    pf     = -v153+0x1[1]
    sf     = v154[1]
    zf     = v155[1]
    af     = v156[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v84+0x1356[32] value=v107[32]
    addr=v83[32] value=v84[32]
== Symbolic ==
registers:
    edx    = {defs={0x08048375}, expr=v74[32]}
    ebx    = {defs={0x0804836e,0x0804836f}, expr=(add[32] v69[32] 4954[32])}
    esp    = {defs={0x0804836e}, expr=(add[32] v68[32] 4[32])}
    eip    = {defs={0x08048375,0x0804837b,0x0804837d}, expr=(ite[32] (zerop[1] (bv-and[32] v74[32] v74[32])) 0x08048384[32] 0x0804837f[32])}
    pf     = {defs={0x08048375,0x0804837b}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v74[32] v74[32])))))))}
    sf     = {defs={0x08048375,0x0804837b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v74[32] v74[32]))}
    zf     = {defs={0x08048375,0x0804837b}, expr=(zerop[1] (bv-and[32] v74[32] v74[32]))}
    af     = {defs={}, expr=v79[1]}
    cf     = {defs={}, expr=0[1]}
    of     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 3[32])} value={defs={0x08048375}, expr=(extract[8] 24[32] 32[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 2[32])} value={defs={0x08048375}, expr=(extract[8] 16[32] 24[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] (add[32] v69[32] 4954[32]) -4[32]) 1[32])} value={defs={0x08048375}, expr=(extract[8] 8[32] 16[32] v74[32])}
    addr={defs={0x0804836e,0x0804836f,0x08048375}, expr=(add[32] (add[32] v69[32] 4954[32]) -4[32])} value={defs={0x08048375}, expr=(extract[8] 0[32] 8[32] v74[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 3[32])} value={defs={0x0804836e}, expr=(extract[8] 24[32] 32[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 2[32])} value={defs={0x0804836e}, expr=(extract[8] 16[32] 24[32] v69[32])}
    addr={defs={0x0804836e}, expr=(add[32] v68[32] 1[32])} value={defs={0x0804836e}, expr=(extract[8] 8[32] 16[32] v69[32])}
    addr={defs={}, expr=v68[32]} value={defs={0x0804836e}, expr=(extract[8] 0[32] 8[32] v69[32])}
== Interval ==
registers:
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048384[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    af     = 0..1[1]
    cf     = 0[1]
    of     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
== PartialSymbolic ==
registers:
    esp    = v159-0x4[32]
    eip    = 0x8048330[32]
memory:
    addr=v159-0x4[32] value=0x8048384[32]
== Symbolic ==
registers:
    esp    = {defs={0x0804837f}, expr=(add[32] v81[32] -4[32])}
    eip    = {defs={}, expr=0x08048330[32]}
memory:
    addr={defs={0x0804837f}, expr=(add[32] (add[32] v81[32] -4[32]) 3[32])} value={defs={0x0804837f}, expr=8[8]}
    addr={defs={0x0804837f}, expr=(add[32] (add[32] v81[32] -4[32]) 2[32])} value={defs={0x0804837f}, expr=4[8]}
    addr={defs={0x0804837f}, expr=(add[32] (add[32] v81[32] -4[32]) 1[32])} value={defs={0x0804837f}, expr=-125[8]}
    addr={defs={0x0804837f}, expr=(add[32] v81[32] -4[32])} value={defs={0x0804837f}, expr=-124[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x08048330[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
== PartialSymbolic ==
registers:
    eax    = v162[32]
    esp    = v161+0x4[32]
    eip    = 0x8048385[32]
memory:
    addr=v161[32] value=v162[32]
== Symbolic ==
registers:
    eax    = {defs={0x08048384}, expr=v84[32]}
    esp    = {defs={0x08048384}, expr=(add[32] v83[32] 4[32])}
    eip    = {defs={0x08048384}, expr=0x08048385[32]}
memory:
    addr={defs={0x08048384}, expr=(add[32] v83[32] 3[32])} value={defs={0x08048384}, expr=(extract[8] 24[32] 32[32] v84[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 2[32])} value={defs={0x08048384}, expr=(extract[8] 16[32] 24[32] v84[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 1[32])} value={defs={0x08048384}, expr=(extract[8] 8[32] 16[32] v84[32])}
    addr={defs={}, expr=v83[32]} value={defs={0x08048384}, expr=(extract[8] 0[32] 8[32] v84[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048385[32]
memory:
0x8048385:pop    ebx
== PartialSymbolic ==
registers:
    eax    = v162[32]
    ebx    = v164[32]
    esp    = v161+0x8[32]
    eip    = 0x8048386[32]
memory:
    addr=v161+0x4[32] value=v164[32]
    addr=v161[32] value=v162[32]
== Symbolic ==
registers:
    eax    = {defs={0x08048384}, expr=v84[32]}
    ebx    = {defs={0x08048385}, expr=v89[32]}
    esp    = {defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 4[32])}
    eip    = {defs={0x08048385}, expr=0x08048386[32]}
memory:
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 3[32])} value={defs={0x08048385}, expr=(extract[8] 24[32] 32[32] v89[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 2[32])} value={defs={0x08048385}, expr=(extract[8] 16[32] 24[32] v89[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 1[32])} value={defs={0x08048385}, expr=(extract[8] 8[32] 16[32] v89[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 4[32])} value={defs={0x08048385}, expr=(extract[8] 0[32] 8[32] v89[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 3[32])} value={defs={0x08048384}, expr=(extract[8] 24[32] 32[32] v84[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 2[32])} value={defs={0x08048384}, expr=(extract[8] 16[32] 24[32] v84[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 1[32])} value={defs={0x08048384}, expr=(extract[8] 8[32] 16[32] v84[32])}
    addr={defs={}, expr=v83[32]} value={defs={0x08048384}, expr=(extract[8] 0[32] 8[32] v84[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048386[32]
memory:
0x8048386:leave  
== PartialSymbolic ==
registers:
    eax    = v162[32]
    ebx    = v164[32]
    esp    = v166+0x4[32]
    ebp    = v167[32]
    eip    = 0x8048387[32]
memory:
    addr=v166[32] value=v167[32]
    addr=v161+0x4[32] value=v164[32]
    addr=v161[32] value=v162[32]
== Symbolic ==
registers:
    eax    = {defs={0x08048384}, expr=v84[32]}
    ebx    = {defs={0x08048385}, expr=v89[32]}
    esp    = {defs={0x08048386}, expr=(add[32] v94[32] 4[32])}
    ebp    = {defs={0x08048386}, expr=v95[32]}
    eip    = {defs={0x08048386}, expr=0x08048387[32]}
memory:
    addr={defs={0x08048386}, expr=(add[32] v94[32] 3[32])} value={defs={0x08048386}, expr=(extract[8] 24[32] 32[32] v95[32])}
    addr={defs={0x08048386}, expr=(add[32] v94[32] 2[32])} value={defs={0x08048386}, expr=(extract[8] 16[32] 24[32] v95[32])}
    addr={defs={0x08048386}, expr=(add[32] v94[32] 1[32])} value={defs={0x08048386}, expr=(extract[8] 8[32] 16[32] v95[32])}
    addr={defs={}, expr=v94[32]} value={defs={0x08048386}, expr=(extract[8] 0[32] 8[32] v95[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 3[32])} value={defs={0x08048385}, expr=(extract[8] 24[32] 32[32] v89[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 2[32])} value={defs={0x08048385}, expr=(extract[8] 16[32] 24[32] v89[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 1[32])} value={defs={0x08048385}, expr=(extract[8] 8[32] 16[32] v89[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 4[32])} value={defs={0x08048385}, expr=(extract[8] 0[32] 8[32] v89[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 3[32])} value={defs={0x08048384}, expr=(extract[8] 24[32] 32[32] v84[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 2[32])} value={defs={0x08048384}, expr=(extract[8] 16[32] 24[32] v84[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 1[32])} value={defs={0x08048384}, expr=(extract[8] 8[32] 16[32] v84[32])}
    addr={defs={}, expr=v83[32]} value={defs={0x08048384}, expr=(extract[8] 0[32] 8[32] v84[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048387[32]
memory:
0x8048387:ret    
== PartialSymbolic ==
registers:
    eax    = v162[32]
    ebx    = v164[32]
    esp    = v166+0x8[32]
    ebp    = v167[32]
    eip    = v229[32]
memory:
    addr=v166+0x4[32] value=v229[32]
    addr=v166[32] value=v167[32]
    addr=v161+0x4[32] value=v164[32]
    addr=v161[32] value=v162[32]
== Symbolic ==
registers:
    eax    = {defs={0x08048384}, expr=v84[32]}
    ebx    = {defs={0x08048385}, expr=v89[32]}
    esp    = {defs={0x08048386,0x08048387}, expr=(add[32] (add[32] v94[32] 4[32]) 4[32])}
    ebp    = {defs={0x08048386}, expr=v95[32]}
    eip    = {defs={0x08048387}, expr=v100[32]}
memory:
    addr={defs={0x08048386,0x08048387}, expr=(add[32] (add[32] v94[32] 4[32]) 3[32])} value={defs={0x08048387}, expr=(extract[8] 24[32] 32[32] v100[32])}
    addr={defs={0x08048386,0x08048387}, expr=(add[32] (add[32] v94[32] 4[32]) 2[32])} value={defs={0x08048387}, expr=(extract[8] 16[32] 24[32] v100[32])}
    addr={defs={0x08048386,0x08048387}, expr=(add[32] (add[32] v94[32] 4[32]) 1[32])} value={defs={0x08048387}, expr=(extract[8] 8[32] 16[32] v100[32])}
    addr={defs={0x08048386}, expr=(add[32] v94[32] 4[32])} value={defs={0x08048387}, expr=(extract[8] 0[32] 8[32] v100[32])}
    addr={defs={0x08048386}, expr=(add[32] v94[32] 3[32])} value={defs={0x08048386}, expr=(extract[8] 24[32] 32[32] v95[32])}
    addr={defs={0x08048386}, expr=(add[32] v94[32] 2[32])} value={defs={0x08048386}, expr=(extract[8] 16[32] 24[32] v95[32])}
    addr={defs={0x08048386}, expr=(add[32] v94[32] 1[32])} value={defs={0x08048386}, expr=(extract[8] 8[32] 16[32] v95[32])}
    addr={defs={}, expr=v94[32]} value={defs={0x08048386}, expr=(extract[8] 0[32] 8[32] v95[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 3[32])} value={defs={0x08048385}, expr=(extract[8] 24[32] 32[32] v89[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 2[32])} value={defs={0x08048385}, expr=(extract[8] 16[32] 24[32] v89[32])}
    addr={defs={0x08048384,0x08048385}, expr=(add[32] (add[32] v83[32] 4[32]) 1[32])} value={defs={0x08048385}, expr=(extract[8] 8[32] 16[32] v89[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 4[32])} value={defs={0x08048385}, expr=(extract[8] 0[32] 8[32] v89[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 3[32])} value={defs={0x08048384}, expr=(extract[8] 24[32] 32[32] v84[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 2[32])} value={defs={0x08048384}, expr=(extract[8] 16[32] 24[32] v84[32])}
    addr={defs={0x08048384}, expr=(add[32] v83[32] 1[32])} value={defs={0x08048384}, expr=(extract[8] 8[32] 16[32] v84[32])}
    addr={defs={}, expr=v83[32]} value={defs={0x08048384}, expr=(extract[8] 0[32] 8[32] v84[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
== PartialSymbolic ==
registers:
    esp    = v292-0x4[32]
    ebp    = v293[32]
    eip    = 0x8048391[32]
memory:
    addr=v292-0x4[32] value=v293[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048390}, expr=(add[32] v106[32] -4[32])}
    ebp    = {defs={}, expr=v107[32]}
    eip    = {defs={0x08048390}, expr=0x08048391[32]}
memory:
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] v106[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v107[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048391[32]
memory:
0x8048391:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v292-0x4[32]
    ebp    = v292-0x4[32]
    eip    = 0x8048393[32]
memory:
    addr=v292-0x4[32] value=v293[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048390}, expr=(add[32] v106[32] -4[32])}
    ebp    = {defs={0x08048390}, expr=(add[32] v106[32] -4[32])}
    eip    = {defs={0x08048391}, expr=0x08048393[32]}
memory:
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] v106[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v107[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048393[32]
memory:
0x8048393:sub    esp, 0x08
== PartialSymbolic ==
registers:
    esp    = v292-0xc[32]
    ebp    = v292-0x4[32]
    eip    = 0x8048396[32]
    pf     = -v308+0x1[1]
    sf     = v309[1]
    zf     = v310[1]
    af     = -v313+0x1[1]
    cf     = -v311+0x1[1]
    of     = v314[1]
memory:
    addr=v292-0x4[32] value=v293[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048390,0x08048393}, expr=(add[32] (add[32] v106[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048390}, expr=(add[32] v106[32] -4[32])}
    eip    = {defs={0x08048393}, expr=0x08048396[32]}
    pf     = {defs={0x08048390,0x08048393}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v106[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v106[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v106[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v106[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v106[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v106[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v106[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v106[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048390,0x08048393}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v106[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048390,0x08048393}, expr=(zerop[1] (add[32] (add[32] v106[32] -4[32]) -8[32]))}
    af     = {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v106[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v106[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048390,0x08048393}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v106[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v106[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048390,0x08048393}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v106[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v106[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v106[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v106[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] v106[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v107[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048396[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
== PartialSymbolic ==
registers:
    esp    = v292-0xc[32]
    ebp    = v292-0x4[32]
    eip    = 0x804839d[32]
    pf     = -v357+0x1[1]
    sf     = v358[1]
    zf     = v359[1]
    af     = -v362+0x1[1]
    cf     = -v360+0x1[1]
    of     = v363[1]
memory:
    addr=0x80496f4[32] value=v315[8]
    addr=v292-0x4[32] value=v293[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048390,0x08048393}, expr=(add[32] (add[32] v106[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048390}, expr=(add[32] v106[32] -4[32])}
    eip    = {defs={0x08048396}, expr=0x0804839d[32]}
    pf     = {defs={0x08048396}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v108[8]) (extract[1] 1[32] 2[32] v108[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v108[8]) (extract[1] 3[32] 4[32] v108[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v108[8]) (extract[1] 5[32] 6[32] v108[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v108[8]) (extract[1] 7[32] 8[32] v108[8])))))}
    sf     = {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v108[8])}
    zf     = {defs={0x08048396}, expr=(zerop[1] v108[8])}
    af     = {defs={0x08048396}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v108[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v108[8]) -256[9]))))))}
    cf     = {defs={0x08048396}, expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v108[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v108[8]) -256[9]))))))}
    of     = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v108[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v108[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v108[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v108[8]) -256[9]))))))}
memory:
    addr={defs={0x08048396}, expr=0x080496f4[32]} value={defs={}, expr=v108[8]}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] v106[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v107[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804839d[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0[1]
    cf     = 0[1]
    of     = 0[1]
memory:
0x804839d:jne    0x080483cc<<Insn>>
== PartialSymbolic ==
registers:
    esp    = v292-0xc[32]
    ebp    = v292-0x4[32]
    eip    = v364[32]
    pf     = -v357+0x1[1]
    sf     = v358[1]
    zf     = v359[1]
    af     = -v362+0x1[1]
    cf     = -v360+0x1[1]
    of     = v363[1]
memory:
    addr=0x80496f4[32] value=v315[8]
    addr=v292-0x4[32] value=v293[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048390,0x08048393}, expr=(add[32] (add[32] v106[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048390}, expr=(add[32] v106[32] -4[32])}
    eip    = {defs={0x08048396,0x0804839d}, expr=(ite[32] (invert[1] (zerop[1] v108[8])) 0x080483cc[32] 0x0804839f[32])}
    pf     = {defs={0x08048396}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v108[8]) (extract[1] 1[32] 2[32] v108[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v108[8]) (extract[1] 3[32] 4[32] v108[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v108[8]) (extract[1] 5[32] 6[32] v108[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v108[8]) (extract[1] 7[32] 8[32] v108[8])))))}
    sf     = {defs={0x08048396}, expr=(extract[1] 7[32] 8[32] v108[8])}
    zf     = {defs={0x08048396}, expr=(zerop[1] v108[8])}
    af     = {defs={0x08048396}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v108[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v108[8]) -256[9]))))))}
    cf     = {defs={0x08048396}, expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v108[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v108[8]) -256[9]))))))}
    of     = {defs={0x08048396}, expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v108[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v108[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v108[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v108[8]) -256[9]))))))}
memory:
    addr={defs={0x08048396}, expr=0x080496f4[32]} value={defs={}, expr=v108[8]}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 3[32])} value={defs={0x08048390}, expr=(extract[8] 24[32] 32[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 2[32])} value={defs={0x08048390}, expr=(extract[8] 16[32] 24[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] (add[32] v106[32] -4[32]) 1[32])} value={defs={0x08048390}, expr=(extract[8] 8[32] 16[32] v107[32])}
    addr={defs={0x08048390}, expr=(add[32] v106[32] -4[32])} value={defs={0x08048390}, expr=(extract[8] 0[32] 8[32] v107[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804839f, 0x080483cc[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0[1]
    cf     = 0[1]
    of     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
== PartialSymbolic ==
registers:
    eax    = v366[32]
    eip    = 0x80483a4[32]
memory:
    addr=0x80496f0[32] value=v366[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804839f}, expr=v111[32]}
    eip    = {defs={0x0804839f}, expr=0x080483a4[32]}
memory:
    addr={defs={0x0804839f}, expr=0x080496f3[32]} value={defs={0x0804839f}, expr=(extract[8] 24[32] 32[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f2[32]} value={defs={0x0804839f}, expr=(extract[8] 16[32] 24[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f1[32]} value={defs={0x0804839f}, expr=(extract[8] 8[32] 16[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f0[32]} value={defs={0x0804839f}, expr=(extract[8] 0[32] 8[32] v111[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    eip    = 0x080483a4[32]
memory:
0x80483a4:mov    edx, DWORD PTR ds:[eax]
== PartialSymbolic ==
registers:
    eax    = v366[32]
    edx    = v368[32]
    eip    = 0x80483a6[32]
memory:
    addr=v366[32] value=v368[32]
    addr=0x80496f0[32] value=v366[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804839f}, expr=v111[32]}
    edx    = {defs={0x080483a4}, expr=v116[32]}
    eip    = {defs={0x080483a4}, expr=0x080483a6[32]}
memory:
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 3[32])} value={defs={0x080483a4}, expr=(extract[8] 24[32] 32[32] v116[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 2[32])} value={defs={0x080483a4}, expr=(extract[8] 16[32] 24[32] v116[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 1[32])} value={defs={0x080483a4}, expr=(extract[8] 8[32] 16[32] v116[32])}
    addr={defs={0x0804839f}, expr=v111[32]} value={defs={0x080483a4}, expr=(extract[8] 0[32] 8[32] v116[32])}
    addr={defs={0x0804839f}, expr=0x080496f3[32]} value={defs={0x0804839f}, expr=(extract[8] 24[32] 32[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f2[32]} value={defs={0x0804839f}, expr=(extract[8] 16[32] 24[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f1[32]} value={defs={0x0804839f}, expr=(extract[8] 8[32] 16[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f0[32]} value={defs={0x0804839f}, expr=(extract[8] 0[32] 8[32] v111[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    eip    = 0x080483a6[32]
memory:
0x80483a6:test   edx, edx
== PartialSymbolic ==
registers:
    eax    = v366[32]
    edx    = v368[32]
    eip    = 0x80483a8[32]
    pf     = -v410+0x1[1]
    sf     = v411[1]
    zf     = v412[1]
    of     = 0x0[1]
    af     = v413[1]
    cf     = 0x0[1]
memory:
    addr=v366[32] value=v368[32]
    addr=0x80496f0[32] value=v366[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804839f}, expr=v111[32]}
    edx    = {defs={0x080483a4}, expr=v116[32]}
    eip    = {defs={0x080483a6}, expr=0x080483a8[32]}
    pf     = {defs={0x080483a4,0x080483a6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32])))))))}
    sf     = {defs={0x080483a4,0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v116[32] v116[32]))}
    zf     = {defs={0x080483a4,0x080483a6}, expr=(zerop[1] (bv-and[32] v116[32] v116[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v121[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 3[32])} value={defs={0x080483a4}, expr=(extract[8] 24[32] 32[32] v116[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 2[32])} value={defs={0x080483a4}, expr=(extract[8] 16[32] 24[32] v116[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 1[32])} value={defs={0x080483a4}, expr=(extract[8] 8[32] 16[32] v116[32])}
    addr={defs={0x0804839f}, expr=v111[32]} value={defs={0x080483a4}, expr=(extract[8] 0[32] 8[32] v116[32])}
    addr={defs={0x0804839f}, expr=0x080496f3[32]} value={defs={0x0804839f}, expr=(extract[8] 24[32] 32[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f2[32]} value={defs={0x0804839f}, expr=(extract[8] 16[32] 24[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f1[32]} value={defs={0x0804839f}, expr=(extract[8] 8[32] 16[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f0[32]} value={defs={0x0804839f}, expr=(extract[8] 0[32] 8[32] v111[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    eip    = 0x080483a8[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x80483a8:je     0x080483c5<<Insn>>
== PartialSymbolic ==
registers:
    eax    = v366[32]
    edx    = v368[32]
    eip    = v414[32]
    pf     = -v410+0x1[1]
    sf     = v411[1]
    zf     = v412[1]
    of     = 0x0[1]
    af     = v413[1]
    cf     = 0x0[1]
memory:
    addr=v366[32] value=v368[32]
    addr=0x80496f0[32] value=v366[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804839f}, expr=v111[32]}
    edx    = {defs={0x080483a4}, expr=v116[32]}
    eip    = {defs={0x080483a4,0x080483a6,0x080483a8}, expr=(ite[32] (zerop[1] (bv-and[32] v116[32] v116[32])) 0x080483c5[32] 0x080483aa[32])}
    pf     = {defs={0x080483a4,0x080483a6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v116[32] v116[32])))))))}
    sf     = {defs={0x080483a4,0x080483a6}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v116[32] v116[32]))}
    zf     = {defs={0x080483a4,0x080483a6}, expr=(zerop[1] (bv-and[32] v116[32] v116[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v121[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 3[32])} value={defs={0x080483a4}, expr=(extract[8] 24[32] 32[32] v116[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 2[32])} value={defs={0x080483a4}, expr=(extract[8] 16[32] 24[32] v116[32])}
    addr={defs={0x0804839f,0x080483a4}, expr=(add[32] v111[32] 1[32])} value={defs={0x080483a4}, expr=(extract[8] 8[32] 16[32] v116[32])}
    addr={defs={0x0804839f}, expr=v111[32]} value={defs={0x080483a4}, expr=(extract[8] 0[32] 8[32] v116[32])}
    addr={defs={0x0804839f}, expr=0x080496f3[32]} value={defs={0x0804839f}, expr=(extract[8] 24[32] 32[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f2[32]} value={defs={0x0804839f}, expr=(extract[8] 16[32] 24[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f1[32]} value={defs={0x0804839f}, expr=(extract[8] 8[32] 16[32] v111[32])}
    addr={defs={0x0804839f}, expr=0x080496f0[32]} value={defs={0x0804839f}, expr=(extract[8] 0[32] 8[32] v111[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    eip    = 0x080483c5[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
== PartialSymbolic ==
registers:
    esi    = v416[32]
    eip    = 0x80483b0[32]
memory:
== Symbolic ==
registers:
    esi    = {defs={}, expr=v123[32]}
    eip    = {defs={0x080483aa}, expr=0x080483b0[32]}
memory:
== Interval ==
registers:
    esi    = doubleword[32]
    eip    = 0x080483b0[32]
memory:
0x80483b0:add    eax, 0x04
== PartialSymbolic ==
registers:
    eax    = v417+0x4[32]
    esi    = v416[32]
    eip    = 0x80483b3[32]
    pf     = -v432+0x1[1]
    sf     = v433[1]
    zf     = v434[1]
    af     = v437[1]
    cf     = v435[1]
    of     = v438[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={0x080483b0}, expr=(add[32] v124[32] 4[32])}
    esi    = {defs={}, expr=v123[32]}
    eip    = {defs={0x080483b0}, expr=0x080483b3[32]}
    pf     = {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))))))}
    sf     = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] v124[32] 4[32]))}
    zf     = {defs={0x080483b0}, expr=(zerop[1] (add[32] v124[32] 4[32]))}
    af     = {defs={0x080483b0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33])))))}
    cf     = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33])))))}
    of     = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33]))))))}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x080483b3[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
== PartialSymbolic ==
registers:
    eax    = v417+0x4[32]
    esi    = v416[32]
    eip    = 0x80483b8[32]
    pf     = -v432+0x1[1]
    sf     = v433[1]
    zf     = v434[1]
    af     = v437[1]
    cf     = v435[1]
    of     = v438[1]
memory:
    addr=0x80496f0[32] value=v417+0x4[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483b0}, expr=(add[32] v124[32] 4[32])}
    esi    = {defs={}, expr=v123[32]}
    eip    = {defs={0x080483b3}, expr=0x080483b8[32]}
    pf     = {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))))))}
    sf     = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] v124[32] 4[32]))}
    zf     = {defs={0x080483b0}, expr=(zerop[1] (add[32] v124[32] 4[32]))}
    af     = {defs={0x080483b0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33])))))}
    cf     = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33])))))}
    of     = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33]))))))}
memory:
    addr={defs={0x080483b3}, expr=0x080496f3[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 24[32] 32[32] (add[32] v124[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f2[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 16[32] 24[32] (add[32] v124[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f1[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 8[32] 16[32] (add[32] v124[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f0[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))}
== Interval ==
registers:
    eax    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x080483b8[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80483b8:call   edx
== PartialSymbolic ==
registers:
    eax    = v417+0x4[32]
    edx    = v440[32]
    esp    = v439-0x4[32]
    esi    = v416[32]
    eip    = v440[32]
    pf     = -v432+0x1[1]
    sf     = v433[1]
    zf     = v434[1]
    af     = v437[1]
    cf     = v435[1]
    of     = v438[1]
memory:
    addr=v439-0x4[32] value=0x80483ba[32]
    addr=0x80496f0[32] value=v417+0x4[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483b0}, expr=(add[32] v124[32] 4[32])}
    edx    = {defs={}, expr=v126[32]}
    esp    = {defs={0x080483b8}, expr=(add[32] v125[32] -4[32])}
    esi    = {defs={}, expr=v123[32]}
    eip    = {defs={}, expr=v126[32]}
    pf     = {defs={0x080483b0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v124[32] 4[32])))))))}
    sf     = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (add[32] v124[32] 4[32]))}
    zf     = {defs={0x080483b0}, expr=(zerop[1] (add[32] v124[32] 4[32]))}
    af     = {defs={0x080483b0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33])))))}
    cf     = {defs={0x080483b0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33])))))}
    of     = {defs={0x080483b0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v124[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v124[32]) 4[33]))))))}
memory:
    addr={defs={0x080483b8}, expr=(add[32] (add[32] v125[32] -4[32]) 3[32])} value={defs={0x080483b8}, expr=8[8]}
    addr={defs={0x080483b8}, expr=(add[32] (add[32] v125[32] -4[32]) 2[32])} value={defs={0x080483b8}, expr=4[8]}
    addr={defs={0x080483b8}, expr=(add[32] (add[32] v125[32] -4[32]) 1[32])} value={defs={0x080483b8}, expr=-125[8]}
    addr={defs={0x080483b8}, expr=(add[32] v125[32] -4[32])} value={defs={0x080483b8}, expr=-70[8]}
    addr={defs={0x080483b3}, expr=0x080496f3[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 24[32] 32[32] (add[32] v124[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f2[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 16[32] 24[32] (add[32] v124[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f1[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 8[32] 16[32] (add[32] v124[32] 4[32]))}
    addr={defs={0x080483b3}, expr=0x080496f0[32]} value={defs={0x080483b0,0x080483b3}, expr=(extract[8] 0[32] 8[32] (add[32] v124[32] 4[32]))}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    esp    = doubleword[32]
    esi    = doubleword[32]
    eip    = doubleword[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
== PartialSymbolic ==
registers:
    eax    = v442[32]
    eip    = 0x80483bf[32]
memory:
    addr=0x80496f0[32] value=v442[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483ba}, expr=v128[32]}
    eip    = {defs={0x080483ba}, expr=0x080483bf[32]}
memory:
    addr={defs={0x080483ba}, expr=0x080496f3[32]} value={defs={0x080483ba}, expr=(extract[8] 24[32] 32[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f2[32]} value={defs={0x080483ba}, expr=(extract[8] 16[32] 24[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f1[32]} value={defs={0x080483ba}, expr=(extract[8] 8[32] 16[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f0[32]} value={defs={0x080483ba}, expr=(extract[8] 0[32] 8[32] v128[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    eip    = 0x080483bf[32]
memory:
0x80483bf:mov    edx, DWORD PTR ds:[eax]
== PartialSymbolic ==
registers:
    eax    = v442[32]
    edx    = v444[32]
    eip    = 0x80483c1[32]
memory:
    addr=v442[32] value=v444[32]
    addr=0x80496f0[32] value=v442[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483ba}, expr=v128[32]}
    edx    = {defs={0x080483bf}, expr=v133[32]}
    eip    = {defs={0x080483bf}, expr=0x080483c1[32]}
memory:
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 3[32])} value={defs={0x080483bf}, expr=(extract[8] 24[32] 32[32] v133[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 2[32])} value={defs={0x080483bf}, expr=(extract[8] 16[32] 24[32] v133[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 1[32])} value={defs={0x080483bf}, expr=(extract[8] 8[32] 16[32] v133[32])}
    addr={defs={0x080483ba}, expr=v128[32]} value={defs={0x080483bf}, expr=(extract[8] 0[32] 8[32] v133[32])}
    addr={defs={0x080483ba}, expr=0x080496f3[32]} value={defs={0x080483ba}, expr=(extract[8] 24[32] 32[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f2[32]} value={defs={0x080483ba}, expr=(extract[8] 16[32] 24[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f1[32]} value={defs={0x080483ba}, expr=(extract[8] 8[32] 16[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f0[32]} value={defs={0x080483ba}, expr=(extract[8] 0[32] 8[32] v128[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    eip    = 0x080483c1[32]
memory:
0x80483c1:test   edx, edx
== PartialSymbolic ==
registers:
    eax    = v442[32]
    edx    = v444[32]
    eip    = 0x80483c3[32]
    pf     = -v486+0x1[1]
    sf     = v487[1]
    zf     = v488[1]
    of     = 0x0[1]
    af     = v489[1]
    cf     = 0x0[1]
memory:
    addr=v442[32] value=v444[32]
    addr=0x80496f0[32] value=v442[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483ba}, expr=v128[32]}
    edx    = {defs={0x080483bf}, expr=v133[32]}
    eip    = {defs={0x080483c1}, expr=0x080483c3[32]}
    pf     = {defs={0x080483bf,0x080483c1}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32])))))))}
    sf     = {defs={0x080483bf,0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v133[32] v133[32]))}
    zf     = {defs={0x080483bf,0x080483c1}, expr=(zerop[1] (bv-and[32] v133[32] v133[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v138[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 3[32])} value={defs={0x080483bf}, expr=(extract[8] 24[32] 32[32] v133[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 2[32])} value={defs={0x080483bf}, expr=(extract[8] 16[32] 24[32] v133[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 1[32])} value={defs={0x080483bf}, expr=(extract[8] 8[32] 16[32] v133[32])}
    addr={defs={0x080483ba}, expr=v128[32]} value={defs={0x080483bf}, expr=(extract[8] 0[32] 8[32] v133[32])}
    addr={defs={0x080483ba}, expr=0x080496f3[32]} value={defs={0x080483ba}, expr=(extract[8] 24[32] 32[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f2[32]} value={defs={0x080483ba}, expr=(extract[8] 16[32] 24[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f1[32]} value={defs={0x080483ba}, expr=(extract[8] 8[32] 16[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f0[32]} value={defs={0x080483ba}, expr=(extract[8] 0[32] 8[32] v128[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    eip    = 0x080483c3[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x80483c3:jne    0x080483b0<<Insn>>
== PartialSymbolic ==
registers:
    eax    = v442[32]
    edx    = v444[32]
    eip    = v490[32]
    pf     = -v486+0x1[1]
    sf     = v487[1]
    zf     = v488[1]
    of     = 0x0[1]
    af     = v489[1]
    cf     = 0x0[1]
memory:
    addr=v442[32] value=v444[32]
    addr=0x80496f0[32] value=v442[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483ba}, expr=v128[32]}
    edx    = {defs={0x080483bf}, expr=v133[32]}
    eip    = {defs={0x080483bf,0x080483c1,0x080483c3}, expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] v133[32] v133[32]))) 0x080483b0[32] 0x080483c5[32])}
    pf     = {defs={0x080483bf,0x080483c1}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v133[32] v133[32])))))))}
    sf     = {defs={0x080483bf,0x080483c1}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v133[32] v133[32]))}
    zf     = {defs={0x080483bf,0x080483c1}, expr=(zerop[1] (bv-and[32] v133[32] v133[32]))}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v138[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 3[32])} value={defs={0x080483bf}, expr=(extract[8] 24[32] 32[32] v133[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 2[32])} value={defs={0x080483bf}, expr=(extract[8] 16[32] 24[32] v133[32])}
    addr={defs={0x080483ba,0x080483bf}, expr=(add[32] v128[32] 1[32])} value={defs={0x080483bf}, expr=(extract[8] 8[32] 16[32] v133[32])}
    addr={defs={0x080483ba}, expr=v128[32]} value={defs={0x080483bf}, expr=(extract[8] 0[32] 8[32] v133[32])}
    addr={defs={0x080483ba}, expr=0x080496f3[32]} value={defs={0x080483ba}, expr=(extract[8] 24[32] 32[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f2[32]} value={defs={0x080483ba}, expr=(extract[8] 16[32] 24[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f1[32]} value={defs={0x080483ba}, expr=(extract[8] 8[32] 16[32] v128[32])}
    addr={defs={0x080483ba}, expr=0x080496f0[32]} value={defs={0x080483ba}, expr=(extract[8] 0[32] 8[32] v128[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    eip    = 0x080483c5[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
== PartialSymbolic ==
registers:
    eip    = 0x80483cc[32]
memory:
    addr=0x80496f4[32] value=0x1[8]
== Symbolic ==
registers:
    eip    = {defs={0x080483c5}, expr=0x080483cc[32]}
memory:
    addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={}, expr=1[8]}
== Interval ==
registers:
    eip    = 0x080483cc[32]
memory:
0x80483cc:leave  
== PartialSymbolic ==
registers:
    esp    = v492+0x4[32]
    ebp    = v493[32]
    eip    = 0x80483cd[32]
memory:
    addr=v492[32] value=v493[32]
    addr=0x80496f4[32] value=0x1[8]
== Symbolic ==
registers:
    esp    = {defs={0x080483cc}, expr=(add[32] v140[32] 4[32])}
    ebp    = {defs={0x080483cc}, expr=v141[32]}
    eip    = {defs={0x080483cc}, expr=0x080483cd[32]}
memory:
    addr={defs={0x080483cc}, expr=(add[32] v140[32] 3[32])} value={defs={0x080483cc}, expr=(extract[8] 24[32] 32[32] v141[32])}
    addr={defs={0x080483cc}, expr=(add[32] v140[32] 2[32])} value={defs={0x080483cc}, expr=(extract[8] 16[32] 24[32] v141[32])}
    addr={defs={0x080483cc}, expr=(add[32] v140[32] 1[32])} value={defs={0x080483cc}, expr=(extract[8] 8[32] 16[32] v141[32])}
    addr={defs={}, expr=v140[32]} value={defs={0x080483cc}, expr=(extract[8] 0[32] 8[32] v141[32])}
    addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={}, expr=1[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080483cd[32]
memory:
0x80483cd:ret    
== PartialSymbolic ==
registers:
    esp    = v492+0x8[32]
    ebp    = v493[32]
    eip    = v521[32]
memory:
    addr=v492+0x4[32] value=v521[32]
    addr=v492[32] value=v493[32]
    addr=0x80496f4[32] value=0x1[8]
== Symbolic ==
registers:
    esp    = {defs={0x080483cc,0x080483cd}, expr=(add[32] (add[32] v140[32] 4[32]) 4[32])}
    ebp    = {defs={0x080483cc}, expr=v141[32]}
    eip    = {defs={0x080483cd}, expr=v146[32]}
memory:
    addr={defs={0x080483cc,0x080483cd}, expr=(add[32] (add[32] v140[32] 4[32]) 3[32])} value={defs={0x080483cd}, expr=(extract[8] 24[32] 32[32] v146[32])}
    addr={defs={0x080483cc,0x080483cd}, expr=(add[32] (add[32] v140[32] 4[32]) 2[32])} value={defs={0x080483cd}, expr=(extract[8] 16[32] 24[32] v146[32])}
    addr={defs={0x080483cc,0x080483cd}, expr=(add[32] (add[32] v140[32] 4[32]) 1[32])} value={defs={0x080483cd}, expr=(extract[8] 8[32] 16[32] v146[32])}
    addr={defs={0x080483cc}, expr=(add[32] v140[32] 4[32])} value={defs={0x080483cd}, expr=(extract[8] 0[32] 8[32] v146[32])}
    addr={defs={0x080483cc}, expr=(add[32] v140[32] 3[32])} value={defs={0x080483cc}, expr=(extract[8] 24[32] 32[32] v141[32])}
    addr={defs={0x080483cc}, expr=(add[32] v140[32] 2[32])} value={defs={0x080483cc}, expr=(extract[8] 16[32] 24[32] v141[32])}
    addr={defs={0x080483cc}, expr=(add[32] v140[32] 1[32])} value={defs={0x080483cc}, expr=(extract[8] 8[32] 16[32] v141[32])}
    addr={defs={}, expr=v140[32]} value={defs={0x080483cc}, expr=(extract[8] 0[32] 8[32] v141[32])}
    addr={defs={0x080483c5}, expr=0x080496f4[32]} value={defs={}, expr=1[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
== PartialSymbolic ==
registers:
    esp    = v550-0x4[32]
    ebp    = v551[32]
    eip    = 0x80483d1[32]
memory:
    addr=v550-0x4[32] value=v551[32]
== Symbolic ==
registers:
    esp    = {defs={0x080483d0}, expr=(add[32] v152[32] -4[32])}
    ebp    = {defs={}, expr=v153[32]}
    eip    = {defs={0x080483d0}, expr=0x080483d1[32]}
memory:
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] v152[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v153[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080483d1[32]
memory:
0x80483d1:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v550-0x4[32]
    ebp    = v550-0x4[32]
    eip    = 0x80483d3[32]
memory:
    addr=v550-0x4[32] value=v551[32]
== Symbolic ==
registers:
    esp    = {defs={0x080483d0}, expr=(add[32] v152[32] -4[32])}
    ebp    = {defs={0x080483d0}, expr=(add[32] v152[32] -4[32])}
    eip    = {defs={0x080483d1}, expr=0x080483d3[32]}
memory:
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] v152[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v153[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080483d3[32]
memory:
0x80483d3:sub    esp, 0x08
== PartialSymbolic ==
registers:
    esp    = v550-0xc[32]
    ebp    = v550-0x4[32]
    eip    = 0x80483d6[32]
    pf     = -v566+0x1[1]
    sf     = v567[1]
    zf     = v568[1]
    af     = -v571+0x1[1]
    cf     = -v569+0x1[1]
    of     = v572[1]
memory:
    addr=v550-0x4[32] value=v551[32]
== Symbolic ==
registers:
    esp    = {defs={0x080483d0,0x080483d3}, expr=(add[32] (add[32] v152[32] -4[32]) -8[32])}
    ebp    = {defs={0x080483d0}, expr=(add[32] v152[32] -4[32])}
    eip    = {defs={0x080483d3}, expr=0x080483d6[32]}
    pf     = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))}
    zf     = {defs={0x080483d0,0x080483d3}, expr=(zerop[1] (add[32] (add[32] v152[32] -4[32]) -8[32]))}
    af     = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] v152[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v153[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080483d6[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
== PartialSymbolic ==
registers:
    eax    = v573[32]
    esp    = v550-0xc[32]
    ebp    = v550-0x4[32]
    eip    = 0x80483db[32]
    pf     = -v566+0x1[1]
    sf     = v567[1]
    zf     = v568[1]
    af     = -v571+0x1[1]
    cf     = -v569+0x1[1]
    of     = v572[1]
memory:
    addr=0x80495f8[32] value=v573[32]
    addr=v550-0x4[32] value=v551[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483d6}, expr=v154[32]}
    esp    = {defs={0x080483d0,0x080483d3}, expr=(add[32] (add[32] v152[32] -4[32]) -8[32])}
    ebp    = {defs={0x080483d0}, expr=(add[32] v152[32] -4[32])}
    eip    = {defs={0x080483d6}, expr=0x080483db[32]}
    pf     = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v152[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x080483d0,0x080483d3}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v152[32] -4[32]) -8[32]))}
    zf     = {defs={0x080483d0,0x080483d3}, expr=(zerop[1] (add[32] (add[32] v152[32] -4[32]) -8[32]))}
    af     = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x080483d0,0x080483d3}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x080483d0,0x080483d3}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v152[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x080483d6}, expr=0x080495fb[32]} value={defs={0x080483d6}, expr=(extract[8] 24[32] 32[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495fa[32]} value={defs={0x080483d6}, expr=(extract[8] 16[32] 24[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495f9[32]} value={defs={0x080483d6}, expr=(extract[8] 8[32] 16[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495f8[32]} value={defs={0x080483d6}, expr=(extract[8] 0[32] 8[32] v154[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] v152[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v153[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080483db[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80483db:test   eax, eax
== PartialSymbolic ==
registers:
    eax    = v573[32]
    esp    = v550-0xc[32]
    ebp    = v550-0x4[32]
    eip    = 0x80483dd[32]
    pf     = -v615+0x1[1]
    sf     = v616[1]
    zf     = v617[1]
    af     = v618[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=0x80495f8[32] value=v573[32]
    addr=v550-0x4[32] value=v551[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483d6}, expr=v154[32]}
    esp    = {defs={0x080483d0,0x080483d3}, expr=(add[32] (add[32] v152[32] -4[32]) -8[32])}
    ebp    = {defs={0x080483d0}, expr=(add[32] v152[32] -4[32])}
    eip    = {defs={0x080483db}, expr=0x080483dd[32]}
    pf     = {defs={0x080483d6,0x080483db}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32])))))))}
    sf     = {defs={0x080483d6,0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v154[32] v154[32]))}
    zf     = {defs={0x080483d6,0x080483db}, expr=(zerop[1] (bv-and[32] v154[32] v154[32]))}
    af     = {defs={}, expr=v159[1]}
    cf     = {defs={}, expr=0[1]}
    of     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x080483d6}, expr=0x080495fb[32]} value={defs={0x080483d6}, expr=(extract[8] 24[32] 32[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495fa[32]} value={defs={0x080483d6}, expr=(extract[8] 16[32] 24[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495f9[32]} value={defs={0x080483d6}, expr=(extract[8] 8[32] 16[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495f8[32]} value={defs={0x080483d6}, expr=(extract[8] 0[32] 8[32] v154[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] v152[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v153[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080483dd[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    af     = 0..1[1]
    cf     = 0[1]
    of     = 0[1]
memory:
0x80483dd:je     0x08048400<<Insn>>
== PartialSymbolic ==
registers:
    eax    = v573[32]
    esp    = v550-0xc[32]
    ebp    = v550-0x4[32]
    eip    = v619[32]
    pf     = -v615+0x1[1]
    sf     = v616[1]
    zf     = v617[1]
    af     = v618[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=0x80495f8[32] value=v573[32]
    addr=v550-0x4[32] value=v551[32]
== Symbolic ==
registers:
    eax    = {defs={0x080483d6}, expr=v154[32]}
    esp    = {defs={0x080483d0,0x080483d3}, expr=(add[32] (add[32] v152[32] -4[32]) -8[32])}
    ebp    = {defs={0x080483d0}, expr=(add[32] v152[32] -4[32])}
    eip    = {defs={0x080483d6,0x080483db,0x080483dd}, expr=(ite[32] (zerop[1] (bv-and[32] v154[32] v154[32])) 0x08048400[32] 0x080483df[32])}
    pf     = {defs={0x080483d6,0x080483db}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v154[32] v154[32])))))))}
    sf     = {defs={0x080483d6,0x080483db}, expr=(extract[1] 31[32] 32[32] (bv-and[32] v154[32] v154[32]))}
    zf     = {defs={0x080483d6,0x080483db}, expr=(zerop[1] (bv-and[32] v154[32] v154[32]))}
    af     = {defs={}, expr=v159[1]}
    cf     = {defs={}, expr=0[1]}
    of     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x080483d6}, expr=0x080495fb[32]} value={defs={0x080483d6}, expr=(extract[8] 24[32] 32[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495fa[32]} value={defs={0x080483d6}, expr=(extract[8] 16[32] 24[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495f9[32]} value={defs={0x080483d6}, expr=(extract[8] 8[32] 16[32] v154[32])}
    addr={defs={0x080483d6}, expr=0x080495f8[32]} value={defs={0x080483d6}, expr=(extract[8] 0[32] 8[32] v154[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 3[32])} value={defs={0x080483d0}, expr=(extract[8] 24[32] 32[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 2[32])} value={defs={0x080483d0}, expr=(extract[8] 16[32] 24[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] (add[32] v152[32] -4[32]) 1[32])} value={defs={0x080483d0}, expr=(extract[8] 8[32] 16[32] v153[32])}
    addr={defs={0x080483d0}, expr=(add[32] v152[32] -4[32])} value={defs={0x080483d0}, expr=(extract[8] 0[32] 8[32] v153[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048400[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    af     = 0..1[1]
    cf     = 0[1]
    of     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    eip    = 0x80483e4[32]
memory:
== Symbolic ==
registers:
    eax    = {defs={}, expr=0[32]}
    eip    = {defs={0x080483df}, expr=0x080483e4[32]}
memory:
== Interval ==
registers:
    eax    = 0[32]
    eip    = 0x080483e4[32]
memory:
0x80483e4:test   eax, eax
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    eip    = 0x80483e6[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v621[1]
    cf     = 0x0[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={}, expr=0[32]}
    eip    = {defs={0x080483e4}, expr=0x080483e6[32]}
    pf     = {defs={0x080483e4}, expr=1[1]}
    sf     = {defs={0x080483e4}, expr=0[1]}
    zf     = {defs={0x080483e4}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v161[1]}
    cf     = {defs={}, expr=0[1]}
memory:
== Interval ==
registers:
    eax    = 0[32]
    eip    = 0x080483e6[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x80483e6:je     0x08048400<<Insn>>
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    eip    = 0x8048400[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v621[1]
    cf     = 0x0[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={}, expr=0[32]}
    eip    = {defs={0x080483e4,0x080483e6}, expr=0x08048400[32]}
    pf     = {defs={0x080483e4}, expr=1[1]}
    sf     = {defs={0x080483e4}, expr=0[1]}
    zf     = {defs={0x080483e4}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v161[1]}
    cf     = {defs={}, expr=0[1]}
memory:
== Interval ==
registers:
    eax    = 0[32]
    eip    = 0x08048400[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048400:mov    esp, ebp
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    esp    = v622[32]
    ebp    = v622[32]
    eip    = 0x8048402[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v621[1]
    cf     = 0x0[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={}, expr=0[32]}
    esp    = {defs={}, expr=v162[32]}
    ebp    = {defs={}, expr=v162[32]}
    eip    = {defs={0x08048400}, expr=0x08048402[32]}
    pf     = {defs={0x080483e4}, expr=1[1]}
    sf     = {defs={0x080483e4}, expr=0[1]}
    zf     = {defs={0x080483e4}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v161[1]}
    cf     = {defs={}, expr=0[1]}
memory:
== Interval ==
registers:
    eax    = 0[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048402[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048402:pop    ebp
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    esp    = v622+0x4[32]
    ebp    = v623[32]
    eip    = 0x8048403[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v621[1]
    cf     = 0x0[1]
memory:
    addr=v622[32] value=v623[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=0[32]}
    esp    = {defs={0x08048402}, expr=(add[32] v162[32] 4[32])}
    ebp    = {defs={0x08048402}, expr=v163[32]}
    eip    = {defs={0x08048402}, expr=0x08048403[32]}
    pf     = {defs={0x080483e4}, expr=1[1]}
    sf     = {defs={0x080483e4}, expr=0[1]}
    zf     = {defs={0x080483e4}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v161[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048402}, expr=(add[32] v162[32] 3[32])} value={defs={0x08048402}, expr=(extract[8] 24[32] 32[32] v163[32])}
    addr={defs={0x08048402}, expr=(add[32] v162[32] 2[32])} value={defs={0x08048402}, expr=(extract[8] 16[32] 24[32] v163[32])}
    addr={defs={0x08048402}, expr=(add[32] v162[32] 1[32])} value={defs={0x08048402}, expr=(extract[8] 8[32] 16[32] v163[32])}
    addr={defs={}, expr=v162[32]} value={defs={0x08048402}, expr=(extract[8] 0[32] 8[32] v163[32])}
== Interval ==
registers:
    eax    = 0[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048403[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048403:ret    
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    esp    = v622+0x8[32]
    ebp    = v623[32]
    eip    = v625[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v621[1]
    cf     = 0x0[1]
memory:
    addr=v622+0x4[32] value=v625[32]
    addr=v622[32] value=v623[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=0[32]}
    esp    = {defs={0x08048402,0x08048403}, expr=(add[32] (add[32] v162[32] 4[32]) 4[32])}
    ebp    = {defs={0x08048402}, expr=v163[32]}
    eip    = {defs={0x08048403}, expr=v168[32]}
    pf     = {defs={0x080483e4}, expr=1[1]}
    sf     = {defs={0x080483e4}, expr=0[1]}
    zf     = {defs={0x080483e4}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v161[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048402,0x08048403}, expr=(add[32] (add[32] v162[32] 4[32]) 3[32])} value={defs={0x08048403}, expr=(extract[8] 24[32] 32[32] v168[32])}
    addr={defs={0x08048402,0x08048403}, expr=(add[32] (add[32] v162[32] 4[32]) 2[32])} value={defs={0x08048403}, expr=(extract[8] 16[32] 24[32] v168[32])}
    addr={defs={0x08048402,0x08048403}, expr=(add[32] (add[32] v162[32] 4[32]) 1[32])} value={defs={0x08048403}, expr=(extract[8] 8[32] 16[32] v168[32])}
    addr={defs={0x08048402}, expr=(add[32] v162[32] 4[32])} value={defs={0x08048403}, expr=(extract[8] 0[32] 8[32] v168[32])}
    addr={defs={0x08048402}, expr=(add[32] v162[32] 3[32])} value={defs={0x08048402}, expr=(extract[8] 24[32] 32[32] v163[32])}
    addr={defs={0x08048402}, expr=(add[32] v162[32] 2[32])} value={defs={0x08048402}, expr=(extract[8] 16[32] 24[32] v163[32])}
    addr={defs={0x08048402}, expr=(add[32] v162[32] 1[32])} value={defs={0x08048402}, expr=(extract[8] 8[32] 16[32] v163[32])}
    addr={defs={}, expr=v162[32]} value={defs={0x08048402}, expr=(extract[8] 0[32] 8[32] v163[32])}
== Interval ==
registers:
    eax    = 0[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = doubleword[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
== PartialSymbolic ==
registers:
    esp    = v628[32]
    eip    = 0x80483ef[32]
memory:
    addr=v628[32] value=0x80495f8[32]
== Symbolic ==
registers:
    esp    = {defs={}, expr=v174[32]}
    eip    = {defs={0x080483e8}, expr=0x080483ef[32]}
memory:
    addr={defs={0x080483e8}, expr=(add[32] v174[32] 3[32])} value={defs={0x080483e8}, expr=8[8]}
    addr={defs={0x080483e8}, expr=(add[32] v174[32] 2[32])} value={defs={0x080483e8}, expr=4[8]}
    addr={defs={0x080483e8}, expr=(add[32] v174[32] 1[32])} value={defs={0x080483e8}, expr=-107[8]}
    addr={defs={}, expr=v174[32]} value={defs={0x080483e8}, expr=-8[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x080483ef[32]
memory:
0x80483ef:call   0x00000000
== PartialSymbolic ==
registers:
    esp    = v628-0x4[32]
    eip    = 0x0[32]
memory:
    addr=v628-0x4[32] value=0x80483f4[32]
    addr=v628[32] value=0x80495f8[32]
== Symbolic ==
registers:
    esp    = {defs={0x080483ef}, expr=(add[32] v174[32] -4[32])}
    eip    = {defs={}, expr=0[32]}
memory:
    addr={defs={0x080483ef}, expr=(add[32] (add[32] v174[32] -4[32]) 3[32])} value={defs={0x080483ef}, expr=8[8]}
    addr={defs={0x080483ef}, expr=(add[32] (add[32] v174[32] -4[32]) 2[32])} value={defs={0x080483ef}, expr=4[8]}
    addr={defs={0x080483ef}, expr=(add[32] (add[32] v174[32] -4[32]) 1[32])} value={defs={0x080483ef}, expr=-125[8]}
    addr={defs={0x080483ef}, expr=(add[32] v174[32] -4[32])} value={defs={0x080483ef}, expr=-12[8]}
    addr={defs={0x080483e8}, expr=(add[32] v174[32] 3[32])} value={defs={0x080483e8}, expr=8[8]}
    addr={defs={0x080483e8}, expr=(add[32] v174[32] 2[32])} value={defs={0x080483e8}, expr=4[8]}
    addr={defs={0x080483e8}, expr=(add[32] v174[32] 1[32])} value={defs={0x080483e8}, expr=-107[8]}
    addr={defs={}, expr=v174[32]} value={defs={0x080483e8}, expr=-8[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
== PartialSymbolic ==
registers:
    esi    = v630[32]
    eip    = 0x80483fa[32]
memory:
== Symbolic ==
registers:
    esi    = {defs={}, expr=v176[32]}
    eip    = {defs={0x080483f4}, expr=0x080483fa[32]}
memory:
== Interval ==
registers:
    esi    = doubleword[32]
    eip    = 0x080483fa[32]
memory:
0x80483fa:lea    edi, [edi + 0x00000000]
== PartialSymbolic ==
registers:
    esi    = v630[32]
    edi    = v631[32]
    eip    = 0x8048400[32]
memory:
== Symbolic ==
registers:
    esi    = {defs={}, expr=v176[32]}
    edi    = {defs={}, expr=v177[32]}
    eip    = {defs={0x080483fa}, expr=0x08048400[32]}
memory:
== Interval ==
registers:
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048400[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
== PartialSymbolic ==
registers:
    esp    = v633-0x4[32]
    ebp    = v634[32]
    eip    = 0x8048411[32]
memory:
    addr=v633-0x4[32] value=v634[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    ebp    = {defs={}, expr=v180[32]}
    eip    = {defs={0x08048410}, expr=0x08048411[32]}
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] v179[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v180[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048411[32]
memory:
0x8048411:mov    edx, 0x08048480<handler>
== PartialSymbolic ==
registers:
    edx    = 0x8048480[32]
    esp    = v633-0x4[32]
    ebp    = v634[32]
    eip    = 0x8048416[32]
memory:
    addr=v633-0x4[32] value=v634[32]
== Symbolic ==
registers:
    edx    = {defs={}, expr=0x08048480[32]}
    esp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    ebp    = {defs={}, expr=v180[32]}
    eip    = {defs={0x08048411}, expr=0x08048416[32]}
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] v179[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v180[32])}
== Interval ==
registers:
    edx    = 0x08048480[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048416[32]
memory:
0x8048416:mov    ebp, esp
== PartialSymbolic ==
registers:
    edx    = 0x8048480[32]
    esp    = v633-0x4[32]
    ebp    = v633-0x4[32]
    eip    = 0x8048418[32]
memory:
    addr=v633-0x4[32] value=v634[32]
== Symbolic ==
registers:
    edx    = {defs={}, expr=0x08048480[32]}
    esp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    ebp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    eip    = {defs={0x08048416}, expr=0x08048418[32]}
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] v179[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v180[32])}
== Interval ==
registers:
    edx    = 0x08048480[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048418[32]
memory:
0x8048418:sub    esp, 0x08
== PartialSymbolic ==
registers:
    edx    = 0x8048480[32]
    esp    = v633-0xc[32]
    ebp    = v633-0x4[32]
    eip    = 0x804841b[32]
    pf     = -v649+0x1[1]
    sf     = v650[1]
    zf     = v651[1]
    af     = -v654+0x1[1]
    cf     = -v652+0x1[1]
    of     = v655[1]
memory:
    addr=v633-0x4[32] value=v634[32]
== Symbolic ==
registers:
    edx    = {defs={}, expr=0x08048480[32]}
    esp    = {defs={0x08048410,0x08048418}, expr=(add[32] (add[32] v179[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    eip    = {defs={0x08048418}, expr=0x0804841b[32]}
    pf     = {defs={0x08048410,0x08048418}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v179[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v179[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v179[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v179[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v179[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v179[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v179[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v179[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048410,0x08048418}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v179[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048410,0x08048418}, expr=(zerop[1] (add[32] (add[32] v179[32] -4[32]) -8[32]))}
    af     = {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v179[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v179[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048410,0x08048418}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v179[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v179[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048410,0x08048418}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v179[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v179[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v179[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v179[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] v179[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v180[32])}
== Interval ==
registers:
    edx    = 0x08048480[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804841b[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804841b:and    esp, 0xf0<-0x10>
== PartialSymbolic ==
registers:
    edx    = 0x8048480[32]
    esp    = v656[32]
    ebp    = v633-0x4[32]
    eip    = 0x804841e[32]
    pf     = -v670+0x1[1]
    sf     = v671[1]
    zf     = v672[1]
    af     = v673[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v633-0x4[32] value=v634[32]
== Symbolic ==
registers:
    edx    = {defs={}, expr=0x08048480[32]}
    esp    = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])}
    ebp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    eip    = {defs={0x0804841b}, expr=0x0804841e[32]}
    pf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))))))}
    sf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))}
    zf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))}
    af     = {defs={}, expr=v181[1]}
    cf     = {defs={}, expr=0[1]}
    of     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] v179[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v180[32])}
== Interval ==
registers:
    edx    = 0x08048480[32]
    esp    = 0[32]
    ebp    = doubleword[32]
    eip    = 0x0804841e[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    af     = 0..1[1]
    cf     = 0[1]
    of     = 0[1]
memory:
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
== PartialSymbolic ==
registers:
    edx    = 0x8048480[32]
    esp    = v656[32]
    ebp    = v633-0x4[32]
    eip    = 0x8048422[32]
    pf     = -v670+0x1[1]
    sf     = v671[1]
    zf     = v672[1]
    af     = v673[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v656+0x4[32] value=0x8048480[32]
    addr=v633-0x4[32] value=v634[32]
== Symbolic ==
registers:
    edx    = {defs={}, expr=0x08048480[32]}
    esp    = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])}
    ebp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    eip    = {defs={0x0804841e}, expr=0x08048422[32]}
    pf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))))))}
    sf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))}
    zf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))}
    af     = {defs={}, expr=v181[1]}
    cf     = {defs={}, expr=0[1]}
    of     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32])} value={defs={0x0804841e}, expr=8[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32])} value={defs={0x0804841e}, expr=4[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32])} value={defs={0x0804841e}, expr=-124[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32])} value={defs={0x0804841e}, expr=-128[8]}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] v179[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v180[32])}
== Interval ==
registers:
    edx    = 0x08048480[32]
    esp    = 0[32]
    ebp    = doubleword[32]
    eip    = 0x08048422[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    af     = 0..1[1]
    cf     = 0[1]
    of     = 0[1]
memory:
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
== PartialSymbolic ==
registers:
    edx    = 0x8048480[32]
    esp    = v656[32]
    ebp    = v633-0x4[32]
    eip    = 0x8048429[32]
    pf     = -v670+0x1[1]
    sf     = v671[1]
    zf     = v672[1]
    af     = v673[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v656[32] value=0xa[32]
    addr=v656+0x4[32] value=0x8048480[32]
    addr=v633-0x4[32] value=v634[32]
== Symbolic ==
registers:
    edx    = {defs={}, expr=0x08048480[32]}
    esp    = {defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])}
    ebp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    eip    = {defs={0x08048422}, expr=0x08048429[32]}
    pf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))))))}
    sf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))}
    zf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))}
    af     = {defs={}, expr=v181[1]}
    cf     = {defs={}, expr=0[1]}
    of     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 3[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 2[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 1[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])} value={defs={0x08048422}, expr=10[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32])} value={defs={0x0804841e}, expr=8[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32])} value={defs={0x0804841e}, expr=4[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32])} value={defs={0x0804841e}, expr=-124[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32])} value={defs={0x0804841e}, expr=-128[8]}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] v179[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v180[32])}
== Interval ==
registers:
    edx    = 0x08048480[32]
    esp    = 0[32]
    ebp    = doubleword[32]
    eip    = 0x08048429[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    af     = 0..1[1]
    cf     = 0[1]
    of     = 0[1]
memory:
0x8048429:call   0x080482f0<signal@plt>
== PartialSymbolic ==
registers:
    edx    = 0x8048480[32]
    esp    = v656-0x4[32]
    ebp    = v633-0x4[32]
    eip    = 0x80482f0[32]
    pf     = -v670+0x1[1]
    sf     = v671[1]
    zf     = v672[1]
    af     = v673[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v656-0x4[32] value=0x804842e[32]
    addr=v656[32] value=0xa[32]
    addr=v656+0x4[32] value=0x8048480[32]
    addr=v633-0x4[32] value=v634[32]
== Symbolic ==
registers:
    edx    = {defs={}, expr=0x08048480[32]}
    esp    = {defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) -4[32])}
    ebp    = {defs={0x08048410}, expr=(add[32] v179[32] -4[32])}
    eip    = {defs={}, expr=0x080482f0[32]}
    pf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])))))))}
    sf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))}
    zf     = {defs={0x08048410,0x08048418,0x0804841b}, expr=(zerop[1] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]))}
    af     = {defs={}, expr=v181[1]}
    cf     = {defs={}, expr=0[1]}
    of     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32])} value={defs={0x08048429}, expr=8[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32])} value={defs={0x08048429}, expr=4[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32])} value={defs={0x08048429}, expr=-124[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048429}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) -4[32])} value={defs={0x08048429}, expr=46[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 3[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 2[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x08048422}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 1[32])} value={defs={0x08048422}, expr=0[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b}, expr=(bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32])} value={defs={0x08048422}, expr=10[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32])} value={defs={0x0804841e}, expr=8[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32])} value={defs={0x0804841e}, expr=4[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32])} value={defs={0x0804841e}, expr=-124[8]}
    addr={defs={0x08048410,0x08048418,0x0804841b,0x0804841e}, expr=(add[32] (bv-and[32] (add[32] (add[32] v179[32] -4[32]) -8[32]) -16[32]) 4[32])} value={defs={0x0804841e}, expr=-128[8]}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 3[32])} value={defs={0x08048410}, expr=(extract[8] 24[32] 32[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 2[32])} value={defs={0x08048410}, expr=(extract[8] 16[32] 24[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] (add[32] v179[32] -4[32]) 1[32])} value={defs={0x08048410}, expr=(extract[8] 8[32] 16[32] v180[32])}
    addr={defs={0x08048410}, expr=(add[32] v179[32] -4[32])} value={defs={0x08048410}, expr=(extract[8] 0[32] 8[32] v180[32])}
== Interval ==
registers:
    edx    = 0x08048480[32]
    esp    = 0xfffffffc[32]
    ebp    = doubleword[32]
    eip    = 0x080482f0[32]
    pf     = 1[1]
    sf     = 0[1]
    zf     = 1[1]
    af     = 0..1[1]
    cf     = 0[1]
    of     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
== PartialSymbolic ==
registers:
    esp    = v675[32]
    ebp    = v675[32]
    eip    = 0x8048430[32]
memory:
== Symbolic ==
registers:
    esp    = {defs={}, expr=v183[32]}
    ebp    = {defs={}, expr=v183[32]}
    eip    = {defs={0x0804842e}, expr=0x08048430[32]}
memory:
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048430[32]
memory:
0x8048430:xor    eax, eax
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    esp    = v675[32]
    ebp    = v675[32]
    eip    = 0x8048432[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v677[1]
    cf     = 0x0[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={0x08048430}, expr=0[32]}
    esp    = {defs={}, expr=v183[32]}
    ebp    = {defs={}, expr=v183[32]}
    eip    = {defs={0x08048430}, expr=0x08048432[32]}
    pf     = {defs={0x08048430}, expr=1[1]}
    sf     = {defs={0x08048430}, expr=0[1]}
    zf     = {defs={0x08048430}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v185[1]}
    cf     = {defs={}, expr=0[1]}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048432[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048432:pop    ebp
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    esp    = v675+0x4[32]
    ebp    = v678[32]
    eip    = 0x8048433[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v677[1]
    cf     = 0x0[1]
memory:
    addr=v675[32] value=v678[32]
== Symbolic ==
registers:
    eax    = {defs={0x08048430}, expr=0[32]}
    esp    = {defs={0x08048432}, expr=(add[32] v183[32] 4[32])}
    ebp    = {defs={0x08048432}, expr=v186[32]}
    eip    = {defs={0x08048432}, expr=0x08048433[32]}
    pf     = {defs={0x08048430}, expr=1[1]}
    sf     = {defs={0x08048430}, expr=0[1]}
    zf     = {defs={0x08048430}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v185[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048432}, expr=(add[32] v183[32] 3[32])} value={defs={0x08048432}, expr=(extract[8] 24[32] 32[32] v186[32])}
    addr={defs={0x08048432}, expr=(add[32] v183[32] 2[32])} value={defs={0x08048432}, expr=(extract[8] 16[32] 24[32] v186[32])}
    addr={defs={0x08048432}, expr=(add[32] v183[32] 1[32])} value={defs={0x08048432}, expr=(extract[8] 8[32] 16[32] v186[32])}
    addr={defs={}, expr=v183[32]} value={defs={0x08048432}, expr=(extract[8] 0[32] 8[32] v186[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048433[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048433:ret    
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    esp    = v675+0x8[32]
    ebp    = v678[32]
    eip    = v680[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v677[1]
    cf     = 0x0[1]
memory:
    addr=v675+0x4[32] value=v680[32]
    addr=v675[32] value=v678[32]
== Symbolic ==
registers:
    eax    = {defs={0x08048430}, expr=0[32]}
    esp    = {defs={0x08048432,0x08048433}, expr=(add[32] (add[32] v183[32] 4[32]) 4[32])}
    ebp    = {defs={0x08048432}, expr=v186[32]}
    eip    = {defs={0x08048433}, expr=v191[32]}
    pf     = {defs={0x08048430}, expr=1[1]}
    sf     = {defs={0x08048430}, expr=0[1]}
    zf     = {defs={0x08048430}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v185[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x08048432,0x08048433}, expr=(add[32] (add[32] v183[32] 4[32]) 3[32])} value={defs={0x08048433}, expr=(extract[8] 24[32] 32[32] v191[32])}
    addr={defs={0x08048432,0x08048433}, expr=(add[32] (add[32] v183[32] 4[32]) 2[32])} value={defs={0x08048433}, expr=(extract[8] 16[32] 24[32] v191[32])}
    addr={defs={0x08048432,0x08048433}, expr=(add[32] (add[32] v183[32] 4[32]) 1[32])} value={defs={0x08048433}, expr=(extract[8] 8[32] 16[32] v191[32])}
    addr={defs={0x08048432}, expr=(add[32] v183[32] 4[32])} value={defs={0x08048433}, expr=(extract[8] 0[32] 8[32] v191[32])}
    addr={defs={0x08048432}, expr=(add[32] v183[32] 3[32])} value={defs={0x08048432}, expr=(extract[8] 24[32] 32[32] v186[32])}
    addr={defs={0x08048432}, expr=(add[32] v183[32] 2[32])} value={defs={0x08048432}, expr=(extract[8] 16[32] 24[32] v186[32])}
    addr={defs={0x08048432}, expr=(add[32] v183[32] 1[32])} value={defs={0x08048432}, expr=(extract[8] 8[32] 16[32] v186[32])}
    addr={defs={}, expr=v183[32]} value={defs={0x08048432}, expr=(extract[8] 0[32] 8[32] v186[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = doubleword[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
== PartialSymbolic ==
registers:
    esp    = v683-0x4[32]
    ebp    = v684[32]
    eip    = 0x8048441[32]
memory:
    addr=v683-0x4[32] value=v684[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048440}, expr=(add[32] v197[32] -4[32])}
    ebp    = {defs={}, expr=v198[32]}
    eip    = {defs={0x08048440}, expr=0x08048441[32]}
memory:
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] v197[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v198[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048441[32]
memory:
0x8048441:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v683-0x4[32]
    ebp    = v683-0x4[32]
    eip    = 0x8048443[32]
memory:
    addr=v683-0x4[32] value=v684[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048440}, expr=(add[32] v197[32] -4[32])}
    ebp    = {defs={0x08048440}, expr=(add[32] v197[32] -4[32])}
    eip    = {defs={0x08048441}, expr=0x08048443[32]}
memory:
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] v197[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v198[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048443[32]
memory:
0x8048443:sub    esp, 0x08
== PartialSymbolic ==
registers:
    esp    = v683-0xc[32]
    ebp    = v683-0x4[32]
    eip    = 0x8048446[32]
    pf     = -v699+0x1[1]
    sf     = v700[1]
    zf     = v701[1]
    af     = -v704+0x1[1]
    cf     = -v702+0x1[1]
    of     = v705[1]
memory:
    addr=v683-0x4[32] value=v684[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048440,0x08048443}, expr=(add[32] (add[32] v197[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048440}, expr=(add[32] v197[32] -4[32])}
    eip    = {defs={0x08048443}, expr=0x08048446[32]}
    pf     = {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] (add[32] v197[32] -4[32]) -8[32]))}
    af     = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] v197[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v198[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048446[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
== PartialSymbolic ==
registers:
    esp    = v683-0xc[32]
    ebp    = v683-0x4[32]
    eip    = 0x804844d[32]
    pf     = -v699+0x1[1]
    sf     = v700[1]
    zf     = v701[1]
    af     = -v704+0x1[1]
    cf     = -v702+0x1[1]
    of     = v705[1]
memory:
    addr=v683-0xc[32] value=0x80485d4[32]
    addr=v683-0x4[32] value=v684[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048440,0x08048443}, expr=(add[32] (add[32] v197[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048440}, expr=(add[32] v197[32] -4[32])}
    eip    = {defs={0x08048446}, expr=0x0804844d[32]}
    pf     = {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] (add[32] v197[32] -4[32]) -8[32]))}
    af     = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) 3[32])} value={defs={0x08048446}, expr=8[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) 2[32])} value={defs={0x08048446}, expr=4[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) 1[32])} value={defs={0x08048446}, expr=-123[8]}
    addr={defs={0x08048440,0x08048443}, expr=(add[32] (add[32] v197[32] -4[32]) -8[32])} value={defs={0x08048446}, expr=-44[8]}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] v197[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v198[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804844d[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804844d:call   0x08048300<puts@plt>
== PartialSymbolic ==
registers:
    esp    = v683-0x10[32]
    ebp    = v683-0x4[32]
    eip    = 0x8048300[32]
    pf     = -v699+0x1[1]
    sf     = v700[1]
    zf     = v701[1]
    af     = -v704+0x1[1]
    cf     = -v702+0x1[1]
    of     = v705[1]
memory:
    addr=v683-0x10[32] value=0x8048452[32]
    addr=v683-0xc[32] value=0x80485d4[32]
    addr=v683-0x4[32] value=v684[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) -4[32])}
    ebp    = {defs={0x08048440}, expr=(add[32] v197[32] -4[32])}
    eip    = {defs={}, expr=0x08048300[32]}
    pf     = {defs={0x08048440,0x08048443}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v197[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048440,0x08048443}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v197[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048440,0x08048443}, expr=(zerop[1] (add[32] (add[32] v197[32] -4[32]) -8[32]))}
    af     = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048440,0x08048443}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048440,0x08048443}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v197[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) -4[32]) 3[32])} value={defs={0x0804844d}, expr=8[8]}
    addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) -4[32]) 2[32])} value={defs={0x0804844d}, expr=4[8]}
    addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) -4[32]) 1[32])} value={defs={0x0804844d}, expr=-124[8]}
    addr={defs={0x08048440,0x08048443,0x0804844d}, expr=(add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) -4[32])} value={defs={0x0804844d}, expr=82[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) 3[32])} value={defs={0x08048446}, expr=8[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) 2[32])} value={defs={0x08048446}, expr=4[8]}
    addr={defs={0x08048440,0x08048443,0x08048446}, expr=(add[32] (add[32] (add[32] v197[32] -4[32]) -8[32]) 1[32])} value={defs={0x08048446}, expr=-123[8]}
    addr={defs={0x08048440,0x08048443}, expr=(add[32] (add[32] v197[32] -4[32]) -8[32])} value={defs={0x08048446}, expr=-44[8]}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 3[32])} value={defs={0x08048440}, expr=(extract[8] 24[32] 32[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 2[32])} value={defs={0x08048440}, expr=(extract[8] 16[32] 24[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] (add[32] v197[32] -4[32]) 1[32])} value={defs={0x08048440}, expr=(extract[8] 8[32] 16[32] v198[32])}
    addr={defs={0x08048440}, expr=(add[32] v197[32] -4[32])} value={defs={0x08048440}, expr=(extract[8] 0[32] 8[32] v198[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048300[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
== PartialSymbolic ==
registers:
    esp    = v707[32]
    ebp    = v707[32]
    eip    = 0x8048454[32]
memory:
== Symbolic ==
registers:
    esp    = {defs={}, expr=v200[32]}
    ebp    = {defs={}, expr=v200[32]}
    eip    = {defs={0x08048452}, expr=0x08048454[32]}
memory:
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048454[32]
memory:
0x8048454:pop    ebp
== PartialSymbolic ==
registers:
    esp    = v707+0x4[32]
    ebp    = v708[32]
    eip    = 0x8048455[32]
memory:
    addr=v707[32] value=v708[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048454}, expr=(add[32] v200[32] 4[32])}
    ebp    = {defs={0x08048454}, expr=v201[32]}
    eip    = {defs={0x08048454}, expr=0x08048455[32]}
memory:
    addr={defs={0x08048454}, expr=(add[32] v200[32] 3[32])} value={defs={0x08048454}, expr=(extract[8] 24[32] 32[32] v201[32])}
    addr={defs={0x08048454}, expr=(add[32] v200[32] 2[32])} value={defs={0x08048454}, expr=(extract[8] 16[32] 24[32] v201[32])}
    addr={defs={0x08048454}, expr=(add[32] v200[32] 1[32])} value={defs={0x08048454}, expr=(extract[8] 8[32] 16[32] v201[32])}
    addr={defs={}, expr=v200[32]} value={defs={0x08048454}, expr=(extract[8] 0[32] 8[32] v201[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048455[32]
memory:
0x8048455:ret    
== PartialSymbolic ==
registers:
    esp    = v707+0x8[32]
    ebp    = v708[32]
    eip    = v710[32]
memory:
    addr=v707+0x4[32] value=v710[32]
    addr=v707[32] value=v708[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048454,0x08048455}, expr=(add[32] (add[32] v200[32] 4[32]) 4[32])}
    ebp    = {defs={0x08048454}, expr=v201[32]}
    eip    = {defs={0x08048455}, expr=v206[32]}
memory:
    addr={defs={0x08048454,0x08048455}, expr=(add[32] (add[32] v200[32] 4[32]) 3[32])} value={defs={0x08048455}, expr=(extract[8] 24[32] 32[32] v206[32])}
    addr={defs={0x08048454,0x08048455}, expr=(add[32] (add[32] v200[32] 4[32]) 2[32])} value={defs={0x08048455}, expr=(extract[8] 16[32] 24[32] v206[32])}
    addr={defs={0x08048454,0x08048455}, expr=(add[32] (add[32] v200[32] 4[32]) 1[32])} value={defs={0x08048455}, expr=(extract[8] 8[32] 16[32] v206[32])}
    addr={defs={0x08048454}, expr=(add[32] v200[32] 4[32])} value={defs={0x08048455}, expr=(extract[8] 0[32] 8[32] v206[32])}
    addr={defs={0x08048454}, expr=(add[32] v200[32] 3[32])} value={defs={0x08048454}, expr=(extract[8] 24[32] 32[32] v201[32])}
    addr={defs={0x08048454}, expr=(add[32] v200[32] 2[32])} value={defs={0x08048454}, expr=(extract[8] 16[32] 24[32] v201[32])}
    addr={defs={0x08048454}, expr=(add[32] v200[32] 1[32])} value={defs={0x08048454}, expr=(extract[8] 8[32] 16[32] v201[32])}
    addr={defs={}, expr=v200[32]} value={defs={0x08048454}, expr=(extract[8] 0[32] 8[32] v201[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
== PartialSymbolic ==
registers:
    esp    = v713-0x4[32]
    ebp    = v714[32]
    eip    = 0x8048461[32]
memory:
    addr=v713-0x4[32] value=v714[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048460}, expr=(add[32] v212[32] -4[32])}
    ebp    = {defs={}, expr=v213[32]}
    eip    = {defs={0x08048460}, expr=0x08048461[32]}
memory:
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] v212[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v213[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048461[32]
memory:
0x8048461:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v713-0x4[32]
    ebp    = v713-0x4[32]
    eip    = 0x8048463[32]
memory:
    addr=v713-0x4[32] value=v714[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048460}, expr=(add[32] v212[32] -4[32])}
    ebp    = {defs={0x08048460}, expr=(add[32] v212[32] -4[32])}
    eip    = {defs={0x08048461}, expr=0x08048463[32]}
memory:
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] v212[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v213[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048463[32]
memory:
0x8048463:sub    esp, 0x08
== PartialSymbolic ==
registers:
    esp    = v713-0xc[32]
    ebp    = v713-0x4[32]
    eip    = 0x8048466[32]
    pf     = -v729+0x1[1]
    sf     = v730[1]
    zf     = v731[1]
    af     = -v734+0x1[1]
    cf     = -v732+0x1[1]
    of     = v735[1]
memory:
    addr=v713-0x4[32] value=v714[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048460,0x08048463}, expr=(add[32] (add[32] v212[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048460}, expr=(add[32] v212[32] -4[32])}
    eip    = {defs={0x08048463}, expr=0x08048466[32]}
    pf     = {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] (add[32] v212[32] -4[32]) -8[32]))}
    af     = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] v212[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v213[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048466[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
== PartialSymbolic ==
registers:
    esp    = v713-0xc[32]
    ebp    = v713-0x4[32]
    eip    = 0x804846d[32]
    pf     = -v729+0x1[1]
    sf     = v730[1]
    zf     = v731[1]
    af     = -v734+0x1[1]
    cf     = -v732+0x1[1]
    of     = v735[1]
memory:
    addr=v713-0xc[32] value=0x80485d4[32]
    addr=v713-0x4[32] value=v714[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048460,0x08048463}, expr=(add[32] (add[32] v212[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048460}, expr=(add[32] v212[32] -4[32])}
    eip    = {defs={0x08048466}, expr=0x0804846d[32]}
    pf     = {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] (add[32] v212[32] -4[32]) -8[32]))}
    af     = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) 3[32])} value={defs={0x08048466}, expr=8[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) 2[32])} value={defs={0x08048466}, expr=4[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) 1[32])} value={defs={0x08048466}, expr=-123[8]}
    addr={defs={0x08048460,0x08048463}, expr=(add[32] (add[32] v212[32] -4[32]) -8[32])} value={defs={0x08048466}, expr=-44[8]}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] v212[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v213[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804846d[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804846d:call   0x08048300<puts@plt>
== PartialSymbolic ==
registers:
    esp    = v713-0x10[32]
    ebp    = v713-0x4[32]
    eip    = 0x8048300[32]
    pf     = -v729+0x1[1]
    sf     = v730[1]
    zf     = v731[1]
    af     = -v734+0x1[1]
    cf     = -v732+0x1[1]
    of     = v735[1]
memory:
    addr=v713-0x10[32] value=0x8048472[32]
    addr=v713-0xc[32] value=0x80485d4[32]
    addr=v713-0x4[32] value=v714[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) -4[32])}
    ebp    = {defs={0x08048460}, expr=(add[32] v212[32] -4[32])}
    eip    = {defs={}, expr=0x08048300[32]}
    pf     = {defs={0x08048460,0x08048463}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v212[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048460,0x08048463}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v212[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048460,0x08048463}, expr=(zerop[1] (add[32] (add[32] v212[32] -4[32]) -8[32]))}
    af     = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048460,0x08048463}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048460,0x08048463}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v212[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) -4[32]) 3[32])} value={defs={0x0804846d}, expr=8[8]}
    addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) -4[32]) 2[32])} value={defs={0x0804846d}, expr=4[8]}
    addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) -4[32]) 1[32])} value={defs={0x0804846d}, expr=-124[8]}
    addr={defs={0x08048460,0x08048463,0x0804846d}, expr=(add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) -4[32])} value={defs={0x0804846d}, expr=114[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) 3[32])} value={defs={0x08048466}, expr=8[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) 2[32])} value={defs={0x08048466}, expr=4[8]}
    addr={defs={0x08048460,0x08048463,0x08048466}, expr=(add[32] (add[32] (add[32] v212[32] -4[32]) -8[32]) 1[32])} value={defs={0x08048466}, expr=-123[8]}
    addr={defs={0x08048460,0x08048463}, expr=(add[32] (add[32] v212[32] -4[32]) -8[32])} value={defs={0x08048466}, expr=-44[8]}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 3[32])} value={defs={0x08048460}, expr=(extract[8] 24[32] 32[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 2[32])} value={defs={0x08048460}, expr=(extract[8] 16[32] 24[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] (add[32] v212[32] -4[32]) 1[32])} value={defs={0x08048460}, expr=(extract[8] 8[32] 16[32] v213[32])}
    addr={defs={0x08048460}, expr=(add[32] v212[32] -4[32])} value={defs={0x08048460}, expr=(extract[8] 0[32] 8[32] v213[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048300[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
== PartialSymbolic ==
registers:
    esp    = v737[32]
    eip    = 0x8048479[32]
memory:
    addr=v737[32] value=0x0[32]
== Symbolic ==
registers:
    esp    = {defs={}, expr=v215[32]}
    eip    = {defs={0x08048472}, expr=0x08048479[32]}
memory:
    addr={defs={0x08048472}, expr=(add[32] v215[32] 3[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={0x08048472}, expr=(add[32] v215[32] 2[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={0x08048472}, expr=(add[32] v215[32] 1[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={}, expr=v215[32]} value={defs={0x08048472}, expr=0[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x08048479[32]
memory:
0x8048479:call   0x08048320<_exit@plt>
== PartialSymbolic ==
registers:
    esp    = v737-0x4[32]
    eip    = 0x8048320[32]
memory:
    addr=v737-0x4[32] value=0x804847e[32]
    addr=v737[32] value=0x0[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048479}, expr=(add[32] v215[32] -4[32])}
    eip    = {defs={}, expr=0x08048320[32]}
memory:
    addr={defs={0x08048479}, expr=(add[32] (add[32] v215[32] -4[32]) 3[32])} value={defs={0x08048479}, expr=8[8]}
    addr={defs={0x08048479}, expr=(add[32] (add[32] v215[32] -4[32]) 2[32])} value={defs={0x08048479}, expr=4[8]}
    addr={defs={0x08048479}, expr=(add[32] (add[32] v215[32] -4[32]) 1[32])} value={defs={0x08048479}, expr=-124[8]}
    addr={defs={0x08048479}, expr=(add[32] v215[32] -4[32])} value={defs={0x08048479}, expr=126[8]}
    addr={defs={0x08048472}, expr=(add[32] v215[32] 3[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={0x08048472}, expr=(add[32] v215[32] 2[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={0x08048472}, expr=(add[32] v215[32] 1[32])} value={defs={0x08048472}, expr=0[8]}
    addr={defs={}, expr=v215[32]} value={defs={0x08048472}, expr=0[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x08048320[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
== PartialSymbolic ==
registers:
    esp    = v739-0x4[32]
    ebp    = v740[32]
    eip    = 0x8048481[32]
memory:
    addr=v739-0x4[32] value=v740[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048480}, expr=(add[32] v217[32] -4[32])}
    ebp    = {defs={}, expr=v218[32]}
    eip    = {defs={0x08048480}, expr=0x08048481[32]}
memory:
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] v217[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v218[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048481[32]
memory:
0x8048481:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v739-0x4[32]
    ebp    = v739-0x4[32]
    eip    = 0x8048483[32]
memory:
    addr=v739-0x4[32] value=v740[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048480}, expr=(add[32] v217[32] -4[32])}
    ebp    = {defs={0x08048480}, expr=(add[32] v217[32] -4[32])}
    eip    = {defs={0x08048481}, expr=0x08048483[32]}
memory:
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] v217[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v218[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048483[32]
memory:
0x8048483:sub    esp, 0x08
== PartialSymbolic ==
registers:
    esp    = v739-0xc[32]
    ebp    = v739-0x4[32]
    eip    = 0x8048486[32]
    pf     = -v755+0x1[1]
    sf     = v756[1]
    zf     = v757[1]
    af     = -v760+0x1[1]
    cf     = -v758+0x1[1]
    of     = v761[1]
memory:
    addr=v739-0x4[32] value=v740[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v217[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048480}, expr=(add[32] v217[32] -4[32])}
    eip    = {defs={0x08048483}, expr=0x08048486[32]}
    pf     = {defs={0x08048480,0x08048483}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v217[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v217[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v217[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v217[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v217[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v217[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v217[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v217[32] -4[32]) -8[32])))))))}
    sf     = {defs={0x08048480,0x08048483}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v217[32] -4[32]) -8[32]))}
    zf     = {defs={0x08048480,0x08048483}, expr=(zerop[1] (add[32] (add[32] v217[32] -4[32]) -8[32]))}
    af     = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) 4294967288[33]))))))}
    cf     = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048480,0x08048483}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) 4294967288[33]))))))}
memory:
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] v217[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v218[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048486[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
== PartialSymbolic ==
registers:
    esp    = v739-0xc[32]
    ebp    = v739-0x4[32]
    eip    = 0x804848c[32]
    pf     = -v804+0x1[1]
    sf     = v805[1]
    zf     = v806[1]
    af     = v809[1]
    cf     = -v758+0x1[1]
    of     = v810[1]
memory:
    addr=0x80496f8[32] value=v762+0x1[32]
    addr=0x80496f8[32] value=v762[32]
    addr=v739-0x4[32] value=v740[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v217[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048480}, expr=(add[32] v217[32] -4[32])}
    eip    = {defs={0x08048486}, expr=0x0804848c[32]}
    pf     = {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))))))}
    sf     = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v219[32] 1[32]))}
    zf     = {defs={0x08048486}, expr=(zerop[1] (add[32] v219[32] 1[32]))}
    af     = {defs={0x08048486}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33])))))}
    cf     = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33]))))))}
memory:
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] v219[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] v217[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v218[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804848c[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
== PartialSymbolic ==
registers:
    esp    = v739-0xc[32]
    ebp    = v739-0x4[32]
    eip    = 0x8048493[32]
    pf     = -v804+0x1[1]
    sf     = v805[1]
    zf     = v806[1]
    af     = v809[1]
    cf     = -v758+0x1[1]
    of     = v810[1]
memory:
    addr=v739-0xc[32] value=0x80485d4[32]
    addr=0x80496f8[32] value=v762+0x1[32]
    addr=0x80496f8[32] value=v762[32]
    addr=v739-0x4[32] value=v740[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v217[32] -4[32]) -8[32])}
    ebp    = {defs={0x08048480}, expr=(add[32] v217[32] -4[32])}
    eip    = {defs={0x0804848c}, expr=0x08048493[32]}
    pf     = {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))))))}
    sf     = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v219[32] 1[32]))}
    zf     = {defs={0x08048486}, expr=(zerop[1] (add[32] v219[32] 1[32]))}
    af     = {defs={0x08048486}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33])))))}
    cf     = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33]))))))}
memory:
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) 3[32])} value={defs={0x0804848c}, expr=8[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) 2[32])} value={defs={0x0804848c}, expr=4[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) 1[32])} value={defs={0x0804848c}, expr=-123[8]}
    addr={defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v217[32] -4[32]) -8[32])} value={defs={0x0804848c}, expr=-44[8]}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] v219[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] v217[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v218[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048493[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048493:call   0x08048300<puts@plt>
== PartialSymbolic ==
registers:
    esp    = v739-0x10[32]
    ebp    = v739-0x4[32]
    eip    = 0x8048300[32]
    pf     = -v804+0x1[1]
    sf     = v805[1]
    zf     = v806[1]
    af     = v809[1]
    cf     = -v758+0x1[1]
    of     = v810[1]
memory:
    addr=v739-0x10[32] value=0x8048498[32]
    addr=v739-0xc[32] value=0x80485d4[32]
    addr=0x80496f8[32] value=v762+0x1[32]
    addr=0x80496f8[32] value=v762[32]
    addr=v739-0x4[32] value=v740[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) -4[32])}
    ebp    = {defs={0x08048480}, expr=(add[32] v217[32] -4[32])}
    eip    = {defs={}, expr=0x08048300[32]}
    pf     = {defs={0x08048486}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v219[32] 1[32])))))))}
    sf     = {defs={0x08048486}, expr=(extract[1] 31[32] 32[32] (add[32] v219[32] 1[32]))}
    zf     = {defs={0x08048486}, expr=(zerop[1] (add[32] v219[32] 1[32]))}
    af     = {defs={0x08048486}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33])))))}
    cf     = {defs={0x08048480,0x08048483}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v217[32] -4[32])) 4294967288[33]))))))}
    of     = {defs={0x08048486}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v219[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v219[32]) 1[33]))))))}
memory:
    addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) -4[32]) 3[32])} value={defs={0x08048493}, expr=8[8]}
    addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) -4[32]) 2[32])} value={defs={0x08048493}, expr=4[8]}
    addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) -4[32]) 1[32])} value={defs={0x08048493}, expr=-124[8]}
    addr={defs={0x08048480,0x08048483,0x08048493}, expr=(add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) -4[32])} value={defs={0x08048493}, expr=-104[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) 3[32])} value={defs={0x0804848c}, expr=8[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) 2[32])} value={defs={0x0804848c}, expr=4[8]}
    addr={defs={0x08048480,0x08048483,0x0804848c}, expr=(add[32] (add[32] (add[32] v217[32] -4[32]) -8[32]) 1[32])} value={defs={0x0804848c}, expr=-123[8]}
    addr={defs={0x08048480,0x08048483}, expr=(add[32] (add[32] v217[32] -4[32]) -8[32])} value={defs={0x0804848c}, expr=-44[8]}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] (add[32] v219[32] 1[32]))}
    addr={defs={0x08048486}, expr=0x080496fb[32]} value={defs={0x08048486}, expr=(extract[8] 24[32] 32[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496fa[32]} value={defs={0x08048486}, expr=(extract[8] 16[32] 24[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496f9[32]} value={defs={0x08048486}, expr=(extract[8] 8[32] 16[32] v219[32])}
    addr={defs={0x08048486}, expr=0x080496f8[32]} value={defs={0x08048486}, expr=(extract[8] 0[32] 8[32] v219[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 3[32])} value={defs={0x08048480}, expr=(extract[8] 24[32] 32[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 2[32])} value={defs={0x08048480}, expr=(extract[8] 16[32] 24[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] (add[32] v217[32] -4[32]) 1[32])} value={defs={0x08048480}, expr=(extract[8] 8[32] 16[32] v218[32])}
    addr={defs={0x08048480}, expr=(add[32] v217[32] -4[32])} value={defs={0x08048480}, expr=(extract[8] 0[32] 8[32] v218[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048300[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
== PartialSymbolic ==
registers:
    esp    = v812[32]
    eip    = 0x804849f[32]
memory:
    addr=v812[32] value=0x0[32]
== Symbolic ==
registers:
    esp    = {defs={}, expr=v225[32]}
    eip    = {defs={0x08048498}, expr=0x0804849f[32]}
memory:
    addr={defs={0x08048498}, expr=(add[32] v225[32] 3[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={0x08048498}, expr=(add[32] v225[32] 2[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={0x08048498}, expr=(add[32] v225[32] 1[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={}, expr=v225[32]} value={defs={0x08048498}, expr=0[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x0804849f[32]
memory:
0x804849f:call   0x08048320<_exit@plt>
== PartialSymbolic ==
registers:
    esp    = v812-0x4[32]
    eip    = 0x8048320[32]
memory:
    addr=v812-0x4[32] value=0x80484a4[32]
    addr=v812[32] value=0x0[32]
== Symbolic ==
registers:
    esp    = {defs={0x0804849f}, expr=(add[32] v225[32] -4[32])}
    eip    = {defs={}, expr=0x08048320[32]}
memory:
    addr={defs={0x0804849f}, expr=(add[32] (add[32] v225[32] -4[32]) 3[32])} value={defs={0x0804849f}, expr=8[8]}
    addr={defs={0x0804849f}, expr=(add[32] (add[32] v225[32] -4[32]) 2[32])} value={defs={0x0804849f}, expr=4[8]}
    addr={defs={0x0804849f}, expr=(add[32] (add[32] v225[32] -4[32]) 1[32])} value={defs={0x0804849f}, expr=-124[8]}
    addr={defs={0x0804849f}, expr=(add[32] v225[32] -4[32])} value={defs={0x0804849f}, expr=-92[8]}
    addr={defs={0x08048498}, expr=(add[32] v225[32] 3[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={0x08048498}, expr=(add[32] v225[32] 2[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={0x08048498}, expr=(add[32] v225[32] 1[32])} value={defs={0x08048498}, expr=0[8]}
    addr={defs={}, expr=v225[32]} value={defs={0x08048498}, expr=0[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x08048320[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
== PartialSymbolic ==
registers:
    esp    = v814-0x4[32]
    ebp    = v815[32]
    eip    = 0x80484b1[32]
memory:
    addr=v814-0x4[32] value=v815[32]
== Symbolic ==
registers:
    esp    = {defs={0x080484b0}, expr=(add[32] v227[32] -4[32])}
    ebp    = {defs={}, expr=v228[32]}
    eip    = {defs={0x080484b0}, expr=0x080484b1[32]}
memory:
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] v227[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v228[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080484b1[32]
memory:
0x80484b1:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v814-0x4[32]
    ebp    = v814-0x4[32]
    eip    = 0x80484b3[32]
memory:
    addr=v814-0x4[32] value=v815[32]
== Symbolic ==
registers:
    esp    = {defs={0x080484b0}, expr=(add[32] v227[32] -4[32])}
    ebp    = {defs={0x080484b0}, expr=(add[32] v227[32] -4[32])}
    eip    = {defs={0x080484b1}, expr=0x080484b3[32]}
memory:
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] v227[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v228[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080484b3[32]
memory:
0x80484b3:push   edi
== PartialSymbolic ==
registers:
    esp    = v814-0x8[32]
    ebp    = v814-0x4[32]
    edi    = v816[32]
    eip    = 0x80484b4[32]
memory:
    addr=v814-0x8[32] value=v816[32]
    addr=v814-0x4[32] value=v815[32]
== Symbolic ==
registers:
    esp    = {defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v227[32] -4[32]) -4[32])}
    ebp    = {defs={0x080484b0}, expr=(add[32] v227[32] -4[32])}
    edi    = {defs={}, expr=v229[32]}
    eip    = {defs={0x080484b3}, expr=0x080484b4[32]}
memory:
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v227[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v229[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] v227[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v228[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080484b4[32]
memory:
0x80484b4:push   esi
== PartialSymbolic ==
registers:
    esp    = v814-0xc[32]
    ebp    = v814-0x4[32]
    esi    = v817[32]
    edi    = v816[32]
    eip    = 0x80484b5[32]
memory:
    addr=v814-0xc[32] value=v817[32]
    addr=v814-0x8[32] value=v816[32]
    addr=v814-0x4[32] value=v815[32]
== Symbolic ==
registers:
    esp    = {defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x080484b0}, expr=(add[32] v227[32] -4[32])}
    esi    = {defs={}, expr=v230[32]}
    edi    = {defs={}, expr=v229[32]}
    eip    = {defs={0x080484b4}, expr=0x080484b5[32]}
memory:
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b4}, expr=(extract[8] 24[32] 32[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b4}, expr=(extract[8] 16[32] 24[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b4}, expr=(extract[8] 8[32] 16[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32])} value={defs={0x080484b4}, expr=(extract[8] 0[32] 8[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v227[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v229[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] v227[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v228[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080484b5[32]
memory:
0x80484b5:push   ebx
== PartialSymbolic ==
registers:
    ebx    = v818[32]
    esp    = v814-0x10[32]
    ebp    = v814-0x4[32]
    esi    = v817[32]
    edi    = v816[32]
    eip    = 0x80484b6[32]
memory:
    addr=v814-0x10[32] value=v818[32]
    addr=v814-0xc[32] value=v817[32]
    addr=v814-0x8[32] value=v816[32]
    addr=v814-0x4[32] value=v815[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v231[32]}
    esp    = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x080484b0}, expr=(add[32] v227[32] -4[32])}
    esi    = {defs={}, expr=v230[32]}
    edi    = {defs={}, expr=v229[32]}
    eip    = {defs={0x080484b5}, expr=0x080484b6[32]}
memory:
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b5}, expr=(extract[8] 24[32] 32[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b5}, expr=(extract[8] 16[32] 24[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b5}, expr=(extract[8] 8[32] 16[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x080484b5}, expr=(extract[8] 0[32] 8[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b4}, expr=(extract[8] 24[32] 32[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b4}, expr=(extract[8] 16[32] 24[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b4}, expr=(extract[8] 8[32] 16[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32])} value={defs={0x080484b4}, expr=(extract[8] 0[32] 8[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v227[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v229[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] v227[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v228[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080484b6[32]
memory:
0x80484b6:sub    esp, 0x0c
== PartialSymbolic ==
registers:
    ebx    = v818[32]
    esp    = v814-0x1c[32]
    ebp    = v814-0x4[32]
    esi    = v817[32]
    edi    = v816[32]
    eip    = 0x80484b9[32]
    pf     = -v833+0x1[1]
    sf     = v834[1]
    zf     = v835[1]
    af     = -v838+0x1[1]
    cf     = -v836+0x1[1]
    of     = v839[1]
memory:
    addr=v814-0x10[32] value=v818[32]
    addr=v814-0xc[32] value=v817[32]
    addr=v814-0x8[32] value=v816[32]
    addr=v814-0x4[32] value=v815[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v231[32]}
    esp    = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])}
    ebp    = {defs={0x080484b0}, expr=(add[32] v227[32] -4[32])}
    esi    = {defs={}, expr=v230[32]}
    edi    = {defs={}, expr=v229[32]}
    eip    = {defs={0x080484b6}, expr=0x080484b9[32]}
    pf     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))}
    sf     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))}
    zf     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))}
    af     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
    cf     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
    of     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
memory:
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b5}, expr=(extract[8] 24[32] 32[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b5}, expr=(extract[8] 16[32] 24[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b5}, expr=(extract[8] 8[32] 16[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x080484b5}, expr=(extract[8] 0[32] 8[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b4}, expr=(extract[8] 24[32] 32[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b4}, expr=(extract[8] 16[32] 24[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b4}, expr=(extract[8] 8[32] 16[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32])} value={defs={0x080484b4}, expr=(extract[8] 0[32] 8[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v227[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v229[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] v227[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v228[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080484b9[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484b9:call   0x080484be<<Insn>>
== PartialSymbolic ==
registers:
    ebx    = v818[32]
    esp    = v814-0x20[32]
    ebp    = v814-0x4[32]
    esi    = v817[32]
    edi    = v816[32]
    eip    = 0x80484be[32]
    pf     = -v833+0x1[1]
    sf     = v834[1]
    zf     = v835[1]
    af     = -v838+0x1[1]
    cf     = -v836+0x1[1]
    of     = v839[1]
memory:
    addr=v814-0x20[32] value=0x80484be[32]
    addr=v814-0x10[32] value=v818[32]
    addr=v814-0xc[32] value=v817[32]
    addr=v814-0x8[32] value=v816[32]
    addr=v814-0x4[32] value=v815[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v231[32]}
    esp    = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])}
    ebp    = {defs={0x080484b0}, expr=(add[32] v227[32] -4[32])}
    esi    = {defs={}, expr=v230[32]}
    edi    = {defs={}, expr=v229[32]}
    eip    = {defs={}, expr=0x080484be[32]}
    pf     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))}
    sf     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))}
    zf     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))}
    af     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
    cf     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
    of     = {defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
memory:
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32])} value={defs={0x080484b9}, expr=8[8]}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32])} value={defs={0x080484b9}, expr=4[8]}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32])} value={defs={0x080484b9}, expr=-124[8]}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])} value={defs={0x080484b9}, expr=-66[8]}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b5}, expr=(extract[8] 24[32] 32[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b5}, expr=(extract[8] 16[32] 24[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b5}, expr=(extract[8] 8[32] 16[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x080484b5}, expr=(extract[8] 0[32] 8[32] v231[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080484b4}, expr=(extract[8] 24[32] 32[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080484b4}, expr=(extract[8] 16[32] 24[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080484b4}, expr=(extract[8] 8[32] 16[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3,0x080484b4}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) -4[32])} value={defs={0x080484b4}, expr=(extract[8] 0[32] 8[32] v230[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 3[32])} value={defs={0x080484b3}, expr=(extract[8] 24[32] 32[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 2[32])} value={defs={0x080484b3}, expr=(extract[8] 16[32] 24[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] (add[32] v227[32] -4[32]) -4[32]) 1[32])} value={defs={0x080484b3}, expr=(extract[8] 8[32] 16[32] v229[32])}
    addr={defs={0x080484b0,0x080484b3}, expr=(add[32] (add[32] v227[32] -4[32]) -4[32])} value={defs={0x080484b3}, expr=(extract[8] 0[32] 8[32] v229[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 3[32])} value={defs={0x080484b0}, expr=(extract[8] 24[32] 32[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 2[32])} value={defs={0x080484b0}, expr=(extract[8] 16[32] 24[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] (add[32] v227[32] -4[32]) 1[32])} value={defs={0x080484b0}, expr=(extract[8] 8[32] 16[32] v228[32])}
    addr={defs={0x080484b0}, expr=(add[32] v227[32] -4[32])} value={defs={0x080484b0}, expr=(extract[8] 0[32] 8[32] v228[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080484be[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
== PartialSymbolic ==
registers:
    ebx    = v842[32]
    esp    = v841+0x4[32]
    eip    = 0x80484bf[32]
memory:
    addr=v841[32] value=v842[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080484be}, expr=v234[32]}
    esp    = {defs={0x080484be}, expr=(add[32] v233[32] 4[32])}
    eip    = {defs={0x080484be}, expr=0x080484bf[32]}
memory:
    addr={defs={0x080484be}, expr=(add[32] v233[32] 3[32])} value={defs={0x080484be}, expr=(extract[8] 24[32] 32[32] v234[32])}
    addr={defs={0x080484be}, expr=(add[32] v233[32] 2[32])} value={defs={0x080484be}, expr=(extract[8] 16[32] 24[32] v234[32])}
    addr={defs={0x080484be}, expr=(add[32] v233[32] 1[32])} value={defs={0x080484be}, expr=(extract[8] 8[32] 16[32] v234[32])}
    addr={defs={}, expr=v233[32]} value={defs={0x080484be}, expr=(extract[8] 0[32] 8[32] v234[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080484bf[32]
memory:
0x80484bf:add    ebx, 0x0000120a
== PartialSymbolic ==
registers:
    ebx    = v842+0x120a[32]
    esp    = v841+0x4[32]
    eip    = 0x80484c5[32]
    pf     = -v858+0x1[1]
    sf     = v859[1]
    zf     = v860[1]
    af     = v863[1]
    cf     = v861[1]
    of     = v864[1]
memory:
    addr=v841[32] value=v842[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080484be,0x080484bf}, expr=(add[32] v234[32] 4618[32])}
    esp    = {defs={0x080484be}, expr=(add[32] v233[32] 4[32])}
    eip    = {defs={0x080484bf}, expr=0x080484c5[32]}
    pf     = {defs={0x080484be,0x080484bf}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32])))))))}
    sf     = {defs={0x080484be,0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v234[32] 4618[32]))}
    zf     = {defs={0x080484be,0x080484bf}, expr=(zerop[1] (add[32] v234[32] 4618[32]))}
    af     = {defs={0x080484be,0x080484bf}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v234[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v234[32]) 4618[33])))))}
    cf     = {defs={0x080484be,0x080484bf}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v234[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v234[32]) 4618[33])))))}
    of     = {defs={0x080484be,0x080484bf}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v234[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v234[32]) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v234[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v234[32]) 4618[33]))))))}
memory:
    addr={defs={0x080484be}, expr=(add[32] v233[32] 3[32])} value={defs={0x080484be}, expr=(extract[8] 24[32] 32[32] v234[32])}
    addr={defs={0x080484be}, expr=(add[32] v233[32] 2[32])} value={defs={0x080484be}, expr=(extract[8] 16[32] 24[32] v234[32])}
    addr={defs={0x080484be}, expr=(add[32] v233[32] 1[32])} value={defs={0x080484be}, expr=(extract[8] 8[32] 16[32] v234[32])}
    addr={defs={}, expr=v233[32]} value={defs={0x080484be}, expr=(extract[8] 0[32] 8[32] v234[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080484c5[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484c5:call   0x080482c8<_init>
== PartialSymbolic ==
registers:
    ebx    = v842+0x120a[32]
    esp    = v841[32]
    eip    = 0x80482c8[32]
    pf     = -v858+0x1[1]
    sf     = v859[1]
    zf     = v860[1]
    af     = v863[1]
    cf     = v861[1]
    of     = v864[1]
memory:
    addr=v841[32] value=0x80484ca[32]
    addr=v841[32] value=v842[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080484be,0x080484bf}, expr=(add[32] v234[32] 4618[32])}
    esp    = {defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] v233[32] 4[32]) -4[32])}
    eip    = {defs={}, expr=0x080482c8[32]}
    pf     = {defs={0x080484be,0x080484bf}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v234[32] 4618[32])))))))}
    sf     = {defs={0x080484be,0x080484bf}, expr=(extract[1] 31[32] 32[32] (add[32] v234[32] 4618[32]))}
    zf     = {defs={0x080484be,0x080484bf}, expr=(zerop[1] (add[32] v234[32] 4618[32]))}
    af     = {defs={0x080484be,0x080484bf}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v234[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v234[32]) 4618[33])))))}
    cf     = {defs={0x080484be,0x080484bf}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v234[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v234[32]) 4618[33])))))}
    of     = {defs={0x080484be,0x080484bf}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v234[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v234[32]) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v234[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v234[32]) 4618[33]))))))}
memory:
    addr={defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] (add[32] v233[32] 4[32]) -4[32]) 3[32])} value={defs={0x080484c5}, expr=8[8]}
    addr={defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] (add[32] v233[32] 4[32]) -4[32]) 2[32])} value={defs={0x080484c5}, expr=4[8]}
    addr={defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] (add[32] v233[32] 4[32]) -4[32]) 1[32])} value={defs={0x080484c5}, expr=-124[8]}
    addr={defs={0x080484be,0x080484c5}, expr=(add[32] (add[32] v233[32] 4[32]) -4[32])} value={defs={0x080484c5}, expr=-54[8]}
    addr={defs={0x080484be}, expr=(add[32] v233[32] 3[32])} value={defs={0x080484be}, expr=(extract[8] 24[32] 32[32] v234[32])}
    addr={defs={0x080484be}, expr=(add[32] v233[32] 2[32])} value={defs={0x080484be}, expr=(extract[8] 16[32] 24[32] v234[32])}
    addr={defs={0x080484be}, expr=(add[32] v233[32] 1[32])} value={defs={0x080484be}, expr=(extract[8] 8[32] 16[32] v234[32])}
    addr={defs={}, expr=v233[32]} value={defs={0x080484be}, expr=(extract[8] 0[32] 8[32] v234[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080482c8[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
== PartialSymbolic ==
registers:
    eax    = v866-0xe0[32]
    ebx    = v866[32]
    eip    = 0x80484d0[32]
memory:
== Symbolic ==
registers:
    eax    = {defs={0x080484ca}, expr=(add[32] v240[32] -224[32])}
    ebx    = {defs={}, expr=v240[32]}
    eip    = {defs={0x080484ca}, expr=0x080484d0[32]}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    eip    = 0x080484d0[32]
memory:
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
== PartialSymbolic ==
registers:
    eax    = v866-0xe0[32]
    edx    = v866-0xe0[32]
    ebx    = v866[32]
    eip    = 0x80484d6[32]
memory:
== Symbolic ==
registers:
    eax    = {defs={0x080484ca}, expr=(add[32] v240[32] -224[32])}
    edx    = {defs={0x080484d0}, expr=(add[32] v240[32] -224[32])}
    ebx    = {defs={}, expr=v240[32]}
    eip    = {defs={0x080484d0}, expr=0x080484d6[32]}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    eip    = 0x080484d6[32]
memory:
0x80484d6:sub    eax, edx
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    edx    = v866-0xe0[32]
    ebx    = v866[32]
    eip    = 0x80484d8[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = 0x0[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))}
    edx    = {defs={0x080484d0}, expr=(add[32] v240[32] -224[32])}
    ebx    = {defs={}, expr=v240[32]}
    eip    = {defs={0x080484d6}, expr=0x080484d8[32]}
    pf     = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))))))}
    sf     = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))}
    zf     = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(zerop[1] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))}
    af     = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v240[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v240[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v240[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v240[32] -224[32]))) 1[33])))))))}
    cf     = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v240[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v240[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v240[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v240[32] -224[32]))) 1[33])))))))}
    of     = {defs={0x080484ca,0x080484d0,0x080484d6}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v240[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v240[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v240[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v240[32] -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v240[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v240[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v240[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v240[32] -224[32]))) 1[33])))))))}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    eip    = 0x080484d8[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484d8:sar    eax, 0x02
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    edx    = v866-0xe0[32]
    ebx    = v866[32]
    eip    = 0x80484db[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = v868[1]
    cf     = 0x0[1]
    of     = v869[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))}
    edx    = {defs={0x080484d0}, expr=(add[32] v240[32] -224[32])}
    ebx    = {defs={}, expr=v240[32]}
    eip    = {defs={0x080484d8}, expr=0x080484db[32]}
    pf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))))))}
    sf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    zf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    af     = {defs={0x080484d8}, expr=v242[1]}
    cf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    of     = {defs={0x080484d8}, expr=v243[1]}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    eip    = 0x080484db[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    edx    = v866-0xe0[32]
    ebx    = v866[32]
    ebp    = v870[32]
    eip    = 0x80484de[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = v868[1]
    cf     = 0x0[1]
    of     = v869[1]
memory:
    addr=v870-0x10[32] value=0x0[32]
== Symbolic ==
registers:
    eax    = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))}
    edx    = {defs={0x080484d0}, expr=(add[32] v240[32] -224[32])}
    ebx    = {defs={}, expr=v240[32]}
    ebp    = {defs={}, expr=v244[32]}
    eip    = {defs={0x080484db}, expr=0x080484de[32]}
    pf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))))))}
    sf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    zf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    af     = {defs={0x080484d8}, expr=v242[1]}
    cf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    of     = {defs={0x080484d8}, expr=v243[1]}
memory:
    addr={defs={0x080484db}, expr=(add[32] (add[32] v244[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v244[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v244[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v244[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080484de[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    edx    = v866-0xe0[32]
    ebx    = v866[32]
    ebp    = v870[32]
    eip    = 0x80484e0[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = v868[1]
    cf     = 0x0[1]
    of     = v869[1]
memory:
    addr=v870-0x10[32] value=0x0[32]
== Symbolic ==
registers:
    eax    = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))}
    edx    = {defs={0x080484d0}, expr=(add[32] v240[32] -224[32])}
    ebx    = {defs={}, expr=v240[32]}
    ebp    = {defs={}, expr=v244[32]}
    eip    = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484de}, expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) 0x080484f0[32] 0x080484e0[32])}
    pf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32])))))))))}
    sf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    zf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    af     = {defs={0x080484d8}, expr=v242[1]}
    cf     = {defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    of     = {defs={0x080484d8}, expr=v243[1]}
memory:
    addr={defs={0x080484db}, expr=(add[32] (add[32] v244[32] -16[32]) 3[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v244[32] -16[32]) 2[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] (add[32] v244[32] -16[32]) 1[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
    addr={defs={0x080484db}, expr=(add[32] v244[32] -16[32])} value={defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v240[32] -224[32]) (add[32] (invert[32] (add[32] v240[32] -224[32])) 1[32]))))}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080484e0, 0x080484f0[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484e0:add    esp, 0x0c
== PartialSymbolic ==
registers:
    esp    = v872+0xc[32]
    eip    = 0x80484e3[32]
    pf     = -v887+0x1[1]
    sf     = v888[1]
    zf     = v889[1]
    af     = v892[1]
    cf     = v890[1]
    of     = v893[1]
memory:
== Symbolic ==
registers:
    esp    = {defs={0x080484e0}, expr=(add[32] v246[32] 12[32])}
    eip    = {defs={0x080484e0}, expr=0x080484e3[32]}
    pf     = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))))))}
    sf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v246[32] 12[32]))}
    zf     = {defs={0x080484e0}, expr=(zerop[1] (add[32] v246[32] 12[32]))}
    af     = {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    cf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    of     = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))))}
memory:
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x080484e3[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484e3:pop    ebx
== PartialSymbolic ==
registers:
    ebx    = v894[32]
    esp    = v872+0x10[32]
    eip    = 0x80484e4[32]
    pf     = -v887+0x1[1]
    sf     = v888[1]
    zf     = v889[1]
    af     = v892[1]
    cf     = v890[1]
    of     = v893[1]
memory:
    addr=v872+0xc[32] value=v894[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080484e3}, expr=v247[32]}
    esp    = {defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 4[32])}
    eip    = {defs={0x080484e3}, expr=0x080484e4[32]}
    pf     = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))))))}
    sf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v246[32] 12[32]))}
    zf     = {defs={0x080484e0}, expr=(zerop[1] (add[32] v246[32] 12[32]))}
    af     = {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    cf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    of     = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))))}
memory:
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v247[32])}
    addr={defs={0x080484e0}, expr=(add[32] v246[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v247[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080484e4[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484e4:pop    esi
== PartialSymbolic ==
registers:
    ebx    = v894[32]
    esp    = v872+0x14[32]
    esi    = v896[32]
    eip    = 0x80484e5[32]
    pf     = -v887+0x1[1]
    sf     = v888[1]
    zf     = v889[1]
    af     = v892[1]
    cf     = v890[1]
    of     = v893[1]
memory:
    addr=v872+0x10[32] value=v896[32]
    addr=v872+0xc[32] value=v894[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080484e3}, expr=v247[32]}
    esp    = {defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32])}
    esi    = {defs={0x080484e4}, expr=v252[32]}
    eip    = {defs={0x080484e4}, expr=0x080484e5[32]}
    pf     = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))))))}
    sf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v246[32] 12[32]))}
    zf     = {defs={0x080484e0}, expr=(zerop[1] (add[32] v246[32] 12[32]))}
    af     = {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    cf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    of     = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))))}
memory:
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 3[32])} value={defs={0x080484e4}, expr=(extract[8] 24[32] 32[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 2[32])} value={defs={0x080484e4}, expr=(extract[8] 16[32] 24[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 1[32])} value={defs={0x080484e4}, expr=(extract[8] 8[32] 16[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 4[32])} value={defs={0x080484e4}, expr=(extract[8] 0[32] 8[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v247[32])}
    addr={defs={0x080484e0}, expr=(add[32] v246[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v247[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x080484e5[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484e5:pop    edi
== PartialSymbolic ==
registers:
    ebx    = v894[32]
    esp    = v872+0x18[32]
    esi    = v896[32]
    edi    = v898[32]
    eip    = 0x80484e6[32]
    pf     = -v887+0x1[1]
    sf     = v888[1]
    zf     = v889[1]
    af     = v892[1]
    cf     = v890[1]
    of     = v893[1]
memory:
    addr=v872+0x14[32] value=v898[32]
    addr=v872+0x10[32] value=v896[32]
    addr=v872+0xc[32] value=v894[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080484e3}, expr=v247[32]}
    esp    = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32])}
    esi    = {defs={0x080484e4}, expr=v252[32]}
    edi    = {defs={0x080484e5}, expr=v257[32]}
    eip    = {defs={0x080484e5}, expr=0x080484e6[32]}
    pf     = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))))))}
    sf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v246[32] 12[32]))}
    zf     = {defs={0x080484e0}, expr=(zerop[1] (add[32] v246[32] 12[32]))}
    af     = {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    cf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    of     = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))))}
memory:
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e5}, expr=(extract[8] 24[32] 32[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e5}, expr=(extract[8] 16[32] 24[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e5}, expr=(extract[8] 8[32] 16[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32])} value={defs={0x080484e5}, expr=(extract[8] 0[32] 8[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 3[32])} value={defs={0x080484e4}, expr=(extract[8] 24[32] 32[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 2[32])} value={defs={0x080484e4}, expr=(extract[8] 16[32] 24[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 1[32])} value={defs={0x080484e4}, expr=(extract[8] 8[32] 16[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 4[32])} value={defs={0x080484e4}, expr=(extract[8] 0[32] 8[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v247[32])}
    addr={defs={0x080484e0}, expr=(add[32] v246[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v247[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080484e6[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484e6:pop    ebp
== PartialSymbolic ==
registers:
    ebx    = v894[32]
    esp    = v872+0x1c[32]
    ebp    = v900[32]
    esi    = v896[32]
    edi    = v898[32]
    eip    = 0x80484e7[32]
    pf     = -v887+0x1[1]
    sf     = v888[1]
    zf     = v889[1]
    af     = v892[1]
    cf     = v890[1]
    of     = v893[1]
memory:
    addr=v872+0x18[32] value=v900[32]
    addr=v872+0x14[32] value=v898[32]
    addr=v872+0x10[32] value=v896[32]
    addr=v872+0xc[32] value=v894[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080484e3}, expr=v247[32]}
    esp    = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])}
    ebp    = {defs={0x080484e6}, expr=v262[32]}
    esi    = {defs={0x080484e4}, expr=v252[32]}
    edi    = {defs={0x080484e5}, expr=v257[32]}
    eip    = {defs={0x080484e6}, expr=0x080484e7[32]}
    pf     = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))))))}
    sf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v246[32] 12[32]))}
    zf     = {defs={0x080484e0}, expr=(zerop[1] (add[32] v246[32] 12[32]))}
    af     = {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    cf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    of     = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))))}
memory:
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e6}, expr=(extract[8] 24[32] 32[32] v262[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e6}, expr=(extract[8] 16[32] 24[32] v262[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e6}, expr=(extract[8] 8[32] 16[32] v262[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32])} value={defs={0x080484e6}, expr=(extract[8] 0[32] 8[32] v262[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e5}, expr=(extract[8] 24[32] 32[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e5}, expr=(extract[8] 16[32] 24[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e5}, expr=(extract[8] 8[32] 16[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32])} value={defs={0x080484e5}, expr=(extract[8] 0[32] 8[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 3[32])} value={defs={0x080484e4}, expr=(extract[8] 24[32] 32[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 2[32])} value={defs={0x080484e4}, expr=(extract[8] 16[32] 24[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 1[32])} value={defs={0x080484e4}, expr=(extract[8] 8[32] 16[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 4[32])} value={defs={0x080484e4}, expr=(extract[8] 0[32] 8[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v247[32])}
    addr={defs={0x080484e0}, expr=(add[32] v246[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v247[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080484e7[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80484e7:ret    
== PartialSymbolic ==
registers:
    ebx    = v894[32]
    esp    = v872+0x20[32]
    ebp    = v900[32]
    esi    = v896[32]
    edi    = v898[32]
    eip    = v902[32]
    pf     = -v887+0x1[1]
    sf     = v888[1]
    zf     = v889[1]
    af     = v892[1]
    cf     = v890[1]
    of     = v893[1]
memory:
    addr=v872+0x1c[32] value=v902[32]
    addr=v872+0x18[32] value=v900[32]
    addr=v872+0x14[32] value=v898[32]
    addr=v872+0x10[32] value=v896[32]
    addr=v872+0xc[32] value=v894[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080484e3}, expr=v247[32]}
    esp    = {defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32])}
    ebp    = {defs={0x080484e6}, expr=v262[32]}
    esi    = {defs={0x080484e4}, expr=v252[32]}
    edi    = {defs={0x080484e5}, expr=v257[32]}
    eip    = {defs={0x080484e7}, expr=v267[32]}
    pf     = {defs={0x080484e0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v246[32] 12[32])))))))}
    sf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (add[32] v246[32] 12[32]))}
    zf     = {defs={0x080484e0}, expr=(zerop[1] (add[32] v246[32] 12[32]))}
    af     = {defs={0x080484e0}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    cf     = {defs={0x080484e0}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33])))))}
    of     = {defs={0x080484e0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v246[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v246[32]) 12[33]))))))}
memory:
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e7}, expr=(extract[8] 24[32] 32[32] v267[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e7}, expr=(extract[8] 16[32] 24[32] v267[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e7}, expr=(extract[8] 8[32] 16[32] v267[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])} value={defs={0x080484e7}, expr=(extract[8] 0[32] 8[32] v267[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e6}, expr=(extract[8] 24[32] 32[32] v262[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e6}, expr=(extract[8] 16[32] 24[32] v262[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e6}, expr=(extract[8] 8[32] 16[32] v262[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 4[32])} value={defs={0x080484e6}, expr=(extract[8] 0[32] 8[32] v262[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080484e5}, expr=(extract[8] 24[32] 32[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080484e5}, expr=(extract[8] 16[32] 24[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5}, expr=(add[32] (add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080484e5}, expr=(extract[8] 8[32] 16[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 4[32])} value={defs={0x080484e5}, expr=(extract[8] 0[32] 8[32] v257[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 3[32])} value={defs={0x080484e4}, expr=(extract[8] 24[32] 32[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 2[32])} value={defs={0x080484e4}, expr=(extract[8] 16[32] 24[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3,0x080484e4}, expr=(add[32] (add[32] (add[32] v246[32] 12[32]) 4[32]) 1[32])} value={defs={0x080484e4}, expr=(extract[8] 8[32] 16[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 4[32])} value={defs={0x080484e4}, expr=(extract[8] 0[32] 8[32] v252[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 3[32])} value={defs={0x080484e3}, expr=(extract[8] 24[32] 32[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 2[32])} value={defs={0x080484e3}, expr=(extract[8] 16[32] 24[32] v247[32])}
    addr={defs={0x080484e0,0x080484e3}, expr=(add[32] (add[32] v246[32] 12[32]) 1[32])} value={defs={0x080484e3}, expr=(extract[8] 8[32] 16[32] v247[32])}
    addr={defs={0x080484e0}, expr=(add[32] v246[32] 12[32])} value={defs={0x080484e3}, expr=(extract[8] 0[32] 8[32] v247[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = doubleword[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
== PartialSymbolic ==
registers:
    esp    = v905-0x4[32]
    ebp    = v906[32]
    eip    = 0x8048521[32]
memory:
    addr=v905-0x4[32] value=v906[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048520}, expr=(add[32] v273[32] -4[32])}
    ebp    = {defs={}, expr=v274[32]}
    eip    = {defs={0x08048520}, expr=0x08048521[32]}
memory:
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] v273[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v274[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048521[32]
memory:
0x8048521:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v905-0x4[32]
    ebp    = v905-0x4[32]
    eip    = 0x8048523[32]
memory:
    addr=v905-0x4[32] value=v906[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048520}, expr=(add[32] v273[32] -4[32])}
    ebp    = {defs={0x08048520}, expr=(add[32] v273[32] -4[32])}
    eip    = {defs={0x08048521}, expr=0x08048523[32]}
memory:
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] v273[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v274[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048523[32]
memory:
0x8048523:push   edi
== PartialSymbolic ==
registers:
    esp    = v905-0x8[32]
    ebp    = v905-0x4[32]
    edi    = v907[32]
    eip    = 0x8048524[32]
memory:
    addr=v905-0x8[32] value=v907[32]
    addr=v905-0x4[32] value=v906[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v273[32] -4[32]) -4[32])}
    ebp    = {defs={0x08048520}, expr=(add[32] v273[32] -4[32])}
    edi    = {defs={}, expr=v275[32]}
    eip    = {defs={0x08048523}, expr=0x08048524[32]}
memory:
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v273[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v275[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] v273[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v274[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048524[32]
memory:
0x8048524:push   esi
== PartialSymbolic ==
registers:
    esp    = v905-0xc[32]
    ebp    = v905-0x4[32]
    esi    = v908[32]
    edi    = v907[32]
    eip    = 0x8048525[32]
memory:
    addr=v905-0xc[32] value=v908[32]
    addr=v905-0x8[32] value=v907[32]
    addr=v905-0x4[32] value=v906[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048520}, expr=(add[32] v273[32] -4[32])}
    esi    = {defs={}, expr=v276[32]}
    edi    = {defs={}, expr=v275[32]}
    eip    = {defs={0x08048524}, expr=0x08048525[32]}
memory:
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048524}, expr=(extract[8] 24[32] 32[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048524}, expr=(extract[8] 16[32] 24[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048524}, expr=(extract[8] 8[32] 16[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048524}, expr=(extract[8] 0[32] 8[32] v276[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v273[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v275[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] v273[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v274[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048525[32]
memory:
0x8048525:push   ebx
== PartialSymbolic ==
registers:
    ebx    = v909[32]
    esp    = v905-0x10[32]
    ebp    = v905-0x4[32]
    esi    = v908[32]
    edi    = v907[32]
    eip    = 0x8048526[32]
memory:
    addr=v905-0x10[32] value=v909[32]
    addr=v905-0xc[32] value=v908[32]
    addr=v905-0x8[32] value=v907[32]
    addr=v905-0x4[32] value=v906[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v277[32]}
    esp    = {defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048520}, expr=(add[32] v273[32] -4[32])}
    esi    = {defs={}, expr=v276[32]}
    edi    = {defs={}, expr=v275[32]}
    eip    = {defs={0x08048525}, expr=0x08048526[32]}
memory:
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048525}, expr=(extract[8] 24[32] 32[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048525}, expr=(extract[8] 16[32] 24[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048525}, expr=(extract[8] 8[32] 16[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048525}, expr=(extract[8] 0[32] 8[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048524}, expr=(extract[8] 24[32] 32[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048524}, expr=(extract[8] 16[32] 24[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048524}, expr=(extract[8] 8[32] 16[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048524}, expr=(extract[8] 0[32] 8[32] v276[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v273[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v275[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] v273[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v274[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048526[32]
memory:
0x8048526:sub    esp, 0x0c
== PartialSymbolic ==
registers:
    ebx    = v909[32]
    esp    = v905-0x1c[32]
    ebp    = v905-0x4[32]
    esi    = v908[32]
    edi    = v907[32]
    eip    = 0x8048529[32]
    pf     = -v924+0x1[1]
    sf     = v925[1]
    zf     = v926[1]
    af     = -v929+0x1[1]
    cf     = -v927+0x1[1]
    of     = v930[1]
memory:
    addr=v905-0x10[32] value=v909[32]
    addr=v905-0xc[32] value=v908[32]
    addr=v905-0x8[32] value=v907[32]
    addr=v905-0x4[32] value=v906[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v277[32]}
    esp    = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])}
    ebp    = {defs={0x08048520}, expr=(add[32] v273[32] -4[32])}
    esi    = {defs={}, expr=v276[32]}
    edi    = {defs={}, expr=v275[32]}
    eip    = {defs={0x08048526}, expr=0x08048529[32]}
    pf     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))}
    sf     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))}
    zf     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))}
    af     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
    cf     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
    of     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
memory:
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048525}, expr=(extract[8] 24[32] 32[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048525}, expr=(extract[8] 16[32] 24[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048525}, expr=(extract[8] 8[32] 16[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048525}, expr=(extract[8] 0[32] 8[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048524}, expr=(extract[8] 24[32] 32[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048524}, expr=(extract[8] 16[32] 24[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048524}, expr=(extract[8] 8[32] 16[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048524}, expr=(extract[8] 0[32] 8[32] v276[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v273[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v275[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] v273[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v274[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048529[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048529:call   0x0804852e<<Insn>>
== PartialSymbolic ==
registers:
    ebx    = v909[32]
    esp    = v905-0x20[32]
    ebp    = v905-0x4[32]
    esi    = v908[32]
    edi    = v907[32]
    eip    = 0x804852e[32]
    pf     = -v924+0x1[1]
    sf     = v925[1]
    zf     = v926[1]
    af     = -v929+0x1[1]
    cf     = -v927+0x1[1]
    of     = v930[1]
memory:
    addr=v905-0x20[32] value=0x804852e[32]
    addr=v905-0x10[32] value=v909[32]
    addr=v905-0xc[32] value=v908[32]
    addr=v905-0x8[32] value=v907[32]
    addr=v905-0x4[32] value=v906[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v277[32]}
    esp    = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])}
    ebp    = {defs={0x08048520}, expr=(add[32] v273[32] -4[32])}
    esi    = {defs={}, expr=v276[32]}
    edi    = {defs={}, expr=v275[32]}
    eip    = {defs={}, expr=0x0804852e[32]}
    pf     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))}
    sf     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))}
    zf     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))}
    af     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
    cf     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
    of     = {defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))}
memory:
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32])} value={defs={0x08048529}, expr=8[8]}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32])} value={defs={0x08048529}, expr=4[8]}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32])} value={defs={0x08048529}, expr=-123[8]}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])} value={defs={0x08048529}, expr=46[8]}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048525}, expr=(extract[8] 24[32] 32[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048525}, expr=(extract[8] 16[32] 24[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048525}, expr=(extract[8] 8[32] 16[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524,0x08048525}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x08048525}, expr=(extract[8] 0[32] 8[32] v277[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x08048524}, expr=(extract[8] 24[32] 32[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x08048524}, expr=(extract[8] 16[32] 24[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x08048524}, expr=(extract[8] 8[32] 16[32] v276[32])}
    addr={defs={0x08048520,0x08048523,0x08048524}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) -4[32])} value={defs={0x08048524}, expr=(extract[8] 0[32] 8[32] v276[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048523}, expr=(extract[8] 24[32] 32[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048523}, expr=(extract[8] 16[32] 24[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] (add[32] v273[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048523}, expr=(extract[8] 8[32] 16[32] v275[32])}
    addr={defs={0x08048520,0x08048523}, expr=(add[32] (add[32] v273[32] -4[32]) -4[32])} value={defs={0x08048523}, expr=(extract[8] 0[32] 8[32] v275[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 3[32])} value={defs={0x08048520}, expr=(extract[8] 24[32] 32[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 2[32])} value={defs={0x08048520}, expr=(extract[8] 16[32] 24[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] (add[32] v273[32] -4[32]) 1[32])} value={defs={0x08048520}, expr=(extract[8] 8[32] 16[32] v274[32])}
    addr={defs={0x08048520}, expr=(add[32] v273[32] -4[32])} value={defs={0x08048520}, expr=(extract[8] 0[32] 8[32] v274[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x0804852e[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
== PartialSymbolic ==
registers:
    ebx    = v933[32]
    esp    = v932+0x4[32]
    eip    = 0x804852f[32]
memory:
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    ebx    = {defs={0x0804852e}, expr=v280[32]}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    eip    = {defs={0x0804852e}, expr=0x0804852f[32]}
memory:
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x0804852f[32]
memory:
0x804852f:add    ebx, 0x0000119a
== PartialSymbolic ==
registers:
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    eip    = 0x8048535[32]
    pf     = -v949+0x1[1]
    sf     = v950[1]
    zf     = v951[1]
    af     = v954[1]
    cf     = v952[1]
    of     = v955[1]
memory:
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    eip    = {defs={0x0804852f}, expr=0x08048535[32]}
    pf     = {defs={0x0804852e,0x0804852f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))))))}
    sf     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v280[32] 4506[32]))}
    zf     = {defs={0x0804852e,0x0804852f}, expr=(zerop[1] (add[32] v280[32] 4506[32]))}
    af     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33])))))}
    cf     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33])))))}
    of     = {defs={0x0804852e,0x0804852f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33]))))))}
memory:
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048535[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
== PartialSymbolic ==
registers:
    eax    = v933+0x10ba[32]
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    eip    = 0x804853b[32]
    pf     = -v949+0x1[1]
    sf     = v950[1]
    zf     = v951[1]
    af     = v954[1]
    cf     = v952[1]
    of     = v955[1]
memory:
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804852e,0x0804852f,0x08048535}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    eip    = {defs={0x08048535}, expr=0x0804853b[32]}
    pf     = {defs={0x0804852e,0x0804852f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))))))}
    sf     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v280[32] 4506[32]))}
    zf     = {defs={0x0804852e,0x0804852f}, expr=(zerop[1] (add[32] v280[32] 4506[32]))}
    af     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33])))))}
    cf     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33])))))}
    of     = {defs={0x0804852e,0x0804852f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33]))))))}
memory:
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x0804853b[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
== PartialSymbolic ==
registers:
    eax    = v933+0x10ba[32]
    edx    = v933+0x10ba[32]
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    eip    = 0x8048541[32]
    pf     = -v949+0x1[1]
    sf     = v950[1]
    zf     = v951[1]
    af     = v954[1]
    cf     = v952[1]
    of     = v955[1]
memory:
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804852e,0x0804852f,0x08048535}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    edx    = {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    eip    = {defs={0x0804853b}, expr=0x08048541[32]}
    pf     = {defs={0x0804852e,0x0804852f}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v280[32] 4506[32])))))))}
    sf     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (add[32] v280[32] 4506[32]))}
    zf     = {defs={0x0804852e,0x0804852f}, expr=(zerop[1] (add[32] v280[32] 4506[32]))}
    af     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33])))))}
    cf     = {defs={0x0804852e,0x0804852f}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33])))))}
    of     = {defs={0x0804852e,0x0804852f}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v280[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v280[32]) 4506[33]))))))}
memory:
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048541[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048541:sub    eax, edx
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    edx    = v933+0x10ba[32]
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    eip    = 0x8048543[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = 0x0[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))}
    edx    = {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    eip    = {defs={0x08048541}, expr=0x08048543[32]}
    pf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))))))}
    sf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))}
    zf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(zerop[1] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))}
    af     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]))) 1[33])))))))}
    cf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]))) 1[33])))))))}
    of     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]))) 1[33])))))))}
memory:
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048543[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048543:sar    eax, 0x02
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    edx    = v933+0x10ba[32]
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    eip    = 0x8048546[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = v957[1]
    cf     = 0x0[1]
    of     = v958[1]
memory:
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))}
    edx    = {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    eip    = {defs={0x08048543}, expr=0x08048546[32]}
    pf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))))))))}
    sf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    zf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    af     = {defs={0x08048543}, expr=v286[1]}
    cf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    of     = {defs={0x08048543}, expr=v287[1]}
memory:
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048546[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
== PartialSymbolic ==
registers:
    eax    = 0x0[32]
    edx    = v933+0x10ba[32]
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    ebp    = v959[32]
    eip    = 0x8048549[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = v957[1]
    cf     = 0x0[1]
    of     = v958[1]
memory:
    addr=v959-0x10[32] value=0x0[32]
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))}
    edx    = {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    ebp    = {defs={}, expr=v288[32]}
    eip    = {defs={0x08048546}, expr=0x08048549[32]}
    pf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))))))))}
    sf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    zf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    af     = {defs={0x08048543}, expr=v286[1]}
    cf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    of     = {defs={0x08048543}, expr=v287[1]}
memory:
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v288[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048549[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048549:dec    eax
== PartialSymbolic ==
registers:
    eax    = 0xffffffff (-0x1)[32]
    edx    = v933+0x10ba[32]
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    ebp    = v959[32]
    eip    = 0x804854a[32]
    pf     = 0x1[1]
    sf     = 0x1[1]
    zf     = 0x0[1]
    af     = 0x1[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v959-0x10[32] value=0x0[32]
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])}
    edx    = {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    ebp    = {defs={}, expr=v288[32]}
    eip    = {defs={0x08048549}, expr=0x0804854a[32]}
    pf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])))))))}
    sf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]))}
    zf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]))}
    af     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))))}
    cf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543}, expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    of     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))))}
memory:
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v288[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804854a[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804854a:cmp    eax, 0xff<-0x01>
== PartialSymbolic ==
registers:
    eax    = 0xffffffff (-0x1)[32]
    edx    = v933+0x10ba[32]
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    ebp    = v959[32]
    eip    = 0x804854d[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = 0x0[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v959-0x10[32] value=0x0[32]
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])}
    edx    = {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    ebp    = {defs={}, expr=v288[32]}
    eip    = {defs={0x0804854a}, expr=0x0804854d[32]}
    pf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))))))}
    sf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))}
    zf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))}
    af     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))}
    cf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))}
    of     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))}
memory:
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v288[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804854d[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804854d:je     0x0804856b<<Insn>>
== PartialSymbolic ==
registers:
    eax    = 0xffffffff (-0x1)[32]
    edx    = v933+0x10ba[32]
    ebx    = v933+0x119a[32]
    esp    = v932+0x4[32]
    ebp    = v959[32]
    eip    = 0x804856b[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    af     = 0x0[1]
    cf     = 0x0[1]
    of     = 0x0[1]
memory:
    addr=v959-0x10[32] value=0x0[32]
    addr=v932[32] value=v933[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549}, expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])}
    edx    = {defs={0x0804852e,0x0804852f,0x0804853b}, expr=(add[32] (add[32] v280[32] 4506[32]) -224[32])}
    ebx    = {defs={0x0804852e,0x0804852f}, expr=(add[32] v280[32] 4506[32])}
    esp    = {defs={0x0804852e}, expr=(add[32] v279[32] 4[32])}
    ebp    = {defs={}, expr=v288[32]}
    eip    = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d}, expr=(ite[32] (zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) 0x0804856b[32] 0x0804854f[32])}
    pf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))))))}
    sf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))}
    zf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))}
    af     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))}
    cf     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))}
    of     = {defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))}
memory:
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 3[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 2[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] (add[32] v288[32] -16[32]) 1[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x08048546}, expr=(add[32] v288[32] -16[32])} value={defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546}, expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v280[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v280[32] 4506[32]) -224[32])) 1[32]))))}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 3[32])} value={defs={0x0804852e}, expr=(extract[8] 24[32] 32[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 2[32])} value={defs={0x0804852e}, expr=(extract[8] 16[32] 24[32] v280[32])}
    addr={defs={0x0804852e}, expr=(add[32] v279[32] 1[32])} value={defs={0x0804852e}, expr=(extract[8] 8[32] 16[32] v280[32])}
    addr={defs={}, expr=v279[32]} value={defs={0x0804852e}, expr=(extract[8] 0[32] 8[32] v280[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804854f, 0x0804856b[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
== PartialSymbolic ==
registers:
    eax    = v961[32]
    edx    = v963[32]
    esi    = v964[32]
    eip    = 0x8048552[32]
memory:
== Symbolic ==
registers:
    eax    = {defs={}, expr=v290[32]}
    edx    = {defs={}, expr=v291[32]}
    esi    = {defs={0x0804854f}, expr=(add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8])))}
    eip    = {defs={0x0804854f}, expr=0x08048552[32]}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048552[32]
memory:
0x8048552:xor    edi, edi
== PartialSymbolic ==
registers:
    eax    = v961[32]
    edx    = v963[32]
    esi    = v964[32]
    edi    = 0x0[32]
    eip    = 0x8048554[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v966[1]
    cf     = 0x0[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={}, expr=v290[32]}
    edx    = {defs={}, expr=v291[32]}
    esi    = {defs={0x0804854f}, expr=(add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8])))}
    edi    = {defs={0x08048552}, expr=0[32]}
    eip    = {defs={0x08048552}, expr=0x08048554[32]}
    pf     = {defs={0x08048552}, expr=1[1]}
    sf     = {defs={0x08048552}, expr=0[1]}
    zf     = {defs={0x08048552}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v293[1]}
    cf     = {defs={}, expr=0[1]}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048554[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048554:lea    esi, [esi + 0x00000000]
== PartialSymbolic ==
registers:
    eax    = v961[32]
    edx    = v963[32]
    esi    = v964[32]
    edi    = 0x0[32]
    eip    = 0x804855a[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v966[1]
    cf     = 0x0[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={}, expr=v290[32]}
    edx    = {defs={}, expr=v291[32]}
    esi    = {defs={0x0804854f}, expr=(add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8])))}
    edi    = {defs={0x08048552}, expr=0[32]}
    eip    = {defs={0x08048554}, expr=0x0804855a[32]}
    pf     = {defs={0x08048552}, expr=1[1]}
    sf     = {defs={0x08048552}, expr=0[1]}
    zf     = {defs={0x08048552}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v293[1]}
    cf     = {defs={}, expr=0[1]}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x0804855a[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x804855a:lea    edi, [edi + 0x00000000]
== PartialSymbolic ==
registers:
    eax    = v961[32]
    edx    = v963[32]
    esi    = v964[32]
    edi    = 0x0[32]
    eip    = 0x8048560[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v966[1]
    cf     = 0x0[1]
memory:
== Symbolic ==
registers:
    eax    = {defs={}, expr=v290[32]}
    edx    = {defs={}, expr=v291[32]}
    esi    = {defs={0x0804854f}, expr=(add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8])))}
    edi    = {defs={0x08048552,0x0804855a}, expr=0[32]}
    eip    = {defs={0x0804855a}, expr=0x08048560[32]}
    pf     = {defs={0x08048552}, expr=1[1]}
    sf     = {defs={0x08048552}, expr=0[1]}
    zf     = {defs={0x08048552}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v293[1]}
    cf     = {defs={}, expr=0[1]}
memory:
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048560[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
0x8048560:call   DWORD PTR ds:[esi]
== PartialSymbolic ==
registers:
    eax    = v961[32]
    edx    = v963[32]
    esp    = v967-0x4[32]
    esi    = v964[32]
    edi    = 0x0[32]
    eip    = v968[32]
    pf     = 0x1[1]
    sf     = 0x0[1]
    zf     = 0x1[1]
    of     = 0x0[1]
    af     = v966[1]
    cf     = 0x0[1]
memory:
    addr=v964[32] value=v968[32]
    addr=v967-0x4[32] value=0x8048562[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v290[32]}
    edx    = {defs={}, expr=v291[32]}
    esp    = {defs={0x08048560}, expr=(add[32] v294[32] -4[32])}
    esi    = {defs={0x0804854f}, expr=(add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8])))}
    edi    = {defs={0x08048552,0x0804855a}, expr=0[32]}
    eip    = {defs={0x08048560}, expr=v295[32]}
    pf     = {defs={0x08048552}, expr=1[1]}
    sf     = {defs={0x08048552}, expr=0[1]}
    zf     = {defs={0x08048552}, expr=1[1]}
    of     = {defs={}, expr=0[1]}
    af     = {defs={}, expr=v293[1]}
    cf     = {defs={}, expr=0[1]}
memory:
    addr={defs={0x0804854f,0x08048560}, expr=(add[32] (add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8]))) 3[32])} value={defs={0x08048560}, expr=(extract[8] 24[32] 32[32] v295[32])}
    addr={defs={0x0804854f,0x08048560}, expr=(add[32] (add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8]))) 2[32])} value={defs={0x08048560}, expr=(extract[8] 16[32] 24[32] v295[32])}
    addr={defs={0x0804854f,0x08048560}, expr=(add[32] (add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8]))) 1[32])} value={defs={0x08048560}, expr=(extract[8] 8[32] 16[32] v295[32])}
    addr={defs={0x0804854f}, expr=(add[32] v291[32] (extract[32] 0[32] 32[32] (umul[40] v290[32] 4[8])))} value={defs={0x08048560}, expr=(extract[8] 0[32] 8[32] v295[32])}
    addr={defs={0x08048560}, expr=(add[32] (add[32] v294[32] -4[32]) 3[32])} value={defs={0x08048560}, expr=8[8]}
    addr={defs={0x08048560}, expr=(add[32] (add[32] v294[32] -4[32]) 2[32])} value={defs={0x08048560}, expr=4[8]}
    addr={defs={0x08048560}, expr=(add[32] (add[32] v294[32] -4[32]) 1[32])} value={defs={0x08048560}, expr=-123[8]}
    addr={defs={0x08048560}, expr=(add[32] v294[32] -4[32])} value={defs={0x08048560}, expr=98[8]}
== Interval ==
registers:
    eax    = doubleword[32]
    edx    = doubleword[32]
    esp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = doubleword[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    of     = 0[1]
    af     = 0..1[1]
    cf     = 0[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
== PartialSymbolic ==
registers:
    edi    = v1001+0x1[32]
    eip    = 0x8048563[32]
    pf     = -v1016+0x1[1]
    sf     = v1017[1]
    zf     = v1018[1]
    af     = v1021[1]
    of     = v1022[1]
memory:
== Symbolic ==
registers:
    edi    = {defs={0x08048562}, expr=(add[32] v301[32] 1[32])}
    eip    = {defs={0x08048562}, expr=0x08048563[32]}
    pf     = {defs={0x08048562}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v301[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v301[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v301[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v301[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v301[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v301[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v301[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v301[32] 1[32])))))))}
    sf     = {defs={0x08048562}, expr=(extract[1] 31[32] 32[32] (add[32] v301[32] 1[32]))}
    zf     = {defs={0x08048562}, expr=(zerop[1] (add[32] v301[32] 1[32]))}
    af     = {defs={0x08048562}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v301[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v301[32]) 1[33])))))}
    of     = {defs={0x08048562}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v301[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v301[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v301[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v301[32]) 1[33]))))))}
memory:
== Interval ==
registers:
    edi    = doubleword[32]
    eip    = 0x08048563[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048563:sub    esi, 0x04
== PartialSymbolic ==
registers:
    esi    = v1023-0x4[32]
    edi    = v1001+0x1[32]
    eip    = 0x8048566[32]
    pf     = -v1038+0x1[1]
    sf     = v1039[1]
    zf     = v1040[1]
    af     = -v1043+0x1[1]
    of     = v1044[1]
    cf     = -v1041+0x1[1]
memory:
== Symbolic ==
registers:
    esi    = {defs={0x08048563}, expr=(add[32] v302[32] -4[32])}
    edi    = {defs={0x08048562}, expr=(add[32] v301[32] 1[32])}
    eip    = {defs={0x08048563}, expr=0x08048566[32]}
    pf     = {defs={0x08048563}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v302[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v302[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v302[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v302[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v302[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v302[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v302[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v302[32] -4[32])))))))}
    sf     = {defs={0x08048563}, expr=(extract[1] 31[32] 32[32] (add[32] v302[32] -4[32]))}
    zf     = {defs={0x08048563}, expr=(zerop[1] (add[32] v302[32] -4[32]))}
    af     = {defs={0x08048563}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v302[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v302[32]) 4294967292[33]))))))}
    of     = {defs={0x08048563}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v302[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v302[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v302[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v302[32]) 4294967292[33]))))))}
    cf     = {defs={0x08048563}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v302[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v302[32]) 4294967292[33]))))))}
memory:
== Interval ==
registers:
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048566[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    of     = 0..1[1]
    cf     = 0..1[1]
memory:
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
== PartialSymbolic ==
registers:
    ebp    = v1045[32]
    esi    = v1023-0x4[32]
    edi    = v1001+0x1[32]
    eip    = 0x8048569[32]
    pf     = -v1063+0x1[1]
    sf     = v1064[1]
    zf     = v1065[1]
    af     = -v1068+0x1[1]
    of     = v1069[1]
    cf     = -v1066+0x1[1]
memory:
    addr=v1045-0x10[32] value=v1046[32]
== Symbolic ==
registers:
    ebp    = {defs={}, expr=v303[32]}
    esi    = {defs={0x08048563}, expr=(add[32] v302[32] -4[32])}
    edi    = {defs={0x08048562}, expr=(add[32] v301[32] 1[32])}
    eip    = {defs={0x08048566}, expr=0x08048569[32]}
    pf     = {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32]))))))))}
    sf     = {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))}
    zf     = {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))}
    af     = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v304[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) (add[33] (uextend[33] 33[32] v304[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) 1[33])))))))}
    of     = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v304[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) (add[33] (uextend[33] 33[32] v304[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v304[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) (add[33] (uextend[33] 33[32] v304[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) 1[33])))))))}
    cf     = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v304[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) (add[33] (uextend[33] 33[32] v304[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) 1[33])))))))}
memory:
    addr={defs={0x08048566}, expr=(add[32] (add[32] v303[32] -16[32]) 3[32])} value={defs={0x08048566}, expr=(extract[8] 24[32] 32[32] v304[32])}
    addr={defs={0x08048566}, expr=(add[32] (add[32] v303[32] -16[32]) 2[32])} value={defs={0x08048566}, expr=(extract[8] 16[32] 24[32] v304[32])}
    addr={defs={0x08048566}, expr=(add[32] (add[32] v303[32] -16[32]) 1[32])} value={defs={0x08048566}, expr=(extract[8] 8[32] 16[32] v304[32])}
    addr={defs={0x08048566}, expr=(add[32] v303[32] -16[32])} value={defs={0x08048566}, expr=(extract[8] 0[32] 8[32] v304[32])}
== Interval ==
registers:
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048569[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    of     = 0..1[1]
    cf     = 0..1[1]
memory:
0x8048569:jne    0x08048560<<Insn>>
== PartialSymbolic ==
registers:
    ebp    = v1045[32]
    esi    = v1023-0x4[32]
    edi    = v1001+0x1[32]
    eip    = v1070[32]
    pf     = -v1063+0x1[1]
    sf     = v1064[1]
    zf     = v1065[1]
    af     = -v1068+0x1[1]
    of     = v1069[1]
    cf     = -v1066+0x1[1]
memory:
    addr=v1045-0x10[32] value=v1046[32]
== Symbolic ==
registers:
    ebp    = {defs={}, expr=v303[32]}
    esi    = {defs={0x08048563}, expr=(add[32] v302[32] -4[32])}
    edi    = {defs={0x08048562}, expr=(add[32] v301[32] 1[32])}
    eip    = {defs={0x08048562,0x08048566,0x08048569}, expr=(ite[32] (invert[1] (zerop[1] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32])}
    pf     = {defs={0x08048562,0x08048566}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32]))))))))}
    sf     = {defs={0x08048562,0x08048566}, expr=(extract[1] 31[32] 32[32] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))}
    zf     = {defs={0x08048562,0x08048566}, expr=(zerop[1] (add[32] v304[32] (add[32] (invert[32] (add[32] v301[32] 1[32])) 1[32])))}
    af     = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v304[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) (add[33] (uextend[33] 33[32] v304[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) 1[33])))))))}
    of     = {defs={0x08048562,0x08048566}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v304[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) (add[33] (uextend[33] 33[32] v304[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v304[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) (add[33] (uextend[33] 33[32] v304[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) 1[33])))))))}
    cf     = {defs={0x08048562,0x08048566}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v304[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) (add[33] (uextend[33] 33[32] v304[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v301[32] 1[32]))) 1[33])))))))}
memory:
    addr={defs={0x08048566}, expr=(add[32] (add[32] v303[32] -16[32]) 3[32])} value={defs={0x08048566}, expr=(extract[8] 24[32] 32[32] v304[32])}
    addr={defs={0x08048566}, expr=(add[32] (add[32] v303[32] -16[32]) 2[32])} value={defs={0x08048566}, expr=(extract[8] 16[32] 24[32] v304[32])}
    addr={defs={0x08048566}, expr=(add[32] (add[32] v303[32] -16[32]) 1[32])} value={defs={0x08048566}, expr=(extract[8] 8[32] 16[32] v304[32])}
    addr={defs={0x08048566}, expr=(add[32] v303[32] -16[32])} value={defs={0x08048566}, expr=(extract[8] 0[32] 8[32] v304[32])}
== Interval ==
registers:
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048560, 0x0804856b[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    of     = 0..1[1]
    cf     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804856b:call   0x080485b0<_fini>
== PartialSymbolic ==
registers:
    esp    = v1072-0x4[32]
    eip    = 0x80485b0[32]
memory:
    addr=v1072-0x4[32] value=0x8048570[32]
== Symbolic ==
registers:
    esp    = {defs={0x0804856b}, expr=(add[32] v310[32] -4[32])}
    eip    = {defs={}, expr=0x080485b0[32]}
memory:
    addr={defs={0x0804856b}, expr=(add[32] (add[32] v310[32] -4[32]) 3[32])} value={defs={0x0804856b}, expr=8[8]}
    addr={defs={0x0804856b}, expr=(add[32] (add[32] v310[32] -4[32]) 2[32])} value={defs={0x0804856b}, expr=4[8]}
    addr={defs={0x0804856b}, expr=(add[32] (add[32] v310[32] -4[32]) 1[32])} value={defs={0x0804856b}, expr=-123[8]}
    addr={defs={0x0804856b}, expr=(add[32] v310[32] -4[32])} value={defs={0x0804856b}, expr=112[8]}
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x080485b0[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
== PartialSymbolic ==
registers:
    esp    = v1074+0xc[32]
    eip    = 0x8048573[32]
    pf     = -v1089+0x1[1]
    sf     = v1090[1]
    zf     = v1091[1]
    af     = v1094[1]
    cf     = v1092[1]
    of     = v1095[1]
memory:
== Symbolic ==
registers:
    esp    = {defs={0x08048570}, expr=(add[32] v312[32] 12[32])}
    eip    = {defs={0x08048570}, expr=0x08048573[32]}
    pf     = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))))))}
    sf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v312[32] 12[32]))}
    zf     = {defs={0x08048570}, expr=(zerop[1] (add[32] v312[32] 12[32]))}
    af     = {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    cf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    of     = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))))}
memory:
== Interval ==
registers:
    esp    = doubleword[32]
    eip    = 0x08048573[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048573:pop    ebx
== PartialSymbolic ==
registers:
    ebx    = v1096[32]
    esp    = v1074+0x10[32]
    eip    = 0x8048574[32]
    pf     = -v1089+0x1[1]
    sf     = v1090[1]
    zf     = v1091[1]
    af     = v1094[1]
    cf     = v1092[1]
    of     = v1095[1]
memory:
    addr=v1074+0xc[32] value=v1096[32]
== Symbolic ==
registers:
    ebx    = {defs={0x08048573}, expr=v313[32]}
    esp    = {defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 4[32])}
    eip    = {defs={0x08048573}, expr=0x08048574[32]}
    pf     = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))))))}
    sf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v312[32] 12[32]))}
    zf     = {defs={0x08048570}, expr=(zerop[1] (add[32] v312[32] 12[32]))}
    af     = {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    cf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    of     = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))))}
memory:
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v313[32])}
    addr={defs={0x08048570}, expr=(add[32] v312[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v313[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048574[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048574:pop    esi
== PartialSymbolic ==
registers:
    ebx    = v1096[32]
    esp    = v1074+0x14[32]
    esi    = v1098[32]
    eip    = 0x8048575[32]
    pf     = -v1089+0x1[1]
    sf     = v1090[1]
    zf     = v1091[1]
    af     = v1094[1]
    cf     = v1092[1]
    of     = v1095[1]
memory:
    addr=v1074+0x10[32] value=v1098[32]
    addr=v1074+0xc[32] value=v1096[32]
== Symbolic ==
registers:
    ebx    = {defs={0x08048573}, expr=v313[32]}
    esp    = {defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32])}
    esi    = {defs={0x08048574}, expr=v318[32]}
    eip    = {defs={0x08048574}, expr=0x08048575[32]}
    pf     = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))))))}
    sf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v312[32] 12[32]))}
    zf     = {defs={0x08048570}, expr=(zerop[1] (add[32] v312[32] 12[32]))}
    af     = {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    cf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    of     = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))))}
memory:
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 3[32])} value={defs={0x08048574}, expr=(extract[8] 24[32] 32[32] v318[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 2[32])} value={defs={0x08048574}, expr=(extract[8] 16[32] 24[32] v318[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 1[32])} value={defs={0x08048574}, expr=(extract[8] 8[32] 16[32] v318[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 4[32])} value={defs={0x08048574}, expr=(extract[8] 0[32] 8[32] v318[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v313[32])}
    addr={defs={0x08048570}, expr=(add[32] v312[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v313[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    esi    = doubleword[32]
    eip    = 0x08048575[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048575:pop    edi
== PartialSymbolic ==
registers:
    ebx    = v1096[32]
    esp    = v1074+0x18[32]
    esi    = v1098[32]
    edi    = v1100[32]
    eip    = 0x8048576[32]
    pf     = -v1089+0x1[1]
    sf     = v1090[1]
    zf     = v1091[1]
    af     = v1094[1]
    cf     = v1092[1]
    of     = v1095[1]
memory:
    addr=v1074+0x14[32] value=v1100[32]
    addr=v1074+0x10[32] value=v1098[32]
    addr=v1074+0xc[32] value=v1096[32]
== Symbolic ==
registers:
    ebx    = {defs={0x08048573}, expr=v313[32]}
    esp    = {defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32])}
    esi    = {defs={0x08048574}, expr=v318[32]}
    edi    = {defs={0x08048575}, expr=v323[32]}
    eip    = {defs={0x08048575}, expr=0x08048576[32]}
    pf     = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))))))}
    sf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v312[32] 12[32]))}
    zf     = {defs={0x08048570}, expr=(zerop[1] (add[32] v312[32] 12[32]))}
    af     = {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    cf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    of     = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))))}
memory:
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048575}, expr=(extract[8] 24[32] 32[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048575}, expr=(extract[8] 16[32] 24[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048575}, expr=(extract[8] 8[32] 16[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32])} value={defs={0x08048575}, expr=(extract[8] 0[32] 8[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 3[32])} value={defs={0x08048574}, expr=(extract[8] 24[32] 32[32] v318[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 2[32])} value={defs={0x08048574}, expr=(extract[8] 16[32] 24[32] v318[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 1[32])} value={defs={0x08048574}, expr=(extract[8] 8[32] 16[32] v318[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 4[32])} value={defs={0x08048574}, expr=(extract[8] 0[32] 8[32] v318[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v313[32])}
    addr={defs={0x08048570}, expr=(add[32] v312[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v313[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048576[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048576:pop    ebp
== PartialSymbolic ==
registers:
    ebx    = v1096[32]
    esp    = v1074+0x1c[32]
    ebp    = v1102[32]
    esi    = v1098[32]
    edi    = v1100[32]
    eip    = 0x8048577[32]
    pf     = -v1089+0x1[1]
    sf     = v1090[1]
    zf     = v1091[1]
    af     = v1094[1]
    cf     = v1092[1]
    of     = v1095[1]
memory:
    addr=v1074+0x18[32] value=v1102[32]
    addr=v1074+0x14[32] value=v1100[32]
    addr=v1074+0x10[32] value=v1098[32]
    addr=v1074+0xc[32] value=v1096[32]
== Symbolic ==
registers:
    ebx    = {defs={0x08048573}, expr=v313[32]}
    esp    = {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])}
    ebp    = {defs={0x08048576}, expr=v328[32]}
    esi    = {defs={0x08048574}, expr=v318[32]}
    edi    = {defs={0x08048575}, expr=v323[32]}
    eip    = {defs={0x08048576}, expr=0x08048577[32]}
    pf     = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))))))}
    sf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v312[32] 12[32]))}
    zf     = {defs={0x08048570}, expr=(zerop[1] (add[32] v312[32] 12[32]))}
    af     = {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    cf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    of     = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))))}
memory:
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048576}, expr=(extract[8] 24[32] 32[32] v328[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048576}, expr=(extract[8] 16[32] 24[32] v328[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048576}, expr=(extract[8] 8[32] 16[32] v328[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32])} value={defs={0x08048576}, expr=(extract[8] 0[32] 8[32] v328[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048575}, expr=(extract[8] 24[32] 32[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048575}, expr=(extract[8] 16[32] 24[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048575}, expr=(extract[8] 8[32] 16[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32])} value={defs={0x08048575}, expr=(extract[8] 0[32] 8[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 3[32])} value={defs={0x08048574}, expr=(extract[8] 24[32] 32[32] v318[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 2[32])} value={defs={0x08048574}, expr=(extract[8] 16[32] 24[32] v318[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 1[32])} value={defs={0x08048574}, expr=(extract[8] 8[32] 16[32] v318[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 4[32])} value={defs={0x08048574}, expr=(extract[8] 0[32] 8[32] v318[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v313[32])}
    addr={defs={0x08048570}, expr=(add[32] v312[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v313[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x08048577[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048577:ret    
== PartialSymbolic ==
registers:
    ebx    = v1096[32]
    esp    = v1074+0x20[32]
    ebp    = v1102[32]
    esi    = v1098[32]
    edi    = v1100[32]
    eip    = v1104[32]
    pf     = -v1089+0x1[1]
    sf     = v1090[1]
    zf     = v1091[1]
    af     = v1094[1]
    cf     = v1092[1]
    of     = v1095[1]
memory:
    addr=v1074+0x1c[32] value=v1104[32]
    addr=v1074+0x18[32] value=v1102[32]
    addr=v1074+0x14[32] value=v1100[32]
    addr=v1074+0x10[32] value=v1098[32]
    addr=v1074+0xc[32] value=v1096[32]
== Symbolic ==
registers:
    ebx    = {defs={0x08048573}, expr=v313[32]}
    esp    = {defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32])}
    ebp    = {defs={0x08048576}, expr=v328[32]}
    esi    = {defs={0x08048574}, expr=v318[32]}
    edi    = {defs={0x08048575}, expr=v323[32]}
    eip    = {defs={0x08048577}, expr=v333[32]}
    pf     = {defs={0x08048570}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v312[32] 12[32])))))))}
    sf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (add[32] v312[32] 12[32]))}
    zf     = {defs={0x08048570}, expr=(zerop[1] (add[32] v312[32] 12[32]))}
    af     = {defs={0x08048570}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    cf     = {defs={0x08048570}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33])))))}
    of     = {defs={0x08048570}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v312[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v312[32]) 12[33]))))))}
memory:
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048577}, expr=(extract[8] 24[32] 32[32] v333[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048577}, expr=(extract[8] 16[32] 24[32] v333[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048577}, expr=(extract[8] 8[32] 16[32] v333[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])} value={defs={0x08048577}, expr=(extract[8] 0[32] 8[32] v333[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048576}, expr=(extract[8] 24[32] 32[32] v328[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048576}, expr=(extract[8] 16[32] 24[32] v328[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048576}, expr=(extract[8] 8[32] 16[32] v328[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 4[32])} value={defs={0x08048576}, expr=(extract[8] 0[32] 8[32] v328[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 3[32])} value={defs={0x08048575}, expr=(extract[8] 24[32] 32[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 2[32])} value={defs={0x08048575}, expr=(extract[8] 16[32] 24[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574,0x08048575}, expr=(add[32] (add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32]) 1[32])} value={defs={0x08048575}, expr=(extract[8] 8[32] 16[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 4[32])} value={defs={0x08048575}, expr=(extract[8] 0[32] 8[32] v323[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 3[32])} value={defs={0x08048574}, expr=(extract[8] 24[32] 32[32] v318[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 2[32])} value={defs={0x08048574}, expr=(extract[8] 16[32] 24[32] v318[32])}
    addr={defs={0x08048570,0x08048573,0x08048574}, expr=(add[32] (add[32] (add[32] v312[32] 12[32]) 4[32]) 1[32])} value={defs={0x08048574}, expr=(extract[8] 8[32] 16[32] v318[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 4[32])} value={defs={0x08048574}, expr=(extract[8] 0[32] 8[32] v318[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 3[32])} value={defs={0x08048573}, expr=(extract[8] 24[32] 32[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 2[32])} value={defs={0x08048573}, expr=(extract[8] 16[32] 24[32] v313[32])}
    addr={defs={0x08048570,0x08048573}, expr=(add[32] (add[32] v312[32] 12[32]) 1[32])} value={defs={0x08048573}, expr=(extract[8] 8[32] 16[32] v313[32])}
    addr={defs={0x08048570}, expr=(add[32] v312[32] 12[32])} value={defs={0x08048573}, expr=(extract[8] 0[32] 8[32] v313[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = doubleword[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
== PartialSymbolic ==
registers:
    esp    = v1107-0x4[32]
    ebp    = v1108[32]
    eip    = 0x8048581[32]
memory:
    addr=v1107-0x4[32] value=v1108[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    ebp    = {defs={}, expr=v340[32]}
    eip    = {defs={0x08048580}, expr=0x08048581[32]}
memory:
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] v339[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v340[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048581[32]
memory:
0x8048581:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v1107-0x4[32]
    ebp    = v1107-0x4[32]
    eip    = 0x8048583[32]
memory:
    addr=v1107-0x4[32] value=v1108[32]
== Symbolic ==
registers:
    esp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    ebp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    eip    = {defs={0x08048581}, expr=0x08048583[32]}
memory:
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] v339[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v340[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048583[32]
memory:
0x8048583:push   ebx
== PartialSymbolic ==
registers:
    ebx    = v1109[32]
    esp    = v1107-0x8[32]
    ebp    = v1107-0x4[32]
    eip    = 0x8048584[32]
memory:
    addr=v1107-0x8[32] value=v1109[32]
    addr=v1107-0x4[32] value=v1108[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v341[32]}
    esp    = {defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v339[32] -4[32]) -4[32])}
    ebp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    eip    = {defs={0x08048583}, expr=0x08048584[32]}
memory:
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v339[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v341[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] v339[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v340[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048584[32]
memory:
0x8048584:sub    esp, 0x04
== PartialSymbolic ==
registers:
    ebx    = v1109[32]
    esp    = v1107-0xc[32]
    ebp    = v1107-0x4[32]
    eip    = 0x8048587[32]
    pf     = -v1124+0x1[1]
    sf     = v1125[1]
    zf     = v1126[1]
    af     = -v1129+0x1[1]
    cf     = -v1127+0x1[1]
    of     = v1130[1]
memory:
    addr=v1107-0x8[32] value=v1109[32]
    addr=v1107-0x4[32] value=v1108[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v341[32]}
    esp    = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    eip    = {defs={0x08048584}, expr=0x08048587[32]}
    pf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))))))}
    sf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))}
    zf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))}
    af     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
    cf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
    of     = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
memory:
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v339[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v341[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] v339[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v340[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048587[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048587:mov    ebx, 0x080495e8<.ctors>
== PartialSymbolic ==
registers:
    ebx    = 0x80495e8[32]
    esp    = v1107-0xc[32]
    ebp    = v1107-0x4[32]
    eip    = 0x804858c[32]
    pf     = -v1124+0x1[1]
    sf     = v1125[1]
    zf     = v1126[1]
    af     = -v1129+0x1[1]
    cf     = -v1127+0x1[1]
    of     = v1130[1]
memory:
    addr=v1107-0x8[32] value=v1109[32]
    addr=v1107-0x4[32] value=v1108[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=0x080495e8[32]}
    esp    = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    eip    = {defs={0x08048587}, expr=0x0804858c[32]}
    pf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))))))}
    sf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))}
    zf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))}
    af     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
    cf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
    of     = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
memory:
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v339[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v341[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] v339[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v340[32])}
== Interval ==
registers:
    ebx    = 0x080495e8[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x0804858c[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
== PartialSymbolic ==
registers:
    eax    = v1131[32]
    ebx    = 0x80495e8[32]
    esp    = v1107-0xc[32]
    ebp    = v1107-0x4[32]
    eip    = 0x8048591[32]
    pf     = -v1124+0x1[1]
    sf     = v1125[1]
    zf     = v1126[1]
    af     = -v1129+0x1[1]
    cf     = -v1127+0x1[1]
    of     = v1130[1]
memory:
    addr=0x80495e8[32] value=v1131[32]
    addr=v1107-0x8[32] value=v1109[32]
    addr=v1107-0x4[32] value=v1108[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804858c}, expr=v342[32]}
    ebx    = {defs={}, expr=0x080495e8[32]}
    esp    = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    eip    = {defs={0x0804858c}, expr=0x08048591[32]}
    pf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])))))))}
    sf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))}
    zf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(zerop[1] (add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32]))}
    af     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
    cf     = {defs={0x08048580,0x08048583,0x08048584}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
    of     = {defs={0x08048580,0x08048583,0x08048584}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v339[32] -4[32]) -4[32])) 4294967292[33]))))))}
memory:
    addr={defs={0x0804858c}, expr=0x080495eb[32]} value={defs={0x0804858c}, expr=(extract[8] 24[32] 32[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495ea[32]} value={defs={0x0804858c}, expr=(extract[8] 16[32] 24[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495e9[32]} value={defs={0x0804858c}, expr=(extract[8] 8[32] 16[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495e8[32]} value={defs={0x0804858c}, expr=(extract[8] 0[32] 8[32] v342[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v339[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v341[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] v339[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v340[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = 0x080495e8[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048591[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048591:cmp    eax, 0xff<-0x01>
== PartialSymbolic ==
registers:
    eax    = v1131[32]
    ebx    = 0x80495e8[32]
    esp    = v1107-0xc[32]
    ebp    = v1107-0x4[32]
    eip    = 0x8048594[32]
    pf     = -v1199+0x1[1]
    sf     = v1200[1]
    zf     = v1201[1]
    af     = -v1204+0x1[1]
    cf     = -v1202+0x1[1]
    of     = v1205[1]
memory:
    addr=0x80495e8[32] value=v1131[32]
    addr=v1107-0x8[32] value=v1109[32]
    addr=v1107-0x4[32] value=v1108[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804858c}, expr=v342[32]}
    ebx    = {defs={}, expr=0x080495e8[32]}
    esp    = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    eip    = {defs={0x08048591}, expr=0x08048594[32]}
    pf     = {defs={0x0804858c,0x08048591}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32])))))))}
    sf     = {defs={0x0804858c,0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] v342[32] 1[32]))}
    zf     = {defs={0x0804858c,0x08048591}, expr=(zerop[1] (add[32] v342[32] 1[32]))}
    af     = {defs={0x0804858c,0x08048591}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v342[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v342[32]) 1[33]))))))}
    cf     = {defs={0x0804858c,0x08048591}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v342[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v342[32]) 1[33]))))))}
    of     = {defs={0x0804858c,0x08048591}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v342[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v342[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v342[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v342[32]) 1[33]))))))}
memory:
    addr={defs={0x0804858c}, expr=0x080495eb[32]} value={defs={0x0804858c}, expr=(extract[8] 24[32] 32[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495ea[32]} value={defs={0x0804858c}, expr=(extract[8] 16[32] 24[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495e9[32]} value={defs={0x0804858c}, expr=(extract[8] 8[32] 16[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495e8[32]} value={defs={0x0804858c}, expr=(extract[8] 0[32] 8[32] v342[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v339[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v341[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] v339[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v340[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = 0x080495e8[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048594[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x8048594:je     0x080485ac<<Insn>>
== PartialSymbolic ==
registers:
    eax    = v1131[32]
    ebx    = 0x80495e8[32]
    esp    = v1107-0xc[32]
    ebp    = v1107-0x4[32]
    eip    = v1206[32]
    pf     = -v1199+0x1[1]
    sf     = v1200[1]
    zf     = v1201[1]
    af     = -v1204+0x1[1]
    cf     = -v1202+0x1[1]
    of     = v1205[1]
memory:
    addr=0x80495e8[32] value=v1131[32]
    addr=v1107-0x8[32] value=v1109[32]
    addr=v1107-0x4[32] value=v1108[32]
== Symbolic ==
registers:
    eax    = {defs={0x0804858c}, expr=v342[32]}
    ebx    = {defs={}, expr=0x080495e8[32]}
    esp    = {defs={0x08048580,0x08048583,0x08048584}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x08048580}, expr=(add[32] v339[32] -4[32])}
    eip    = {defs={0x0804858c,0x08048591,0x08048594}, expr=(ite[32] (zerop[1] (add[32] v342[32] 1[32])) 0x080485ac[32] 0x08048596[32])}
    pf     = {defs={0x0804858c,0x08048591}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v342[32] 1[32])))))))}
    sf     = {defs={0x0804858c,0x08048591}, expr=(extract[1] 31[32] 32[32] (add[32] v342[32] 1[32]))}
    zf     = {defs={0x0804858c,0x08048591}, expr=(zerop[1] (add[32] v342[32] 1[32]))}
    af     = {defs={0x0804858c,0x08048591}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v342[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v342[32]) 1[33]))))))}
    cf     = {defs={0x0804858c,0x08048591}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v342[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v342[32]) 1[33]))))))}
    of     = {defs={0x0804858c,0x08048591}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v342[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v342[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v342[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v342[32]) 1[33]))))))}
memory:
    addr={defs={0x0804858c}, expr=0x080495eb[32]} value={defs={0x0804858c}, expr=(extract[8] 24[32] 32[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495ea[32]} value={defs={0x0804858c}, expr=(extract[8] 16[32] 24[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495e9[32]} value={defs={0x0804858c}, expr=(extract[8] 8[32] 16[32] v342[32])}
    addr={defs={0x0804858c}, expr=0x080495e8[32]} value={defs={0x0804858c}, expr=(extract[8] 0[32] 8[32] v342[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 3[32])} value={defs={0x08048583}, expr=(extract[8] 24[32] 32[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 2[32])} value={defs={0x08048583}, expr=(extract[8] 16[32] 24[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] (add[32] v339[32] -4[32]) -4[32]) 1[32])} value={defs={0x08048583}, expr=(extract[8] 8[32] 16[32] v341[32])}
    addr={defs={0x08048580,0x08048583}, expr=(add[32] (add[32] v339[32] -4[32]) -4[32])} value={defs={0x08048583}, expr=(extract[8] 0[32] 8[32] v341[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 3[32])} value={defs={0x08048580}, expr=(extract[8] 24[32] 32[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 2[32])} value={defs={0x08048580}, expr=(extract[8] 16[32] 24[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] (add[32] v339[32] -4[32]) 1[32])} value={defs={0x08048580}, expr=(extract[8] 8[32] 16[32] v340[32])}
    addr={defs={0x08048580}, expr=(add[32] v339[32] -4[32])} value={defs={0x08048580}, expr=(extract[8] 0[32] 8[32] v340[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = 0x080495e8[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x08048596, 0x080485ac[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048596:lea    esi, [esi + 0x00]
== PartialSymbolic ==
registers:
    esi    = v1208[32]
    eip    = 0x8048599[32]
memory:
== Symbolic ==
registers:
    esi    = {defs={}, expr=v348[32]}
    eip    = {defs={0x08048596}, expr=0x08048599[32]}
memory:
== Interval ==
registers:
    esi    = doubleword[32]
    eip    = 0x08048599[32]
memory:
0x8048599:lea    edi, [edi + 0x00000000]
== PartialSymbolic ==
registers:
    esi    = v1208[32]
    edi    = v1209[32]
    eip    = 0x80485a0[32]
memory:
== Symbolic ==
registers:
    esi    = {defs={}, expr=v348[32]}
    edi    = {defs={}, expr=v349[32]}
    eip    = {defs={0x08048599}, expr=0x080485a0[32]}
memory:
== Interval ==
registers:
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080485a0[32]
memory:
0x80485a0:sub    ebx, 0x04
== PartialSymbolic ==
registers:
    ebx    = v1210-0x4[32]
    esi    = v1208[32]
    edi    = v1209[32]
    eip    = 0x80485a3[32]
    pf     = -v1225+0x1[1]
    sf     = v1226[1]
    zf     = v1227[1]
    af     = -v1230+0x1[1]
    cf     = -v1228+0x1[1]
    of     = v1231[1]
memory:
== Symbolic ==
registers:
    ebx    = {defs={0x080485a0}, expr=(add[32] v350[32] -4[32])}
    esi    = {defs={}, expr=v348[32]}
    edi    = {defs={}, expr=v349[32]}
    eip    = {defs={0x080485a0}, expr=0x080485a3[32]}
    pf     = {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32])))))))}
    sf     = {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] v350[32] -4[32]))}
    zf     = {defs={0x080485a0}, expr=(zerop[1] (add[32] v350[32] -4[32]))}
    af     = {defs={0x080485a0}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v350[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v350[32]) 4294967292[33]))))))}
    cf     = {defs={0x080485a0}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v350[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v350[32]) 4294967292[33]))))))}
    of     = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v350[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v350[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v350[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v350[32]) 4294967292[33]))))))}
memory:
== Interval ==
registers:
    ebx    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = 0x080485a3[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80485a3:call   eax
== PartialSymbolic ==
registers:
    eax    = v1233[32]
    ebx    = v1210-0x4[32]
    esp    = v1232-0x4[32]
    esi    = v1208[32]
    edi    = v1209[32]
    eip    = v1233[32]
    pf     = -v1225+0x1[1]
    sf     = v1226[1]
    zf     = v1227[1]
    af     = -v1230+0x1[1]
    cf     = -v1228+0x1[1]
    of     = v1231[1]
memory:
    addr=v1232-0x4[32] value=0x80485a5[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v352[32]}
    ebx    = {defs={0x080485a0}, expr=(add[32] v350[32] -4[32])}
    esp    = {defs={0x080485a3}, expr=(add[32] v351[32] -4[32])}
    esi    = {defs={}, expr=v348[32]}
    edi    = {defs={}, expr=v349[32]}
    eip    = {defs={}, expr=v352[32]}
    pf     = {defs={0x080485a0}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v350[32] -4[32])))))))}
    sf     = {defs={0x080485a0}, expr=(extract[1] 31[32] 32[32] (add[32] v350[32] -4[32]))}
    zf     = {defs={0x080485a0}, expr=(zerop[1] (add[32] v350[32] -4[32]))}
    af     = {defs={0x080485a0}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v350[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v350[32]) 4294967292[33]))))))}
    cf     = {defs={0x080485a0}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v350[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v350[32]) 4294967292[33]))))))}
    of     = {defs={0x080485a0}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v350[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v350[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v350[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v350[32]) 4294967292[33]))))))}
memory:
    addr={defs={0x080485a3}, expr=(add[32] (add[32] v351[32] -4[32]) 3[32])} value={defs={0x080485a3}, expr=8[8]}
    addr={defs={0x080485a3}, expr=(add[32] (add[32] v351[32] -4[32]) 2[32])} value={defs={0x080485a3}, expr=4[8]}
    addr={defs={0x080485a3}, expr=(add[32] (add[32] v351[32] -4[32]) 1[32])} value={defs={0x080485a3}, expr=-123[8]}
    addr={defs={0x080485a3}, expr=(add[32] v351[32] -4[32])} value={defs={0x080485a3}, expr=-91[8]}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    esi    = doubleword[32]
    edi    = doubleword[32]
    eip    = doubleword[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
== PartialSymbolic ==
registers:
    eax    = v1236[32]
    ebx    = v1235[32]
    eip    = 0x80485a7[32]
memory:
    addr=v1235[32] value=v1236[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485a5}, expr=v355[32]}
    ebx    = {defs={}, expr=v354[32]}
    eip    = {defs={0x080485a5}, expr=0x080485a7[32]}
memory:
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 3[32])} value={defs={0x080485a5}, expr=(extract[8] 24[32] 32[32] v355[32])}
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 2[32])} value={defs={0x080485a5}, expr=(extract[8] 16[32] 24[32] v355[32])}
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 1[32])} value={defs={0x080485a5}, expr=(extract[8] 8[32] 16[32] v355[32])}
    addr={defs={}, expr=v354[32]} value={defs={0x080485a5}, expr=(extract[8] 0[32] 8[32] v355[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    eip    = 0x080485a7[32]
memory:
0x80485a7:cmp    eax, 0xff<-0x01>
== PartialSymbolic ==
registers:
    eax    = v1236[32]
    ebx    = v1235[32]
    eip    = 0x80485aa[32]
    pf     = -v1252+0x1[1]
    sf     = v1253[1]
    zf     = v1254[1]
    af     = -v1257+0x1[1]
    cf     = -v1255+0x1[1]
    of     = v1258[1]
memory:
    addr=v1235[32] value=v1236[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485a5}, expr=v355[32]}
    ebx    = {defs={}, expr=v354[32]}
    eip    = {defs={0x080485a7}, expr=0x080485aa[32]}
    pf     = {defs={0x080485a5,0x080485a7}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32])))))))}
    sf     = {defs={0x080485a5,0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v355[32] 1[32]))}
    zf     = {defs={0x080485a5,0x080485a7}, expr=(zerop[1] (add[32] v355[32] 1[32]))}
    af     = {defs={0x080485a5,0x080485a7}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v355[32]) 1[33]))))))}
    cf     = {defs={0x080485a5,0x080485a7}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v355[32]) 1[33]))))))}
    of     = {defs={0x080485a5,0x080485a7}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v355[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v355[32]) 1[33]))))))}
memory:
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 3[32])} value={defs={0x080485a5}, expr=(extract[8] 24[32] 32[32] v355[32])}
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 2[32])} value={defs={0x080485a5}, expr=(extract[8] 16[32] 24[32] v355[32])}
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 1[32])} value={defs={0x080485a5}, expr=(extract[8] 8[32] 16[32] v355[32])}
    addr={defs={}, expr=v354[32]} value={defs={0x080485a5}, expr=(extract[8] 0[32] 8[32] v355[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    eip    = 0x080485aa[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80485aa:jne    0x080485a0<<Insn>>
== PartialSymbolic ==
registers:
    eax    = v1236[32]
    ebx    = v1235[32]
    eip    = v1259[32]
    pf     = -v1252+0x1[1]
    sf     = v1253[1]
    zf     = v1254[1]
    af     = -v1257+0x1[1]
    cf     = -v1255+0x1[1]
    of     = v1258[1]
memory:
    addr=v1235[32] value=v1236[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485a5}, expr=v355[32]}
    ebx    = {defs={}, expr=v354[32]}
    eip    = {defs={0x080485a5,0x080485a7,0x080485aa}, expr=(ite[32] (invert[1] (zerop[1] (add[32] v355[32] 1[32]))) 0x080485a0[32] 0x080485ac[32])}
    pf     = {defs={0x080485a5,0x080485a7}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v355[32] 1[32])))))))}
    sf     = {defs={0x080485a5,0x080485a7}, expr=(extract[1] 31[32] 32[32] (add[32] v355[32] 1[32]))}
    zf     = {defs={0x080485a5,0x080485a7}, expr=(zerop[1] (add[32] v355[32] 1[32]))}
    af     = {defs={0x080485a5,0x080485a7}, expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v355[32]) 1[33]))))))}
    cf     = {defs={0x080485a5,0x080485a7}, expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v355[32]) 1[33]))))))}
    of     = {defs={0x080485a5,0x080485a7}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v355[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v355[32]) 1[33]))))))}
memory:
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 3[32])} value={defs={0x080485a5}, expr=(extract[8] 24[32] 32[32] v355[32])}
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 2[32])} value={defs={0x080485a5}, expr=(extract[8] 16[32] 24[32] v355[32])}
    addr={defs={0x080485a5}, expr=(add[32] v354[32] 1[32])} value={defs={0x080485a5}, expr=(extract[8] 8[32] 16[32] v355[32])}
    addr={defs={}, expr=v354[32]} value={defs={0x080485a5}, expr=(extract[8] 0[32] 8[32] v355[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    eip    = 0x080485a0, 0x080485ac[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
== PartialSymbolic ==
registers:
    eax    = v1262[32]
    esp    = v1261+0x4[32]
    eip    = 0x80485ad[32]
memory:
    addr=v1261[32] value=v1262[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485ac}, expr=v362[32]}
    esp    = {defs={0x080485ac}, expr=(add[32] v361[32] 4[32])}
    eip    = {defs={0x080485ac}, expr=0x080485ad[32]}
memory:
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 3[32])} value={defs={0x080485ac}, expr=(extract[8] 24[32] 32[32] v362[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 2[32])} value={defs={0x080485ac}, expr=(extract[8] 16[32] 24[32] v362[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 1[32])} value={defs={0x080485ac}, expr=(extract[8] 8[32] 16[32] v362[32])}
    addr={defs={}, expr=v361[32]} value={defs={0x080485ac}, expr=(extract[8] 0[32] 8[32] v362[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080485ad[32]
memory:
0x80485ad:pop    ebx
== PartialSymbolic ==
registers:
    eax    = v1262[32]
    ebx    = v1264[32]
    esp    = v1261+0x8[32]
    eip    = 0x80485ae[32]
memory:
    addr=v1261+0x4[32] value=v1264[32]
    addr=v1261[32] value=v1262[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485ac}, expr=v362[32]}
    ebx    = {defs={0x080485ad}, expr=v367[32]}
    esp    = {defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 4[32])}
    eip    = {defs={0x080485ad}, expr=0x080485ae[32]}
memory:
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 3[32])} value={defs={0x080485ad}, expr=(extract[8] 24[32] 32[32] v367[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 2[32])} value={defs={0x080485ad}, expr=(extract[8] 16[32] 24[32] v367[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 1[32])} value={defs={0x080485ad}, expr=(extract[8] 8[32] 16[32] v367[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 4[32])} value={defs={0x080485ad}, expr=(extract[8] 0[32] 8[32] v367[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 3[32])} value={defs={0x080485ac}, expr=(extract[8] 24[32] 32[32] v362[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 2[32])} value={defs={0x080485ac}, expr=(extract[8] 16[32] 24[32] v362[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 1[32])} value={defs={0x080485ac}, expr=(extract[8] 8[32] 16[32] v362[32])}
    addr={defs={}, expr=v361[32]} value={defs={0x080485ac}, expr=(extract[8] 0[32] 8[32] v362[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080485ae[32]
memory:
0x80485ae:pop    ebp
== PartialSymbolic ==
registers:
    eax    = v1262[32]
    ebx    = v1264[32]
    esp    = v1261+0xc[32]
    ebp    = v1266[32]
    eip    = 0x80485af[32]
memory:
    addr=v1261+0x8[32] value=v1266[32]
    addr=v1261+0x4[32] value=v1264[32]
    addr=v1261[32] value=v1262[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485ac}, expr=v362[32]}
    ebx    = {defs={0x080485ad}, expr=v367[32]}
    esp    = {defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 4[32])}
    ebp    = {defs={0x080485ae}, expr=v372[32]}
    eip    = {defs={0x080485ae}, expr=0x080485af[32]}
memory:
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 3[32])} value={defs={0x080485ae}, expr=(extract[8] 24[32] 32[32] v372[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 2[32])} value={defs={0x080485ae}, expr=(extract[8] 16[32] 24[32] v372[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 1[32])} value={defs={0x080485ae}, expr=(extract[8] 8[32] 16[32] v372[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 4[32])} value={defs={0x080485ae}, expr=(extract[8] 0[32] 8[32] v372[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 3[32])} value={defs={0x080485ad}, expr=(extract[8] 24[32] 32[32] v367[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 2[32])} value={defs={0x080485ad}, expr=(extract[8] 16[32] 24[32] v367[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 1[32])} value={defs={0x080485ad}, expr=(extract[8] 8[32] 16[32] v367[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 4[32])} value={defs={0x080485ad}, expr=(extract[8] 0[32] 8[32] v367[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 3[32])} value={defs={0x080485ac}, expr=(extract[8] 24[32] 32[32] v362[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 2[32])} value={defs={0x080485ac}, expr=(extract[8] 16[32] 24[32] v362[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 1[32])} value={defs={0x080485ac}, expr=(extract[8] 8[32] 16[32] v362[32])}
    addr={defs={}, expr=v361[32]} value={defs={0x080485ac}, expr=(extract[8] 0[32] 8[32] v362[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080485af[32]
memory:
0x80485af:ret    
== PartialSymbolic ==
registers:
    eax    = v1262[32]
    ebx    = v1264[32]
    esp    = v1261+0x10[32]
    ebp    = v1266[32]
    eip    = v1268[32]
memory:
    addr=v1261+0xc[32] value=v1268[32]
    addr=v1261+0x8[32] value=v1266[32]
    addr=v1261+0x4[32] value=v1264[32]
    addr=v1261[32] value=v1262[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485ac}, expr=v362[32]}
    ebx    = {defs={0x080485ad}, expr=v367[32]}
    esp    = {defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] (add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 4[32]) 4[32])}
    ebp    = {defs={0x080485ae}, expr=v372[32]}
    eip    = {defs={0x080485af}, expr=v377[32]}
memory:
    addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] (add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 4[32]) 3[32])} value={defs={0x080485af}, expr=(extract[8] 24[32] 32[32] v377[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] (add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 4[32]) 2[32])} value={defs={0x080485af}, expr=(extract[8] 16[32] 24[32] v377[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae,0x080485af}, expr=(add[32] (add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 4[32]) 1[32])} value={defs={0x080485af}, expr=(extract[8] 8[32] 16[32] v377[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 4[32])} value={defs={0x080485af}, expr=(extract[8] 0[32] 8[32] v377[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 3[32])} value={defs={0x080485ae}, expr=(extract[8] 24[32] 32[32] v372[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 2[32])} value={defs={0x080485ae}, expr=(extract[8] 16[32] 24[32] v372[32])}
    addr={defs={0x080485ac,0x080485ad,0x080485ae}, expr=(add[32] (add[32] (add[32] v361[32] 4[32]) 4[32]) 1[32])} value={defs={0x080485ae}, expr=(extract[8] 8[32] 16[32] v372[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 4[32])} value={defs={0x080485ae}, expr=(extract[8] 0[32] 8[32] v372[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 3[32])} value={defs={0x080485ad}, expr=(extract[8] 24[32] 32[32] v367[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 2[32])} value={defs={0x080485ad}, expr=(extract[8] 16[32] 24[32] v367[32])}
    addr={defs={0x080485ac,0x080485ad}, expr=(add[32] (add[32] v361[32] 4[32]) 1[32])} value={defs={0x080485ad}, expr=(extract[8] 8[32] 16[32] v367[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 4[32])} value={defs={0x080485ad}, expr=(extract[8] 0[32] 8[32] v367[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 3[32])} value={defs={0x080485ac}, expr=(extract[8] 24[32] 32[32] v362[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 2[32])} value={defs={0x080485ac}, expr=(extract[8] 16[32] 24[32] v362[32])}
    addr={defs={0x080485ac}, expr=(add[32] v361[32] 1[32])} value={defs={0x080485ac}, expr=(extract[8] 8[32] 16[32] v362[32])}
    addr={defs={}, expr=v361[32]} value={defs={0x080485ac}, expr=(extract[8] 0[32] 8[32] v362[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = doubleword[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
== PartialSymbolic ==
registers:
    esp    = v1271-0x4[32]
    ebp    = v1272[32]
    eip    = 0x80485b1[32]
memory:
    addr=v1271-0x4[32] value=v1272[32]
== Symbolic ==
registers:
    esp    = {defs={0x080485b0}, expr=(add[32] v383[32] -4[32])}
    ebp    = {defs={}, expr=v384[32]}
    eip    = {defs={0x080485b0}, expr=0x080485b1[32]}
memory:
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] v383[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v384[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080485b1[32]
memory:
0x80485b1:mov    ebp, esp
== PartialSymbolic ==
registers:
    esp    = v1271-0x4[32]
    ebp    = v1271-0x4[32]
    eip    = 0x80485b3[32]
memory:
    addr=v1271-0x4[32] value=v1272[32]
== Symbolic ==
registers:
    esp    = {defs={0x080485b0}, expr=(add[32] v383[32] -4[32])}
    ebp    = {defs={0x080485b0}, expr=(add[32] v383[32] -4[32])}
    eip    = {defs={0x080485b1}, expr=0x080485b3[32]}
memory:
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] v383[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v384[32])}
== Interval ==
registers:
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080485b3[32]
memory:
0x80485b3:push   ebx
== PartialSymbolic ==
registers:
    ebx    = v1273[32]
    esp    = v1271-0x8[32]
    ebp    = v1271-0x4[32]
    eip    = 0x80485b4[32]
memory:
    addr=v1271-0x8[32] value=v1273[32]
    addr=v1271-0x4[32] value=v1272[32]
== Symbolic ==
registers:
    ebx    = {defs={}, expr=v385[32]}
    esp    = {defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] v383[32] -4[32]) -4[32])}
    ebp    = {defs={0x080485b0}, expr=(add[32] v383[32] -4[32])}
    eip    = {defs={0x080485b3}, expr=0x080485b4[32]}
memory:
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 3[32])} value={defs={0x080485b3}, expr=(extract[8] 24[32] 32[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 2[32])} value={defs={0x080485b3}, expr=(extract[8] 16[32] 24[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 1[32])} value={defs={0x080485b3}, expr=(extract[8] 8[32] 16[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] v383[32] -4[32]) -4[32])} value={defs={0x080485b3}, expr=(extract[8] 0[32] 8[32] v385[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] v383[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v384[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080485b4[32]
memory:
0x80485b4:push   eax
== PartialSymbolic ==
registers:
    eax    = v1274[32]
    ebx    = v1273[32]
    esp    = v1271-0xc[32]
    ebp    = v1271-0x4[32]
    eip    = 0x80485b5[32]
memory:
    addr=v1271-0xc[32] value=v1274[32]
    addr=v1271-0x8[32] value=v1273[32]
    addr=v1271-0x4[32] value=v1272[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v386[32]}
    ebx    = {defs={}, expr=v385[32]}
    esp    = {defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x080485b0}, expr=(add[32] v383[32] -4[32])}
    eip    = {defs={0x080485b4}, expr=0x080485b5[32]}
memory:
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080485b4}, expr=(extract[8] 24[32] 32[32] v386[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080485b4}, expr=(extract[8] 16[32] 24[32] v386[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080485b4}, expr=(extract[8] 8[32] 16[32] v386[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32])} value={defs={0x080485b4}, expr=(extract[8] 0[32] 8[32] v386[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 3[32])} value={defs={0x080485b3}, expr=(extract[8] 24[32] 32[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 2[32])} value={defs={0x080485b3}, expr=(extract[8] 16[32] 24[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 1[32])} value={defs={0x080485b3}, expr=(extract[8] 8[32] 16[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] v383[32] -4[32]) -4[32])} value={defs={0x080485b3}, expr=(extract[8] 0[32] 8[32] v385[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] v383[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v384[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080485b5[32]
memory:
0x80485b5:call   0x080485ba<<Insn>>
== PartialSymbolic ==
registers:
    eax    = v1274[32]
    ebx    = v1273[32]
    esp    = v1271-0x10[32]
    ebp    = v1271-0x4[32]
    eip    = 0x80485ba[32]
memory:
    addr=v1271-0x10[32] value=0x80485ba[32]
    addr=v1271-0xc[32] value=v1274[32]
    addr=v1271-0x8[32] value=v1273[32]
    addr=v1271-0x4[32] value=v1272[32]
== Symbolic ==
registers:
    eax    = {defs={}, expr=v386[32]}
    ebx    = {defs={}, expr=v385[32]}
    esp    = {defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) -4[32])}
    ebp    = {defs={0x080485b0}, expr=(add[32] v383[32] -4[32])}
    eip    = {defs={}, expr=0x080485ba[32]}
memory:
    addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080485b5}, expr=8[8]}
    addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080485b5}, expr=4[8]}
    addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080485b5}, expr=-123[8]}
    addr={defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5}, expr=(add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) -4[32])} value={defs={0x080485b5}, expr=-70[8]}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) 3[32])} value={defs={0x080485b4}, expr=(extract[8] 24[32] 32[32] v386[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) 2[32])} value={defs={0x080485b4}, expr=(extract[8] 16[32] 24[32] v386[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32]) 1[32])} value={defs={0x080485b4}, expr=(extract[8] 8[32] 16[32] v386[32])}
    addr={defs={0x080485b0,0x080485b3,0x080485b4}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) -4[32])} value={defs={0x080485b4}, expr=(extract[8] 0[32] 8[32] v386[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 3[32])} value={defs={0x080485b3}, expr=(extract[8] 24[32] 32[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 2[32])} value={defs={0x080485b3}, expr=(extract[8] 16[32] 24[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] (add[32] v383[32] -4[32]) -4[32]) 1[32])} value={defs={0x080485b3}, expr=(extract[8] 8[32] 16[32] v385[32])}
    addr={defs={0x080485b0,0x080485b3}, expr=(add[32] (add[32] v383[32] -4[32]) -4[32])} value={defs={0x080485b3}, expr=(extract[8] 0[32] 8[32] v385[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 3[32])} value={defs={0x080485b0}, expr=(extract[8] 24[32] 32[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 2[32])} value={defs={0x080485b0}, expr=(extract[8] 16[32] 24[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] (add[32] v383[32] -4[32]) 1[32])} value={defs={0x080485b0}, expr=(extract[8] 8[32] 16[32] v384[32])}
    addr={defs={0x080485b0}, expr=(add[32] v383[32] -4[32])} value={defs={0x080485b0}, expr=(extract[8] 0[32] 8[32] v384[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080485ba[32]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
== PartialSymbolic ==
registers:
    ebx    = v1277[32]
    esp    = v1276+0x4[32]
    eip    = 0x80485bb[32]
memory:
    addr=v1276[32] value=v1277[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080485ba}, expr=v389[32]}
    esp    = {defs={0x080485ba}, expr=(add[32] v388[32] 4[32])}
    eip    = {defs={0x080485ba}, expr=0x080485bb[32]}
memory:
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 3[32])} value={defs={0x080485ba}, expr=(extract[8] 24[32] 32[32] v389[32])}
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 2[32])} value={defs={0x080485ba}, expr=(extract[8] 16[32] 24[32] v389[32])}
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 1[32])} value={defs={0x080485ba}, expr=(extract[8] 8[32] 16[32] v389[32])}
    addr={defs={}, expr=v388[32]} value={defs={0x080485ba}, expr=(extract[8] 0[32] 8[32] v389[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080485bb[32]
memory:
0x80485bb:add    ebx, 0x0000110e
== PartialSymbolic ==
registers:
    ebx    = v1277+0x110e[32]
    esp    = v1276+0x4[32]
    eip    = 0x80485c1[32]
    pf     = -v1293+0x1[1]
    sf     = v1294[1]
    zf     = v1295[1]
    af     = v1298[1]
    cf     = v1296[1]
    of     = v1299[1]
memory:
    addr=v1276[32] value=v1277[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080485ba,0x080485bb}, expr=(add[32] v389[32] 4366[32])}
    esp    = {defs={0x080485ba}, expr=(add[32] v388[32] 4[32])}
    eip    = {defs={0x080485bb}, expr=0x080485c1[32]}
    pf     = {defs={0x080485ba,0x080485bb}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32])))))))}
    sf     = {defs={0x080485ba,0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v389[32] 4366[32]))}
    zf     = {defs={0x080485ba,0x080485bb}, expr=(zerop[1] (add[32] v389[32] 4366[32]))}
    af     = {defs={0x080485ba,0x080485bb}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v389[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v389[32]) 4366[33])))))}
    cf     = {defs={0x080485ba,0x080485bb}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v389[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v389[32]) 4366[33])))))}
    of     = {defs={0x080485ba,0x080485bb}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v389[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v389[32]) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v389[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v389[32]) 4366[33]))))))}
memory:
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 3[32])} value={defs={0x080485ba}, expr=(extract[8] 24[32] 32[32] v389[32])}
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 2[32])} value={defs={0x080485ba}, expr=(extract[8] 16[32] 24[32] v389[32])}
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 1[32])} value={defs={0x080485ba}, expr=(extract[8] 8[32] 16[32] v389[32])}
    addr={defs={}, expr=v388[32]} value={defs={0x080485ba}, expr=(extract[8] 0[32] 8[32] v389[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080485c1[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
0x80485c1:call   0x08048390<__do_global_dtors_aux>
== PartialSymbolic ==
registers:
    ebx    = v1277+0x110e[32]
    esp    = v1276[32]
    eip    = 0x8048390[32]
    pf     = -v1293+0x1[1]
    sf     = v1294[1]
    zf     = v1295[1]
    af     = v1298[1]
    cf     = v1296[1]
    of     = v1299[1]
memory:
    addr=v1276[32] value=0x80485c6[32]
    addr=v1276[32] value=v1277[32]
== Symbolic ==
registers:
    ebx    = {defs={0x080485ba,0x080485bb}, expr=(add[32] v389[32] 4366[32])}
    esp    = {defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] v388[32] 4[32]) -4[32])}
    eip    = {defs={}, expr=0x08048390[32]}
    pf     = {defs={0x080485ba,0x080485bb}, expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v389[32] 4366[32])))))))}
    sf     = {defs={0x080485ba,0x080485bb}, expr=(extract[1] 31[32] 32[32] (add[32] v389[32] 4366[32]))}
    zf     = {defs={0x080485ba,0x080485bb}, expr=(zerop[1] (add[32] v389[32] 4366[32]))}
    af     = {defs={0x080485ba,0x080485bb}, expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v389[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v389[32]) 4366[33])))))}
    cf     = {defs={0x080485ba,0x080485bb}, expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v389[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v389[32]) 4366[33])))))}
    of     = {defs={0x080485ba,0x080485bb}, expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v389[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v389[32]) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v389[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v389[32]) 4366[33]))))))}
memory:
    addr={defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] (add[32] v388[32] 4[32]) -4[32]) 3[32])} value={defs={0x080485c1}, expr=8[8]}
    addr={defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] (add[32] v388[32] 4[32]) -4[32]) 2[32])} value={defs={0x080485c1}, expr=4[8]}
    addr={defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] (add[32] v388[32] 4[32]) -4[32]) 1[32])} value={defs={0x080485c1}, expr=-123[8]}
    addr={defs={0x080485ba,0x080485c1}, expr=(add[32] (add[32] v388[32] 4[32]) -4[32])} value={defs={0x080485c1}, expr=-58[8]}
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 3[32])} value={defs={0x080485ba}, expr=(extract[8] 24[32] 32[32] v389[32])}
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 2[32])} value={defs={0x080485ba}, expr=(extract[8] 16[32] 24[32] v389[32])}
    addr={defs={0x080485ba}, expr=(add[32] v388[32] 1[32])} value={defs={0x080485ba}, expr=(extract[8] 8[32] 16[32] v389[32])}
    addr={defs={}, expr=v388[32]} value={defs={0x080485ba}, expr=(extract[8] 0[32] 8[32] v389[32])}
== Interval ==
registers:
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x08048390[32]
    pf     = 0..1[1]
    sf     = 0..1[1]
    zf     = 0..1[1]
    af     = 0..1[1]
    cf     = 0..1[1]
    of     = 0..1[1]
memory:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
== PartialSymbolic ==
registers:
    eax    = v1302[32]
    esp    = v1301+0x4[32]
    eip    = 0x80485c7[32]
memory:
    addr=v1301[32] value=v1302[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485c6}, expr=v396[32]}
    esp    = {defs={0x080485c6}, expr=(add[32] v395[32] 4[32])}
    eip    = {defs={0x080485c6}, expr=0x080485c7[32]}
memory:
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 3[32])} value={defs={0x080485c6}, expr=(extract[8] 24[32] 32[32] v396[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 2[32])} value={defs={0x080485c6}, expr=(extract[8] 16[32] 24[32] v396[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 1[32])} value={defs={0x080485c6}, expr=(extract[8] 8[32] 16[32] v396[32])}
    addr={defs={}, expr=v395[32]} value={defs={0x080485c6}, expr=(extract[8] 0[32] 8[32] v396[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080485c7[32]
memory:
0x80485c7:pop    ebx
== PartialSymbolic ==
registers:
    eax    = v1302[32]
    ebx    = v1304[32]
    esp    = v1301+0x8[32]
    eip    = 0x80485c8[32]
memory:
    addr=v1301+0x4[32] value=v1304[32]
    addr=v1301[32] value=v1302[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485c6}, expr=v396[32]}
    ebx    = {defs={0x080485c7}, expr=v401[32]}
    esp    = {defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 4[32])}
    eip    = {defs={0x080485c7}, expr=0x080485c8[32]}
memory:
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 3[32])} value={defs={0x080485c7}, expr=(extract[8] 24[32] 32[32] v401[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 2[32])} value={defs={0x080485c7}, expr=(extract[8] 16[32] 24[32] v401[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 1[32])} value={defs={0x080485c7}, expr=(extract[8] 8[32] 16[32] v401[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 4[32])} value={defs={0x080485c7}, expr=(extract[8] 0[32] 8[32] v401[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 3[32])} value={defs={0x080485c6}, expr=(extract[8] 24[32] 32[32] v396[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 2[32])} value={defs={0x080485c6}, expr=(extract[8] 16[32] 24[32] v396[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 1[32])} value={defs={0x080485c6}, expr=(extract[8] 8[32] 16[32] v396[32])}
    addr={defs={}, expr=v395[32]} value={defs={0x080485c6}, expr=(extract[8] 0[32] 8[32] v396[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    eip    = 0x080485c8[32]
memory:
0x80485c8:leave  
== PartialSymbolic ==
registers:
    eax    = v1302[32]
    ebx    = v1304[32]
    esp    = v1306+0x4[32]
    ebp    = v1307[32]
    eip    = 0x80485c9[32]
memory:
    addr=v1306[32] value=v1307[32]
    addr=v1301+0x4[32] value=v1304[32]
    addr=v1301[32] value=v1302[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485c6}, expr=v396[32]}
    ebx    = {defs={0x080485c7}, expr=v401[32]}
    esp    = {defs={0x080485c8}, expr=(add[32] v406[32] 4[32])}
    ebp    = {defs={0x080485c8}, expr=v407[32]}
    eip    = {defs={0x080485c8}, expr=0x080485c9[32]}
memory:
    addr={defs={0x080485c8}, expr=(add[32] v406[32] 3[32])} value={defs={0x080485c8}, expr=(extract[8] 24[32] 32[32] v407[32])}
    addr={defs={0x080485c8}, expr=(add[32] v406[32] 2[32])} value={defs={0x080485c8}, expr=(extract[8] 16[32] 24[32] v407[32])}
    addr={defs={0x080485c8}, expr=(add[32] v406[32] 1[32])} value={defs={0x080485c8}, expr=(extract[8] 8[32] 16[32] v407[32])}
    addr={defs={}, expr=v406[32]} value={defs={0x080485c8}, expr=(extract[8] 0[32] 8[32] v407[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 3[32])} value={defs={0x080485c7}, expr=(extract[8] 24[32] 32[32] v401[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 2[32])} value={defs={0x080485c7}, expr=(extract[8] 16[32] 24[32] v401[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 1[32])} value={defs={0x080485c7}, expr=(extract[8] 8[32] 16[32] v401[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 4[32])} value={defs={0x080485c7}, expr=(extract[8] 0[32] 8[32] v401[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 3[32])} value={defs={0x080485c6}, expr=(extract[8] 24[32] 32[32] v396[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 2[32])} value={defs={0x080485c6}, expr=(extract[8] 16[32] 24[32] v396[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 1[32])} value={defs={0x080485c6}, expr=(extract[8] 8[32] 16[32] v396[32])}
    addr={defs={}, expr=v395[32]} value={defs={0x080485c6}, expr=(extract[8] 0[32] 8[32] v396[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = 0x080485c9[32]
memory:
0x80485c9:ret    
== PartialSymbolic ==
registers:
    eax    = v1302[32]
    ebx    = v1304[32]
    esp    = v1306+0x8[32]
    ebp    = v1307[32]
    eip    = v1369[32]
memory:
    addr=v1306+0x4[32] value=v1369[32]
    addr=v1306[32] value=v1307[32]
    addr=v1301+0x4[32] value=v1304[32]
    addr=v1301[32] value=v1302[32]
== Symbolic ==
registers:
    eax    = {defs={0x080485c6}, expr=v396[32]}
    ebx    = {defs={0x080485c7}, expr=v401[32]}
    esp    = {defs={0x080485c8,0x080485c9}, expr=(add[32] (add[32] v406[32] 4[32]) 4[32])}
    ebp    = {defs={0x080485c8}, expr=v407[32]}
    eip    = {defs={0x080485c9}, expr=v412[32]}
memory:
    addr={defs={0x080485c8,0x080485c9}, expr=(add[32] (add[32] v406[32] 4[32]) 3[32])} value={defs={0x080485c9}, expr=(extract[8] 24[32] 32[32] v412[32])}
    addr={defs={0x080485c8,0x080485c9}, expr=(add[32] (add[32] v406[32] 4[32]) 2[32])} value={defs={0x080485c9}, expr=(extract[8] 16[32] 24[32] v412[32])}
    addr={defs={0x080485c8,0x080485c9}, expr=(add[32] (add[32] v406[32] 4[32]) 1[32])} value={defs={0x080485c9}, expr=(extract[8] 8[32] 16[32] v412[32])}
    addr={defs={0x080485c8}, expr=(add[32] v406[32] 4[32])} value={defs={0x080485c9}, expr=(extract[8] 0[32] 8[32] v412[32])}
    addr={defs={0x080485c8}, expr=(add[32] v406[32] 3[32])} value={defs={0x080485c8}, expr=(extract[8] 24[32] 32[32] v407[32])}
    addr={defs={0x080485c8}, expr=(add[32] v406[32] 2[32])} value={defs={0x080485c8}, expr=(extract[8] 16[32] 24[32] v407[32])}
    addr={defs={0x080485c8}, expr=(add[32] v406[32] 1[32])} value={defs={0x080485c8}, expr=(extract[8] 8[32] 16[32] v407[32])}
    addr={defs={}, expr=v406[32]} value={defs={0x080485c8}, expr=(extract[8] 0[32] 8[32] v407[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 3[32])} value={defs={0x080485c7}, expr=(extract[8] 24[32] 32[32] v401[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 2[32])} value={defs={0x080485c7}, expr=(extract[8] 16[32] 24[32] v401[32])}
    addr={defs={0x080485c6,0x080485c7}, expr=(add[32] (add[32] v395[32] 4[32]) 1[32])} value={defs={0x080485c7}, expr=(extract[8] 8[32] 16[32] v401[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 4[32])} value={defs={0x080485c7}, expr=(extract[8] 0[32] 8[32] v401[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 3[32])} value={defs={0x080485c6}, expr=(extract[8] 24[32] 32[32] v396[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 2[32])} value={defs={0x080485c6}, expr=(extract[8] 16[32] 24[32] v396[32])}
    addr={defs={0x080485c6}, expr=(add[32] v395[32] 1[32])} value={defs={0x080485c6}, expr=(extract[8] 8[32] 16[32] v396[32])}
    addr={defs={}, expr=v395[32]} value={defs={0x080485c6}, expr=(extract[8] 0[32] 8[32] v396[32])}
== Interval ==
registers:
    eax    = doubleword[32]
    ebx    = doubleword[32]
    esp    = doubleword[32]
    ebp    = doubleword[32]
    eip    = doubleword[32]
memory:
analyzed headers: 1
