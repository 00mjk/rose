==============================================
Constant propagation in function "_init"
==============================================
0x80482c8:push   ebp
    ax = v19655
    cx = v19656
    dx = v19657
    bx = v19658
    sp = v19659-0x4 [from 0x80482c8:push   ebp]
    bp = v19660
    si = v19661
    di = v19662
    es = v19663
    cs = v19664
    ss = v19665
    ds = v19666
    fs = v19667
    gs = v19668
    cf = v19669
    ?1 = v19670
    pf = v19671
    ?3 = v19672
    af = v19673
    ?5 = v19674
    zf = v19675
    sf = v19676
    tf = v19677
    if = v19678
    df = v19679
    of = v19680
    iopl0 = v19681
    iopl1 = v19682
    nt = v19683
    ?15 = v19684
    memory = {
        size=4; addr=v19659-0x4 [from 0x80482c8:push   ebp]; value=v19660
    }
0x80482c9:mov    ebp, esp
    ax = v19655
    cx = v19656
    dx = v19657
    bx = v19658
    sp = v19659-0x4 [from 0x80482c8:push   ebp]
    bp = v19659-0x4 [from 0x80482c8:push   ebp]
    si = v19661
    di = v19662
    es = v19663
    cs = v19664
    ss = v19665
    ds = v19666
    fs = v19667
    gs = v19668
    cf = v19669
    ?1 = v19670
    pf = v19671
    ?3 = v19672
    af = v19673
    ?5 = v19674
    zf = v19675
    sf = v19676
    tf = v19677
    if = v19678
    df = v19679
    of = v19680
    iopl0 = v19681
    iopl1 = v19682
    nt = v19683
    ?15 = v19684
    memory = {
        size=4; addr=v19659-0x4 [from 0x80482c8:push   ebp]; value=v19660
    }
0x80482cb:sub    esp, 0x08
    ax = v19655
    cx = v19656
    dx = v19657
    bx = v19658
    sp = v19659-0xc [from 0x80482cb:sub    esp, 0x08]
    bp = v19659-0x4 [from 0x80482c8:push   ebp]
    si = v19661
    di = v19662
    es = v19663
    cs = v19664
    ss = v19665
    ds = v19666
    fs = v19667
    gs = v19668
    cf = -v19786-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?1 = v19670
    pf = -v19780-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?3 = v19672
    af = -v19784-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?5 = v19674
    zf = v19783 [from 0x80482cb:sub    esp, 0x08]
    sf = v19782 [from 0x80482cb:sub    esp, 0x08]
    tf = v19677
    if = v19678
    df = v19679
    of = v19790 [from 0x80482cb:sub    esp, 0x08]
    iopl0 = v19681
    iopl1 = v19682
    nt = v19683
    ?15 = v19684
    memory = {
        size=4; addr=v19659-0x4 [from 0x80482c8:push   ebp]; value=v19660
    }
0x80482ce:call   0x08048364
    ax = v19655
    cx = v19656
    dx = v19657
    bx = v19658
    sp = v19659-0x10 [from 0x80482ce:call   0x08048364]
    bp = v19659-0x4 [from 0x80482c8:push   ebp]
    si = v19661
    di = v19662
    es = v19663
    cs = v19664
    ss = v19665
    ds = v19666
    fs = v19667
    gs = v19668
    cf = -v19786-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?1 = v19670
    pf = -v19780-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?3 = v19672
    af = -v19784-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?5 = v19674
    zf = v19783 [from 0x80482cb:sub    esp, 0x08]
    sf = v19782 [from 0x80482cb:sub    esp, 0x08]
    tf = v19677
    if = v19678
    df = v19679
    of = v19790 [from 0x80482cb:sub    esp, 0x08]
    iopl0 = v19681
    iopl1 = v19682
    nt = v19683
    ?15 = v19684
    memory = {
        size=4; addr=v19659-0x10 [from 0x80482ce:call   0x08048364]; value=0x80482d3 [from 0x80482ce:call   0x08048364]
        size=4; addr=v19659-0x4 [from 0x80482c8:push   ebp]; value=v19660
    }
0x80482d3:call   0x080483d0
    ax = v19858 [from 0x80482ce:call   0x08048364]
    cx = v19859 [from 0x80482ce:call   0x08048364]
    dx = v19860 [from 0x80482ce:call   0x08048364]
    bx = v19658
    sp = v19659-0x10 [from 0x80482d3:call   0x080483d0]
    bp = v19659-0x4 [from 0x80482c8:push   ebp]
    si = v19661
    di = v19662
    es = v19866 [from 0x80482ce:call   0x08048364]
    cs = v19867 [from 0x80482ce:call   0x08048364]
    ss = v19868 [from 0x80482ce:call   0x08048364]
    ds = v19869 [from 0x80482ce:call   0x08048364]
    fs = v19870 [from 0x80482ce:call   0x08048364]
    gs = v19871 [from 0x80482ce:call   0x08048364]
    cf = v19872 [from 0x80482ce:call   0x08048364]
    ?1 = v19873 [from 0x80482ce:call   0x08048364]
    pf = v19874 [from 0x80482ce:call   0x08048364]
    ?3 = v19875 [from 0x80482ce:call   0x08048364]
    af = v19876 [from 0x80482ce:call   0x08048364]
    ?5 = v19877 [from 0x80482ce:call   0x08048364]
    zf = v19878 [from 0x80482ce:call   0x08048364]
    sf = v19879 [from 0x80482ce:call   0x08048364]
    tf = v19880 [from 0x80482ce:call   0x08048364]
    if = v19881 [from 0x80482ce:call   0x08048364]
    df = v19882 [from 0x80482ce:call   0x08048364]
    of = v19883 [from 0x80482ce:call   0x08048364]
    iopl0 = v19884 [from 0x80482ce:call   0x08048364]
    iopl1 = v19885 [from 0x80482ce:call   0x08048364]
    nt = v19886 [from 0x80482ce:call   0x08048364]
    ?15 = v19887 [from 0x80482ce:call   0x08048364]
    memory = {
        size=4; addr=v19659-0x10 [from 0x80482d3:call   0x080483d0]; value=0x80482d8 [from 0x80482d3:call   0x080483d0]
        size=4; addr=v19659-0x4 [from 0x80482c8:push   ebp]; value=v19660
    }
0x80482d8:call   0x08048580
    ax = v19985 [from 0x80482d3:call   0x080483d0]
    cx = v19986 [from 0x80482d3:call   0x080483d0]
    dx = v19987 [from 0x80482d3:call   0x080483d0]
    bx = v19658
    sp = v19659-0x10 [from 0x80482d8:call   0x08048580]
    bp = v19659-0x4 [from 0x80482c8:push   ebp]
    si = v19661
    di = v19662
    es = v19993 [from 0x80482d3:call   0x080483d0]
    cs = v19994 [from 0x80482d3:call   0x080483d0]
    ss = v19995 [from 0x80482d3:call   0x080483d0]
    ds = v19996 [from 0x80482d3:call   0x080483d0]
    fs = v19997 [from 0x80482d3:call   0x080483d0]
    gs = v19998 [from 0x80482d3:call   0x080483d0]
    cf = v19999 [from 0x80482d3:call   0x080483d0]
    ?1 = v20000 [from 0x80482d3:call   0x080483d0]
    pf = v20001 [from 0x80482d3:call   0x080483d0]
    ?3 = v20002 [from 0x80482d3:call   0x080483d0]
    af = v20003 [from 0x80482d3:call   0x080483d0]
    ?5 = v20004 [from 0x80482d3:call   0x080483d0]
    zf = v20005 [from 0x80482d3:call   0x080483d0]
    sf = v20006 [from 0x80482d3:call   0x080483d0]
    tf = v20007 [from 0x80482d3:call   0x080483d0]
    if = v20008 [from 0x80482d3:call   0x080483d0]
    df = v20009 [from 0x80482d3:call   0x080483d0]
    of = v20010 [from 0x80482d3:call   0x080483d0]
    iopl0 = v20011 [from 0x80482d3:call   0x080483d0]
    iopl1 = v20012 [from 0x80482d3:call   0x080483d0]
    nt = v20013 [from 0x80482d3:call   0x080483d0]
    ?15 = v20014 [from 0x80482d3:call   0x080483d0]
    memory = {
        size=4; addr=v19659-0x10 [from 0x80482d8:call   0x08048580]; value=0x80482dd [from 0x80482d8:call   0x08048580]
        size=4; addr=v19659-0x4 [from 0x80482c8:push   ebp]; value=v19660
    }
0x80482dd:leave  
    ax = v20112 [from 0x80482d8:call   0x08048580]
    cx = v20113 [from 0x80482d8:call   0x08048580]
    dx = v20114 [from 0x80482d8:call   0x08048580]
    bx = v19658
    sp = v19659 [from 0x80482dd:leave  ]
    bp = v19660
    si = v19661
    di = v19662
    es = v20120 [from 0x80482d8:call   0x08048580]
    cs = v20121 [from 0x80482d8:call   0x08048580]
    ss = v20122 [from 0x80482d8:call   0x08048580]
    ds = v20123 [from 0x80482d8:call   0x08048580]
    fs = v20124 [from 0x80482d8:call   0x08048580]
    gs = v20125 [from 0x80482d8:call   0x08048580]
    cf = v20126 [from 0x80482d8:call   0x08048580]
    ?1 = v20127 [from 0x80482d8:call   0x08048580]
    pf = v20128 [from 0x80482d8:call   0x08048580]
    ?3 = v20129 [from 0x80482d8:call   0x08048580]
    af = v20130 [from 0x80482d8:call   0x08048580]
    ?5 = v20131 [from 0x80482d8:call   0x08048580]
    zf = v20132 [from 0x80482d8:call   0x08048580]
    sf = v20133 [from 0x80482d8:call   0x08048580]
    tf = v20134 [from 0x80482d8:call   0x08048580]
    if = v20135 [from 0x80482d8:call   0x08048580]
    df = v20136 [from 0x80482d8:call   0x08048580]
    of = v20137 [from 0x80482d8:call   0x08048580]
    iopl0 = v20138 [from 0x80482d8:call   0x08048580]
    iopl1 = v20139 [from 0x80482d8:call   0x08048580]
    nt = v20140 [from 0x80482d8:call   0x08048580]
    ?15 = v20141 [from 0x80482d8:call   0x08048580]
    memory = {
        size=4; addr=v19659-0x4 [from 0x80482c8:push   ebp]; value=v19660
    }
0x80482de:ret    
    ax = v20112 [from 0x80482d8:call   0x08048580]
    cx = v20113 [from 0x80482d8:call   0x08048580]
    dx = v20114 [from 0x80482d8:call   0x08048580]
    bx = v19658
    sp = v19659+0x4 [from 0x80482de:ret    ]
    bp = v19660
    si = v19661
    di = v19662
    es = v20120 [from 0x80482d8:call   0x08048580]
    cs = v20121 [from 0x80482d8:call   0x08048580]
    ss = v20122 [from 0x80482d8:call   0x08048580]
    ds = v20123 [from 0x80482d8:call   0x08048580]
    fs = v20124 [from 0x80482d8:call   0x08048580]
    gs = v20125 [from 0x80482d8:call   0x08048580]
    cf = v20126 [from 0x80482d8:call   0x08048580]
    ?1 = v20127 [from 0x80482d8:call   0x08048580]
    pf = v20128 [from 0x80482d8:call   0x08048580]
    ?3 = v20129 [from 0x80482d8:call   0x08048580]
    af = v20130 [from 0x80482d8:call   0x08048580]
    ?5 = v20131 [from 0x80482d8:call   0x08048580]
    zf = v20132 [from 0x80482d8:call   0x08048580]
    sf = v20133 [from 0x80482d8:call   0x08048580]
    tf = v20134 [from 0x80482d8:call   0x08048580]
    if = v20135 [from 0x80482d8:call   0x08048580]
    df = v20136 [from 0x80482d8:call   0x08048580]
    of = v20137 [from 0x80482d8:call   0x08048580]
    iopl0 = v20138 [from 0x80482d8:call   0x08048580]
    iopl1 = v20139 [from 0x80482d8:call   0x08048580]
    nt = v20140 [from 0x80482d8:call   0x08048580]
    ?15 = v20141 [from 0x80482d8:call   0x08048580]
    memory = {
        size=4; addr=v19659-0x4 [from 0x80482c8:push   ebp]; value=v19660
    }
==============================================
Constant propagation in function "***unassigned blocks***"
==============================================
0x80482df:add    bh, bh
    ax = v20307
    cx = v20308
    dx = v20309
    bx = v20375 [from 0x80482df:add    bh, bh]
    sp = v20311
    bp = v20312
    si = v20313
    di = v20314
    es = v20315
    cs = v20316
    ss = v20317
    ds = v20318
    fs = v20319
    gs = v20320
    cf = v20368 [from 0x80482df:add    bh, bh]
    ?1 = v20322
    pf = -v20363-0x1 [from 0x80482df:add    bh, bh]
    ?3 = v20324
    af = v20367 [from 0x80482df:add    bh, bh]
    ?5 = v20326
    zf = v20366 [from 0x80482df:add    bh, bh]
    sf = v20365 [from 0x80482df:add    bh, bh]
    tf = v20329
    if = v20330
    df = v20331
    of = v20371 [from 0x80482df:add    bh, bh]
    iopl0 = v20333
    iopl1 = v20334
    nt = v20335
    ?15 = v20336
    memory = {}
0x80482e1:xor    eax, 0x080496cc
    ax = v20409 [from 0x80482e1:xor    eax, 0x080496cc]
    cx = v20308
    dx = v20309
    bx = v20375 [from 0x80482df:add    bh, bh]
    sp = v20311
    bp = v20312
    si = v20313
    di = v20314
    es = v20315
    cs = v20316
    ss = v20317
    ds = v20318
    fs = v20319
    gs = v20320
    cf = 0x0 [from 0x80482e1:xor    eax, 0x080496cc]
    ?1 = v20322
    pf = -v20425-0x1 [from 0x80482e1:xor    eax, 0x080496cc]
    ?3 = v20324
    af = <top>
    ?5 = v20326
    zf = v20428 [from 0x80482e1:xor    eax, 0x080496cc]
    sf = v20427 [from 0x80482e1:xor    eax, 0x080496cc]
    tf = v20329
    if = v20330
    df = v20331
    of = 0x0 [from 0x80482e1:xor    eax, 0x080496cc]
    iopl0 = v20333
    iopl1 = v20334
    nt = v20335
    ?15 = v20336
    memory = {}
0x80482e6:jmp    DWORD PTR ds:[0x080496d0]
    ax = v20409 [from 0x80482e1:xor    eax, 0x080496cc]
    cx = v20308
    dx = v20309
    bx = v20375 [from 0x80482df:add    bh, bh]
    sp = v20311
    bp = v20312
    si = v20313
    di = v20314
    es = v20315
    cs = v20316
    ss = v20317
    ds = v20318
    fs = v20319
    gs = v20320
    cf = 0x0 [from 0x80482e1:xor    eax, 0x080496cc]
    ?1 = v20322
    pf = -v20425-0x1 [from 0x80482e1:xor    eax, 0x080496cc]
    ?3 = v20324
    af = <top>
    ?5 = v20326
    zf = v20428 [from 0x80482e1:xor    eax, 0x080496cc]
    sf = v20427 [from 0x80482e1:xor    eax, 0x080496cc]
    tf = v20329
    if = v20330
    df = v20331
    of = 0x0 [from 0x80482e1:xor    eax, 0x080496cc]
    iopl0 = v20333
    iopl1 = v20334
    nt = v20335
    ?15 = v20336
    memory = {}
0x80482ec:add    BYTE PTR ds:[eax], al
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=1; addr=<top>; value=<top>
    }
0x80482ee:add    BYTE PTR ds:[eax], al
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=1; addr=<top>; value=<top>
        size=1; addr=<top>; value=<top>
    }
0x80482f6:push   0x00000000
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x0 [from 0x80482f6:push   0x00000000]
    }
0x80482fb:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x0 [from 0x80482f6:push   0x00000000]
    }
0x80482e0:push   DWORD PTR ds:[0x080496cc]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x0 [from 0x80482f6:push   0x00000000]
        size=4; addr=<top>; value=v20742 [from 0x80482e0:push   DWORD PTR ds:[0x080496cc]]
    }
0x8048306:push   0x00000008
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x8 [from 0x8048306:push   0x00000008]
    }
0x804830b:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x8 [from 0x8048306:push   0x00000008]
    }
0x8048316:push   0x00000010
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x10 [from 0x8048316:push   0x00000010]
    }
0x804831b:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x10 [from 0x8048316:push   0x00000010]
    }
0x8048326:push   0x00000018
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x18 [from 0x8048326:push   0x00000018]
    }
0x804832b:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x18 [from 0x8048326:push   0x00000018]
    }
0x8048336:push   0x00000020
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x20 [from 0x8048336:push   0x00000020]
    }
0x804833b:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x20 [from 0x8048336:push   0x00000020]
    }
0x80483ce:mov    esi, esi
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x80495f8 [from 0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8]
    }
0x80483ef:call   0x00000000
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x80495f8 [from 0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8]
        size=4; addr=<top>; value=0x80483f4 [from 0x80483ef:call   0x00000000]
    }
0x80483f4:lea    esi, [esi + 0x00000000]
    ax = v21189 [from 0x80483ef:call   0x00000000]
    cx = v21190 [from 0x80483ef:call   0x00000000]
    dx = v21191 [from 0x80483ef:call   0x00000000]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v21197 [from 0x80483ef:call   0x00000000]
    cs = v21198 [from 0x80483ef:call   0x00000000]
    ss = v21199 [from 0x80483ef:call   0x00000000]
    ds = v21200 [from 0x80483ef:call   0x00000000]
    fs = v21201 [from 0x80483ef:call   0x00000000]
    gs = v21202 [from 0x80483ef:call   0x00000000]
    cf = v21203 [from 0x80483ef:call   0x00000000]
    ?1 = v21204 [from 0x80483ef:call   0x00000000]
    pf = v21205 [from 0x80483ef:call   0x00000000]
    ?3 = v21206 [from 0x80483ef:call   0x00000000]
    af = v21207 [from 0x80483ef:call   0x00000000]
    ?5 = v21208 [from 0x80483ef:call   0x00000000]
    zf = v21209 [from 0x80483ef:call   0x00000000]
    sf = v21210 [from 0x80483ef:call   0x00000000]
    tf = v21211 [from 0x80483ef:call   0x00000000]
    if = v21212 [from 0x80483ef:call   0x00000000]
    df = v21213 [from 0x80483ef:call   0x00000000]
    of = v21214 [from 0x80483ef:call   0x00000000]
    iopl0 = v21215 [from 0x80483ef:call   0x00000000]
    iopl1 = v21216 [from 0x80483ef:call   0x00000000]
    nt = v21217 [from 0x80483ef:call   0x00000000]
    ?15 = v21218 [from 0x80483ef:call   0x00000000]
    memory = {
        size=4; addr=<top>; value=0x80495f8 [from 0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8]
    }
0x80483fa:lea    edi, [edi + 0x00000000]
    ax = v21189 [from 0x80483ef:call   0x00000000]
    cx = v21190 [from 0x80483ef:call   0x00000000]
    dx = v21191 [from 0x80483ef:call   0x00000000]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v21197 [from 0x80483ef:call   0x00000000]
    cs = v21198 [from 0x80483ef:call   0x00000000]
    ss = v21199 [from 0x80483ef:call   0x00000000]
    ds = v21200 [from 0x80483ef:call   0x00000000]
    fs = v21201 [from 0x80483ef:call   0x00000000]
    gs = v21202 [from 0x80483ef:call   0x00000000]
    cf = v21203 [from 0x80483ef:call   0x00000000]
    ?1 = v21204 [from 0x80483ef:call   0x00000000]
    pf = v21205 [from 0x80483ef:call   0x00000000]
    ?3 = v21206 [from 0x80483ef:call   0x00000000]
    af = v21207 [from 0x80483ef:call   0x00000000]
    ?5 = v21208 [from 0x80483ef:call   0x00000000]
    zf = v21209 [from 0x80483ef:call   0x00000000]
    sf = v21210 [from 0x80483ef:call   0x00000000]
    tf = v21211 [from 0x80483ef:call   0x00000000]
    if = v21212 [from 0x80483ef:call   0x00000000]
    df = v21213 [from 0x80483ef:call   0x00000000]
    of = v21214 [from 0x80483ef:call   0x00000000]
    iopl0 = v21215 [from 0x80483ef:call   0x00000000]
    iopl1 = v21216 [from 0x80483ef:call   0x00000000]
    nt = v21217 [from 0x80483ef:call   0x00000000]
    ?15 = v21218 [from 0x80483ef:call   0x00000000]
    memory = {
        size=4; addr=<top>; value=0x80495f8 [from 0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8]
    }
0x8048434:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x804843a:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048456:lea    esi, [esi + 0x00]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048459:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484e8:nop    
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484e9:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048513:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048519:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x804854f:lea    esi, [edx + eax*0x04]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048552:xor    edi, edi
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x8048552:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x8048552:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048554:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x8048552:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x8048552:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x804855a:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x8048552:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x8048552:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048560:call   DWORD PTR ds:[esi]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x8048552:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x8048552:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x8048562 [from 0x8048560:call   DWORD PTR ds:[esi]]
    }
0x8048562:inc    edi
    ax = v21964 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cx = v21965 [from 0x8048560:call   DWORD PTR ds:[esi]]
    dx = v21966 [from 0x8048560:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v21972 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cs = v21973 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ss = v21974 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ds = v21975 [from 0x8048560:call   DWORD PTR ds:[esi]]
    fs = v21976 [from 0x8048560:call   DWORD PTR ds:[esi]]
    gs = v21977 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cf = v21978 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?1 = v21979 [from 0x8048560:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v21981 [from 0x8048560:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v21983 [from 0x8048560:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v21986 [from 0x8048560:call   DWORD PTR ds:[esi]]
    if = v21987 [from 0x8048560:call   DWORD PTR ds:[esi]]
    df = v21988 [from 0x8048560:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v21990 [from 0x8048560:call   DWORD PTR ds:[esi]]
    iopl1 = v21991 [from 0x8048560:call   DWORD PTR ds:[esi]]
    nt = v21992 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?15 = v21993 [from 0x8048560:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048563:sub    esi, 0x04
    ax = v21964 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cx = v21965 [from 0x8048560:call   DWORD PTR ds:[esi]]
    dx = v21966 [from 0x8048560:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v21972 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cs = v21973 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ss = v21974 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ds = v21975 [from 0x8048560:call   DWORD PTR ds:[esi]]
    fs = v21976 [from 0x8048560:call   DWORD PTR ds:[esi]]
    gs = v21977 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v21979 [from 0x8048560:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v21981 [from 0x8048560:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v21983 [from 0x8048560:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v21986 [from 0x8048560:call   DWORD PTR ds:[esi]]
    if = v21987 [from 0x8048560:call   DWORD PTR ds:[esi]]
    df = v21988 [from 0x8048560:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v21990 [from 0x8048560:call   DWORD PTR ds:[esi]]
    iopl1 = v21991 [from 0x8048560:call   DWORD PTR ds:[esi]]
    nt = v21992 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?15 = v21993 [from 0x8048560:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0], edi
    ax = v21964 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cx = v21965 [from 0x8048560:call   DWORD PTR ds:[esi]]
    dx = v21966 [from 0x8048560:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v21972 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cs = v21973 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ss = v21974 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ds = v21975 [from 0x8048560:call   DWORD PTR ds:[esi]]
    fs = v21976 [from 0x8048560:call   DWORD PTR ds:[esi]]
    gs = v21977 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v21979 [from 0x8048560:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v21981 [from 0x8048560:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v21983 [from 0x8048560:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v21986 [from 0x8048560:call   DWORD PTR ds:[esi]]
    if = v21987 [from 0x8048560:call   DWORD PTR ds:[esi]]
    df = v21988 [from 0x8048560:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v21990 [from 0x8048560:call   DWORD PTR ds:[esi]]
    iopl1 = v21991 [from 0x8048560:call   DWORD PTR ds:[esi]]
    nt = v21992 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?15 = v21993 [from 0x8048560:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048569:jne    0x08048560
    ax = v21964 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cx = v21965 [from 0x8048560:call   DWORD PTR ds:[esi]]
    dx = v21966 [from 0x8048560:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v21972 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cs = v21973 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ss = v21974 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ds = v21975 [from 0x8048560:call   DWORD PTR ds:[esi]]
    fs = v21976 [from 0x8048560:call   DWORD PTR ds:[esi]]
    gs = v21977 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v21979 [from 0x8048560:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v21981 [from 0x8048560:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v21983 [from 0x8048560:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v21986 [from 0x8048560:call   DWORD PTR ds:[esi]]
    if = v21987 [from 0x8048560:call   DWORD PTR ds:[esi]]
    df = v21988 [from 0x8048560:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v21990 [from 0x8048560:call   DWORD PTR ds:[esi]]
    iopl1 = v21991 [from 0x8048560:call   DWORD PTR ds:[esi]]
    nt = v21992 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?15 = v21993 [from 0x8048560:call   DWORD PTR ds:[esi]]
    memory =     <top>
==============================================
Constant propagation in function "signal@plt"
==============================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4]
    ax = v22325
    cx = v22326
    dx = v22327
    bx = v22328
    sp = v22329
    bp = v22330
    si = v22331
    di = v22332
    es = v22333
    cs = v22334
    ss = v22335
    ds = v22336
    fs = v22337
    gs = v22338
    cf = v22339
    ?1 = v22340
    pf = v22341
    ?3 = v22342
    af = v22343
    ?5 = v22344
    zf = v22345
    sf = v22346
    tf = v22347
    if = v22348
    df = v22349
    of = v22350
    iopl0 = v22351
    iopl1 = v22352
    nt = v22353
    ?15 = v22354
    memory = {}
==============================================
Constant propagation in function "puts@plt"
==============================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8]
    ax = v22420
    cx = v22421
    dx = v22422
    bx = v22423
    sp = v22424
    bp = v22425
    si = v22426
    di = v22427
    es = v22428
    cs = v22429
    ss = v22430
    ds = v22431
    fs = v22432
    gs = v22433
    cf = v22434
    ?1 = v22435
    pf = v22436
    ?3 = v22437
    af = v22438
    ?5 = v22439
    zf = v22440
    sf = v22441
    tf = v22442
    if = v22443
    df = v22444
    of = v22445
    iopl0 = v22446
    iopl1 = v22447
    nt = v22448
    ?15 = v22449
    memory = {}
==============================================
Constant propagation in function "__libc_start_main@plt"
==============================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc]
    ax = v22515
    cx = v22516
    dx = v22517
    bx = v22518
    sp = v22519
    bp = v22520
    si = v22521
    di = v22522
    es = v22523
    cs = v22524
    ss = v22525
    ds = v22526
    fs = v22527
    gs = v22528
    cf = v22529
    ?1 = v22530
    pf = v22531
    ?3 = v22532
    af = v22533
    ?5 = v22534
    zf = v22535
    sf = v22536
    tf = v22537
    if = v22538
    df = v22539
    of = v22540
    iopl0 = v22541
    iopl1 = v22542
    nt = v22543
    ?15 = v22544
    memory = {}
==============================================
Constant propagation in function "_exit@plt"
==============================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0]
    ax = v22610
    cx = v22611
    dx = v22612
    bx = v22613
    sp = v22614
    bp = v22615
    si = v22616
    di = v22617
    es = v22618
    cs = v22619
    ss = v22620
    ds = v22621
    fs = v22622
    gs = v22623
    cf = v22624
    ?1 = v22625
    pf = v22626
    ?3 = v22627
    af = v22628
    ?5 = v22629
    zf = v22630
    sf = v22631
    tf = v22632
    if = v22633
    df = v22634
    of = v22635
    iopl0 = v22636
    iopl1 = v22637
    nt = v22638
    ?15 = v22639
    memory = {}
==============================================
Constant propagation in function "__gmon_start__@plt"
==============================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4]
    ax = v22705
    cx = v22706
    dx = v22707
    bx = v22708
    sp = v22709
    bp = v22710
    si = v22711
    di = v22712
    es = v22713
    cs = v22714
    ss = v22715
    ds = v22716
    fs = v22717
    gs = v22718
    cf = v22719
    ?1 = v22720
    pf = v22721
    ?3 = v22722
    af = v22723
    ?5 = v22724
    zf = v22725
    sf = v22726
    tf = v22727
    if = v22728
    df = v22729
    of = v22730
    iopl0 = v22731
    iopl1 = v22732
    nt = v22733
    ?15 = v22734
    memory = {}
==============================================
Constant propagation in function "_start"
==============================================
0x8048340:xor    ebp, ebp
    ax = v22800
    cx = v22801
    dx = v22802
    bx = v22803
    sp = v22804
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22806
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048340:xor    ebp, ebp]
    ?1 = v22815
    pf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    sf = 0x0 [from 0x8048340:xor    ebp, ebp]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048340:xor    ebp, ebp]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {}
0x8048342:pop    esi
    ax = v22800
    cx = v22801
    dx = v22802
    bx = v22803
    sp = v22804+0x4 [from 0x8048342:pop    esi]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048340:xor    ebp, ebp]
    ?1 = v22815
    pf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    sf = 0x0 [from 0x8048340:xor    ebp, ebp]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048340:xor    ebp, ebp]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {}
0x8048343:mov    ecx, esp
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22804+0x4 [from 0x8048342:pop    esi]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048340:xor    ebp, ebp]
    ?1 = v22815
    pf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    sf = 0x0 [from 0x8048340:xor    ebp, ebp]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048340:xor    ebp, ebp]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {}
0x8048345:and    esp, 0xf0
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955 [from 0x8048345:and    esp, 0xf0]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {}
0x8048348:push   eax
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0x4 [from 0x8048348:push   eax]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x8048349:push   esp
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0x8 [from 0x8048349:push   esp]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0x8 [from 0x8048349:push   esp]; value=v22955-0x4 [from 0x8048348:push   eax]
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x804834a:push   edx
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0xc [from 0x804834a:push   edx]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0xc [from 0x804834a:push   edx]; value=v22802
        size=4; addr=v22955-0x8 [from 0x8048349:push   esp]; value=v22955-0x4 [from 0x8048348:push   eax]
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x804834b:push   0x08048520
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0x10 [from 0x804834b:push   0x08048520]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=v22955-0xc [from 0x804834a:push   edx]; value=v22802
        size=4; addr=v22955-0x8 [from 0x8048349:push   esp]; value=v22955-0x4 [from 0x8048348:push   eax]
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x8048350:push   0x080484b0
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0x14 [from 0x8048350:push   0x080484b0]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=v22955-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=v22955-0xc [from 0x804834a:push   edx]; value=v22802
        size=4; addr=v22955-0x8 [from 0x8048349:push   esp]; value=v22955-0x4 [from 0x8048348:push   eax]
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x8048355:push   ecx
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0x18 [from 0x8048355:push   ecx]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0x18 [from 0x8048355:push   ecx]; value=v22804+0x4 [from 0x8048342:pop    esi]
        size=4; addr=v22955-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=v22955-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=v22955-0xc [from 0x804834a:push   edx]; value=v22802
        size=4; addr=v22955-0x8 [from 0x8048349:push   esp]; value=v22955-0x4 [from 0x8048348:push   eax]
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x8048356:push   esi
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0x1c [from 0x8048356:push   esi]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0x1c [from 0x8048356:push   esi]; value=v22889 [from 0x8048342:pop    esi]
        size=4; addr=v22955-0x18 [from 0x8048355:push   ecx]; value=v22804+0x4 [from 0x8048342:pop    esi]
        size=4; addr=v22955-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=v22955-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=v22955-0xc [from 0x804834a:push   edx]; value=v22802
        size=4; addr=v22955-0x8 [from 0x8048349:push   esp]; value=v22955-0x4 [from 0x8048348:push   eax]
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x8048357:push   0x08048410
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0x20 [from 0x8048357:push   0x08048410]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0x20 [from 0x8048357:push   0x08048410]; value=0x8048410 [from 0x8048357:push   0x08048410]
        size=4; addr=v22955-0x1c [from 0x8048356:push   esi]; value=v22889 [from 0x8048342:pop    esi]
        size=4; addr=v22955-0x18 [from 0x8048355:push   ecx]; value=v22804+0x4 [from 0x8048342:pop    esi]
        size=4; addr=v22955-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=v22955-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=v22955-0xc [from 0x804834a:push   edx]; value=v22802
        size=4; addr=v22955-0x8 [from 0x8048349:push   esp]; value=v22955-0x4 [from 0x8048348:push   eax]
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x804835c:call   0x08048310
    ax = v22800
    cx = v22804+0x4 [from 0x8048342:pop    esi]
    dx = v22802
    bx = v22803
    sp = v22955-0x24 [from 0x804835c:call   0x08048310]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v22808
    cs = v22809
    ss = v22810
    ds = v22811
    fs = v22812
    gs = v22813
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = v22815
    pf = -v22971-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = v22817
    af = <top>
    ?5 = v22819
    zf = v22974 [from 0x8048345:and    esp, 0xf0]
    sf = v22973 [from 0x8048345:and    esp, 0xf0]
    tf = v22822
    if = v22823
    df = v22824
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = v22826
    iopl1 = v22827
    nt = v22828
    ?15 = v22829
    memory = {
        size=4; addr=v22955-0x24 [from 0x804835c:call   0x08048310]; value=0x8048361 [from 0x804835c:call   0x08048310]
        size=4; addr=v22955-0x20 [from 0x8048357:push   0x08048410]; value=0x8048410 [from 0x8048357:push   0x08048410]
        size=4; addr=v22955-0x1c [from 0x8048356:push   esi]; value=v22889 [from 0x8048342:pop    esi]
        size=4; addr=v22955-0x18 [from 0x8048355:push   ecx]; value=v22804+0x4 [from 0x8048342:pop    esi]
        size=4; addr=v22955-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=v22955-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=v22955-0xc [from 0x804834a:push   edx]; value=v22802
        size=4; addr=v22955-0x8 [from 0x8048349:push   esp]; value=v22955-0x4 [from 0x8048348:push   eax]
        size=4; addr=v22955-0x4 [from 0x8048348:push   eax]; value=v22800
    }
0x8048361:hlt    
    ax = v23336 [from 0x804835c:call   0x08048310]
    cx = v23337 [from 0x804835c:call   0x08048310]
    dx = v23338 [from 0x804835c:call   0x08048310]
    bx = v22803
    sp = v22955-0x20 [from 0x8048357:push   0x08048410]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = v22889 [from 0x8048342:pop    esi]
    di = v22807
    es = v23344 [from 0x804835c:call   0x08048310]
    cs = v23345 [from 0x804835c:call   0x08048310]
    ss = v23346 [from 0x804835c:call   0x08048310]
    ds = v23347 [from 0x804835c:call   0x08048310]
    fs = v23348 [from 0x804835c:call   0x08048310]
    gs = v23349 [from 0x804835c:call   0x08048310]
    cf = v23350 [from 0x804835c:call   0x08048310]
    ?1 = v23351 [from 0x804835c:call   0x08048310]
    pf = v23352 [from 0x804835c:call   0x08048310]
    ?3 = v23353 [from 0x804835c:call   0x08048310]
    af = v23354 [from 0x804835c:call   0x08048310]
    ?5 = v23355 [from 0x804835c:call   0x08048310]
    zf = v23356 [from 0x804835c:call   0x08048310]
    sf = v23357 [from 0x804835c:call   0x08048310]
    tf = v23358 [from 0x804835c:call   0x08048310]
    if = v23359 [from 0x804835c:call   0x08048310]
    df = v23360 [from 0x804835c:call   0x08048310]
    of = v23361 [from 0x804835c:call   0x08048310]
    iopl0 = v23362 [from 0x804835c:call   0x08048310]
    iopl1 = v23363 [from 0x804835c:call   0x08048310]
    nt = v23364 [from 0x804835c:call   0x08048310]
    ?15 = v23365 [from 0x804835c:call   0x08048310]
    memory = {}
==============================================
Constant propagation in function "0x8048362"
==============================================
0x8048362:nop    
    ax = v23490
    cx = v23491
    dx = v23492
    bx = v23493
    sp = v23494
    bp = v23495
    si = v23496
    di = v23497
    es = v23498
    cs = v23499
    ss = v23500
    ds = v23501
    fs = v23502
    gs = v23503
    cf = v23504
    ?1 = v23505
    pf = v23506
    ?3 = v23507
    af = v23508
    ?5 = v23509
    zf = v23510
    sf = v23511
    tf = v23512
    if = v23513
    df = v23514
    of = v23515
    iopl0 = v23516
    iopl1 = v23517
    nt = v23518
    ?15 = v23519
    memory = {}
0x8048363:nop    
    ax = v23490
    cx = v23491
    dx = v23492
    bx = v23493
    sp = v23494
    bp = v23495
    si = v23496
    di = v23497
    es = v23498
    cs = v23499
    ss = v23500
    ds = v23501
    fs = v23502
    gs = v23503
    cf = v23504
    ?1 = v23505
    pf = v23506
    ?3 = v23507
    af = v23508
    ?5 = v23509
    zf = v23510
    sf = v23511
    tf = v23512
    if = v23513
    df = v23514
    of = v23515
    iopl0 = v23516
    iopl1 = v23517
    nt = v23518
    ?15 = v23519
    memory = {}
==============================================
Constant propagation in function "call_gmon_start"
==============================================
0x8048364:push   ebp
    ax = v23644
    cx = v23645
    dx = v23646
    bx = v23647
    sp = v23648-0x4 [from 0x8048364:push   ebp]
    bp = v23649
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = v23658
    ?1 = v23659
    pf = v23660
    ?3 = v23661
    af = v23662
    ?5 = v23663
    zf = v23664
    sf = v23665
    tf = v23666
    if = v23667
    df = v23668
    of = v23669
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x8048365:mov    ebp, esp
    ax = v23644
    cx = v23645
    dx = v23646
    bx = v23647
    sp = v23648-0x4 [from 0x8048364:push   ebp]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = v23658
    ?1 = v23659
    pf = v23660
    ?3 = v23661
    af = v23662
    ?5 = v23663
    zf = v23664
    sf = v23665
    tf = v23666
    if = v23667
    df = v23668
    of = v23669
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x8048367:push   ebx
    ax = v23644
    cx = v23645
    dx = v23646
    bx = v23647
    sp = v23648-0x8 [from 0x8048367:push   ebx]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = v23658
    ?1 = v23659
    pf = v23660
    ?3 = v23661
    af = v23662
    ?5 = v23663
    zf = v23664
    sf = v23665
    tf = v23666
    if = v23667
    df = v23668
    of = v23669
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x8048368:push   ecx
    ax = v23644
    cx = v23645
    dx = v23646
    bx = v23647
    sp = v23648-0xc [from 0x8048368:push   ecx]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = v23658
    ?1 = v23659
    pf = v23660
    ?3 = v23661
    af = v23662
    ?5 = v23663
    zf = v23664
    sf = v23665
    tf = v23666
    if = v23667
    df = v23668
    of = v23669
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0xc [from 0x8048368:push   ecx]; value=v23645
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x8048369:call   0x0804836e
    ax = v23644
    cx = v23645
    dx = v23646
    bx = v23647
    sp = v23648-0x10 [from 0x8048369:call   0x0804836e]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = v23658
    ?1 = v23659
    pf = v23660
    ?3 = v23661
    af = v23662
    ?5 = v23663
    zf = v23664
    sf = v23665
    tf = v23666
    if = v23667
    df = v23668
    of = v23669
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=v23648-0xc [from 0x8048368:push   ecx]; value=v23645
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x804836e:pop    ebx
    ax = v23644
    cx = v23645
    dx = v23646
    bx = 0x804836e [from 0x8048369:call   0x0804836e]
    sp = v23648-0xc [from 0x804836e:pop    ebx]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = v23658
    ?1 = v23659
    pf = v23660
    ?3 = v23661
    af = v23662
    ?5 = v23663
    zf = v23664
    sf = v23665
    tf = v23666
    if = v23667
    df = v23668
    of = v23669
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=v23648-0xc [from 0x8048368:push   ecx]; value=v23645
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x804836f:add    ebx, 0x0000135a
    ax = v23644
    cx = v23645
    dx = v23646
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = v23648-0xc [from 0x804836e:pop    ebx]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    ?1 = v23659
    pf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    ?3 = v23661
    af = 0x1 (-0x1) [from 0x804836f:add    ebx, 0x0000135a]
    ?5 = v23663
    zf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    sf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    tf = v23666
    if = v23667
    df = v23668
    of = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=v23648-0xc [from 0x8048368:push   ecx]; value=v23645
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]
    ax = v23644
    cx = v23645
    dx = v23956 [from 0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]]
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = v23648-0xc [from 0x804836e:pop    ebx]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    ?1 = v23659
    pf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    ?3 = v23661
    af = 0x1 (-0x1) [from 0x804836f:add    ebx, 0x0000135a]
    ?5 = v23663
    zf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    sf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    tf = v23666
    if = v23667
    df = v23668
    of = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=v23648-0xc [from 0x8048368:push   ecx]; value=v23645
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x804837b:test   edx, edx
    ax = v23644
    cx = v23645
    dx = v23956 [from 0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]]
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = v23648-0xc [from 0x804836e:pop    ebx]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = 0x0 [from 0x804837b:test   edx, edx]
    ?1 = v23659
    pf = -v24005-0x1 [from 0x804837b:test   edx, edx]
    ?3 = v23661
    af = <top>
    ?5 = v23663
    zf = v24008 [from 0x804837b:test   edx, edx]
    sf = v24007 [from 0x804837b:test   edx, edx]
    tf = v23666
    if = v23667
    df = v23668
    of = 0x0 [from 0x804837b:test   edx, edx]
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=v23648-0xc [from 0x8048368:push   ecx]; value=v23645
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x804837d:je     0x08048384
    ax = v23644
    cx = v23645
    dx = v23956 [from 0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]]
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = v23648-0xc [from 0x804836e:pop    ebx]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = 0x0 [from 0x804837b:test   edx, edx]
    ?1 = v23659
    pf = -v24005-0x1 [from 0x804837b:test   edx, edx]
    ?3 = v23661
    af = <top>
    ?5 = v23663
    zf = v24008 [from 0x804837b:test   edx, edx]
    sf = v24007 [from 0x804837b:test   edx, edx]
    tf = v23666
    if = v23667
    df = v23668
    of = 0x0 [from 0x804837b:test   edx, edx]
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=v23648-0xc [from 0x8048368:push   ecx]; value=v23645
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x804837f:call   0x08048330
    ax = v23644
    cx = v23645
    dx = v23956 [from 0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]]
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = v23648-0x10 [from 0x804837f:call   0x08048330]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v23652
    cs = v23653
    ss = v23654
    ds = v23655
    fs = v23656
    gs = v23657
    cf = 0x0 [from 0x804837b:test   edx, edx]
    ?1 = v23659
    pf = -v24005-0x1 [from 0x804837b:test   edx, edx]
    ?3 = v23661
    af = <top>
    ?5 = v23663
    zf = v24008 [from 0x804837b:test   edx, edx]
    sf = v24007 [from 0x804837b:test   edx, edx]
    tf = v23666
    if = v23667
    df = v23668
    of = 0x0 [from 0x804837b:test   edx, edx]
    iopl0 = v23670
    iopl1 = v23671
    nt = v23672
    ?15 = v23673
    memory = {
        size=4; addr=v23648-0x10 [from 0x804837f:call   0x08048330]; value=0x8048384 [from 0x804837f:call   0x08048330]
        size=4; addr=v23648-0xc [from 0x8048368:push   ecx]; value=v23645
        size=4; addr=v23648-0x8 [from 0x8048367:push   ebx]; value=v23647
        size=4; addr=v23648-0x4 [from 0x8048364:push   ebp]; value=v23649
    }
0x8048384:pop    eax
    ax = v24208 [from 0x8048384:pop    eax]
    cx = v24077
    dx = v24078
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = v23648-0x8 [from 0x8048384:pop    eax]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v24084
    cs = v24085
    ss = v24086
    ds = v24087
    fs = v24088
    gs = v24089
    cf = v24090
    ?1 = v24091
    pf = v24092
    ?3 = v24093
    af = v24161 [from 0x804837f:call   0x08048330]
    ?5 = v24095
    zf = v24096
    sf = v24097
    tf = v24098
    if = v24099
    df = v24100
    of = v24101
    iopl0 = v24102
    iopl1 = v24103
    nt = v24104
    ?15 = v24105
    memory = {}
0x8048385:pop    ebx
    ax = v24208 [from 0x8048384:pop    eax]
    cx = v24077
    dx = v24078
    bx = v24244 [from 0x8048385:pop    ebx]
    sp = v23648-0x4 [from 0x8048385:pop    ebx]
    bp = v23648-0x4 [from 0x8048364:push   ebp]
    si = v23650
    di = v23651
    es = v24084
    cs = v24085
    ss = v24086
    ds = v24087
    fs = v24088
    gs = v24089
    cf = v24090
    ?1 = v24091
    pf = v24092
    ?3 = v24093
    af = v24161 [from 0x804837f:call   0x08048330]
    ?5 = v24095
    zf = v24096
    sf = v24097
    tf = v24098
    if = v24099
    df = v24100
    of = v24101
    iopl0 = v24102
    iopl1 = v24103
    nt = v24104
    ?15 = v24105
    memory = {}
0x8048386:leave  
    ax = v24208 [from 0x8048384:pop    eax]
    cx = v24077
    dx = v24078
    bx = v24244 [from 0x8048385:pop    ebx]
    sp = v23648 [from 0x8048386:leave  ]
    bp = v24280 [from 0x8048386:leave  ]
    si = v23650
    di = v23651
    es = v24084
    cs = v24085
    ss = v24086
    ds = v24087
    fs = v24088
    gs = v24089
    cf = v24090
    ?1 = v24091
    pf = v24092
    ?3 = v24093
    af = v24161 [from 0x804837f:call   0x08048330]
    ?5 = v24095
    zf = v24096
    sf = v24097
    tf = v24098
    if = v24099
    df = v24100
    of = v24101
    iopl0 = v24102
    iopl1 = v24103
    nt = v24104
    ?15 = v24105
    memory = {}
0x8048387:ret    
    ax = v24208 [from 0x8048384:pop    eax]
    cx = v24077
    dx = v24078
    bx = v24244 [from 0x8048385:pop    ebx]
    sp = v23648+0x4 [from 0x8048387:ret    ]
    bp = v24280 [from 0x8048386:leave  ]
    si = v23650
    di = v23651
    es = v24084
    cs = v24085
    ss = v24086
    ds = v24087
    fs = v24088
    gs = v24089
    cf = v24090
    ?1 = v24091
    pf = v24092
    ?3 = v24093
    af = v24161 [from 0x804837f:call   0x08048330]
    ?5 = v24095
    zf = v24096
    sf = v24097
    tf = v24098
    if = v24099
    df = v24100
    of = v24101
    iopl0 = v24102
    iopl1 = v24103
    nt = v24104
    ?15 = v24105
    memory = {}
==============================================
Constant propagation in function "0x8048388"
==============================================
0x8048388:nop    
    ax = v24380
    cx = v24381
    dx = v24382
    bx = v24383
    sp = v24384
    bp = v24385
    si = v24386
    di = v24387
    es = v24388
    cs = v24389
    ss = v24390
    ds = v24391
    fs = v24392
    gs = v24393
    cf = v24394
    ?1 = v24395
    pf = v24396
    ?3 = v24397
    af = v24398
    ?5 = v24399
    zf = v24400
    sf = v24401
    tf = v24402
    if = v24403
    df = v24404
    of = v24405
    iopl0 = v24406
    iopl1 = v24407
    nt = v24408
    ?15 = v24409
    memory = {}
0x8048389:nop    
    ax = v24380
    cx = v24381
    dx = v24382
    bx = v24383
    sp = v24384
    bp = v24385
    si = v24386
    di = v24387
    es = v24388
    cs = v24389
    ss = v24390
    ds = v24391
    fs = v24392
    gs = v24393
    cf = v24394
    ?1 = v24395
    pf = v24396
    ?3 = v24397
    af = v24398
    ?5 = v24399
    zf = v24400
    sf = v24401
    tf = v24402
    if = v24403
    df = v24404
    of = v24405
    iopl0 = v24406
    iopl1 = v24407
    nt = v24408
    ?15 = v24409
    memory = {}
0x804838a:nop    
    ax = v24380
    cx = v24381
    dx = v24382
    bx = v24383
    sp = v24384
    bp = v24385
    si = v24386
    di = v24387
    es = v24388
    cs = v24389
    ss = v24390
    ds = v24391
    fs = v24392
    gs = v24393
    cf = v24394
    ?1 = v24395
    pf = v24396
    ?3 = v24397
    af = v24398
    ?5 = v24399
    zf = v24400
    sf = v24401
    tf = v24402
    if = v24403
    df = v24404
    of = v24405
    iopl0 = v24406
    iopl1 = v24407
    nt = v24408
    ?15 = v24409
    memory = {}
0x804838b:nop    
    ax = v24380
    cx = v24381
    dx = v24382
    bx = v24383
    sp = v24384
    bp = v24385
    si = v24386
    di = v24387
    es = v24388
    cs = v24389
    ss = v24390
    ds = v24391
    fs = v24392
    gs = v24393
    cf = v24394
    ?1 = v24395
    pf = v24396
    ?3 = v24397
    af = v24398
    ?5 = v24399
    zf = v24400
    sf = v24401
    tf = v24402
    if = v24403
    df = v24404
    of = v24405
    iopl0 = v24406
    iopl1 = v24407
    nt = v24408
    ?15 = v24409
    memory = {}
0x804838c:nop    
    ax = v24380
    cx = v24381
    dx = v24382
    bx = v24383
    sp = v24384
    bp = v24385
    si = v24386
    di = v24387
    es = v24388
    cs = v24389
    ss = v24390
    ds = v24391
    fs = v24392
    gs = v24393
    cf = v24394
    ?1 = v24395
    pf = v24396
    ?3 = v24397
    af = v24398
    ?5 = v24399
    zf = v24400
    sf = v24401
    tf = v24402
    if = v24403
    df = v24404
    of = v24405
    iopl0 = v24406
    iopl1 = v24407
    nt = v24408
    ?15 = v24409
    memory = {}
0x804838d:nop    
    ax = v24380
    cx = v24381
    dx = v24382
    bx = v24383
    sp = v24384
    bp = v24385
    si = v24386
    di = v24387
    es = v24388
    cs = v24389
    ss = v24390
    ds = v24391
    fs = v24392
    gs = v24393
    cf = v24394
    ?1 = v24395
    pf = v24396
    ?3 = v24397
    af = v24398
    ?5 = v24399
    zf = v24400
    sf = v24401
    tf = v24402
    if = v24403
    df = v24404
    of = v24405
    iopl0 = v24406
    iopl1 = v24407
    nt = v24408
    ?15 = v24409
    memory = {}
0x804838e:nop    
    ax = v24380
    cx = v24381
    dx = v24382
    bx = v24383
    sp = v24384
    bp = v24385
    si = v24386
    di = v24387
    es = v24388
    cs = v24389
    ss = v24390
    ds = v24391
    fs = v24392
    gs = v24393
    cf = v24394
    ?1 = v24395
    pf = v24396
    ?3 = v24397
    af = v24398
    ?5 = v24399
    zf = v24400
    sf = v24401
    tf = v24402
    if = v24403
    df = v24404
    of = v24405
    iopl0 = v24406
    iopl1 = v24407
    nt = v24408
    ?15 = v24409
    memory = {}
0x804838f:nop    
    ax = v24380
    cx = v24381
    dx = v24382
    bx = v24383
    sp = v24384
    bp = v24385
    si = v24386
    di = v24387
    es = v24388
    cs = v24389
    ss = v24390
    ds = v24391
    fs = v24392
    gs = v24393
    cf = v24394
    ?1 = v24395
    pf = v24396
    ?3 = v24397
    af = v24398
    ?5 = v24399
    zf = v24400
    sf = v24401
    tf = v24402
    if = v24403
    df = v24404
    of = v24405
    iopl0 = v24406
    iopl1 = v24407
    nt = v24408
    ?15 = v24409
    memory = {}
==============================================
Constant propagation in function "__do_global_dtors_aux"
==============================================
0x8048390:push   ebp
    ax = v24726
    cx = v24727
    dx = v24728
    bx = v24729
    sp = v24730-0x4 [from 0x8048390:push   ebp]
    bp = v24731
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = v24740
    ?1 = v24741
    pf = v24742
    ?3 = v24743
    af = v24744
    ?5 = v24745
    zf = v24746
    sf = v24747
    tf = v24748
    if = v24749
    df = v24750
    of = v24751
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x8048391:mov    ebp, esp
    ax = v24726
    cx = v24727
    dx = v24728
    bx = v24729
    sp = v24730-0x4 [from 0x8048390:push   ebp]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = v24740
    ?1 = v24741
    pf = v24742
    ?3 = v24743
    af = v24744
    ?5 = v24745
    zf = v24746
    sf = v24747
    tf = v24748
    if = v24749
    df = v24750
    of = v24751
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x8048393:sub    esp, 0x08
    ax = v24726
    cx = v24727
    dx = v24728
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = -v24857-0x1 [from 0x8048393:sub    esp, 0x08]
    ?1 = v24741
    pf = -v24851-0x1 [from 0x8048393:sub    esp, 0x08]
    ?3 = v24743
    af = -v24855-0x1 [from 0x8048393:sub    esp, 0x08]
    ?5 = v24745
    zf = v24854 [from 0x8048393:sub    esp, 0x08]
    sf = v24853 [from 0x8048393:sub    esp, 0x08]
    tf = v24748
    if = v24749
    df = v24750
    of = v24861 [from 0x8048393:sub    esp, 0x08]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00
    ax = v24726
    cx = v24727
    dx = v24728
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = -v24929-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?1 = v24741
    pf = -v24923-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?3 = v24743
    af = -v24927-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = v24745
    zf = v24926 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    sf = v24925 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    tf = v24748
    if = v24749
    df = v24750
    of = v24933 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x804839d:jne    0x080483cc
    ax = v24726
    cx = v24727
    dx = v24728
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = -v24929-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?1 = v24741
    pf = -v24923-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?3 = v24743
    af = -v24927-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = v24745
    zf = v24926 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    sf = v24925 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    tf = v24748
    if = v24749
    df = v24750
    of = v24933 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]
    ax = v25033 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = v24727
    dx = v24728
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = -v24929-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?1 = v24741
    pf = -v24923-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?3 = v24743
    af = -v24927-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = v24745
    zf = v24926 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    sf = v24925 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    tf = v24748
    if = v24749
    df = v24750
    of = v24933 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    ax = v25033 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = v24727
    dx = v25067 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = -v24929-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?1 = v24741
    pf = -v24923-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?3 = v24743
    af = -v24927-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = v24745
    zf = v24926 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    sf = v24925 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    tf = v24748
    if = v24749
    df = v24750
    of = v24933 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x80483a6:test   edx, edx
    ax = v25033 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = v24727
    dx = v25067 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = 0x0 [from 0x80483a6:test   edx, edx]
    ?1 = v24741
    pf = -v25116-0x1 [from 0x80483a6:test   edx, edx]
    ?3 = v24743
    af = <top>
    ?5 = v24745
    zf = v25119 [from 0x80483a6:test   edx, edx]
    sf = v25118 [from 0x80483a6:test   edx, edx]
    tf = v24748
    if = v24749
    df = v24750
    of = 0x0 [from 0x80483a6:test   edx, edx]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x80483a8:je     0x080483c5
    ax = v25033 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = v24727
    dx = v25067 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = 0x0 [from 0x80483a6:test   edx, edx]
    ?1 = v24741
    pf = -v25116-0x1 [from 0x80483a6:test   edx, edx]
    ?3 = v24743
    af = <top>
    ?5 = v24745
    zf = v25119 [from 0x80483a6:test   edx, edx]
    sf = v25118 [from 0x80483a6:test   edx, edx]
    tf = v24748
    if = v24749
    df = v24750
    of = 0x0 [from 0x80483a6:test   edx, edx]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x80483aa:lea    esi, [esi + 0x00000000]
    ax = v25033 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = v24727
    dx = v25067 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = 0x0 [from 0x80483a6:test   edx, edx]
    ?1 = v24741
    pf = -v25116-0x1 [from 0x80483a6:test   edx, edx]
    ?3 = v24743
    af = <top>
    ?5 = v24745
    zf = v25119 [from 0x80483a6:test   edx, edx]
    sf = v25118 [from 0x80483a6:test   edx, edx]
    tf = v24748
    if = v24749
    df = v24750
    of = 0x0 [from 0x80483a6:test   edx, edx]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x80483b0:add    eax, 0x04
    ax = v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = v24727
    dx = v25067 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = v25282 [from 0x80483b0:add    eax, 0x04]
    ?1 = v24741
    pf = -v25277-0x1 [from 0x80483b0:add    eax, 0x04]
    ?3 = v24743
    af = v25281 [from 0x80483b0:add    eax, 0x04]
    ?5 = v24745
    zf = v25280 [from 0x80483b0:add    eax, 0x04]
    sf = v25279 [from 0x80483b0:add    eax, 0x04]
    tf = v24748
    if = v24749
    df = v24750
    of = v25285 [from 0x80483b0:add    eax, 0x04]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x4 [from 0x8048390:push   ebp]; value=v24731
    }
0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax
    ax = v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = v24727
    dx = v25067 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = v25282 [from 0x80483b0:add    eax, 0x04]
    ?1 = v24741
    pf = -v25277-0x1 [from 0x80483b0:add    eax, 0x04]
    ?3 = v24743
    af = v25281 [from 0x80483b0:add    eax, 0x04]
    ?5 = v24745
    zf = v25280 [from 0x80483b0:add    eax, 0x04]
    sf = v25279 [from 0x80483b0:add    eax, 0x04]
    tf = v24748
    if = v24749
    df = v24750
    of = v25285 [from 0x80483b0:add    eax, 0x04]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=0x80496f0 [from 0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax]; value=v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    }
0x80483b8:call   edx
    ax = v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = v24727
    dx = v25067 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0x10 [from 0x80483b8:call   edx]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = v24733
    es = v24734
    cs = v24735
    ss = v24736
    ds = v24737
    fs = v24738
    gs = v24739
    cf = v25282 [from 0x80483b0:add    eax, 0x04]
    ?1 = v24741
    pf = -v25277-0x1 [from 0x80483b0:add    eax, 0x04]
    ?3 = v24743
    af = v25281 [from 0x80483b0:add    eax, 0x04]
    ?5 = v24745
    zf = v25280 [from 0x80483b0:add    eax, 0x04]
    sf = v25279 [from 0x80483b0:add    eax, 0x04]
    tf = v24748
    if = v24749
    df = v24750
    of = v25285 [from 0x80483b0:add    eax, 0x04]
    iopl0 = v24752
    iopl1 = v24753
    nt = v24754
    ?15 = v24755
    memory = {
        size=4; addr=v24730-0x10 [from 0x80483b8:call   edx]; value=0x80483ba [from 0x80483b8:call   edx]
    }
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0]
    ax = v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = v25388 [from 0x80483b8:call   edx]
    dx = v25389 [from 0x80483b8:call   edx]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = v24733
    es = v25395 [from 0x80483b8:call   edx]
    cs = v25396 [from 0x80483b8:call   edx]
    ss = v25397 [from 0x80483b8:call   edx]
    ds = v25398 [from 0x80483b8:call   edx]
    fs = v25399 [from 0x80483b8:call   edx]
    gs = v25400 [from 0x80483b8:call   edx]
    cf = v25401 [from 0x80483b8:call   edx]
    ?1 = v25402 [from 0x80483b8:call   edx]
    pf = v25403 [from 0x80483b8:call   edx]
    ?3 = v25404 [from 0x80483b8:call   edx]
    af = v25405 [from 0x80483b8:call   edx]
    ?5 = v25406 [from 0x80483b8:call   edx]
    zf = v25407 [from 0x80483b8:call   edx]
    sf = v25408 [from 0x80483b8:call   edx]
    tf = v25409 [from 0x80483b8:call   edx]
    if = v25410 [from 0x80483b8:call   edx]
    df = v25411 [from 0x80483b8:call   edx]
    of = v25412 [from 0x80483b8:call   edx]
    iopl0 = v25413 [from 0x80483b8:call   edx]
    iopl1 = v25414 [from 0x80483b8:call   edx]
    nt = v25415 [from 0x80483b8:call   edx]
    ?15 = v25416 [from 0x80483b8:call   edx]
    memory = {
        size=4; addr=0x80496f0 [from 0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax]; value=v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    }
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    ax = v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = v25388 [from 0x80483b8:call   edx]
    dx = v25485 [from 0x80483bf:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = v24733
    es = v25395 [from 0x80483b8:call   edx]
    cs = v25396 [from 0x80483b8:call   edx]
    ss = v25397 [from 0x80483b8:call   edx]
    ds = v25398 [from 0x80483b8:call   edx]
    fs = v25399 [from 0x80483b8:call   edx]
    gs = v25400 [from 0x80483b8:call   edx]
    cf = v25401 [from 0x80483b8:call   edx]
    ?1 = v25402 [from 0x80483b8:call   edx]
    pf = v25403 [from 0x80483b8:call   edx]
    ?3 = v25404 [from 0x80483b8:call   edx]
    af = v25405 [from 0x80483b8:call   edx]
    ?5 = v25406 [from 0x80483b8:call   edx]
    zf = v25407 [from 0x80483b8:call   edx]
    sf = v25408 [from 0x80483b8:call   edx]
    tf = v25409 [from 0x80483b8:call   edx]
    if = v25410 [from 0x80483b8:call   edx]
    df = v25411 [from 0x80483b8:call   edx]
    of = v25412 [from 0x80483b8:call   edx]
    iopl0 = v25413 [from 0x80483b8:call   edx]
    iopl1 = v25414 [from 0x80483b8:call   edx]
    nt = v25415 [from 0x80483b8:call   edx]
    ?15 = v25416 [from 0x80483b8:call   edx]
    memory = {
        size=4; addr=0x80496f0 [from 0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax]; value=v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    }
0x80483c1:test   edx, edx
    ax = v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = v25388 [from 0x80483b8:call   edx]
    dx = v25485 [from 0x80483bf:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = v24733
    es = v25395 [from 0x80483b8:call   edx]
    cs = v25396 [from 0x80483b8:call   edx]
    ss = v25397 [from 0x80483b8:call   edx]
    ds = v25398 [from 0x80483b8:call   edx]
    fs = v25399 [from 0x80483b8:call   edx]
    gs = v25400 [from 0x80483b8:call   edx]
    cf = 0x0 [from 0x80483c1:test   edx, edx]
    ?1 = v25402 [from 0x80483b8:call   edx]
    pf = -v25534-0x1 [from 0x80483c1:test   edx, edx]
    ?3 = v25404 [from 0x80483b8:call   edx]
    af = <top>
    ?5 = v25406 [from 0x80483b8:call   edx]
    zf = v25537 [from 0x80483c1:test   edx, edx]
    sf = v25536 [from 0x80483c1:test   edx, edx]
    tf = v25409 [from 0x80483b8:call   edx]
    if = v25410 [from 0x80483b8:call   edx]
    df = v25411 [from 0x80483b8:call   edx]
    of = 0x0 [from 0x80483c1:test   edx, edx]
    iopl0 = v25413 [from 0x80483b8:call   edx]
    iopl1 = v25414 [from 0x80483b8:call   edx]
    nt = v25415 [from 0x80483b8:call   edx]
    ?15 = v25416 [from 0x80483b8:call   edx]
    memory = {
        size=4; addr=0x80496f0 [from 0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax]; value=v25033+0x4 [from 0x80483b0:add    eax, 0x04]
    }
0x80483c3:jne    0x080483b0
    ax = v25541
    cx = v25388 [from 0x80483b8:call   edx]
    dx = v25485 [from 0x80483bf:mov    edx, DWORD PTR ds:[eax]]
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = v24733
    es = v25395 [from 0x80483b8:call   edx]
    cs = v25396 [from 0x80483b8:call   edx]
    ss = v25397 [from 0x80483b8:call   edx]
    ds = v25398 [from 0x80483b8:call   edx]
    fs = v25399 [from 0x80483b8:call   edx]
    gs = v25400 [from 0x80483b8:call   edx]
    cf = 0x0 [from 0x80483c1:test   edx, edx]
    ?1 = v25402 [from 0x80483b8:call   edx]
    pf = -v25534-0x1 [from 0x80483c1:test   edx, edx]
    ?3 = v25404 [from 0x80483b8:call   edx]
    af = <top>
    ?5 = v25406 [from 0x80483b8:call   edx]
    zf = v25537 [from 0x80483c1:test   edx, edx]
    sf = v25536 [from 0x80483c1:test   edx, edx]
    tf = v25409 [from 0x80483b8:call   edx]
    if = v25410 [from 0x80483b8:call   edx]
    df = v25411 [from 0x80483b8:call   edx]
    of = 0x0 [from 0x80483c1:test   edx, edx]
    iopl0 = v25413 [from 0x80483b8:call   edx]
    iopl1 = v25414 [from 0x80483b8:call   edx]
    nt = v25415 [from 0x80483b8:call   edx]
    ?15 = v25416 [from 0x80483b8:call   edx]
    memory = {}
0x80483c5:mov    BYTE PTR ds:[0x080496f4], 0x01
    ax = v25187
    cx = v25188
    dx = v25189
    bx = v24729
    sp = v24730-0xc [from 0x8048393:sub    esp, 0x08]
    bp = v24730-0x4 [from 0x8048390:push   ebp]
    si = v24732
    di = v24733
    es = v25195
    cs = v25196
    ss = v25197
    ds = v25198
    fs = v25199
    gs = v25200
    cf = 0x0 [from 0x80483a6:test   edx, edx]
    ?1 = v25202
    pf = v25203
    ?3 = v25204
    af = <top>
    ?5 = v25206
    zf = v25207
    sf = v25208
    tf = v25209
    if = v25210
    df = v25211
    of = 0x0 [from 0x80483a6:test   edx, edx]
    iopl0 = v25213
    iopl1 = v25214
    nt = v25215
    ?15 = v25216
    memory = {
        size=1; addr=0x80496f4 [from 0x80483c5:mov    BYTE PTR ds:[0x080496f4], 0x01]; value=0x1 [from 0x80483c5:mov    BYTE PTR ds:[0x080496f4], 0x01]
    }
0x80483cc:leave  
    ax = v24999
    cx = v25000
    dx = v25001
    bx = v24729
    sp = v24730 [from 0x80483cc:leave  ]
    bp = v25590 [from 0x80483cc:leave  ]
    si = v24732
    di = v24733
    es = v25007
    cs = v25008
    ss = v25009
    ds = v25010
    fs = v25011
    gs = v25012
    cf = v25013
    ?1 = v25014
    pf = v25015
    ?3 = v25016
    af = -v24927-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = v25018
    zf = v25019
    sf = v25020
    tf = v25021
    if = v25022
    df = v25023
    of = v25024
    iopl0 = v25025
    iopl1 = v25026
    nt = v25027
    ?15 = v25028
    memory = {}
0x80483cd:ret    
    ax = v24999
    cx = v25000
    dx = v25001
    bx = v24729
    sp = v24730+0x4 [from 0x80483cd:ret    ]
    bp = v25590 [from 0x80483cc:leave  ]
    si = v24732
    di = v24733
    es = v25007
    cs = v25008
    ss = v25009
    ds = v25010
    fs = v25011
    gs = v25012
    cf = v25013
    ?1 = v25014
    pf = v25015
    ?3 = v25016
    af = -v24927-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = v25018
    zf = v25019
    sf = v25020
    tf = v25021
    if = v25022
    df = v25023
    of = v25024
    iopl0 = v25025
    iopl1 = v25026
    nt = v25027
    ?15 = v25028
    memory = {}
==============================================
Constant propagation in function "frame_dummy"
==============================================
0x80483d0:push   ebp
    ax = v25690
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0x4 [from 0x80483d0:push   ebp]
    bp = v25695
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = v25704
    ?1 = v25705
    pf = v25706
    ?3 = v25707
    af = v25708
    ?5 = v25709
    zf = v25710
    sf = v25711
    tf = v25712
    if = v25713
    df = v25714
    of = v25715
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x80483d1:mov    ebp, esp
    ax = v25690
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0x4 [from 0x80483d0:push   ebp]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = v25704
    ?1 = v25705
    pf = v25706
    ?3 = v25707
    af = v25708
    ?5 = v25709
    zf = v25710
    sf = v25711
    tf = v25712
    if = v25713
    df = v25714
    of = v25715
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x80483d3:sub    esp, 0x08
    ax = v25690
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = -v25821-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?1 = v25705
    pf = -v25815-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?3 = v25707
    af = -v25819-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?5 = v25709
    zf = v25818 [from 0x80483d3:sub    esp, 0x08]
    sf = v25817 [from 0x80483d3:sub    esp, 0x08]
    tf = v25712
    if = v25713
    df = v25714
    of = v25825 [from 0x80483d3:sub    esp, 0x08]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]
    ax = v25860 [from 0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]]
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = -v25821-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?1 = v25705
    pf = -v25815-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?3 = v25707
    af = -v25819-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?5 = v25709
    zf = v25818 [from 0x80483d3:sub    esp, 0x08]
    sf = v25817 [from 0x80483d3:sub    esp, 0x08]
    tf = v25712
    if = v25713
    df = v25714
    of = v25825 [from 0x80483d3:sub    esp, 0x08]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x80483db:test   eax, eax
    ax = v25860 [from 0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]]
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = v25705
    pf = -v25909-0x1 [from 0x80483db:test   eax, eax]
    ?3 = v25707
    af = <top>
    ?5 = v25709
    zf = v25912 [from 0x80483db:test   eax, eax]
    sf = v25911 [from 0x80483db:test   eax, eax]
    tf = v25712
    if = v25713
    df = v25714
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x80483dd:je     0x08048400
    ax = v25860 [from 0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]]
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = v25705
    pf = -v25909-0x1 [from 0x80483db:test   eax, eax]
    ?3 = v25707
    af = <top>
    ?5 = v25709
    zf = v25912 [from 0x80483db:test   eax, eax]
    sf = v25911 [from 0x80483db:test   eax, eax]
    tf = v25712
    if = v25713
    df = v25714
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x80483df:mov    eax, 0x00000000
    ax = 0x0 [from 0x80483df:mov    eax, 0x00000000]
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = v25705
    pf = -v25909-0x1 [from 0x80483db:test   eax, eax]
    ?3 = v25707
    af = <top>
    ?5 = v25709
    zf = v25912 [from 0x80483db:test   eax, eax]
    sf = v25911 [from 0x80483db:test   eax, eax]
    tf = v25712
    if = v25713
    df = v25714
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x80483e4:test   eax, eax
    ax = 0x0 [from 0x80483df:mov    eax, 0x00000000]
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = 0x0 [from 0x80483e4:test   eax, eax]
    ?1 = v25705
    pf = 0x1 (-0x1) [from 0x80483e4:test   eax, eax]
    ?3 = v25707
    af = <top>
    ?5 = v25709
    zf = 0x1 (-0x1) [from 0x80483e4:test   eax, eax]
    sf = 0x0 [from 0x80483e4:test   eax, eax]
    tf = v25712
    if = v25713
    df = v25714
    of = 0x0 [from 0x80483e4:test   eax, eax]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x80483e6:je     0x08048400
    ax = 0x0 [from 0x80483df:mov    eax, 0x00000000]
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = 0x0 [from 0x80483e4:test   eax, eax]
    ?1 = v25705
    pf = 0x1 (-0x1) [from 0x80483e4:test   eax, eax]
    ?3 = v25707
    af = <top>
    ?5 = v25709
    zf = 0x1 (-0x1) [from 0x80483e4:test   eax, eax]
    sf = 0x0 [from 0x80483e4:test   eax, eax]
    tf = v25712
    if = v25713
    df = v25714
    of = 0x0 [from 0x80483e4:test   eax, eax]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {
        size=4; addr=v25694-0x4 [from 0x80483d0:push   ebp]; value=v25695
    }
0x8048400:mov    esp, ebp
    ax = v25980
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694-0x4 [from 0x80483d0:push   ebp]
    bp = v25694-0x4 [from 0x80483d0:push   ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = v25705
    pf = v25996
    ?3 = v25707
    af = <top>
    ?5 = v25709
    zf = v26000
    sf = v26001
    tf = v25712
    if = v25713
    df = v25714
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {}
0x8048402:pop    ebp
    ax = v25980
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694 [from 0x8048402:pop    ebp]
    bp = v26139 [from 0x8048402:pop    ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = v25705
    pf = v25996
    ?3 = v25707
    af = <top>
    ?5 = v25709
    zf = v26000
    sf = v26001
    tf = v25712
    if = v25713
    df = v25714
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {}
0x8048403:ret    
    ax = v25980
    cx = v25691
    dx = v25692
    bx = v25693
    sp = v25694+0x4 [from 0x8048403:ret    ]
    bp = v26139 [from 0x8048402:pop    ebp]
    si = v25696
    di = v25697
    es = v25698
    cs = v25699
    ss = v25700
    ds = v25701
    fs = v25702
    gs = v25703
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = v25705
    pf = v25996
    ?3 = v25707
    af = <top>
    ?5 = v25709
    zf = v26000
    sf = v26001
    tf = v25712
    if = v25713
    df = v25714
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = v25716
    iopl1 = v25717
    nt = v25718
    ?15 = v25719
    memory = {}
==============================================
Constant propagation in function "0x8048404"
==============================================
0x8048404:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x8048405:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x8048406:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x8048407:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x8048408:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x8048409:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x804840a:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x804840b:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x804840c:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x804840d:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x804840e:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
0x804840f:nop    
    ax = v26239
    cx = v26240
    dx = v26241
    bx = v26242
    sp = v26243
    bp = v26244
    si = v26245
    di = v26246
    es = v26247
    cs = v26248
    ss = v26249
    ds = v26250
    fs = v26251
    gs = v26252
    cf = v26253
    ?1 = v26254
    pf = v26255
    ?3 = v26256
    af = v26257
    ?5 = v26258
    zf = v26259
    sf = v26260
    tf = v26261
    if = v26262
    df = v26263
    of = v26264
    iopl0 = v26265
    iopl1 = v26266
    nt = v26267
    ?15 = v26268
    memory = {}
==============================================
Constant propagation in function "main"
==============================================
0x8048410:push   ebp
    ax = v26713
    cx = v26714
    dx = v26715
    bx = v26716
    sp = v26717-0x4 [from 0x8048410:push   ebp]
    bp = v26718
    si = v26719
    di = v26720
    es = v26721
    cs = v26722
    ss = v26723
    ds = v26724
    fs = v26725
    gs = v26726
    cf = v26727
    ?1 = v26728
    pf = v26729
    ?3 = v26730
    af = v26731
    ?5 = v26732
    zf = v26733
    sf = v26734
    tf = v26735
    if = v26736
    df = v26737
    of = v26738
    iopl0 = v26739
    iopl1 = v26740
    nt = v26741
    ?15 = v26742
    memory = {
        size=4; addr=v26717-0x4 [from 0x8048410:push   ebp]; value=v26718
    }
0x8048411:mov    edx, 0x08048480
    ax = v26713
    cx = v26714
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = v26716
    sp = v26717-0x4 [from 0x8048410:push   ebp]
    bp = v26718
    si = v26719
    di = v26720
    es = v26721
    cs = v26722
    ss = v26723
    ds = v26724
    fs = v26725
    gs = v26726
    cf = v26727
    ?1 = v26728
    pf = v26729
    ?3 = v26730
    af = v26731
    ?5 = v26732
    zf = v26733
    sf = v26734
    tf = v26735
    if = v26736
    df = v26737
    of = v26738
    iopl0 = v26739
    iopl1 = v26740
    nt = v26741
    ?15 = v26742
    memory = {
        size=4; addr=v26717-0x4 [from 0x8048410:push   ebp]; value=v26718
    }
0x8048416:mov    ebp, esp
    ax = v26713
    cx = v26714
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = v26716
    sp = v26717-0x4 [from 0x8048410:push   ebp]
    bp = v26717-0x4 [from 0x8048410:push   ebp]
    si = v26719
    di = v26720
    es = v26721
    cs = v26722
    ss = v26723
    ds = v26724
    fs = v26725
    gs = v26726
    cf = v26727
    ?1 = v26728
    pf = v26729
    ?3 = v26730
    af = v26731
    ?5 = v26732
    zf = v26733
    sf = v26734
    tf = v26735
    if = v26736
    df = v26737
    of = v26738
    iopl0 = v26739
    iopl1 = v26740
    nt = v26741
    ?15 = v26742
    memory = {
        size=4; addr=v26717-0x4 [from 0x8048410:push   ebp]; value=v26718
    }
0x8048418:sub    esp, 0x08
    ax = v26713
    cx = v26714
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = v26716
    sp = v26717-0xc [from 0x8048418:sub    esp, 0x08]
    bp = v26717-0x4 [from 0x8048410:push   ebp]
    si = v26719
    di = v26720
    es = v26721
    cs = v26722
    ss = v26723
    ds = v26724
    fs = v26725
    gs = v26726
    cf = -v26877-0x1 [from 0x8048418:sub    esp, 0x08]
    ?1 = v26728
    pf = -v26871-0x1 [from 0x8048418:sub    esp, 0x08]
    ?3 = v26730
    af = -v26875-0x1 [from 0x8048418:sub    esp, 0x08]
    ?5 = v26732
    zf = v26874 [from 0x8048418:sub    esp, 0x08]
    sf = v26873 [from 0x8048418:sub    esp, 0x08]
    tf = v26735
    if = v26736
    df = v26737
    of = v26881 [from 0x8048418:sub    esp, 0x08]
    iopl0 = v26739
    iopl1 = v26740
    nt = v26741
    ?15 = v26742
    memory = {
        size=4; addr=v26717-0x4 [from 0x8048410:push   ebp]; value=v26718
    }
0x804841b:and    esp, 0xf0
    ax = v26713
    cx = v26714
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = v26716
    sp = v26915 [from 0x804841b:and    esp, 0xf0]
    bp = v26717-0x4 [from 0x8048410:push   ebp]
    si = v26719
    di = v26720
    es = v26721
    cs = v26722
    ss = v26723
    ds = v26724
    fs = v26725
    gs = v26726
    cf = 0x0 [from 0x804841b:and    esp, 0xf0]
    ?1 = v26728
    pf = -v26931-0x1 [from 0x804841b:and    esp, 0xf0]
    ?3 = v26730
    af = <top>
    ?5 = v26732
    zf = v26934 [from 0x804841b:and    esp, 0xf0]
    sf = v26933 [from 0x804841b:and    esp, 0xf0]
    tf = v26735
    if = v26736
    df = v26737
    of = 0x0 [from 0x804841b:and    esp, 0xf0]
    iopl0 = v26739
    iopl1 = v26740
    nt = v26741
    ?15 = v26742
    memory = {
        size=4; addr=v26717-0x4 [from 0x8048410:push   ebp]; value=v26718
    }
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    ax = v26713
    cx = v26714
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = v26716
    sp = v26915 [from 0x804841b:and    esp, 0xf0]
    bp = v26717-0x4 [from 0x8048410:push   ebp]
    si = v26719
    di = v26720
    es = v26721
    cs = v26722
    ss = v26723
    ds = v26724
    fs = v26725
    gs = v26726
    cf = 0x0 [from 0x804841b:and    esp, 0xf0]
    ?1 = v26728
    pf = -v26931-0x1 [from 0x804841b:and    esp, 0xf0]
    ?3 = v26730
    af = <top>
    ?5 = v26732
    zf = v26934 [from 0x804841b:and    esp, 0xf0]
    sf = v26933 [from 0x804841b:and    esp, 0xf0]
    tf = v26735
    if = v26736
    df = v26737
    of = 0x0 [from 0x804841b:and    esp, 0xf0]
    iopl0 = v26739
    iopl1 = v26740
    nt = v26741
    ?15 = v26742
    memory = {
        size=4; addr=v26915+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    ax = v26713
    cx = v26714
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = v26716
    sp = v26915 [from 0x804841b:and    esp, 0xf0]
    bp = v26717-0x4 [from 0x8048410:push   ebp]
    si = v26719
    di = v26720
    es = v26721
    cs = v26722
    ss = v26723
    ds = v26724
    fs = v26725
    gs = v26726
    cf = 0x0 [from 0x804841b:and    esp, 0xf0]
    ?1 = v26728
    pf = -v26931-0x1 [from 0x804841b:and    esp, 0xf0]
    ?3 = v26730
    af = <top>
    ?5 = v26732
    zf = v26934 [from 0x804841b:and    esp, 0xf0]
    sf = v26933 [from 0x804841b:and    esp, 0xf0]
    tf = v26735
    if = v26736
    df = v26737
    of = 0x0 [from 0x804841b:and    esp, 0xf0]
    iopl0 = v26739
    iopl1 = v26740
    nt = v26741
    ?15 = v26742
    memory = {
        size=4; addr=v26915 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=v26915+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048429:call   0x080482f0
    ax = v26713
    cx = v26714
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = v26716
    sp = v26915-0x4 [from 0x8048429:call   0x080482f0]
    bp = v26717-0x4 [from 0x8048410:push   ebp]
    si = v26719
    di = v26720
    es = v26721
    cs = v26722
    ss = v26723
    ds = v26724
    fs = v26725
    gs = v26726
    cf = 0x0 [from 0x804841b:and    esp, 0xf0]
    ?1 = v26728
    pf = -v26931-0x1 [from 0x804841b:and    esp, 0xf0]
    ?3 = v26730
    af = <top>
    ?5 = v26732
    zf = v26934 [from 0x804841b:and    esp, 0xf0]
    sf = v26933 [from 0x804841b:and    esp, 0xf0]
    tf = v26735
    if = v26736
    df = v26737
    of = 0x0 [from 0x804841b:and    esp, 0xf0]
    iopl0 = v26739
    iopl1 = v26740
    nt = v26741
    ?15 = v26742
    memory = {
        size=4; addr=v26915 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=v26915+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
        size=4; addr=v26915-0x4 [from 0x8048429:call   0x080482f0]; value=0x804842e [from 0x8048429:call   0x080482f0]
    }
0x804842e:mov    esp, ebp
    ax = v27076 [from 0x8048429:call   0x080482f0]
    cx = v27077 [from 0x8048429:call   0x080482f0]
    dx = v27078 [from 0x8048429:call   0x080482f0]
    bx = v26716
    sp = v26717-0x4 [from 0x8048410:push   ebp]
    bp = v26717-0x4 [from 0x8048410:push   ebp]
    si = v26719
    di = v26720
    es = v27084 [from 0x8048429:call   0x080482f0]
    cs = v27085 [from 0x8048429:call   0x080482f0]
    ss = v27086 [from 0x8048429:call   0x080482f0]
    ds = v27087 [from 0x8048429:call   0x080482f0]
    fs = v27088 [from 0x8048429:call   0x080482f0]
    gs = v27089 [from 0x8048429:call   0x080482f0]
    cf = v27090 [from 0x8048429:call   0x080482f0]
    ?1 = v27091 [from 0x8048429:call   0x080482f0]
    pf = v27092 [from 0x8048429:call   0x080482f0]
    ?3 = v27093 [from 0x8048429:call   0x080482f0]
    af = v27094 [from 0x8048429:call   0x080482f0]
    ?5 = v27095 [from 0x8048429:call   0x080482f0]
    zf = v27096 [from 0x8048429:call   0x080482f0]
    sf = v27097 [from 0x8048429:call   0x080482f0]
    tf = v27098 [from 0x8048429:call   0x080482f0]
    if = v27099 [from 0x8048429:call   0x080482f0]
    df = v27100 [from 0x8048429:call   0x080482f0]
    of = v27101 [from 0x8048429:call   0x080482f0]
    iopl0 = v27102 [from 0x8048429:call   0x080482f0]
    iopl1 = v27103 [from 0x8048429:call   0x080482f0]
    nt = v27104 [from 0x8048429:call   0x080482f0]
    ?15 = v27105 [from 0x8048429:call   0x080482f0]
    memory = {
        size=4; addr=v26915 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=v26915+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048430:xor    eax, eax
    ax = 0x0 [from 0x8048430:xor    eax, eax]
    cx = v27077 [from 0x8048429:call   0x080482f0]
    dx = v27078 [from 0x8048429:call   0x080482f0]
    bx = v26716
    sp = v26717-0x4 [from 0x8048410:push   ebp]
    bp = v26717-0x4 [from 0x8048410:push   ebp]
    si = v26719
    di = v26720
    es = v27084 [from 0x8048429:call   0x080482f0]
    cs = v27085 [from 0x8048429:call   0x080482f0]
    ss = v27086 [from 0x8048429:call   0x080482f0]
    ds = v27087 [from 0x8048429:call   0x080482f0]
    fs = v27088 [from 0x8048429:call   0x080482f0]
    gs = v27089 [from 0x8048429:call   0x080482f0]
    cf = 0x0 [from 0x8048430:xor    eax, eax]
    ?1 = v27091 [from 0x8048429:call   0x080482f0]
    pf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    ?3 = v27093 [from 0x8048429:call   0x080482f0]
    af = <top>
    ?5 = v27095 [from 0x8048429:call   0x080482f0]
    zf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    sf = 0x0 [from 0x8048430:xor    eax, eax]
    tf = v27098 [from 0x8048429:call   0x080482f0]
    if = v27099 [from 0x8048429:call   0x080482f0]
    df = v27100 [from 0x8048429:call   0x080482f0]
    of = 0x0 [from 0x8048430:xor    eax, eax]
    iopl0 = v27102 [from 0x8048429:call   0x080482f0]
    iopl1 = v27103 [from 0x8048429:call   0x080482f0]
    nt = v27104 [from 0x8048429:call   0x080482f0]
    ?15 = v27105 [from 0x8048429:call   0x080482f0]
    memory = {
        size=4; addr=v26915 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=v26915+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048432:pop    ebp
    ax = 0x0 [from 0x8048430:xor    eax, eax]
    cx = v27077 [from 0x8048429:call   0x080482f0]
    dx = v27078 [from 0x8048429:call   0x080482f0]
    bx = v26716
    sp = v26717 [from 0x8048432:pop    ebp]
    bp = v27258 [from 0x8048432:pop    ebp]
    si = v26719
    di = v26720
    es = v27084 [from 0x8048429:call   0x080482f0]
    cs = v27085 [from 0x8048429:call   0x080482f0]
    ss = v27086 [from 0x8048429:call   0x080482f0]
    ds = v27087 [from 0x8048429:call   0x080482f0]
    fs = v27088 [from 0x8048429:call   0x080482f0]
    gs = v27089 [from 0x8048429:call   0x080482f0]
    cf = 0x0 [from 0x8048430:xor    eax, eax]
    ?1 = v27091 [from 0x8048429:call   0x080482f0]
    pf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    ?3 = v27093 [from 0x8048429:call   0x080482f0]
    af = <top>
    ?5 = v27095 [from 0x8048429:call   0x080482f0]
    zf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    sf = 0x0 [from 0x8048430:xor    eax, eax]
    tf = v27098 [from 0x8048429:call   0x080482f0]
    if = v27099 [from 0x8048429:call   0x080482f0]
    df = v27100 [from 0x8048429:call   0x080482f0]
    of = 0x0 [from 0x8048430:xor    eax, eax]
    iopl0 = v27102 [from 0x8048429:call   0x080482f0]
    iopl1 = v27103 [from 0x8048429:call   0x080482f0]
    nt = v27104 [from 0x8048429:call   0x080482f0]
    ?15 = v27105 [from 0x8048429:call   0x080482f0]
    memory = {
        size=4; addr=v26915 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=v26915+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048433:ret    
    ax = 0x0 [from 0x8048430:xor    eax, eax]
    cx = v27077 [from 0x8048429:call   0x080482f0]
    dx = v27078 [from 0x8048429:call   0x080482f0]
    bx = v26716
    sp = v26717+0x4 [from 0x8048433:ret    ]
    bp = v27258 [from 0x8048432:pop    ebp]
    si = v26719
    di = v26720
    es = v27084 [from 0x8048429:call   0x080482f0]
    cs = v27085 [from 0x8048429:call   0x080482f0]
    ss = v27086 [from 0x8048429:call   0x080482f0]
    ds = v27087 [from 0x8048429:call   0x080482f0]
    fs = v27088 [from 0x8048429:call   0x080482f0]
    gs = v27089 [from 0x8048429:call   0x080482f0]
    cf = 0x0 [from 0x8048430:xor    eax, eax]
    ?1 = v27091 [from 0x8048429:call   0x080482f0]
    pf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    ?3 = v27093 [from 0x8048429:call   0x080482f0]
    af = <top>
    ?5 = v27095 [from 0x8048429:call   0x080482f0]
    zf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    sf = 0x0 [from 0x8048430:xor    eax, eax]
    tf = v27098 [from 0x8048429:call   0x080482f0]
    if = v27099 [from 0x8048429:call   0x080482f0]
    df = v27100 [from 0x8048429:call   0x080482f0]
    of = 0x0 [from 0x8048430:xor    eax, eax]
    iopl0 = v27102 [from 0x8048429:call   0x080482f0]
    iopl1 = v27103 [from 0x8048429:call   0x080482f0]
    nt = v27104 [from 0x8048429:call   0x080482f0]
    ?15 = v27105 [from 0x8048429:call   0x080482f0]
    memory = {
        size=4; addr=v26915 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=v26915+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
==============================================
Constant propagation in function "bar"
==============================================
0x8048440:push   ebp
    ax = v27358
    cx = v27359
    dx = v27360
    bx = v27361
    sp = v27362-0x4 [from 0x8048440:push   ebp]
    bp = v27363
    si = v27364
    di = v27365
    es = v27366
    cs = v27367
    ss = v27368
    ds = v27369
    fs = v27370
    gs = v27371
    cf = v27372
    ?1 = v27373
    pf = v27374
    ?3 = v27375
    af = v27376
    ?5 = v27377
    zf = v27378
    sf = v27379
    tf = v27380
    if = v27381
    df = v27382
    of = v27383
    iopl0 = v27384
    iopl1 = v27385
    nt = v27386
    ?15 = v27387
    memory = {
        size=4; addr=v27362-0x4 [from 0x8048440:push   ebp]; value=v27363
    }
0x8048441:mov    ebp, esp
    ax = v27358
    cx = v27359
    dx = v27360
    bx = v27361
    sp = v27362-0x4 [from 0x8048440:push   ebp]
    bp = v27362-0x4 [from 0x8048440:push   ebp]
    si = v27364
    di = v27365
    es = v27366
    cs = v27367
    ss = v27368
    ds = v27369
    fs = v27370
    gs = v27371
    cf = v27372
    ?1 = v27373
    pf = v27374
    ?3 = v27375
    af = v27376
    ?5 = v27377
    zf = v27378
    sf = v27379
    tf = v27380
    if = v27381
    df = v27382
    of = v27383
    iopl0 = v27384
    iopl1 = v27385
    nt = v27386
    ?15 = v27387
    memory = {
        size=4; addr=v27362-0x4 [from 0x8048440:push   ebp]; value=v27363
    }
0x8048443:sub    esp, 0x08
    ax = v27358
    cx = v27359
    dx = v27360
    bx = v27361
    sp = v27362-0xc [from 0x8048443:sub    esp, 0x08]
    bp = v27362-0x4 [from 0x8048440:push   ebp]
    si = v27364
    di = v27365
    es = v27366
    cs = v27367
    ss = v27368
    ds = v27369
    fs = v27370
    gs = v27371
    cf = -v27489-0x1 [from 0x8048443:sub    esp, 0x08]
    ?1 = v27373
    pf = -v27483-0x1 [from 0x8048443:sub    esp, 0x08]
    ?3 = v27375
    af = -v27487-0x1 [from 0x8048443:sub    esp, 0x08]
    ?5 = v27377
    zf = v27486 [from 0x8048443:sub    esp, 0x08]
    sf = v27485 [from 0x8048443:sub    esp, 0x08]
    tf = v27380
    if = v27381
    df = v27382
    of = v27493 [from 0x8048443:sub    esp, 0x08]
    iopl0 = v27384
    iopl1 = v27385
    nt = v27386
    ?15 = v27387
    memory = {
        size=4; addr=v27362-0x4 [from 0x8048440:push   ebp]; value=v27363
    }
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4
    ax = v27358
    cx = v27359
    dx = v27360
    bx = v27361
    sp = v27362-0xc [from 0x8048443:sub    esp, 0x08]
    bp = v27362-0x4 [from 0x8048440:push   ebp]
    si = v27364
    di = v27365
    es = v27366
    cs = v27367
    ss = v27368
    ds = v27369
    fs = v27370
    gs = v27371
    cf = -v27489-0x1 [from 0x8048443:sub    esp, 0x08]
    ?1 = v27373
    pf = -v27483-0x1 [from 0x8048443:sub    esp, 0x08]
    ?3 = v27375
    af = -v27487-0x1 [from 0x8048443:sub    esp, 0x08]
    ?5 = v27377
    zf = v27486 [from 0x8048443:sub    esp, 0x08]
    sf = v27485 [from 0x8048443:sub    esp, 0x08]
    tf = v27380
    if = v27381
    df = v27382
    of = v27493 [from 0x8048443:sub    esp, 0x08]
    iopl0 = v27384
    iopl1 = v27385
    nt = v27386
    ?15 = v27387
    memory = {
        size=4; addr=v27362-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=v27362-0x4 [from 0x8048440:push   ebp]; value=v27363
    }
0x804844d:call   0x08048300
    ax = v27358
    cx = v27359
    dx = v27360
    bx = v27361
    sp = v27362-0x10 [from 0x804844d:call   0x08048300]
    bp = v27362-0x4 [from 0x8048440:push   ebp]
    si = v27364
    di = v27365
    es = v27366
    cs = v27367
    ss = v27368
    ds = v27369
    fs = v27370
    gs = v27371
    cf = -v27489-0x1 [from 0x8048443:sub    esp, 0x08]
    ?1 = v27373
    pf = -v27483-0x1 [from 0x8048443:sub    esp, 0x08]
    ?3 = v27375
    af = -v27487-0x1 [from 0x8048443:sub    esp, 0x08]
    ?5 = v27377
    zf = v27486 [from 0x8048443:sub    esp, 0x08]
    sf = v27485 [from 0x8048443:sub    esp, 0x08]
    tf = v27380
    if = v27381
    df = v27382
    of = v27493 [from 0x8048443:sub    esp, 0x08]
    iopl0 = v27384
    iopl1 = v27385
    nt = v27386
    ?15 = v27387
    memory = {
        size=4; addr=v27362-0x10 [from 0x804844d:call   0x08048300]; value=0x8048452 [from 0x804844d:call   0x08048300]
        size=4; addr=v27362-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=v27362-0x4 [from 0x8048440:push   ebp]; value=v27363
    }
0x8048452:mov    esp, ebp
    ax = v27596 [from 0x804844d:call   0x08048300]
    cx = v27597 [from 0x804844d:call   0x08048300]
    dx = v27598 [from 0x804844d:call   0x08048300]
    bx = v27361
    sp = v27362-0x4 [from 0x8048440:push   ebp]
    bp = v27362-0x4 [from 0x8048440:push   ebp]
    si = v27364
    di = v27365
    es = v27604 [from 0x804844d:call   0x08048300]
    cs = v27605 [from 0x804844d:call   0x08048300]
    ss = v27606 [from 0x804844d:call   0x08048300]
    ds = v27607 [from 0x804844d:call   0x08048300]
    fs = v27608 [from 0x804844d:call   0x08048300]
    gs = v27609 [from 0x804844d:call   0x08048300]
    cf = v27610 [from 0x804844d:call   0x08048300]
    ?1 = v27611 [from 0x804844d:call   0x08048300]
    pf = v27612 [from 0x804844d:call   0x08048300]
    ?3 = v27613 [from 0x804844d:call   0x08048300]
    af = v27614 [from 0x804844d:call   0x08048300]
    ?5 = v27615 [from 0x804844d:call   0x08048300]
    zf = v27616 [from 0x804844d:call   0x08048300]
    sf = v27617 [from 0x804844d:call   0x08048300]
    tf = v27618 [from 0x804844d:call   0x08048300]
    if = v27619 [from 0x804844d:call   0x08048300]
    df = v27620 [from 0x804844d:call   0x08048300]
    of = v27621 [from 0x804844d:call   0x08048300]
    iopl0 = v27622 [from 0x804844d:call   0x08048300]
    iopl1 = v27623 [from 0x804844d:call   0x08048300]
    nt = v27624 [from 0x804844d:call   0x08048300]
    ?15 = v27625 [from 0x804844d:call   0x08048300]
    memory = {
        size=4; addr=v27362-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=v27362-0x4 [from 0x8048440:push   ebp]; value=v27363
    }
0x8048454:pop    ebp
    ax = v27596 [from 0x804844d:call   0x08048300]
    cx = v27597 [from 0x804844d:call   0x08048300]
    dx = v27598 [from 0x804844d:call   0x08048300]
    bx = v27361
    sp = v27362 [from 0x8048454:pop    ebp]
    bp = v27363
    si = v27364
    di = v27365
    es = v27604 [from 0x804844d:call   0x08048300]
    cs = v27605 [from 0x804844d:call   0x08048300]
    ss = v27606 [from 0x804844d:call   0x08048300]
    ds = v27607 [from 0x804844d:call   0x08048300]
    fs = v27608 [from 0x804844d:call   0x08048300]
    gs = v27609 [from 0x804844d:call   0x08048300]
    cf = v27610 [from 0x804844d:call   0x08048300]
    ?1 = v27611 [from 0x804844d:call   0x08048300]
    pf = v27612 [from 0x804844d:call   0x08048300]
    ?3 = v27613 [from 0x804844d:call   0x08048300]
    af = v27614 [from 0x804844d:call   0x08048300]
    ?5 = v27615 [from 0x804844d:call   0x08048300]
    zf = v27616 [from 0x804844d:call   0x08048300]
    sf = v27617 [from 0x804844d:call   0x08048300]
    tf = v27618 [from 0x804844d:call   0x08048300]
    if = v27619 [from 0x804844d:call   0x08048300]
    df = v27620 [from 0x804844d:call   0x08048300]
    of = v27621 [from 0x804844d:call   0x08048300]
    iopl0 = v27622 [from 0x804844d:call   0x08048300]
    iopl1 = v27623 [from 0x804844d:call   0x08048300]
    nt = v27624 [from 0x804844d:call   0x08048300]
    ?15 = v27625 [from 0x804844d:call   0x08048300]
    memory = {
        size=4; addr=v27362-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=v27362-0x4 [from 0x8048440:push   ebp]; value=v27363
    }
0x8048455:ret    
    ax = v27596 [from 0x804844d:call   0x08048300]
    cx = v27597 [from 0x804844d:call   0x08048300]
    dx = v27598 [from 0x804844d:call   0x08048300]
    bx = v27361
    sp = v27362+0x4 [from 0x8048455:ret    ]
    bp = v27363
    si = v27364
    di = v27365
    es = v27604 [from 0x804844d:call   0x08048300]
    cs = v27605 [from 0x804844d:call   0x08048300]
    ss = v27606 [from 0x804844d:call   0x08048300]
    ds = v27607 [from 0x804844d:call   0x08048300]
    fs = v27608 [from 0x804844d:call   0x08048300]
    gs = v27609 [from 0x804844d:call   0x08048300]
    cf = v27610 [from 0x804844d:call   0x08048300]
    ?1 = v27611 [from 0x804844d:call   0x08048300]
    pf = v27612 [from 0x804844d:call   0x08048300]
    ?3 = v27613 [from 0x804844d:call   0x08048300]
    af = v27614 [from 0x804844d:call   0x08048300]
    ?5 = v27615 [from 0x804844d:call   0x08048300]
    zf = v27616 [from 0x804844d:call   0x08048300]
    sf = v27617 [from 0x804844d:call   0x08048300]
    tf = v27618 [from 0x804844d:call   0x08048300]
    if = v27619 [from 0x804844d:call   0x08048300]
    df = v27620 [from 0x804844d:call   0x08048300]
    of = v27621 [from 0x804844d:call   0x08048300]
    iopl0 = v27622 [from 0x804844d:call   0x08048300]
    iopl1 = v27623 [from 0x804844d:call   0x08048300]
    nt = v27624 [from 0x804844d:call   0x08048300]
    ?15 = v27625 [from 0x804844d:call   0x08048300]
    memory = {
        size=4; addr=v27362-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=v27362-0x4 [from 0x8048440:push   ebp]; value=v27363
    }
==============================================
Constant propagation in function "foo"
==============================================
0x8048460:push   ebp
    ax = v27823
    cx = v27824
    dx = v27825
    bx = v27826
    sp = v27827-0x4 [from 0x8048460:push   ebp]
    bp = v27828
    si = v27829
    di = v27830
    es = v27831
    cs = v27832
    ss = v27833
    ds = v27834
    fs = v27835
    gs = v27836
    cf = v27837
    ?1 = v27838
    pf = v27839
    ?3 = v27840
    af = v27841
    ?5 = v27842
    zf = v27843
    sf = v27844
    tf = v27845
    if = v27846
    df = v27847
    of = v27848
    iopl0 = v27849
    iopl1 = v27850
    nt = v27851
    ?15 = v27852
    memory = {
        size=4; addr=v27827-0x4 [from 0x8048460:push   ebp]; value=v27828
    }
0x8048461:mov    ebp, esp
    ax = v27823
    cx = v27824
    dx = v27825
    bx = v27826
    sp = v27827-0x4 [from 0x8048460:push   ebp]
    bp = v27827-0x4 [from 0x8048460:push   ebp]
    si = v27829
    di = v27830
    es = v27831
    cs = v27832
    ss = v27833
    ds = v27834
    fs = v27835
    gs = v27836
    cf = v27837
    ?1 = v27838
    pf = v27839
    ?3 = v27840
    af = v27841
    ?5 = v27842
    zf = v27843
    sf = v27844
    tf = v27845
    if = v27846
    df = v27847
    of = v27848
    iopl0 = v27849
    iopl1 = v27850
    nt = v27851
    ?15 = v27852
    memory = {
        size=4; addr=v27827-0x4 [from 0x8048460:push   ebp]; value=v27828
    }
0x8048463:sub    esp, 0x08
    ax = v27823
    cx = v27824
    dx = v27825
    bx = v27826
    sp = v27827-0xc [from 0x8048463:sub    esp, 0x08]
    bp = v27827-0x4 [from 0x8048460:push   ebp]
    si = v27829
    di = v27830
    es = v27831
    cs = v27832
    ss = v27833
    ds = v27834
    fs = v27835
    gs = v27836
    cf = -v27954-0x1 [from 0x8048463:sub    esp, 0x08]
    ?1 = v27838
    pf = -v27948-0x1 [from 0x8048463:sub    esp, 0x08]
    ?3 = v27840
    af = -v27952-0x1 [from 0x8048463:sub    esp, 0x08]
    ?5 = v27842
    zf = v27951 [from 0x8048463:sub    esp, 0x08]
    sf = v27950 [from 0x8048463:sub    esp, 0x08]
    tf = v27845
    if = v27846
    df = v27847
    of = v27958 [from 0x8048463:sub    esp, 0x08]
    iopl0 = v27849
    iopl1 = v27850
    nt = v27851
    ?15 = v27852
    memory = {
        size=4; addr=v27827-0x4 [from 0x8048460:push   ebp]; value=v27828
    }
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4
    ax = v27823
    cx = v27824
    dx = v27825
    bx = v27826
    sp = v27827-0xc [from 0x8048463:sub    esp, 0x08]
    bp = v27827-0x4 [from 0x8048460:push   ebp]
    si = v27829
    di = v27830
    es = v27831
    cs = v27832
    ss = v27833
    ds = v27834
    fs = v27835
    gs = v27836
    cf = -v27954-0x1 [from 0x8048463:sub    esp, 0x08]
    ?1 = v27838
    pf = -v27948-0x1 [from 0x8048463:sub    esp, 0x08]
    ?3 = v27840
    af = -v27952-0x1 [from 0x8048463:sub    esp, 0x08]
    ?5 = v27842
    zf = v27951 [from 0x8048463:sub    esp, 0x08]
    sf = v27950 [from 0x8048463:sub    esp, 0x08]
    tf = v27845
    if = v27846
    df = v27847
    of = v27958 [from 0x8048463:sub    esp, 0x08]
    iopl0 = v27849
    iopl1 = v27850
    nt = v27851
    ?15 = v27852
    memory = {
        size=4; addr=v27827-0xc [from 0x8048463:sub    esp, 0x08]; value=0x80485d4 [from 0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=v27827-0x4 [from 0x8048460:push   ebp]; value=v27828
    }
0x804846d:call   0x08048300
    ax = v27823
    cx = v27824
    dx = v27825
    bx = v27826
    sp = v27827-0x10 [from 0x804846d:call   0x08048300]
    bp = v27827-0x4 [from 0x8048460:push   ebp]
    si = v27829
    di = v27830
    es = v27831
    cs = v27832
    ss = v27833
    ds = v27834
    fs = v27835
    gs = v27836
    cf = -v27954-0x1 [from 0x8048463:sub    esp, 0x08]
    ?1 = v27838
    pf = -v27948-0x1 [from 0x8048463:sub    esp, 0x08]
    ?3 = v27840
    af = -v27952-0x1 [from 0x8048463:sub    esp, 0x08]
    ?5 = v27842
    zf = v27951 [from 0x8048463:sub    esp, 0x08]
    sf = v27950 [from 0x8048463:sub    esp, 0x08]
    tf = v27845
    if = v27846
    df = v27847
    of = v27958 [from 0x8048463:sub    esp, 0x08]
    iopl0 = v27849
    iopl1 = v27850
    nt = v27851
    ?15 = v27852
    memory = {
        size=4; addr=v27827-0x10 [from 0x804846d:call   0x08048300]; value=0x8048472 [from 0x804846d:call   0x08048300]
        size=4; addr=v27827-0xc [from 0x8048463:sub    esp, 0x08]; value=0x80485d4 [from 0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=v27827-0x4 [from 0x8048460:push   ebp]; value=v27828
    }
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    ax = v28061 [from 0x804846d:call   0x08048300]
    cx = v28062 [from 0x804846d:call   0x08048300]
    dx = v28063 [from 0x804846d:call   0x08048300]
    bx = v27826
    sp = v27827-0xc [from 0x8048463:sub    esp, 0x08]
    bp = v27827-0x4 [from 0x8048460:push   ebp]
    si = v27829
    di = v27830
    es = v28069 [from 0x804846d:call   0x08048300]
    cs = v28070 [from 0x804846d:call   0x08048300]
    ss = v28071 [from 0x804846d:call   0x08048300]
    ds = v28072 [from 0x804846d:call   0x08048300]
    fs = v28073 [from 0x804846d:call   0x08048300]
    gs = v28074 [from 0x804846d:call   0x08048300]
    cf = v28075 [from 0x804846d:call   0x08048300]
    ?1 = v28076 [from 0x804846d:call   0x08048300]
    pf = v28077 [from 0x804846d:call   0x08048300]
    ?3 = v28078 [from 0x804846d:call   0x08048300]
    af = v28079 [from 0x804846d:call   0x08048300]
    ?5 = v28080 [from 0x804846d:call   0x08048300]
    zf = v28081 [from 0x804846d:call   0x08048300]
    sf = v28082 [from 0x804846d:call   0x08048300]
    tf = v28083 [from 0x804846d:call   0x08048300]
    if = v28084 [from 0x804846d:call   0x08048300]
    df = v28085 [from 0x804846d:call   0x08048300]
    of = v28086 [from 0x804846d:call   0x08048300]
    iopl0 = v28087 [from 0x804846d:call   0x08048300]
    iopl1 = v28088 [from 0x804846d:call   0x08048300]
    nt = v28089 [from 0x804846d:call   0x08048300]
    ?15 = v28090 [from 0x804846d:call   0x08048300]
    memory = {
        size=4; addr=v27827-0xc [from 0x8048463:sub    esp, 0x08]; value=0x0 [from 0x8048472:mov    DWORD PTR ss:[esp], 0x00000000]
        size=4; addr=v27827-0x4 [from 0x8048460:push   ebp]; value=v27828
    }
0x8048479:call   0x08048320
    ax = v28061 [from 0x804846d:call   0x08048300]
    cx = v28062 [from 0x804846d:call   0x08048300]
    dx = v28063 [from 0x804846d:call   0x08048300]
    bx = v27826
    sp = v27827-0x10 [from 0x8048479:call   0x08048320]
    bp = v27827-0x4 [from 0x8048460:push   ebp]
    si = v27829
    di = v27830
    es = v28069 [from 0x804846d:call   0x08048300]
    cs = v28070 [from 0x804846d:call   0x08048300]
    ss = v28071 [from 0x804846d:call   0x08048300]
    ds = v28072 [from 0x804846d:call   0x08048300]
    fs = v28073 [from 0x804846d:call   0x08048300]
    gs = v28074 [from 0x804846d:call   0x08048300]
    cf = v28075 [from 0x804846d:call   0x08048300]
    ?1 = v28076 [from 0x804846d:call   0x08048300]
    pf = v28077 [from 0x804846d:call   0x08048300]
    ?3 = v28078 [from 0x804846d:call   0x08048300]
    af = v28079 [from 0x804846d:call   0x08048300]
    ?5 = v28080 [from 0x804846d:call   0x08048300]
    zf = v28081 [from 0x804846d:call   0x08048300]
    sf = v28082 [from 0x804846d:call   0x08048300]
    tf = v28083 [from 0x804846d:call   0x08048300]
    if = v28084 [from 0x804846d:call   0x08048300]
    df = v28085 [from 0x804846d:call   0x08048300]
    of = v28086 [from 0x804846d:call   0x08048300]
    iopl0 = v28087 [from 0x804846d:call   0x08048300]
    iopl1 = v28088 [from 0x804846d:call   0x08048300]
    nt = v28089 [from 0x804846d:call   0x08048300]
    ?15 = v28090 [from 0x804846d:call   0x08048300]
    memory = {
        size=4; addr=v27827-0x10 [from 0x8048479:call   0x08048320]; value=0x804847e [from 0x8048479:call   0x08048320]
        size=4; addr=v27827-0xc [from 0x8048463:sub    esp, 0x08]; value=0x0 [from 0x8048472:mov    DWORD PTR ss:[esp], 0x00000000]
        size=4; addr=v27827-0x4 [from 0x8048460:push   ebp]; value=v27828
    }
0x804847e:mov    esi, esi
    ax = v28223 [from 0x8048479:call   0x08048320]
    cx = v28224 [from 0x8048479:call   0x08048320]
    dx = v28225 [from 0x8048479:call   0x08048320]
    bx = v27826
    sp = v27827-0xc [from 0x8048463:sub    esp, 0x08]
    bp = v27827-0x4 [from 0x8048460:push   ebp]
    si = v27829
    di = v27830
    es = v28231 [from 0x8048479:call   0x08048320]
    cs = v28232 [from 0x8048479:call   0x08048320]
    ss = v28233 [from 0x8048479:call   0x08048320]
    ds = v28234 [from 0x8048479:call   0x08048320]
    fs = v28235 [from 0x8048479:call   0x08048320]
    gs = v28236 [from 0x8048479:call   0x08048320]
    cf = v28237 [from 0x8048479:call   0x08048320]
    ?1 = v28238 [from 0x8048479:call   0x08048320]
    pf = v28239 [from 0x8048479:call   0x08048320]
    ?3 = v28240 [from 0x8048479:call   0x08048320]
    af = v28241 [from 0x8048479:call   0x08048320]
    ?5 = v28242 [from 0x8048479:call   0x08048320]
    zf = v28243 [from 0x8048479:call   0x08048320]
    sf = v28244 [from 0x8048479:call   0x08048320]
    tf = v28245 [from 0x8048479:call   0x08048320]
    if = v28246 [from 0x8048479:call   0x08048320]
    df = v28247 [from 0x8048479:call   0x08048320]
    of = v28248 [from 0x8048479:call   0x08048320]
    iopl0 = v28249 [from 0x8048479:call   0x08048320]
    iopl1 = v28250 [from 0x8048479:call   0x08048320]
    nt = v28251 [from 0x8048479:call   0x08048320]
    ?15 = v28252 [from 0x8048479:call   0x08048320]
    memory = {
        size=4; addr=v27827-0xc [from 0x8048463:sub    esp, 0x08]; value=0x0 [from 0x8048472:mov    DWORD PTR ss:[esp], 0x00000000]
        size=4; addr=v27827-0x4 [from 0x8048460:push   ebp]; value=v27828
    }
==============================================
Constant propagation in function "handler"
==============================================
0x8048480:push   ebp
    ax = v28406
    cx = v28407
    dx = v28408
    bx = v28409
    sp = v28410-0x4 [from 0x8048480:push   ebp]
    bp = v28411
    si = v28412
    di = v28413
    es = v28414
    cs = v28415
    ss = v28416
    ds = v28417
    fs = v28418
    gs = v28419
    cf = v28420
    ?1 = v28421
    pf = v28422
    ?3 = v28423
    af = v28424
    ?5 = v28425
    zf = v28426
    sf = v28427
    tf = v28428
    if = v28429
    df = v28430
    of = v28431
    iopl0 = v28432
    iopl1 = v28433
    nt = v28434
    ?15 = v28435
    memory = {
        size=4; addr=v28410-0x4 [from 0x8048480:push   ebp]; value=v28411
    }
0x8048481:mov    ebp, esp
    ax = v28406
    cx = v28407
    dx = v28408
    bx = v28409
    sp = v28410-0x4 [from 0x8048480:push   ebp]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28414
    cs = v28415
    ss = v28416
    ds = v28417
    fs = v28418
    gs = v28419
    cf = v28420
    ?1 = v28421
    pf = v28422
    ?3 = v28423
    af = v28424
    ?5 = v28425
    zf = v28426
    sf = v28427
    tf = v28428
    if = v28429
    df = v28430
    of = v28431
    iopl0 = v28432
    iopl1 = v28433
    nt = v28434
    ?15 = v28435
    memory = {
        size=4; addr=v28410-0x4 [from 0x8048480:push   ebp]; value=v28411
    }
0x8048483:sub    esp, 0x08
    ax = v28406
    cx = v28407
    dx = v28408
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28414
    cs = v28415
    ss = v28416
    ds = v28417
    fs = v28418
    gs = v28419
    cf = -v28537-0x1 [from 0x8048483:sub    esp, 0x08]
    ?1 = v28421
    pf = -v28531-0x1 [from 0x8048483:sub    esp, 0x08]
    ?3 = v28423
    af = -v28535-0x1 [from 0x8048483:sub    esp, 0x08]
    ?5 = v28425
    zf = v28534 [from 0x8048483:sub    esp, 0x08]
    sf = v28533 [from 0x8048483:sub    esp, 0x08]
    tf = v28428
    if = v28429
    df = v28430
    of = v28541 [from 0x8048483:sub    esp, 0x08]
    iopl0 = v28432
    iopl1 = v28433
    nt = v28434
    ?15 = v28435
    memory = {
        size=4; addr=v28410-0x4 [from 0x8048480:push   ebp]; value=v28411
    }
0x8048486:inc    DWORD PTR ds:[0x080496f8]
    ax = v28406
    cx = v28407
    dx = v28408
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28414
    cs = v28415
    ss = v28416
    ds = v28417
    fs = v28418
    gs = v28419
    cf = -v28537-0x1 [from 0x8048483:sub    esp, 0x08]
    ?1 = v28421
    pf = -v28601-0x1 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?3 = v28423
    af = v28605 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?5 = v28425
    zf = v28604 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    sf = v28603 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    tf = v28428
    if = v28429
    df = v28430
    of = v28608 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    iopl0 = v28432
    iopl1 = v28433
    nt = v28434
    ?15 = v28435
    memory = {
        size=4; addr=0x80496f8 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]; value=v28576+0x1 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    }
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4
    ax = v28406
    cx = v28407
    dx = v28408
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28414
    cs = v28415
    ss = v28416
    ds = v28417
    fs = v28418
    gs = v28419
    cf = -v28537-0x1 [from 0x8048483:sub    esp, 0x08]
    ?1 = v28421
    pf = -v28601-0x1 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?3 = v28423
    af = v28605 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?5 = v28425
    zf = v28604 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    sf = v28603 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    tf = v28428
    if = v28429
    df = v28430
    of = v28608 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    iopl0 = v28432
    iopl1 = v28433
    nt = v28434
    ?15 = v28435
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x80485d4 [from 0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4]
    }
0x8048493:call   0x08048300
    ax = v28406
    cx = v28407
    dx = v28408
    bx = v28409
    sp = v28410-0x10 [from 0x8048493:call   0x08048300]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28414
    cs = v28415
    ss = v28416
    ds = v28417
    fs = v28418
    gs = v28419
    cf = -v28537-0x1 [from 0x8048483:sub    esp, 0x08]
    ?1 = v28421
    pf = -v28601-0x1 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?3 = v28423
    af = v28605 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?5 = v28425
    zf = v28604 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    sf = v28603 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    tf = v28428
    if = v28429
    df = v28430
    of = v28608 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    iopl0 = v28432
    iopl1 = v28433
    nt = v28434
    ?15 = v28435
    memory = {
        size=4; addr=v28410-0x10 [from 0x8048493:call   0x08048300]; value=0x8048498 [from 0x8048493:call   0x08048300]
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x80485d4 [from 0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4]
    }
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    ax = v28714 [from 0x8048493:call   0x08048300]
    cx = v28715 [from 0x8048493:call   0x08048300]
    dx = v28716 [from 0x8048493:call   0x08048300]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28722 [from 0x8048493:call   0x08048300]
    cs = v28723 [from 0x8048493:call   0x08048300]
    ss = v28724 [from 0x8048493:call   0x08048300]
    ds = v28725 [from 0x8048493:call   0x08048300]
    fs = v28726 [from 0x8048493:call   0x08048300]
    gs = v28727 [from 0x8048493:call   0x08048300]
    cf = v28728 [from 0x8048493:call   0x08048300]
    ?1 = v28729 [from 0x8048493:call   0x08048300]
    pf = v28730 [from 0x8048493:call   0x08048300]
    ?3 = v28731 [from 0x8048493:call   0x08048300]
    af = v28732 [from 0x8048493:call   0x08048300]
    ?5 = v28733 [from 0x8048493:call   0x08048300]
    zf = v28734 [from 0x8048493:call   0x08048300]
    sf = v28735 [from 0x8048493:call   0x08048300]
    tf = v28736 [from 0x8048493:call   0x08048300]
    if = v28737 [from 0x8048493:call   0x08048300]
    df = v28738 [from 0x8048493:call   0x08048300]
    of = v28739 [from 0x8048493:call   0x08048300]
    iopl0 = v28740 [from 0x8048493:call   0x08048300]
    iopl1 = v28741 [from 0x8048493:call   0x08048300]
    nt = v28742 [from 0x8048493:call   0x08048300]
    ?15 = v28743 [from 0x8048493:call   0x08048300]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x804849f:call   0x08048320
    ax = v28714 [from 0x8048493:call   0x08048300]
    cx = v28715 [from 0x8048493:call   0x08048300]
    dx = v28716 [from 0x8048493:call   0x08048300]
    bx = v28409
    sp = v28410-0x10 [from 0x804849f:call   0x08048320]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28722 [from 0x8048493:call   0x08048300]
    cs = v28723 [from 0x8048493:call   0x08048300]
    ss = v28724 [from 0x8048493:call   0x08048300]
    ds = v28725 [from 0x8048493:call   0x08048300]
    fs = v28726 [from 0x8048493:call   0x08048300]
    gs = v28727 [from 0x8048493:call   0x08048300]
    cf = v28728 [from 0x8048493:call   0x08048300]
    ?1 = v28729 [from 0x8048493:call   0x08048300]
    pf = v28730 [from 0x8048493:call   0x08048300]
    ?3 = v28731 [from 0x8048493:call   0x08048300]
    af = v28732 [from 0x8048493:call   0x08048300]
    ?5 = v28733 [from 0x8048493:call   0x08048300]
    zf = v28734 [from 0x8048493:call   0x08048300]
    sf = v28735 [from 0x8048493:call   0x08048300]
    tf = v28736 [from 0x8048493:call   0x08048300]
    if = v28737 [from 0x8048493:call   0x08048300]
    df = v28738 [from 0x8048493:call   0x08048300]
    of = v28739 [from 0x8048493:call   0x08048300]
    iopl0 = v28740 [from 0x8048493:call   0x08048300]
    iopl1 = v28741 [from 0x8048493:call   0x08048300]
    nt = v28742 [from 0x8048493:call   0x08048300]
    ?15 = v28743 [from 0x8048493:call   0x08048300]
    memory = {
        size=4; addr=v28410-0x10 [from 0x804849f:call   0x08048320]; value=0x80484a4 [from 0x804849f:call   0x08048320]
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a4:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a5:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a6:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a7:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a8:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a9:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484aa:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484ab:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484ac:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484ad:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484ae:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484af:nop    
    ax = v28876 [from 0x804849f:call   0x08048320]
    cx = v28877 [from 0x804849f:call   0x08048320]
    dx = v28878 [from 0x804849f:call   0x08048320]
    bx = v28409
    sp = v28410-0xc [from 0x8048483:sub    esp, 0x08]
    bp = v28410-0x4 [from 0x8048480:push   ebp]
    si = v28412
    di = v28413
    es = v28884 [from 0x804849f:call   0x08048320]
    cs = v28885 [from 0x804849f:call   0x08048320]
    ss = v28886 [from 0x804849f:call   0x08048320]
    ds = v28887 [from 0x804849f:call   0x08048320]
    fs = v28888 [from 0x804849f:call   0x08048320]
    gs = v28889 [from 0x804849f:call   0x08048320]
    cf = v28890 [from 0x804849f:call   0x08048320]
    ?1 = v28891 [from 0x804849f:call   0x08048320]
    pf = v28892 [from 0x804849f:call   0x08048320]
    ?3 = v28893 [from 0x804849f:call   0x08048320]
    af = v28894 [from 0x804849f:call   0x08048320]
    ?5 = v28895 [from 0x804849f:call   0x08048320]
    zf = v28896 [from 0x804849f:call   0x08048320]
    sf = v28897 [from 0x804849f:call   0x08048320]
    tf = v28898 [from 0x804849f:call   0x08048320]
    if = v28899 [from 0x804849f:call   0x08048320]
    df = v28900 [from 0x804849f:call   0x08048320]
    of = v28901 [from 0x804849f:call   0x08048320]
    iopl0 = v28902 [from 0x804849f:call   0x08048320]
    iopl1 = v28903 [from 0x804849f:call   0x08048320]
    nt = v28904 [from 0x804849f:call   0x08048320]
    ?15 = v28905 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=v28410-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
==============================================
Constant propagation in function "__libc_csu_init"
==============================================
0x80484b0:push   ebp
    ax = v29411
    cx = v29412
    dx = v29413
    bx = v29414
    sp = v29415-0x4 [from 0x80484b0:push   ebp]
    bp = v29416
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = v29425
    ?1 = v29426
    pf = v29427
    ?3 = v29428
    af = v29429
    ?5 = v29430
    zf = v29431
    sf = v29432
    tf = v29433
    if = v29434
    df = v29435
    of = v29436
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484b1:mov    ebp, esp
    ax = v29411
    cx = v29412
    dx = v29413
    bx = v29414
    sp = v29415-0x4 [from 0x80484b0:push   ebp]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = v29425
    ?1 = v29426
    pf = v29427
    ?3 = v29428
    af = v29429
    ?5 = v29430
    zf = v29431
    sf = v29432
    tf = v29433
    if = v29434
    df = v29435
    of = v29436
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484b3:push   edi
    ax = v29411
    cx = v29412
    dx = v29413
    bx = v29414
    sp = v29415-0x8 [from 0x80484b3:push   edi]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = v29425
    ?1 = v29426
    pf = v29427
    ?3 = v29428
    af = v29429
    ?5 = v29430
    zf = v29431
    sf = v29432
    tf = v29433
    if = v29434
    df = v29435
    of = v29436
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484b4:push   esi
    ax = v29411
    cx = v29412
    dx = v29413
    bx = v29414
    sp = v29415-0xc [from 0x80484b4:push   esi]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = v29425
    ?1 = v29426
    pf = v29427
    ?3 = v29428
    af = v29429
    ?5 = v29430
    zf = v29431
    sf = v29432
    tf = v29433
    if = v29434
    df = v29435
    of = v29436
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484b5:push   ebx
    ax = v29411
    cx = v29412
    dx = v29413
    bx = v29414
    sp = v29415-0x10 [from 0x80484b5:push   ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = v29425
    ?1 = v29426
    pf = v29427
    ?3 = v29428
    af = v29429
    ?5 = v29430
    zf = v29431
    sf = v29432
    tf = v29433
    if = v29434
    df = v29435
    of = v29436
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484b6:sub    esp, 0x0c
    ax = v29411
    cx = v29412
    dx = v29413
    bx = v29414
    sp = v29415-0x1c [from 0x80484b6:sub    esp, 0x0c]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = -v29650-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?1 = v29426
    pf = -v29644-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?3 = v29428
    af = -v29648-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?5 = v29430
    zf = v29647 [from 0x80484b6:sub    esp, 0x0c]
    sf = v29646 [from 0x80484b6:sub    esp, 0x0c]
    tf = v29433
    if = v29434
    df = v29435
    of = v29654 [from 0x80484b6:sub    esp, 0x0c]
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484b9:call   0x080484be
    ax = v29411
    cx = v29412
    dx = v29413
    bx = v29414
    sp = v29415-0x20 [from 0x80484b9:call   0x080484be]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = -v29650-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?1 = v29426
    pf = -v29644-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?3 = v29428
    af = -v29648-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?5 = v29430
    zf = v29647 [from 0x80484b6:sub    esp, 0x0c]
    sf = v29646 [from 0x80484b6:sub    esp, 0x0c]
    tf = v29433
    if = v29434
    df = v29435
    of = v29654 [from 0x80484b6:sub    esp, 0x0c]
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484be:pop    ebx
    ax = v29411
    cx = v29412
    dx = v29413
    bx = 0x80484be [from 0x80484b9:call   0x080484be]
    sp = v29415-0x1c [from 0x80484be:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = -v29650-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?1 = v29426
    pf = -v29644-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?3 = v29428
    af = -v29648-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?5 = v29430
    zf = v29647 [from 0x80484b6:sub    esp, 0x0c]
    sf = v29646 [from 0x80484b6:sub    esp, 0x0c]
    tf = v29433
    if = v29434
    df = v29435
    of = v29654 [from 0x80484b6:sub    esp, 0x0c]
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484bf:add    ebx, 0x0000120a
    ax = v29411
    cx = v29412
    dx = v29413
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x1c [from 0x80484be:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    ?1 = v29426
    pf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    ?3 = v29428
    af = 0x1 (-0x1) [from 0x80484bf:add    ebx, 0x0000120a]
    ?5 = v29430
    zf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    sf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    tf = v29433
    if = v29434
    df = v29435
    of = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484c5:call   0x080482c8
    ax = v29411
    cx = v29412
    dx = v29413
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x20 [from 0x80484c5:call   0x080482c8]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29419
    cs = v29420
    ss = v29421
    ds = v29422
    fs = v29423
    gs = v29424
    cf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    ?1 = v29426
    pf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    ?3 = v29428
    af = 0x1 (-0x1) [from 0x80484bf:add    ebx, 0x0000120a]
    ?5 = v29430
    zf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    sf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    tf = v29433
    if = v29434
    df = v29435
    of = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    iopl0 = v29437
    iopl1 = v29438
    nt = v29439
    ?15 = v29440
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484c5:call   0x080482c8]; value=0x80484ca [from 0x80484c5:call   0x080482c8]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484ca:lea    eax, [ebx + 0xffffff20]
    ax = 0x80495e8 [from 0x80484ca:lea    eax, [ebx + 0xffffff20]]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = v29862 [from 0x80484c5:call   0x080482c8]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x1c [from 0x80484be:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = v29874 [from 0x80484c5:call   0x080482c8]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = v29876 [from 0x80484c5:call   0x080482c8]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = v29878 [from 0x80484c5:call   0x080482c8]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = v29880 [from 0x80484c5:call   0x080482c8]
    sf = v29881 [from 0x80484c5:call   0x080482c8]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = v29885 [from 0x80484c5:call   0x080482c8]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484d0:lea    edx, [ebx + 0xffffff20]
    ax = 0x80495e8 [from 0x80484ca:lea    eax, [ebx + 0xffffff20]]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x1c [from 0x80484be:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = v29874 [from 0x80484c5:call   0x080482c8]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = v29876 [from 0x80484c5:call   0x080482c8]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = v29878 [from 0x80484c5:call   0x080482c8]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = v29880 [from 0x80484c5:call   0x080482c8]
    sf = v29881 [from 0x80484c5:call   0x080482c8]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = v29885 [from 0x80484c5:call   0x080482c8]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484d6:sub    eax, edx
    ax = 0x0 [from 0x80484d6:sub    eax, edx]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x1c [from 0x80484be:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = 0x0 [from 0x80484d6:sub    eax, edx]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = 0x1 (-0x1) [from 0x80484d6:sub    eax, edx]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = 0x0 [from 0x80484d6:sub    eax, edx]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = 0x1 (-0x1) [from 0x80484d6:sub    eax, edx]
    sf = 0x0 [from 0x80484d6:sub    eax, edx]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = 0x0 [from 0x80484d6:sub    eax, edx]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484d8:sar    eax, 0x02
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x1c [from 0x80484be:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = <top>
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    sf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = 0x0 [from 0x80484d8:sar    eax, 0x02]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x1c [from 0x80484be:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = <top>
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    sf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = 0x0 [from 0x80484d8:sar    eax, 0x02]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484de:jne    0x080484f0
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x1c [from 0x80484be:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = <top>
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    sf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = 0x0 [from 0x80484d8:sar    eax, 0x02]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484e0:add    esp, 0x0c
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = v29415-0x10 [from 0x80484e0:add    esp, 0x0c]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = v30256 [from 0x80484e0:add    esp, 0x0c]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = -v30251-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = v30255 [from 0x80484e0:add    esp, 0x0c]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = v30254 [from 0x80484e0:add    esp, 0x0c]
    sf = v30253 [from 0x80484e0:add    esp, 0x0c]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = v30259 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484e3:pop    ebx
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = v29414
    sp = v29415-0xc [from 0x80484e3:pop    ebx]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = v30256 [from 0x80484e0:add    esp, 0x0c]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = -v30251-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = v30255 [from 0x80484e0:add    esp, 0x0c]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = v30254 [from 0x80484e0:add    esp, 0x0c]
    sf = v30253 [from 0x80484e0:add    esp, 0x0c]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = v30259 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484e4:pop    esi
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = v29414
    sp = v29415-0x8 [from 0x80484e4:pop    esi]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = v30256 [from 0x80484e0:add    esp, 0x0c]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = -v30251-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = v30255 [from 0x80484e0:add    esp, 0x0c]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = v30254 [from 0x80484e0:add    esp, 0x0c]
    sf = v30253 [from 0x80484e0:add    esp, 0x0c]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = v30259 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484e5:pop    edi
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = v29414
    sp = v29415-0x4 [from 0x80484e5:pop    edi]
    bp = v29415-0x4 [from 0x80484b0:push   ebp]
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = v30256 [from 0x80484e0:add    esp, 0x0c]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = -v30251-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = v30255 [from 0x80484e0:add    esp, 0x0c]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = v30254 [from 0x80484e0:add    esp, 0x0c]
    sf = v30253 [from 0x80484e0:add    esp, 0x0c]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = v30259 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484e6:pop    ebp
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = v29414
    sp = v29415 [from 0x80484e6:pop    ebp]
    bp = v29416
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = v30256 [from 0x80484e0:add    esp, 0x0c]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = -v30251-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = v30255 [from 0x80484e0:add    esp, 0x0c]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = v30254 [from 0x80484e0:add    esp, 0x0c]
    sf = v30253 [from 0x80484e0:add    esp, 0x0c]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = v30259 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484e7:ret    
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = v29861 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = v29414
    sp = v29415+0x4 [from 0x80484e7:ret    ]
    bp = v29416
    si = v29417
    di = v29418
    es = v29868 [from 0x80484c5:call   0x080482c8]
    cs = v29869 [from 0x80484c5:call   0x080482c8]
    ss = v29870 [from 0x80484c5:call   0x080482c8]
    ds = v29871 [from 0x80484c5:call   0x080482c8]
    fs = v29872 [from 0x80484c5:call   0x080482c8]
    gs = v29873 [from 0x80484c5:call   0x080482c8]
    cf = v30256 [from 0x80484e0:add    esp, 0x0c]
    ?1 = v29875 [from 0x80484c5:call   0x080482c8]
    pf = -v30251-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = v29877 [from 0x80484c5:call   0x080482c8]
    af = v30255 [from 0x80484e0:add    esp, 0x0c]
    ?5 = v29879 [from 0x80484c5:call   0x080482c8]
    zf = v30254 [from 0x80484e0:add    esp, 0x0c]
    sf = v30253 [from 0x80484e0:add    esp, 0x0c]
    tf = v29882 [from 0x80484c5:call   0x080482c8]
    if = v29883 [from 0x80484c5:call   0x080482c8]
    df = v29884 [from 0x80484c5:call   0x080482c8]
    of = v30259 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = v29886 [from 0x80484c5:call   0x080482c8]
    iopl1 = v29887 [from 0x80484c5:call   0x080482c8]
    nt = v29888 [from 0x80484c5:call   0x080482c8]
    ?15 = v29889 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=v29415-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=v29415-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=v29415-0x10 [from 0x80484b5:push   ebx]; value=v29414
        size=4; addr=v29415-0xc [from 0x80484b4:push   esi]; value=v29417
        size=4; addr=v29415-0x8 [from 0x80484b3:push   edi]; value=v29418
        size=4; addr=v29415-0x4 [from 0x80484b0:push   ebp]; value=v29416
    }
0x80484f0:xor    edi, edi
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484f2:mov    esi, edx
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484f4:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484fa:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048500:call   DWORD PTR ds:[esi]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x8048502 [from 0x8048500:call   DWORD PTR ds:[esi]]
    }
0x8048502:inc    edi
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = v30679 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048503:add    esi, 0x04
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048506:cmp    edi, DWORD PTR ss:[ebp + 0xf0]
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048509:jb     0x08048500
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x804850b:add    esp, 0x0c
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x804850e:pop    ebx
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x804850f:pop    esi
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048510:pop    edi
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048511:pop    ebp
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048512:ret    
    ax = v30665 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = v30666 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = v30667 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = v30673 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = v30674 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = v30675 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = v30676 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = v30677 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = v30678 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = v30680 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = v30682 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = v30684 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = v30687 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = v30688 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = v30689 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = v30691 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = v30692 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = v30693 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = v30694 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
==============================================
Constant propagation in function "__libc_csu_fini"
==============================================
0x8048520:push   ebp
    ax = v31268
    cx = v31269
    dx = v31270
    bx = v31271
    sp = v31272-0x4 [from 0x8048520:push   ebp]
    bp = v31273
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = v31282
    ?1 = v31283
    pf = v31284
    ?3 = v31285
    af = v31286
    ?5 = v31287
    zf = v31288
    sf = v31289
    tf = v31290
    if = v31291
    df = v31292
    of = v31293
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048521:mov    ebp, esp
    ax = v31268
    cx = v31269
    dx = v31270
    bx = v31271
    sp = v31272-0x4 [from 0x8048520:push   ebp]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = v31282
    ?1 = v31283
    pf = v31284
    ?3 = v31285
    af = v31286
    ?5 = v31287
    zf = v31288
    sf = v31289
    tf = v31290
    if = v31291
    df = v31292
    of = v31293
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048523:push   edi
    ax = v31268
    cx = v31269
    dx = v31270
    bx = v31271
    sp = v31272-0x8 [from 0x8048523:push   edi]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = v31282
    ?1 = v31283
    pf = v31284
    ?3 = v31285
    af = v31286
    ?5 = v31287
    zf = v31288
    sf = v31289
    tf = v31290
    if = v31291
    df = v31292
    of = v31293
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048524:push   esi
    ax = v31268
    cx = v31269
    dx = v31270
    bx = v31271
    sp = v31272-0xc [from 0x8048524:push   esi]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = v31282
    ?1 = v31283
    pf = v31284
    ?3 = v31285
    af = v31286
    ?5 = v31287
    zf = v31288
    sf = v31289
    tf = v31290
    if = v31291
    df = v31292
    of = v31293
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048525:push   ebx
    ax = v31268
    cx = v31269
    dx = v31270
    bx = v31271
    sp = v31272-0x10 [from 0x8048525:push   ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = v31282
    ?1 = v31283
    pf = v31284
    ?3 = v31285
    af = v31286
    ?5 = v31287
    zf = v31288
    sf = v31289
    tf = v31290
    if = v31291
    df = v31292
    of = v31293
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048526:sub    esp, 0x0c
    ax = v31268
    cx = v31269
    dx = v31270
    bx = v31271
    sp = v31272-0x1c [from 0x8048526:sub    esp, 0x0c]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = -v31507-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?1 = v31283
    pf = -v31501-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?3 = v31285
    af = -v31505-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?5 = v31287
    zf = v31504 [from 0x8048526:sub    esp, 0x0c]
    sf = v31503 [from 0x8048526:sub    esp, 0x0c]
    tf = v31290
    if = v31291
    df = v31292
    of = v31511 [from 0x8048526:sub    esp, 0x0c]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048529:call   0x0804852e
    ax = v31268
    cx = v31269
    dx = v31270
    bx = v31271
    sp = v31272-0x20 [from 0x8048529:call   0x0804852e]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = -v31507-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?1 = v31283
    pf = -v31501-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?3 = v31285
    af = -v31505-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?5 = v31287
    zf = v31504 [from 0x8048526:sub    esp, 0x0c]
    sf = v31503 [from 0x8048526:sub    esp, 0x0c]
    tf = v31290
    if = v31291
    df = v31292
    of = v31511 [from 0x8048526:sub    esp, 0x0c]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x804852e:pop    ebx
    ax = v31268
    cx = v31269
    dx = v31270
    bx = 0x804852e [from 0x8048529:call   0x0804852e]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = -v31507-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?1 = v31283
    pf = -v31501-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?3 = v31285
    af = -v31505-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?5 = v31287
    zf = v31504 [from 0x8048526:sub    esp, 0x0c]
    sf = v31503 [from 0x8048526:sub    esp, 0x0c]
    tf = v31290
    if = v31291
    df = v31292
    of = v31511 [from 0x8048526:sub    esp, 0x0c]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x804852f:add    ebx, 0x0000119a
    ax = v31268
    cx = v31269
    dx = v31270
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?1 = v31283
    pf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?3 = v31285
    af = 0x1 (-0x1) [from 0x804852f:add    ebx, 0x0000119a]
    ?5 = v31287
    zf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    sf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048535:lea    eax, [ebx + 0xffffff20]
    ax = 0x80495e8 [from 0x8048535:lea    eax, [ebx + 0xffffff20]]
    cx = v31269
    dx = v31270
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?1 = v31283
    pf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?3 = v31285
    af = 0x1 (-0x1) [from 0x804852f:add    ebx, 0x0000119a]
    ?5 = v31287
    zf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    sf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x804853b:lea    edx, [ebx + 0xffffff20]
    ax = 0x80495e8 [from 0x8048535:lea    eax, [ebx + 0xffffff20]]
    cx = v31269
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?1 = v31283
    pf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?3 = v31285
    af = 0x1 (-0x1) [from 0x804852f:add    ebx, 0x0000119a]
    ?5 = v31287
    zf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    sf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048541:sub    eax, edx
    ax = 0x0 [from 0x8048541:sub    eax, edx]
    cx = v31269
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x8048541:sub    eax, edx]
    ?1 = v31283
    pf = 0x1 (-0x1) [from 0x8048541:sub    eax, edx]
    ?3 = v31285
    af = 0x0 [from 0x8048541:sub    eax, edx]
    ?5 = v31287
    zf = 0x1 (-0x1) [from 0x8048541:sub    eax, edx]
    sf = 0x0 [from 0x8048541:sub    eax, edx]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x8048541:sub    eax, edx]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048543:sar    eax, 0x02
    ax = 0x0 [from 0x8048543:sar    eax, 0x02]
    cx = v31269
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x8048543:sar    eax, 0x02]
    ?1 = v31283
    pf = 0x1 (-0x1) [from 0x8048543:sar    eax, 0x02]
    ?3 = v31285
    af = <top>
    ?5 = v31287
    zf = 0x1 (-0x1) [from 0x8048543:sar    eax, 0x02]
    sf = 0x0 [from 0x8048543:sar    eax, 0x02]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x8048543:sar    eax, 0x02]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax
    ax = 0x0 [from 0x8048543:sar    eax, 0x02]
    cx = v31269
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x8048543:sar    eax, 0x02]
    ?1 = v31283
    pf = 0x1 (-0x1) [from 0x8048543:sar    eax, 0x02]
    ?3 = v31285
    af = <top>
    ?5 = v31287
    zf = 0x1 (-0x1) [from 0x8048543:sar    eax, 0x02]
    sf = 0x0 [from 0x8048543:sar    eax, 0x02]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x8048543:sar    eax, 0x02]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048549:dec    eax
    ax = 0xffffffff (-0x1) [from 0x8048549:dec    eax]
    cx = v31269
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x8048543:sar    eax, 0x02]
    ?1 = v31283
    pf = 0x1 (-0x1) [from 0x8048549:dec    eax]
    ?3 = v31285
    af = 0x1 (-0x1) [from 0x8048549:dec    eax]
    ?5 = v31287
    zf = 0x0 [from 0x8048549:dec    eax]
    sf = 0x1 (-0x1) [from 0x8048549:dec    eax]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x8048549:dec    eax]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x804854a:cmp    eax, 0xff
    ax = 0xffffffff (-0x1) [from 0x8048549:dec    eax]
    cx = v31269
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?1 = v31283
    pf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    ?3 = v31285
    af = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?5 = v31287
    zf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    sf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x804854a:cmp    eax, 0xff]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x804854d:je     0x0804856b
    ax = 0xffffffff (-0x1) [from 0x8048549:dec    eax]
    cx = v31269
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x1c [from 0x804852e:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?1 = v31283
    pf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    ?3 = v31285
    af = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?5 = v31287
    zf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    sf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x804854a:cmp    eax, 0xff]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x804856b:call   0x080485b0
    ax = 0xffffffff (-0x1) [from 0x8048549:dec    eax]
    cx = v31269
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x20 [from 0x804856b:call   0x080485b0]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v31276
    cs = v31277
    ss = v31278
    ds = v31279
    fs = v31280
    gs = v31281
    cf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?1 = v31283
    pf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    ?3 = v31285
    af = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?5 = v31287
    zf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    sf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    tf = v31290
    if = v31291
    df = v31292
    of = 0x0 [from 0x804854a:cmp    eax, 0xff]
    iopl0 = v31294
    iopl1 = v31295
    nt = v31296
    ?15 = v31297
    memory = {
        size=4; addr=v31272-0x20 [from 0x804856b:call   0x080485b0]; value=0x8048570 [from 0x804856b:call   0x080485b0]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048570:add    esp, 0x0c
    ax = v32125 [from 0x804856b:call   0x080485b0]
    cx = v32126 [from 0x804856b:call   0x080485b0]
    dx = v32127 [from 0x804856b:call   0x080485b0]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = v31272-0x10 [from 0x8048570:add    esp, 0x0c]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v32133 [from 0x804856b:call   0x080485b0]
    cs = v32134 [from 0x804856b:call   0x080485b0]
    ss = v32135 [from 0x804856b:call   0x080485b0]
    ds = v32136 [from 0x804856b:call   0x080485b0]
    fs = v32137 [from 0x804856b:call   0x080485b0]
    gs = v32138 [from 0x804856b:call   0x080485b0]
    cf = v32246 [from 0x8048570:add    esp, 0x0c]
    ?1 = v32140 [from 0x804856b:call   0x080485b0]
    pf = -v32241-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = v32142 [from 0x804856b:call   0x080485b0]
    af = v32245 [from 0x8048570:add    esp, 0x0c]
    ?5 = v32144 [from 0x804856b:call   0x080485b0]
    zf = v32244 [from 0x8048570:add    esp, 0x0c]
    sf = v32243 [from 0x8048570:add    esp, 0x0c]
    tf = v32147 [from 0x804856b:call   0x080485b0]
    if = v32148 [from 0x804856b:call   0x080485b0]
    df = v32149 [from 0x804856b:call   0x080485b0]
    of = v32249 [from 0x8048570:add    esp, 0x0c]
    iopl0 = v32151 [from 0x804856b:call   0x080485b0]
    iopl1 = v32152 [from 0x804856b:call   0x080485b0]
    nt = v32153 [from 0x804856b:call   0x080485b0]
    ?15 = v32154 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048573:pop    ebx
    ax = v32125 [from 0x804856b:call   0x080485b0]
    cx = v32126 [from 0x804856b:call   0x080485b0]
    dx = v32127 [from 0x804856b:call   0x080485b0]
    bx = v31271
    sp = v31272-0xc [from 0x8048573:pop    ebx]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v32133 [from 0x804856b:call   0x080485b0]
    cs = v32134 [from 0x804856b:call   0x080485b0]
    ss = v32135 [from 0x804856b:call   0x080485b0]
    ds = v32136 [from 0x804856b:call   0x080485b0]
    fs = v32137 [from 0x804856b:call   0x080485b0]
    gs = v32138 [from 0x804856b:call   0x080485b0]
    cf = v32246 [from 0x8048570:add    esp, 0x0c]
    ?1 = v32140 [from 0x804856b:call   0x080485b0]
    pf = -v32241-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = v32142 [from 0x804856b:call   0x080485b0]
    af = v32245 [from 0x8048570:add    esp, 0x0c]
    ?5 = v32144 [from 0x804856b:call   0x080485b0]
    zf = v32244 [from 0x8048570:add    esp, 0x0c]
    sf = v32243 [from 0x8048570:add    esp, 0x0c]
    tf = v32147 [from 0x804856b:call   0x080485b0]
    if = v32148 [from 0x804856b:call   0x080485b0]
    df = v32149 [from 0x804856b:call   0x080485b0]
    of = v32249 [from 0x8048570:add    esp, 0x0c]
    iopl0 = v32151 [from 0x804856b:call   0x080485b0]
    iopl1 = v32152 [from 0x804856b:call   0x080485b0]
    nt = v32153 [from 0x804856b:call   0x080485b0]
    ?15 = v32154 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048574:pop    esi
    ax = v32125 [from 0x804856b:call   0x080485b0]
    cx = v32126 [from 0x804856b:call   0x080485b0]
    dx = v32127 [from 0x804856b:call   0x080485b0]
    bx = v31271
    sp = v31272-0x8 [from 0x8048574:pop    esi]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v32133 [from 0x804856b:call   0x080485b0]
    cs = v32134 [from 0x804856b:call   0x080485b0]
    ss = v32135 [from 0x804856b:call   0x080485b0]
    ds = v32136 [from 0x804856b:call   0x080485b0]
    fs = v32137 [from 0x804856b:call   0x080485b0]
    gs = v32138 [from 0x804856b:call   0x080485b0]
    cf = v32246 [from 0x8048570:add    esp, 0x0c]
    ?1 = v32140 [from 0x804856b:call   0x080485b0]
    pf = -v32241-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = v32142 [from 0x804856b:call   0x080485b0]
    af = v32245 [from 0x8048570:add    esp, 0x0c]
    ?5 = v32144 [from 0x804856b:call   0x080485b0]
    zf = v32244 [from 0x8048570:add    esp, 0x0c]
    sf = v32243 [from 0x8048570:add    esp, 0x0c]
    tf = v32147 [from 0x804856b:call   0x080485b0]
    if = v32148 [from 0x804856b:call   0x080485b0]
    df = v32149 [from 0x804856b:call   0x080485b0]
    of = v32249 [from 0x8048570:add    esp, 0x0c]
    iopl0 = v32151 [from 0x804856b:call   0x080485b0]
    iopl1 = v32152 [from 0x804856b:call   0x080485b0]
    nt = v32153 [from 0x804856b:call   0x080485b0]
    ?15 = v32154 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048575:pop    edi
    ax = v32125 [from 0x804856b:call   0x080485b0]
    cx = v32126 [from 0x804856b:call   0x080485b0]
    dx = v32127 [from 0x804856b:call   0x080485b0]
    bx = v31271
    sp = v31272-0x4 [from 0x8048575:pop    edi]
    bp = v31272-0x4 [from 0x8048520:push   ebp]
    si = v31274
    di = v31275
    es = v32133 [from 0x804856b:call   0x080485b0]
    cs = v32134 [from 0x804856b:call   0x080485b0]
    ss = v32135 [from 0x804856b:call   0x080485b0]
    ds = v32136 [from 0x804856b:call   0x080485b0]
    fs = v32137 [from 0x804856b:call   0x080485b0]
    gs = v32138 [from 0x804856b:call   0x080485b0]
    cf = v32246 [from 0x8048570:add    esp, 0x0c]
    ?1 = v32140 [from 0x804856b:call   0x080485b0]
    pf = -v32241-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = v32142 [from 0x804856b:call   0x080485b0]
    af = v32245 [from 0x8048570:add    esp, 0x0c]
    ?5 = v32144 [from 0x804856b:call   0x080485b0]
    zf = v32244 [from 0x8048570:add    esp, 0x0c]
    sf = v32243 [from 0x8048570:add    esp, 0x0c]
    tf = v32147 [from 0x804856b:call   0x080485b0]
    if = v32148 [from 0x804856b:call   0x080485b0]
    df = v32149 [from 0x804856b:call   0x080485b0]
    of = v32249 [from 0x8048570:add    esp, 0x0c]
    iopl0 = v32151 [from 0x804856b:call   0x080485b0]
    iopl1 = v32152 [from 0x804856b:call   0x080485b0]
    nt = v32153 [from 0x804856b:call   0x080485b0]
    ?15 = v32154 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048576:pop    ebp
    ax = v32125 [from 0x804856b:call   0x080485b0]
    cx = v32126 [from 0x804856b:call   0x080485b0]
    dx = v32127 [from 0x804856b:call   0x080485b0]
    bx = v31271
    sp = v31272 [from 0x8048576:pop    ebp]
    bp = v31273
    si = v31274
    di = v31275
    es = v32133 [from 0x804856b:call   0x080485b0]
    cs = v32134 [from 0x804856b:call   0x080485b0]
    ss = v32135 [from 0x804856b:call   0x080485b0]
    ds = v32136 [from 0x804856b:call   0x080485b0]
    fs = v32137 [from 0x804856b:call   0x080485b0]
    gs = v32138 [from 0x804856b:call   0x080485b0]
    cf = v32246 [from 0x8048570:add    esp, 0x0c]
    ?1 = v32140 [from 0x804856b:call   0x080485b0]
    pf = -v32241-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = v32142 [from 0x804856b:call   0x080485b0]
    af = v32245 [from 0x8048570:add    esp, 0x0c]
    ?5 = v32144 [from 0x804856b:call   0x080485b0]
    zf = v32244 [from 0x8048570:add    esp, 0x0c]
    sf = v32243 [from 0x8048570:add    esp, 0x0c]
    tf = v32147 [from 0x804856b:call   0x080485b0]
    if = v32148 [from 0x804856b:call   0x080485b0]
    df = v32149 [from 0x804856b:call   0x080485b0]
    of = v32249 [from 0x8048570:add    esp, 0x0c]
    iopl0 = v32151 [from 0x804856b:call   0x080485b0]
    iopl1 = v32152 [from 0x804856b:call   0x080485b0]
    nt = v32153 [from 0x804856b:call   0x080485b0]
    ?15 = v32154 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
0x8048577:ret    
    ax = v32125 [from 0x804856b:call   0x080485b0]
    cx = v32126 [from 0x804856b:call   0x080485b0]
    dx = v32127 [from 0x804856b:call   0x080485b0]
    bx = v31271
    sp = v31272+0x4 [from 0x8048577:ret    ]
    bp = v31273
    si = v31274
    di = v31275
    es = v32133 [from 0x804856b:call   0x080485b0]
    cs = v32134 [from 0x804856b:call   0x080485b0]
    ss = v32135 [from 0x804856b:call   0x080485b0]
    ds = v32136 [from 0x804856b:call   0x080485b0]
    fs = v32137 [from 0x804856b:call   0x080485b0]
    gs = v32138 [from 0x804856b:call   0x080485b0]
    cf = v32246 [from 0x8048570:add    esp, 0x0c]
    ?1 = v32140 [from 0x804856b:call   0x080485b0]
    pf = -v32241-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = v32142 [from 0x804856b:call   0x080485b0]
    af = v32245 [from 0x8048570:add    esp, 0x0c]
    ?5 = v32144 [from 0x804856b:call   0x080485b0]
    zf = v32244 [from 0x8048570:add    esp, 0x0c]
    sf = v32243 [from 0x8048570:add    esp, 0x0c]
    tf = v32147 [from 0x804856b:call   0x080485b0]
    if = v32148 [from 0x804856b:call   0x080485b0]
    df = v32149 [from 0x804856b:call   0x080485b0]
    of = v32249 [from 0x8048570:add    esp, 0x0c]
    iopl0 = v32151 [from 0x804856b:call   0x080485b0]
    iopl1 = v32152 [from 0x804856b:call   0x080485b0]
    nt = v32153 [from 0x804856b:call   0x080485b0]
    ?15 = v32154 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=v31272-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=v31272-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=v31272-0x10 [from 0x8048525:push   ebx]; value=v31271
        size=4; addr=v31272-0xc [from 0x8048524:push   esi]; value=v31274
        size=4; addr=v31272-0x8 [from 0x8048523:push   edi]; value=v31275
        size=4; addr=v31272-0x4 [from 0x8048520:push   ebp]; value=v31273
    }
==============================================
Constant propagation in function "0x8048578"
==============================================
0x8048578:nop    
    ax = v32493
    cx = v32494
    dx = v32495
    bx = v32496
    sp = v32497
    bp = v32498
    si = v32499
    di = v32500
    es = v32501
    cs = v32502
    ss = v32503
    ds = v32504
    fs = v32505
    gs = v32506
    cf = v32507
    ?1 = v32508
    pf = v32509
    ?3 = v32510
    af = v32511
    ?5 = v32512
    zf = v32513
    sf = v32514
    tf = v32515
    if = v32516
    df = v32517
    of = v32518
    iopl0 = v32519
    iopl1 = v32520
    nt = v32521
    ?15 = v32522
    memory = {}
0x8048579:nop    
    ax = v32493
    cx = v32494
    dx = v32495
    bx = v32496
    sp = v32497
    bp = v32498
    si = v32499
    di = v32500
    es = v32501
    cs = v32502
    ss = v32503
    ds = v32504
    fs = v32505
    gs = v32506
    cf = v32507
    ?1 = v32508
    pf = v32509
    ?3 = v32510
    af = v32511
    ?5 = v32512
    zf = v32513
    sf = v32514
    tf = v32515
    if = v32516
    df = v32517
    of = v32518
    iopl0 = v32519
    iopl1 = v32520
    nt = v32521
    ?15 = v32522
    memory = {}
0x804857a:nop    
    ax = v32493
    cx = v32494
    dx = v32495
    bx = v32496
    sp = v32497
    bp = v32498
    si = v32499
    di = v32500
    es = v32501
    cs = v32502
    ss = v32503
    ds = v32504
    fs = v32505
    gs = v32506
    cf = v32507
    ?1 = v32508
    pf = v32509
    ?3 = v32510
    af = v32511
    ?5 = v32512
    zf = v32513
    sf = v32514
    tf = v32515
    if = v32516
    df = v32517
    of = v32518
    iopl0 = v32519
    iopl1 = v32520
    nt = v32521
    ?15 = v32522
    memory = {}
0x804857b:nop    
    ax = v32493
    cx = v32494
    dx = v32495
    bx = v32496
    sp = v32497
    bp = v32498
    si = v32499
    di = v32500
    es = v32501
    cs = v32502
    ss = v32503
    ds = v32504
    fs = v32505
    gs = v32506
    cf = v32507
    ?1 = v32508
    pf = v32509
    ?3 = v32510
    af = v32511
    ?5 = v32512
    zf = v32513
    sf = v32514
    tf = v32515
    if = v32516
    df = v32517
    of = v32518
    iopl0 = v32519
    iopl1 = v32520
    nt = v32521
    ?15 = v32522
    memory = {}
0x804857c:nop    
    ax = v32493
    cx = v32494
    dx = v32495
    bx = v32496
    sp = v32497
    bp = v32498
    si = v32499
    di = v32500
    es = v32501
    cs = v32502
    ss = v32503
    ds = v32504
    fs = v32505
    gs = v32506
    cf = v32507
    ?1 = v32508
    pf = v32509
    ?3 = v32510
    af = v32511
    ?5 = v32512
    zf = v32513
    sf = v32514
    tf = v32515
    if = v32516
    df = v32517
    of = v32518
    iopl0 = v32519
    iopl1 = v32520
    nt = v32521
    ?15 = v32522
    memory = {}
0x804857d:nop    
    ax = v32493
    cx = v32494
    dx = v32495
    bx = v32496
    sp = v32497
    bp = v32498
    si = v32499
    di = v32500
    es = v32501
    cs = v32502
    ss = v32503
    ds = v32504
    fs = v32505
    gs = v32506
    cf = v32507
    ?1 = v32508
    pf = v32509
    ?3 = v32510
    af = v32511
    ?5 = v32512
    zf = v32513
    sf = v32514
    tf = v32515
    if = v32516
    df = v32517
    of = v32518
    iopl0 = v32519
    iopl1 = v32520
    nt = v32521
    ?15 = v32522
    memory = {}
0x804857e:nop    
    ax = v32493
    cx = v32494
    dx = v32495
    bx = v32496
    sp = v32497
    bp = v32498
    si = v32499
    di = v32500
    es = v32501
    cs = v32502
    ss = v32503
    ds = v32504
    fs = v32505
    gs = v32506
    cf = v32507
    ?1 = v32508
    pf = v32509
    ?3 = v32510
    af = v32511
    ?5 = v32512
    zf = v32513
    sf = v32514
    tf = v32515
    if = v32516
    df = v32517
    of = v32518
    iopl0 = v32519
    iopl1 = v32520
    nt = v32521
    ?15 = v32522
    memory = {}
0x804857f:nop    
    ax = v32493
    cx = v32494
    dx = v32495
    bx = v32496
    sp = v32497
    bp = v32498
    si = v32499
    di = v32500
    es = v32501
    cs = v32502
    ss = v32503
    ds = v32504
    fs = v32505
    gs = v32506
    cf = v32507
    ?1 = v32508
    pf = v32509
    ?3 = v32510
    af = v32511
    ?5 = v32512
    zf = v32513
    sf = v32514
    tf = v32515
    if = v32516
    df = v32517
    of = v32518
    iopl0 = v32519
    iopl1 = v32520
    nt = v32521
    ?15 = v32522
    memory = {}
==============================================
Constant propagation in function "__do_global_ctors_aux"
==============================================
0x8048580:push   ebp
    ax = v32839
    cx = v32840
    dx = v32841
    bx = v32842
    sp = v32843-0x4 [from 0x8048580:push   ebp]
    bp = v32844
    si = v32845
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = v32853
    ?1 = v32854
    pf = v32855
    ?3 = v32856
    af = v32857
    ?5 = v32858
    zf = v32859
    sf = v32860
    tf = v32861
    if = v32862
    df = v32863
    of = v32864
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x8048581:mov    ebp, esp
    ax = v32839
    cx = v32840
    dx = v32841
    bx = v32842
    sp = v32843-0x4 [from 0x8048580:push   ebp]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = v32853
    ?1 = v32854
    pf = v32855
    ?3 = v32856
    af = v32857
    ?5 = v32858
    zf = v32859
    sf = v32860
    tf = v32861
    if = v32862
    df = v32863
    of = v32864
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x8048583:push   ebx
    ax = v32839
    cx = v32840
    dx = v32841
    bx = v32842
    sp = v32843-0x8 [from 0x8048583:push   ebx]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = v32853
    ?1 = v32854
    pf = v32855
    ?3 = v32856
    af = v32857
    ?5 = v32858
    zf = v32859
    sf = v32860
    tf = v32861
    if = v32862
    df = v32863
    of = v32864
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x8048584:sub    esp, 0x04
    ax = v32839
    cx = v32840
    dx = v32841
    bx = v32842
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = -v33006-0x1 [from 0x8048584:sub    esp, 0x04]
    ?1 = v32854
    pf = -v33000-0x1 [from 0x8048584:sub    esp, 0x04]
    ?3 = v32856
    af = -v33004-0x1 [from 0x8048584:sub    esp, 0x04]
    ?5 = v32858
    zf = v33003 [from 0x8048584:sub    esp, 0x04]
    sf = v33002 [from 0x8048584:sub    esp, 0x04]
    tf = v32861
    if = v32862
    df = v32863
    of = v33010 [from 0x8048584:sub    esp, 0x04]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x8048587:mov    ebx, 0x080495e8
    ax = v32839
    cx = v32840
    dx = v32841
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = -v33006-0x1 [from 0x8048584:sub    esp, 0x04]
    ?1 = v32854
    pf = -v33000-0x1 [from 0x8048584:sub    esp, 0x04]
    ?3 = v32856
    af = -v33004-0x1 [from 0x8048584:sub    esp, 0x04]
    ?5 = v32858
    zf = v33003 [from 0x8048584:sub    esp, 0x04]
    sf = v33002 [from 0x8048584:sub    esp, 0x04]
    tf = v32861
    if = v32862
    df = v32863
    of = v33010 [from 0x8048584:sub    esp, 0x04]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]
    ax = v33078 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = v32840
    dx = v32841
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = -v33006-0x1 [from 0x8048584:sub    esp, 0x04]
    ?1 = v32854
    pf = -v33000-0x1 [from 0x8048584:sub    esp, 0x04]
    ?3 = v32856
    af = -v33004-0x1 [from 0x8048584:sub    esp, 0x04]
    ?5 = v32858
    zf = v33003 [from 0x8048584:sub    esp, 0x04]
    sf = v33002 [from 0x8048584:sub    esp, 0x04]
    tf = v32861
    if = v32862
    df = v32863
    of = v33010 [from 0x8048584:sub    esp, 0x04]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x8048591:cmp    eax, 0xff
    ax = v33078 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = v32840
    dx = v32841
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = -v33143-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?1 = v32854
    pf = -v33137-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?3 = v32856
    af = -v33141-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?5 = v32858
    zf = v33140 [from 0x8048591:cmp    eax, 0xff]
    sf = v33139 [from 0x8048591:cmp    eax, 0xff]
    tf = v32861
    if = v32862
    df = v32863
    of = v33147 [from 0x8048591:cmp    eax, 0xff]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x8048594:je     0x080485ac
    ax = v33078 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = v32840
    dx = v32841
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = -v33143-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?1 = v32854
    pf = -v33137-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?3 = v32856
    af = -v33141-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?5 = v32858
    zf = v33140 [from 0x8048591:cmp    eax, 0xff]
    sf = v33139 [from 0x8048591:cmp    eax, 0xff]
    tf = v32861
    if = v32862
    df = v32863
    of = v33147 [from 0x8048591:cmp    eax, 0xff]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x8048596:lea    esi, [esi + 0x00]
    ax = v33078 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = v32840
    dx = v32841
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = v32846
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = -v33143-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?1 = v32854
    pf = -v33137-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?3 = v32856
    af = -v33141-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?5 = v32858
    zf = v33140 [from 0x8048591:cmp    eax, 0xff]
    sf = v33139 [from 0x8048591:cmp    eax, 0xff]
    tf = v32861
    if = v32862
    df = v32863
    of = v33147 [from 0x8048591:cmp    eax, 0xff]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x8048599:lea    edi, [edi + 0x00000000]
    ax = v33078 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = v32840
    dx = v32841
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = v32846 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = -v33143-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?1 = v32854
    pf = -v33137-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?3 = v32856
    af = -v33141-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?5 = v32858
    zf = v33140 [from 0x8048591:cmp    eax, 0xff]
    sf = v33139 [from 0x8048591:cmp    eax, 0xff]
    tf = v32861
    if = v32862
    df = v32863
    of = v33147 [from 0x8048591:cmp    eax, 0xff]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x80485a0:sub    ebx, 0x04
    ax = v33078 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = v32840
    dx = v32841
    bx = 0x80495e4 [from 0x80485a0:sub    ebx, 0x04]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = v32846 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    ?1 = v32854
    pf = 0x1 (-0x1) [from 0x80485a0:sub    ebx, 0x04]
    ?3 = v32856
    af = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    ?5 = v32858
    zf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    sf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    tf = v32861
    if = v32862
    df = v32863
    of = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x80485a3:call   eax
    ax = v33078 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = v32840
    dx = v32841
    bx = 0x80495e4 [from 0x80485a0:sub    ebx, 0x04]
    sp = v32843-0x10 [from 0x80485a3:call   eax]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = v32846 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = v32847
    cs = v32848
    ss = v32849
    ds = v32850
    fs = v32851
    gs = v32852
    cf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    ?1 = v32854
    pf = 0x1 (-0x1) [from 0x80485a0:sub    ebx, 0x04]
    ?3 = v32856
    af = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    ?5 = v32858
    zf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    sf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    tf = v32861
    if = v32862
    df = v32863
    of = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    iopl0 = v32865
    iopl1 = v32866
    nt = v32867
    ?15 = v32868
    memory = {
        size=4; addr=v32843-0x10 [from 0x80485a3:call   eax]; value=0x80485a5 [from 0x80485a3:call   eax]
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    ax = v33478 [from 0x80485a5:mov    eax, DWORD PTR ds:[ebx]]
    cx = v33416 [from 0x80485a3:call   eax]
    dx = v33417 [from 0x80485a3:call   eax]
    bx = 0x80495e4 [from 0x80485a0:sub    ebx, 0x04]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = v32846 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = v33423 [from 0x80485a3:call   eax]
    cs = v33424 [from 0x80485a3:call   eax]
    ss = v33425 [from 0x80485a3:call   eax]
    ds = v33426 [from 0x80485a3:call   eax]
    fs = v33427 [from 0x80485a3:call   eax]
    gs = v33428 [from 0x80485a3:call   eax]
    cf = v33429 [from 0x80485a3:call   eax]
    ?1 = v33430 [from 0x80485a3:call   eax]
    pf = v33431 [from 0x80485a3:call   eax]
    ?3 = v33432 [from 0x80485a3:call   eax]
    af = v33433 [from 0x80485a3:call   eax]
    ?5 = v33434 [from 0x80485a3:call   eax]
    zf = v33435 [from 0x80485a3:call   eax]
    sf = v33436 [from 0x80485a3:call   eax]
    tf = v33437 [from 0x80485a3:call   eax]
    if = v33438 [from 0x80485a3:call   eax]
    df = v33439 [from 0x80485a3:call   eax]
    of = v33440 [from 0x80485a3:call   eax]
    iopl0 = v33441 [from 0x80485a3:call   eax]
    iopl1 = v33442 [from 0x80485a3:call   eax]
    nt = v33443 [from 0x80485a3:call   eax]
    ?15 = v33444 [from 0x80485a3:call   eax]
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x80485a7:cmp    eax, 0xff
    ax = v33478 [from 0x80485a5:mov    eax, DWORD PTR ds:[ebx]]
    cx = v33416 [from 0x80485a3:call   eax]
    dx = v33417 [from 0x80485a3:call   eax]
    bx = 0x80495e4 [from 0x80485a0:sub    ebx, 0x04]
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = v32846 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = v33423 [from 0x80485a3:call   eax]
    cs = v33424 [from 0x80485a3:call   eax]
    ss = v33425 [from 0x80485a3:call   eax]
    ds = v33426 [from 0x80485a3:call   eax]
    fs = v33427 [from 0x80485a3:call   eax]
    gs = v33428 [from 0x80485a3:call   eax]
    cf = -v33543-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?1 = v33430 [from 0x80485a3:call   eax]
    pf = -v33537-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?3 = v33432 [from 0x80485a3:call   eax]
    af = -v33541-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?5 = v33434 [from 0x80485a3:call   eax]
    zf = v33540 [from 0x80485a7:cmp    eax, 0xff]
    sf = v33539 [from 0x80485a7:cmp    eax, 0xff]
    tf = v33437 [from 0x80485a3:call   eax]
    if = v33438 [from 0x80485a3:call   eax]
    df = v33439 [from 0x80485a3:call   eax]
    of = v33547 [from 0x80485a7:cmp    eax, 0xff]
    iopl0 = v33441 [from 0x80485a3:call   eax]
    iopl1 = v33442 [from 0x80485a3:call   eax]
    nt = v33443 [from 0x80485a3:call   eax]
    ?15 = v33444 [from 0x80485a3:call   eax]
    memory = {
        size=4; addr=v32843-0x8 [from 0x8048583:push   ebx]; value=v32842
        size=4; addr=v32843-0x4 [from 0x8048580:push   ebp]; value=v32844
    }
0x80485aa:jne    0x080485a0
    ax = v33478 [from 0x80485a5:mov    eax, DWORD PTR ds:[ebx]]
    cx = v33416 [from 0x80485a3:call   eax]
    dx = v33417 [from 0x80485a3:call   eax]
    bx = v33551
    sp = v32843-0xc [from 0x8048584:sub    esp, 0x04]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = v32846 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = v33423 [from 0x80485a3:call   eax]
    cs = v33424 [from 0x80485a3:call   eax]
    ss = v33425 [from 0x80485a3:call   eax]
    ds = v33426 [from 0x80485a3:call   eax]
    fs = v33427 [from 0x80485a3:call   eax]
    gs = v33428 [from 0x80485a3:call   eax]
    cf = -v33543-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?1 = v33430 [from 0x80485a3:call   eax]
    pf = -v33537-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?3 = v33432 [from 0x80485a3:call   eax]
    af = -v33541-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?5 = v33434 [from 0x80485a3:call   eax]
    zf = v33540 [from 0x80485a7:cmp    eax, 0xff]
    sf = v33539 [from 0x80485a7:cmp    eax, 0xff]
    tf = v33437 [from 0x80485a3:call   eax]
    if = v33438 [from 0x80485a3:call   eax]
    df = v33439 [from 0x80485a3:call   eax]
    of = v33547 [from 0x80485a7:cmp    eax, 0xff]
    iopl0 = v33441 [from 0x80485a3:call   eax]
    iopl1 = v33442 [from 0x80485a3:call   eax]
    nt = v33443 [from 0x80485a3:call   eax]
    ?15 = v33444 [from 0x80485a3:call   eax]
    memory = {}
0x80485ac:pop    eax
    ax = v33589 [from 0x80485ac:pop    eax]
    cx = v33213
    dx = v33214
    bx = v33215
    sp = v32843-0x8 [from 0x80485ac:pop    eax]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v33220
    cs = v33221
    ss = v33222
    ds = v33223
    fs = v33224
    gs = v33225
    cf = v33226
    ?1 = v33227
    pf = v33228
    ?3 = v33229
    af = v33230
    ?5 = v33231
    zf = v33232
    sf = v33233
    tf = v33234
    if = v33235
    df = v33236
    of = v33237
    iopl0 = v33238
    iopl1 = v33239
    nt = v33240
    ?15 = v33241
    memory = {}
0x80485ad:pop    ebx
    ax = v33589 [from 0x80485ac:pop    eax]
    cx = v33213
    dx = v33214
    bx = v33625 [from 0x80485ad:pop    ebx]
    sp = v32843-0x4 [from 0x80485ad:pop    ebx]
    bp = v32843-0x4 [from 0x8048580:push   ebp]
    si = v32845
    di = v32846
    es = v33220
    cs = v33221
    ss = v33222
    ds = v33223
    fs = v33224
    gs = v33225
    cf = v33226
    ?1 = v33227
    pf = v33228
    ?3 = v33229
    af = v33230
    ?5 = v33231
    zf = v33232
    sf = v33233
    tf = v33234
    if = v33235
    df = v33236
    of = v33237
    iopl0 = v33238
    iopl1 = v33239
    nt = v33240
    ?15 = v33241
    memory = {}
0x80485ae:pop    ebp
    ax = v33589 [from 0x80485ac:pop    eax]
    cx = v33213
    dx = v33214
    bx = v33625 [from 0x80485ad:pop    ebx]
    sp = v32843 [from 0x80485ae:pop    ebp]
    bp = v33661 [from 0x80485ae:pop    ebp]
    si = v32845
    di = v32846
    es = v33220
    cs = v33221
    ss = v33222
    ds = v33223
    fs = v33224
    gs = v33225
    cf = v33226
    ?1 = v33227
    pf = v33228
    ?3 = v33229
    af = v33230
    ?5 = v33231
    zf = v33232
    sf = v33233
    tf = v33234
    if = v33235
    df = v33236
    of = v33237
    iopl0 = v33238
    iopl1 = v33239
    nt = v33240
    ?15 = v33241
    memory = {}
0x80485af:ret    
    ax = v33589 [from 0x80485ac:pop    eax]
    cx = v33213
    dx = v33214
    bx = v33625 [from 0x80485ad:pop    ebx]
    sp = v32843+0x4 [from 0x80485af:ret    ]
    bp = v33661 [from 0x80485ae:pop    ebp]
    si = v32845
    di = v32846
    es = v33220
    cs = v33221
    ss = v33222
    ds = v33223
    fs = v33224
    gs = v33225
    cf = v33226
    ?1 = v33227
    pf = v33228
    ?3 = v33229
    af = v33230
    ?5 = v33231
    zf = v33232
    sf = v33233
    tf = v33234
    if = v33235
    df = v33236
    of = v33237
    iopl0 = v33238
    iopl1 = v33239
    nt = v33240
    ?15 = v33241
    memory = {}
==============================================
Constant propagation in function "_fini"
==============================================
0x80485b0:push   ebp
    ax = v33761
    cx = v33762
    dx = v33763
    bx = v33764
    sp = v33765-0x4 [from 0x80485b0:push   ebp]
    bp = v33766
    si = v33767
    di = v33768
    es = v33769
    cs = v33770
    ss = v33771
    ds = v33772
    fs = v33773
    gs = v33774
    cf = v33775
    ?1 = v33776
    pf = v33777
    ?3 = v33778
    af = v33779
    ?5 = v33780
    zf = v33781
    sf = v33782
    tf = v33783
    if = v33784
    df = v33785
    of = v33786
    iopl0 = v33787
    iopl1 = v33788
    nt = v33789
    ?15 = v33790
    memory = {
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485b1:mov    ebp, esp
    ax = v33761
    cx = v33762
    dx = v33763
    bx = v33764
    sp = v33765-0x4 [from 0x80485b0:push   ebp]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v33769
    cs = v33770
    ss = v33771
    ds = v33772
    fs = v33773
    gs = v33774
    cf = v33775
    ?1 = v33776
    pf = v33777
    ?3 = v33778
    af = v33779
    ?5 = v33780
    zf = v33781
    sf = v33782
    tf = v33783
    if = v33784
    df = v33785
    of = v33786
    iopl0 = v33787
    iopl1 = v33788
    nt = v33789
    ?15 = v33790
    memory = {
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485b3:push   ebx
    ax = v33761
    cx = v33762
    dx = v33763
    bx = v33764
    sp = v33765-0x8 [from 0x80485b3:push   ebx]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v33769
    cs = v33770
    ss = v33771
    ds = v33772
    fs = v33773
    gs = v33774
    cf = v33775
    ?1 = v33776
    pf = v33777
    ?3 = v33778
    af = v33779
    ?5 = v33780
    zf = v33781
    sf = v33782
    tf = v33783
    if = v33784
    df = v33785
    of = v33786
    iopl0 = v33787
    iopl1 = v33788
    nt = v33789
    ?15 = v33790
    memory = {
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485b4:push   eax
    ax = v33761
    cx = v33762
    dx = v33763
    bx = v33764
    sp = v33765-0xc [from 0x80485b4:push   eax]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v33769
    cs = v33770
    ss = v33771
    ds = v33772
    fs = v33773
    gs = v33774
    cf = v33775
    ?1 = v33776
    pf = v33777
    ?3 = v33778
    af = v33779
    ?5 = v33780
    zf = v33781
    sf = v33782
    tf = v33783
    if = v33784
    df = v33785
    of = v33786
    iopl0 = v33787
    iopl1 = v33788
    nt = v33789
    ?15 = v33790
    memory = {
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485b5:call   0x080485ba
    ax = v33761
    cx = v33762
    dx = v33763
    bx = v33764
    sp = v33765-0x10 [from 0x80485b5:call   0x080485ba]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v33769
    cs = v33770
    ss = v33771
    ds = v33772
    fs = v33773
    gs = v33774
    cf = v33775
    ?1 = v33776
    pf = v33777
    ?3 = v33778
    af = v33779
    ?5 = v33780
    zf = v33781
    sf = v33782
    tf = v33783
    if = v33784
    df = v33785
    of = v33786
    iopl0 = v33787
    iopl1 = v33788
    nt = v33789
    ?15 = v33790
    memory = {
        size=4; addr=v33765-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485ba:pop    ebx
    ax = v33761
    cx = v33762
    dx = v33763
    bx = 0x80485ba [from 0x80485b5:call   0x080485ba]
    sp = v33765-0xc [from 0x80485ba:pop    ebx]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v33769
    cs = v33770
    ss = v33771
    ds = v33772
    fs = v33773
    gs = v33774
    cf = v33775
    ?1 = v33776
    pf = v33777
    ?3 = v33778
    af = v33779
    ?5 = v33780
    zf = v33781
    sf = v33782
    tf = v33783
    if = v33784
    df = v33785
    of = v33786
    iopl0 = v33787
    iopl1 = v33788
    nt = v33789
    ?15 = v33790
    memory = {
        size=4; addr=v33765-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485bb:add    ebx, 0x0000110e
    ax = v33761
    cx = v33762
    dx = v33763
    bx = 0x80496c8 [from 0x80485bb:add    ebx, 0x0000110e]
    sp = v33765-0xc [from 0x80485ba:pop    ebx]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v33769
    cs = v33770
    ss = v33771
    ds = v33772
    fs = v33773
    gs = v33774
    cf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    ?1 = v33776
    pf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    ?3 = v33778
    af = 0x1 (-0x1) [from 0x80485bb:add    ebx, 0x0000110e]
    ?5 = v33780
    zf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    sf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    tf = v33783
    if = v33784
    df = v33785
    of = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    iopl0 = v33787
    iopl1 = v33788
    nt = v33789
    ?15 = v33790
    memory = {
        size=4; addr=v33765-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485c1:call   0x08048390
    ax = v33761
    cx = v33762
    dx = v33763
    bx = 0x80496c8 [from 0x80485bb:add    ebx, 0x0000110e]
    sp = v33765-0x10 [from 0x80485c1:call   0x08048390]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v33769
    cs = v33770
    ss = v33771
    ds = v33772
    fs = v33773
    gs = v33774
    cf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    ?1 = v33776
    pf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    ?3 = v33778
    af = 0x1 (-0x1) [from 0x80485bb:add    ebx, 0x0000110e]
    ?5 = v33780
    zf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    sf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    tf = v33783
    if = v33784
    df = v33785
    of = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    iopl0 = v33787
    iopl1 = v33788
    nt = v33789
    ?15 = v33790
    memory = {
        size=4; addr=v33765-0x10 [from 0x80485c1:call   0x08048390]; value=0x80485c6 [from 0x80485c1:call   0x08048390]
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485c6:pop    eax
    ax = v33761
    cx = v34106 [from 0x80485c1:call   0x08048390]
    dx = v34107 [from 0x80485c1:call   0x08048390]
    bx = 0x80496c8 [from 0x80485bb:add    ebx, 0x0000110e]
    sp = v33765-0x8 [from 0x80485c6:pop    eax]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v34113 [from 0x80485c1:call   0x08048390]
    cs = v34114 [from 0x80485c1:call   0x08048390]
    ss = v34115 [from 0x80485c1:call   0x08048390]
    ds = v34116 [from 0x80485c1:call   0x08048390]
    fs = v34117 [from 0x80485c1:call   0x08048390]
    gs = v34118 [from 0x80485c1:call   0x08048390]
    cf = v34119 [from 0x80485c1:call   0x08048390]
    ?1 = v34120 [from 0x80485c1:call   0x08048390]
    pf = v34121 [from 0x80485c1:call   0x08048390]
    ?3 = v34122 [from 0x80485c1:call   0x08048390]
    af = v34123 [from 0x80485c1:call   0x08048390]
    ?5 = v34124 [from 0x80485c1:call   0x08048390]
    zf = v34125 [from 0x80485c1:call   0x08048390]
    sf = v34126 [from 0x80485c1:call   0x08048390]
    tf = v34127 [from 0x80485c1:call   0x08048390]
    if = v34128 [from 0x80485c1:call   0x08048390]
    df = v34129 [from 0x80485c1:call   0x08048390]
    of = v34130 [from 0x80485c1:call   0x08048390]
    iopl0 = v34131 [from 0x80485c1:call   0x08048390]
    iopl1 = v34132 [from 0x80485c1:call   0x08048390]
    nt = v34133 [from 0x80485c1:call   0x08048390]
    ?15 = v34134 [from 0x80485c1:call   0x08048390]
    memory = {
        size=4; addr=v33765-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485c7:pop    ebx
    ax = v33761
    cx = v34106 [from 0x80485c1:call   0x08048390]
    dx = v34107 [from 0x80485c1:call   0x08048390]
    bx = v33764
    sp = v33765-0x4 [from 0x80485c7:pop    ebx]
    bp = v33765-0x4 [from 0x80485b0:push   ebp]
    si = v33767
    di = v33768
    es = v34113 [from 0x80485c1:call   0x08048390]
    cs = v34114 [from 0x80485c1:call   0x08048390]
    ss = v34115 [from 0x80485c1:call   0x08048390]
    ds = v34116 [from 0x80485c1:call   0x08048390]
    fs = v34117 [from 0x80485c1:call   0x08048390]
    gs = v34118 [from 0x80485c1:call   0x08048390]
    cf = v34119 [from 0x80485c1:call   0x08048390]
    ?1 = v34120 [from 0x80485c1:call   0x08048390]
    pf = v34121 [from 0x80485c1:call   0x08048390]
    ?3 = v34122 [from 0x80485c1:call   0x08048390]
    af = v34123 [from 0x80485c1:call   0x08048390]
    ?5 = v34124 [from 0x80485c1:call   0x08048390]
    zf = v34125 [from 0x80485c1:call   0x08048390]
    sf = v34126 [from 0x80485c1:call   0x08048390]
    tf = v34127 [from 0x80485c1:call   0x08048390]
    if = v34128 [from 0x80485c1:call   0x08048390]
    df = v34129 [from 0x80485c1:call   0x08048390]
    of = v34130 [from 0x80485c1:call   0x08048390]
    iopl0 = v34131 [from 0x80485c1:call   0x08048390]
    iopl1 = v34132 [from 0x80485c1:call   0x08048390]
    nt = v34133 [from 0x80485c1:call   0x08048390]
    ?15 = v34134 [from 0x80485c1:call   0x08048390]
    memory = {
        size=4; addr=v33765-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485c8:leave  
    ax = v33761
    cx = v34106 [from 0x80485c1:call   0x08048390]
    dx = v34107 [from 0x80485c1:call   0x08048390]
    bx = v33764
    sp = v33765 [from 0x80485c8:leave  ]
    bp = v33766
    si = v33767
    di = v33768
    es = v34113 [from 0x80485c1:call   0x08048390]
    cs = v34114 [from 0x80485c1:call   0x08048390]
    ss = v34115 [from 0x80485c1:call   0x08048390]
    ds = v34116 [from 0x80485c1:call   0x08048390]
    fs = v34117 [from 0x80485c1:call   0x08048390]
    gs = v34118 [from 0x80485c1:call   0x08048390]
    cf = v34119 [from 0x80485c1:call   0x08048390]
    ?1 = v34120 [from 0x80485c1:call   0x08048390]
    pf = v34121 [from 0x80485c1:call   0x08048390]
    ?3 = v34122 [from 0x80485c1:call   0x08048390]
    af = v34123 [from 0x80485c1:call   0x08048390]
    ?5 = v34124 [from 0x80485c1:call   0x08048390]
    zf = v34125 [from 0x80485c1:call   0x08048390]
    sf = v34126 [from 0x80485c1:call   0x08048390]
    tf = v34127 [from 0x80485c1:call   0x08048390]
    if = v34128 [from 0x80485c1:call   0x08048390]
    df = v34129 [from 0x80485c1:call   0x08048390]
    of = v34130 [from 0x80485c1:call   0x08048390]
    iopl0 = v34131 [from 0x80485c1:call   0x08048390]
    iopl1 = v34132 [from 0x80485c1:call   0x08048390]
    nt = v34133 [from 0x80485c1:call   0x08048390]
    ?15 = v34134 [from 0x80485c1:call   0x08048390]
    memory = {
        size=4; addr=v33765-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
0x80485c9:ret    
    ax = v33761
    cx = v34106 [from 0x80485c1:call   0x08048390]
    dx = v34107 [from 0x80485c1:call   0x08048390]
    bx = v33764
    sp = v33765+0x4 [from 0x80485c9:ret    ]
    bp = v33766
    si = v33767
    di = v33768
    es = v34113 [from 0x80485c1:call   0x08048390]
    cs = v34114 [from 0x80485c1:call   0x08048390]
    ss = v34115 [from 0x80485c1:call   0x08048390]
    ds = v34116 [from 0x80485c1:call   0x08048390]
    fs = v34117 [from 0x80485c1:call   0x08048390]
    gs = v34118 [from 0x80485c1:call   0x08048390]
    cf = v34119 [from 0x80485c1:call   0x08048390]
    ?1 = v34120 [from 0x80485c1:call   0x08048390]
    pf = v34121 [from 0x80485c1:call   0x08048390]
    ?3 = v34122 [from 0x80485c1:call   0x08048390]
    af = v34123 [from 0x80485c1:call   0x08048390]
    ?5 = v34124 [from 0x80485c1:call   0x08048390]
    zf = v34125 [from 0x80485c1:call   0x08048390]
    sf = v34126 [from 0x80485c1:call   0x08048390]
    tf = v34127 [from 0x80485c1:call   0x08048390]
    if = v34128 [from 0x80485c1:call   0x08048390]
    df = v34129 [from 0x80485c1:call   0x08048390]
    of = v34130 [from 0x80485c1:call   0x08048390]
    iopl0 = v34131 [from 0x80485c1:call   0x08048390]
    iopl1 = v34132 [from 0x80485c1:call   0x08048390]
    nt = v34133 [from 0x80485c1:call   0x08048390]
    ?15 = v34134 [from 0x80485c1:call   0x08048390]
    memory = {
        size=4; addr=v33765-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=v33765-0xc [from 0x80485b4:push   eax]; value=v33761
        size=4; addr=v33765-0x8 [from 0x80485b3:push   ebx]; value=v33764
        size=4; addr=v33765-0x4 [from 0x80485b0:push   ebp]; value=v33766
    }
analyzed headers: 1
