==============================================
Constant propagation in function "_init"
==============================================
0x80482c8:push   ebp
    ax = V1
    cx = V2
    dx = V3
    bx = V4
    sp = V5-0x4 [from 0x80482c8:push   ebp]
    bp = V6
    si = V7
    di = V8
    es = V9
    cs = V10
    ss = V11
    ds = V12
    fs = V13
    gs = V14
    cf = V15
    ?1 = V16
    pf = V17
    ?3 = V18
    af = V19
    ?5 = V20
    zf = V21
    sf = V22
    tf = V23
    if = V24
    df = V25
    of = V26
    iopl0 = V27
    iopl1 = V28
    nt = V29
    ?15 = V30
    memory = {
        size=4; addr=V5-0x4 [from 0x80482c8:push   ebp]; value=V6
    }
0x80482c9:mov    ebp, esp
    ax = V1
    cx = V2
    dx = V3
    bx = V4
    sp = V5-0x4 [from 0x80482c8:push   ebp]
    bp = V5-0x4 [from 0x80482c8:push   ebp]
    si = V7
    di = V8
    es = V9
    cs = V10
    ss = V11
    ds = V12
    fs = V13
    gs = V14
    cf = V15
    ?1 = V16
    pf = V17
    ?3 = V18
    af = V19
    ?5 = V20
    zf = V21
    sf = V22
    tf = V23
    if = V24
    df = V25
    of = V26
    iopl0 = V27
    iopl1 = V28
    nt = V29
    ?15 = V30
    memory = {
        size=4; addr=V5-0x4 [from 0x80482c8:push   ebp]; value=V6
    }
0x80482cb:sub    esp, 0x08
    ax = V1
    cx = V2
    dx = V3
    bx = V4
    sp = V5-0xc [from 0x80482cb:sub    esp, 0x08]
    bp = V5-0x4 [from 0x80482c8:push   ebp]
    si = V7
    di = V8
    es = V9
    cs = V10
    ss = V11
    ds = V12
    fs = V13
    gs = V14
    cf = -V31-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?1 = V16
    pf = -V32-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?3 = V18
    af = -V33-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?5 = V20
    zf = V34 [from 0x80482cb:sub    esp, 0x08]
    sf = V35 [from 0x80482cb:sub    esp, 0x08]
    tf = V23
    if = V24
    df = V25
    of = V36 [from 0x80482cb:sub    esp, 0x08]
    iopl0 = V27
    iopl1 = V28
    nt = V29
    ?15 = V30
    memory = {
        size=4; addr=V5-0x4 [from 0x80482c8:push   ebp]; value=V6
    }
0x80482ce:call   0x08048364
    ax = V1
    cx = V2
    dx = V3
    bx = V4
    sp = V5-0x10 [from 0x80482ce:call   0x08048364]
    bp = V5-0x4 [from 0x80482c8:push   ebp]
    si = V7
    di = V8
    es = V9
    cs = V10
    ss = V11
    ds = V12
    fs = V13
    gs = V14
    cf = -V31-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?1 = V16
    pf = -V32-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?3 = V18
    af = -V33-0x1 [from 0x80482cb:sub    esp, 0x08]
    ?5 = V20
    zf = V34 [from 0x80482cb:sub    esp, 0x08]
    sf = V35 [from 0x80482cb:sub    esp, 0x08]
    tf = V23
    if = V24
    df = V25
    of = V36 [from 0x80482cb:sub    esp, 0x08]
    iopl0 = V27
    iopl1 = V28
    nt = V29
    ?15 = V30
    memory = {
        size=4; addr=V5-0x10 [from 0x80482ce:call   0x08048364]; value=0x80482d3 [from 0x80482ce:call   0x08048364]
        size=4; addr=V5-0x4 [from 0x80482c8:push   ebp]; value=V6
    }
0x80482d3:call   0x080483d0
    ax = V37 [from 0x80482ce:call   0x08048364]
    cx = V38 [from 0x80482ce:call   0x08048364]
    dx = V39 [from 0x80482ce:call   0x08048364]
    bx = V4
    sp = V5-0x10 [from 0x80482d3:call   0x080483d0]
    bp = V5-0x4 [from 0x80482c8:push   ebp]
    si = V7
    di = V8
    es = V40 [from 0x80482ce:call   0x08048364]
    cs = V41 [from 0x80482ce:call   0x08048364]
    ss = V42 [from 0x80482ce:call   0x08048364]
    ds = V43 [from 0x80482ce:call   0x08048364]
    fs = V44 [from 0x80482ce:call   0x08048364]
    gs = V45 [from 0x80482ce:call   0x08048364]
    cf = V46 [from 0x80482ce:call   0x08048364]
    ?1 = V47 [from 0x80482ce:call   0x08048364]
    pf = V48 [from 0x80482ce:call   0x08048364]
    ?3 = V49 [from 0x80482ce:call   0x08048364]
    af = V50 [from 0x80482ce:call   0x08048364]
    ?5 = V51 [from 0x80482ce:call   0x08048364]
    zf = V52 [from 0x80482ce:call   0x08048364]
    sf = V53 [from 0x80482ce:call   0x08048364]
    tf = V54 [from 0x80482ce:call   0x08048364]
    if = V55 [from 0x80482ce:call   0x08048364]
    df = V56 [from 0x80482ce:call   0x08048364]
    of = V57 [from 0x80482ce:call   0x08048364]
    iopl0 = V58 [from 0x80482ce:call   0x08048364]
    iopl1 = V59 [from 0x80482ce:call   0x08048364]
    nt = V60 [from 0x80482ce:call   0x08048364]
    ?15 = V61 [from 0x80482ce:call   0x08048364]
    memory = {
        size=4; addr=V5-0x10 [from 0x80482d3:call   0x080483d0]; value=0x80482d8 [from 0x80482d3:call   0x080483d0]
        size=4; addr=V5-0x4 [from 0x80482c8:push   ebp]; value=V6
    }
0x80482d8:call   0x08048580
    ax = V62 [from 0x80482d3:call   0x080483d0]
    cx = V63 [from 0x80482d3:call   0x080483d0]
    dx = V64 [from 0x80482d3:call   0x080483d0]
    bx = V4
    sp = V5-0x10 [from 0x80482d8:call   0x08048580]
    bp = V5-0x4 [from 0x80482c8:push   ebp]
    si = V7
    di = V8
    es = V65 [from 0x80482d3:call   0x080483d0]
    cs = V66 [from 0x80482d3:call   0x080483d0]
    ss = V67 [from 0x80482d3:call   0x080483d0]
    ds = V68 [from 0x80482d3:call   0x080483d0]
    fs = V69 [from 0x80482d3:call   0x080483d0]
    gs = V70 [from 0x80482d3:call   0x080483d0]
    cf = V71 [from 0x80482d3:call   0x080483d0]
    ?1 = V72 [from 0x80482d3:call   0x080483d0]
    pf = V73 [from 0x80482d3:call   0x080483d0]
    ?3 = V74 [from 0x80482d3:call   0x080483d0]
    af = V75 [from 0x80482d3:call   0x080483d0]
    ?5 = V76 [from 0x80482d3:call   0x080483d0]
    zf = V77 [from 0x80482d3:call   0x080483d0]
    sf = V78 [from 0x80482d3:call   0x080483d0]
    tf = V79 [from 0x80482d3:call   0x080483d0]
    if = V80 [from 0x80482d3:call   0x080483d0]
    df = V81 [from 0x80482d3:call   0x080483d0]
    of = V82 [from 0x80482d3:call   0x080483d0]
    iopl0 = V83 [from 0x80482d3:call   0x080483d0]
    iopl1 = V84 [from 0x80482d3:call   0x080483d0]
    nt = V85 [from 0x80482d3:call   0x080483d0]
    ?15 = V86 [from 0x80482d3:call   0x080483d0]
    memory = {
        size=4; addr=V5-0x10 [from 0x80482d8:call   0x08048580]; value=0x80482dd [from 0x80482d8:call   0x08048580]
        size=4; addr=V5-0x4 [from 0x80482c8:push   ebp]; value=V6
    }
0x80482dd:leave  
    ax = V87 [from 0x80482d8:call   0x08048580]
    cx = V88 [from 0x80482d8:call   0x08048580]
    dx = V89 [from 0x80482d8:call   0x08048580]
    bx = V4
    sp = V5 [from 0x80482dd:leave  ]
    bp = V6
    si = V7
    di = V8
    es = V90 [from 0x80482d8:call   0x08048580]
    cs = V91 [from 0x80482d8:call   0x08048580]
    ss = V92 [from 0x80482d8:call   0x08048580]
    ds = V93 [from 0x80482d8:call   0x08048580]
    fs = V94 [from 0x80482d8:call   0x08048580]
    gs = V95 [from 0x80482d8:call   0x08048580]
    cf = V96 [from 0x80482d8:call   0x08048580]
    ?1 = V97 [from 0x80482d8:call   0x08048580]
    pf = V98 [from 0x80482d8:call   0x08048580]
    ?3 = V99 [from 0x80482d8:call   0x08048580]
    af = V100 [from 0x80482d8:call   0x08048580]
    ?5 = V101 [from 0x80482d8:call   0x08048580]
    zf = V102 [from 0x80482d8:call   0x08048580]
    sf = V103 [from 0x80482d8:call   0x08048580]
    tf = V104 [from 0x80482d8:call   0x08048580]
    if = V105 [from 0x80482d8:call   0x08048580]
    df = V106 [from 0x80482d8:call   0x08048580]
    of = V107 [from 0x80482d8:call   0x08048580]
    iopl0 = V108 [from 0x80482d8:call   0x08048580]
    iopl1 = V109 [from 0x80482d8:call   0x08048580]
    nt = V110 [from 0x80482d8:call   0x08048580]
    ?15 = V111 [from 0x80482d8:call   0x08048580]
    memory = {
        size=4; addr=V5-0x4 [from 0x80482c8:push   ebp]; value=V6
    }
0x80482de:ret    
    ax = V87 [from 0x80482d8:call   0x08048580]
    cx = V88 [from 0x80482d8:call   0x08048580]
    dx = V89 [from 0x80482d8:call   0x08048580]
    bx = V4
    sp = V5+0x4 [from 0x80482de:ret    ]
    bp = V6
    si = V7
    di = V8
    es = V90 [from 0x80482d8:call   0x08048580]
    cs = V91 [from 0x80482d8:call   0x08048580]
    ss = V92 [from 0x80482d8:call   0x08048580]
    ds = V93 [from 0x80482d8:call   0x08048580]
    fs = V94 [from 0x80482d8:call   0x08048580]
    gs = V95 [from 0x80482d8:call   0x08048580]
    cf = V96 [from 0x80482d8:call   0x08048580]
    ?1 = V97 [from 0x80482d8:call   0x08048580]
    pf = V98 [from 0x80482d8:call   0x08048580]
    ?3 = V99 [from 0x80482d8:call   0x08048580]
    af = V100 [from 0x80482d8:call   0x08048580]
    ?5 = V101 [from 0x80482d8:call   0x08048580]
    zf = V102 [from 0x80482d8:call   0x08048580]
    sf = V103 [from 0x80482d8:call   0x08048580]
    tf = V104 [from 0x80482d8:call   0x08048580]
    if = V105 [from 0x80482d8:call   0x08048580]
    df = V106 [from 0x80482d8:call   0x08048580]
    of = V107 [from 0x80482d8:call   0x08048580]
    iopl0 = V108 [from 0x80482d8:call   0x08048580]
    iopl1 = V109 [from 0x80482d8:call   0x08048580]
    nt = V110 [from 0x80482d8:call   0x08048580]
    ?15 = V111 [from 0x80482d8:call   0x08048580]
    memory = {
        size=4; addr=V5-0x4 [from 0x80482c8:push   ebp]; value=V6
    }
==============================================
Constant propagation in function "***uncategorized blocks***"
==============================================
0x80482df:add    bh, bh
    ax = V112
    cx = V113
    dx = V114
    bx = V115 [from 0x80482df:add    bh, bh]
    sp = V116
    bp = V117
    si = V118
    di = V119
    es = V120
    cs = V121
    ss = V122
    ds = V123
    fs = V124
    gs = V125
    cf = V126 [from 0x80482df:add    bh, bh]
    ?1 = V127
    pf = -V128-0x1 [from 0x80482df:add    bh, bh]
    ?3 = V129
    af = V130 [from 0x80482df:add    bh, bh]
    ?5 = V131
    zf = V132 [from 0x80482df:add    bh, bh]
    sf = V133 [from 0x80482df:add    bh, bh]
    tf = V134
    if = V135
    df = V136
    of = V137 [from 0x80482df:add    bh, bh]
    iopl0 = V138
    iopl1 = V139
    nt = V140
    ?15 = V141
    memory = {}
0x80482e1:xor    eax, 0x080496cc
    ax = V142 [from 0x80482e1:xor    eax, 0x080496cc]
    cx = V113
    dx = V114
    bx = V115 [from 0x80482df:add    bh, bh]
    sp = V116
    bp = V117
    si = V118
    di = V119
    es = V120
    cs = V121
    ss = V122
    ds = V123
    fs = V124
    gs = V125
    cf = 0x0 [from 0x80482e1:xor    eax, 0x080496cc]
    ?1 = V127
    pf = -V143-0x1 [from 0x80482e1:xor    eax, 0x080496cc]
    ?3 = V129
    af = <top>
    ?5 = V131
    zf = V144 [from 0x80482e1:xor    eax, 0x080496cc]
    sf = V145 [from 0x80482e1:xor    eax, 0x080496cc]
    tf = V134
    if = V135
    df = V136
    of = 0x0 [from 0x80482e1:xor    eax, 0x080496cc]
    iopl0 = V138
    iopl1 = V139
    nt = V140
    ?15 = V141
    memory = {}
0x80482e6:jmp    DWORD PTR ds:[0x080496d0]
    ax = V142 [from 0x80482e1:xor    eax, 0x080496cc]
    cx = V113
    dx = V114
    bx = V115 [from 0x80482df:add    bh, bh]
    sp = V116
    bp = V117
    si = V118
    di = V119
    es = V120
    cs = V121
    ss = V122
    ds = V123
    fs = V124
    gs = V125
    cf = 0x0 [from 0x80482e1:xor    eax, 0x080496cc]
    ?1 = V127
    pf = -V143-0x1 [from 0x80482e1:xor    eax, 0x080496cc]
    ?3 = V129
    af = <top>
    ?5 = V131
    zf = V144 [from 0x80482e1:xor    eax, 0x080496cc]
    sf = V145 [from 0x80482e1:xor    eax, 0x080496cc]
    tf = V134
    if = V135
    df = V136
    of = 0x0 [from 0x80482e1:xor    eax, 0x080496cc]
    iopl0 = V138
    iopl1 = V139
    nt = V140
    ?15 = V141
    memory = {}
0x80482ec:add    BYTE PTR ds:[eax], al
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=1; addr=<top>; value=<top>
    }
0x80482ee:add    BYTE PTR ds:[eax], al
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=1; addr=<top>; value=<top>
        size=1; addr=<top>; value=<top>
    }
0x80482f6:push   0x00000000
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x0 [from 0x80482f6:push   0x00000000]
    }
0x80482fb:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x0 [from 0x80482f6:push   0x00000000]
    }
0x80482e0:push   DWORD PTR ds:[0x080496cc]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x0 [from 0x80482f6:push   0x00000000]
        size=4; addr=<top>; value=V146 [from 0x80482e0:push   DWORD PTR ds:[0x080496cc]]
    }
0x8048306:push   0x00000008
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x8 [from 0x8048306:push   0x00000008]
    }
0x804830b:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x8 [from 0x8048306:push   0x00000008]
    }
0x8048316:push   0x00000010
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x10 [from 0x8048316:push   0x00000010]
    }
0x804831b:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x10 [from 0x8048316:push   0x00000010]
    }
0x8048326:push   0x00000018
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x18 [from 0x8048326:push   0x00000018]
    }
0x804832b:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x18 [from 0x8048326:push   0x00000018]
    }
0x8048336:push   0x00000020
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x20 [from 0x8048336:push   0x00000020]
    }
0x804833b:jmp    0x080482e0
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x20 [from 0x8048336:push   0x00000020]
    }
0x80483ce:mov    esi, esi
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x80495f8 [from 0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8]
    }
0x80483ef:call   0x00000000
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x80495f8 [from 0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8]
        size=4; addr=<top>; value=0x80483f4 [from 0x80483ef:call   0x00000000]
    }
0x80483f4:lea    esi, [esi + 0x00000000]
    ax = V147 [from 0x80483ef:call   0x00000000]
    cx = V148 [from 0x80483ef:call   0x00000000]
    dx = V149 [from 0x80483ef:call   0x00000000]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V150 [from 0x80483ef:call   0x00000000]
    cs = V151 [from 0x80483ef:call   0x00000000]
    ss = V152 [from 0x80483ef:call   0x00000000]
    ds = V153 [from 0x80483ef:call   0x00000000]
    fs = V154 [from 0x80483ef:call   0x00000000]
    gs = V155 [from 0x80483ef:call   0x00000000]
    cf = V156 [from 0x80483ef:call   0x00000000]
    ?1 = V157 [from 0x80483ef:call   0x00000000]
    pf = V158 [from 0x80483ef:call   0x00000000]
    ?3 = V159 [from 0x80483ef:call   0x00000000]
    af = V160 [from 0x80483ef:call   0x00000000]
    ?5 = V161 [from 0x80483ef:call   0x00000000]
    zf = V162 [from 0x80483ef:call   0x00000000]
    sf = V163 [from 0x80483ef:call   0x00000000]
    tf = V164 [from 0x80483ef:call   0x00000000]
    if = V165 [from 0x80483ef:call   0x00000000]
    df = V166 [from 0x80483ef:call   0x00000000]
    of = V167 [from 0x80483ef:call   0x00000000]
    iopl0 = V168 [from 0x80483ef:call   0x00000000]
    iopl1 = V169 [from 0x80483ef:call   0x00000000]
    nt = V170 [from 0x80483ef:call   0x00000000]
    ?15 = V171 [from 0x80483ef:call   0x00000000]
    memory = {
        size=4; addr=<top>; value=0x80495f8 [from 0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8]
    }
0x80483fa:lea    edi, [edi + 0x00000000]
    ax = V147 [from 0x80483ef:call   0x00000000]
    cx = V148 [from 0x80483ef:call   0x00000000]
    dx = V149 [from 0x80483ef:call   0x00000000]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V150 [from 0x80483ef:call   0x00000000]
    cs = V151 [from 0x80483ef:call   0x00000000]
    ss = V152 [from 0x80483ef:call   0x00000000]
    ds = V153 [from 0x80483ef:call   0x00000000]
    fs = V154 [from 0x80483ef:call   0x00000000]
    gs = V155 [from 0x80483ef:call   0x00000000]
    cf = V156 [from 0x80483ef:call   0x00000000]
    ?1 = V157 [from 0x80483ef:call   0x00000000]
    pf = V158 [from 0x80483ef:call   0x00000000]
    ?3 = V159 [from 0x80483ef:call   0x00000000]
    af = V160 [from 0x80483ef:call   0x00000000]
    ?5 = V161 [from 0x80483ef:call   0x00000000]
    zf = V162 [from 0x80483ef:call   0x00000000]
    sf = V163 [from 0x80483ef:call   0x00000000]
    tf = V164 [from 0x80483ef:call   0x00000000]
    if = V165 [from 0x80483ef:call   0x00000000]
    df = V166 [from 0x80483ef:call   0x00000000]
    of = V167 [from 0x80483ef:call   0x00000000]
    iopl0 = V168 [from 0x80483ef:call   0x00000000]
    iopl1 = V169 [from 0x80483ef:call   0x00000000]
    nt = V170 [from 0x80483ef:call   0x00000000]
    ?15 = V171 [from 0x80483ef:call   0x00000000]
    memory = {
        size=4; addr=<top>; value=0x80495f8 [from 0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8]
    }
0x8048434:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x804843a:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048456:lea    esi, [esi + 0x00]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048459:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484e8:nop    
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484e9:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048513:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048519:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x804854f:lea    esi, [edx + eax*0x04]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = <top>
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = <top>
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048552:xor    edi, edi
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x8048552:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x8048552:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048554:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x8048552:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x8048552:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x804855a:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x8048552:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x8048552:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048560:call   DWORD PTR ds:[esi]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x8048552:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x8048552:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x8048562 [from 0x8048560:call   DWORD PTR ds:[esi]]
    }
0x8048562:inc    edi
    ax = V172 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cx = V173 [from 0x8048560:call   DWORD PTR ds:[esi]]
    dx = V174 [from 0x8048560:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V175 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cs = V176 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ss = V177 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ds = V178 [from 0x8048560:call   DWORD PTR ds:[esi]]
    fs = V179 [from 0x8048560:call   DWORD PTR ds:[esi]]
    gs = V180 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cf = V181 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?1 = V182 [from 0x8048560:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V183 [from 0x8048560:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V184 [from 0x8048560:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V185 [from 0x8048560:call   DWORD PTR ds:[esi]]
    if = V186 [from 0x8048560:call   DWORD PTR ds:[esi]]
    df = V187 [from 0x8048560:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V188 [from 0x8048560:call   DWORD PTR ds:[esi]]
    iopl1 = V189 [from 0x8048560:call   DWORD PTR ds:[esi]]
    nt = V190 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?15 = V191 [from 0x8048560:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048563:sub    esi, 0x04
    ax = V172 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cx = V173 [from 0x8048560:call   DWORD PTR ds:[esi]]
    dx = V174 [from 0x8048560:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V175 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cs = V176 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ss = V177 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ds = V178 [from 0x8048560:call   DWORD PTR ds:[esi]]
    fs = V179 [from 0x8048560:call   DWORD PTR ds:[esi]]
    gs = V180 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V182 [from 0x8048560:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V183 [from 0x8048560:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V184 [from 0x8048560:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V185 [from 0x8048560:call   DWORD PTR ds:[esi]]
    if = V186 [from 0x8048560:call   DWORD PTR ds:[esi]]
    df = V187 [from 0x8048560:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V188 [from 0x8048560:call   DWORD PTR ds:[esi]]
    iopl1 = V189 [from 0x8048560:call   DWORD PTR ds:[esi]]
    nt = V190 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?15 = V191 [from 0x8048560:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0], edi
    ax = V172 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cx = V173 [from 0x8048560:call   DWORD PTR ds:[esi]]
    dx = V174 [from 0x8048560:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V175 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cs = V176 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ss = V177 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ds = V178 [from 0x8048560:call   DWORD PTR ds:[esi]]
    fs = V179 [from 0x8048560:call   DWORD PTR ds:[esi]]
    gs = V180 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V182 [from 0x8048560:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V183 [from 0x8048560:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V184 [from 0x8048560:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V185 [from 0x8048560:call   DWORD PTR ds:[esi]]
    if = V186 [from 0x8048560:call   DWORD PTR ds:[esi]]
    df = V187 [from 0x8048560:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V188 [from 0x8048560:call   DWORD PTR ds:[esi]]
    iopl1 = V189 [from 0x8048560:call   DWORD PTR ds:[esi]]
    nt = V190 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?15 = V191 [from 0x8048560:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048569:jne    0x08048560
    ax = V172 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cx = V173 [from 0x8048560:call   DWORD PTR ds:[esi]]
    dx = V174 [from 0x8048560:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V175 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cs = V176 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ss = V177 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ds = V178 [from 0x8048560:call   DWORD PTR ds:[esi]]
    fs = V179 [from 0x8048560:call   DWORD PTR ds:[esi]]
    gs = V180 [from 0x8048560:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V182 [from 0x8048560:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V183 [from 0x8048560:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V184 [from 0x8048560:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V185 [from 0x8048560:call   DWORD PTR ds:[esi]]
    if = V186 [from 0x8048560:call   DWORD PTR ds:[esi]]
    df = V187 [from 0x8048560:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V188 [from 0x8048560:call   DWORD PTR ds:[esi]]
    iopl1 = V189 [from 0x8048560:call   DWORD PTR ds:[esi]]
    nt = V190 [from 0x8048560:call   DWORD PTR ds:[esi]]
    ?15 = V191 [from 0x8048560:call   DWORD PTR ds:[esi]]
    memory =     <top>
==============================================
Constant propagation in function "signal@plt"
==============================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4]
    ax = V192
    cx = V193
    dx = V194
    bx = V195
    sp = V196
    bp = V197
    si = V198
    di = V199
    es = V200
    cs = V201
    ss = V202
    ds = V203
    fs = V204
    gs = V205
    cf = V206
    ?1 = V207
    pf = V208
    ?3 = V209
    af = V210
    ?5 = V211
    zf = V212
    sf = V213
    tf = V214
    if = V215
    df = V216
    of = V217
    iopl0 = V218
    iopl1 = V219
    nt = V220
    ?15 = V221
    memory = {}
==============================================
Constant propagation in function "puts@plt"
==============================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8]
    ax = V222
    cx = V223
    dx = V224
    bx = V225
    sp = V226
    bp = V227
    si = V228
    di = V229
    es = V230
    cs = V231
    ss = V232
    ds = V233
    fs = V234
    gs = V235
    cf = V236
    ?1 = V237
    pf = V238
    ?3 = V239
    af = V240
    ?5 = V241
    zf = V242
    sf = V243
    tf = V244
    if = V245
    df = V246
    of = V247
    iopl0 = V248
    iopl1 = V249
    nt = V250
    ?15 = V251
    memory = {}
==============================================
Constant propagation in function "__libc_start_main@plt"
==============================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc]
    ax = V252
    cx = V253
    dx = V254
    bx = V255
    sp = V256
    bp = V257
    si = V258
    di = V259
    es = V260
    cs = V261
    ss = V262
    ds = V263
    fs = V264
    gs = V265
    cf = V266
    ?1 = V267
    pf = V268
    ?3 = V269
    af = V270
    ?5 = V271
    zf = V272
    sf = V273
    tf = V274
    if = V275
    df = V276
    of = V277
    iopl0 = V278
    iopl1 = V279
    nt = V280
    ?15 = V281
    memory = {}
==============================================
Constant propagation in function "_exit@plt"
==============================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0]
    ax = V282
    cx = V283
    dx = V284
    bx = V285
    sp = V286
    bp = V287
    si = V288
    di = V289
    es = V290
    cs = V291
    ss = V292
    ds = V293
    fs = V294
    gs = V295
    cf = V296
    ?1 = V297
    pf = V298
    ?3 = V299
    af = V300
    ?5 = V301
    zf = V302
    sf = V303
    tf = V304
    if = V305
    df = V306
    of = V307
    iopl0 = V308
    iopl1 = V309
    nt = V310
    ?15 = V311
    memory = {}
==============================================
Constant propagation in function "__gmon_start__@plt"
==============================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4]
    ax = V312
    cx = V313
    dx = V314
    bx = V315
    sp = V316
    bp = V317
    si = V318
    di = V319
    es = V320
    cs = V321
    ss = V322
    ds = V323
    fs = V324
    gs = V325
    cf = V326
    ?1 = V327
    pf = V328
    ?3 = V329
    af = V330
    ?5 = V331
    zf = V332
    sf = V333
    tf = V334
    if = V335
    df = V336
    of = V337
    iopl0 = V338
    iopl1 = V339
    nt = V340
    ?15 = V341
    memory = {}
==============================================
Constant propagation in function "_start"
==============================================
0x8048340:xor    ebp, ebp
    ax = V342
    cx = V343
    dx = V344
    bx = V345
    sp = V346
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V347
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048340:xor    ebp, ebp]
    ?1 = V355
    pf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    sf = 0x0 [from 0x8048340:xor    ebp, ebp]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048340:xor    ebp, ebp]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {}
0x8048342:pop    esi
    ax = V342
    cx = V343
    dx = V344
    bx = V345
    sp = V346+0x4 [from 0x8048342:pop    esi]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048340:xor    ebp, ebp]
    ?1 = V355
    pf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    sf = 0x0 [from 0x8048340:xor    ebp, ebp]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048340:xor    ebp, ebp]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {}
0x8048343:mov    ecx, esp
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V346+0x4 [from 0x8048342:pop    esi]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048340:xor    ebp, ebp]
    ?1 = V355
    pf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = 0x1 (-0x1) [from 0x8048340:xor    ebp, ebp]
    sf = 0x0 [from 0x8048340:xor    ebp, ebp]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048340:xor    ebp, ebp]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {}
0x8048345:and    esp, 0xf0
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366 [from 0x8048345:and    esp, 0xf0]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {}
0x8048348:push   eax
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0x4 [from 0x8048348:push   eax]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x8048349:push   esp
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0x8 [from 0x8048349:push   esp]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0x8 [from 0x8048349:push   esp]; value=V366-0x4 [from 0x8048348:push   eax]
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x804834a:push   edx
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0xc [from 0x804834a:push   edx]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0xc [from 0x804834a:push   edx]; value=V344
        size=4; addr=V366-0x8 [from 0x8048349:push   esp]; value=V366-0x4 [from 0x8048348:push   eax]
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x804834b:push   0x08048520
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0x10 [from 0x804834b:push   0x08048520]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=V366-0xc [from 0x804834a:push   edx]; value=V344
        size=4; addr=V366-0x8 [from 0x8048349:push   esp]; value=V366-0x4 [from 0x8048348:push   eax]
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x8048350:push   0x080484b0
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0x14 [from 0x8048350:push   0x080484b0]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=V366-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=V366-0xc [from 0x804834a:push   edx]; value=V344
        size=4; addr=V366-0x8 [from 0x8048349:push   esp]; value=V366-0x4 [from 0x8048348:push   eax]
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x8048355:push   ecx
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0x18 [from 0x8048355:push   ecx]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0x18 [from 0x8048355:push   ecx]; value=V346+0x4 [from 0x8048342:pop    esi]
        size=4; addr=V366-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=V366-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=V366-0xc [from 0x804834a:push   edx]; value=V344
        size=4; addr=V366-0x8 [from 0x8048349:push   esp]; value=V366-0x4 [from 0x8048348:push   eax]
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x8048356:push   esi
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0x1c [from 0x8048356:push   esi]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0x1c [from 0x8048356:push   esi]; value=V365 [from 0x8048342:pop    esi]
        size=4; addr=V366-0x18 [from 0x8048355:push   ecx]; value=V346+0x4 [from 0x8048342:pop    esi]
        size=4; addr=V366-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=V366-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=V366-0xc [from 0x804834a:push   edx]; value=V344
        size=4; addr=V366-0x8 [from 0x8048349:push   esp]; value=V366-0x4 [from 0x8048348:push   eax]
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x8048357:push   0x08048410
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0x20 [from 0x8048357:push   0x08048410]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0x20 [from 0x8048357:push   0x08048410]; value=0x8048410 [from 0x8048357:push   0x08048410]
        size=4; addr=V366-0x1c [from 0x8048356:push   esi]; value=V365 [from 0x8048342:pop    esi]
        size=4; addr=V366-0x18 [from 0x8048355:push   ecx]; value=V346+0x4 [from 0x8048342:pop    esi]
        size=4; addr=V366-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=V366-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=V366-0xc [from 0x804834a:push   edx]; value=V344
        size=4; addr=V366-0x8 [from 0x8048349:push   esp]; value=V366-0x4 [from 0x8048348:push   eax]
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x804835c:call   0x08048310
    ax = V342
    cx = V346+0x4 [from 0x8048342:pop    esi]
    dx = V344
    bx = V345
    sp = V366-0x24 [from 0x804835c:call   0x08048310]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V349
    cs = V350
    ss = V351
    ds = V352
    fs = V353
    gs = V354
    cf = 0x0 [from 0x8048345:and    esp, 0xf0]
    ?1 = V355
    pf = -V367-0x1 [from 0x8048345:and    esp, 0xf0]
    ?3 = V356
    af = <top>
    ?5 = V357
    zf = V368 [from 0x8048345:and    esp, 0xf0]
    sf = V369 [from 0x8048345:and    esp, 0xf0]
    tf = V358
    if = V359
    df = V360
    of = 0x0 [from 0x8048345:and    esp, 0xf0]
    iopl0 = V361
    iopl1 = V362
    nt = V363
    ?15 = V364
    memory = {
        size=4; addr=V366-0x24 [from 0x804835c:call   0x08048310]; value=0x8048361 [from 0x804835c:call   0x08048310]
        size=4; addr=V366-0x20 [from 0x8048357:push   0x08048410]; value=0x8048410 [from 0x8048357:push   0x08048410]
        size=4; addr=V366-0x1c [from 0x8048356:push   esi]; value=V365 [from 0x8048342:pop    esi]
        size=4; addr=V366-0x18 [from 0x8048355:push   ecx]; value=V346+0x4 [from 0x8048342:pop    esi]
        size=4; addr=V366-0x14 [from 0x8048350:push   0x080484b0]; value=0x80484b0 [from 0x8048350:push   0x080484b0]
        size=4; addr=V366-0x10 [from 0x804834b:push   0x08048520]; value=0x8048520 [from 0x804834b:push   0x08048520]
        size=4; addr=V366-0xc [from 0x804834a:push   edx]; value=V344
        size=4; addr=V366-0x8 [from 0x8048349:push   esp]; value=V366-0x4 [from 0x8048348:push   eax]
        size=4; addr=V366-0x4 [from 0x8048348:push   eax]; value=V342
    }
0x8048361:hlt    
    ax = V370 [from 0x804835c:call   0x08048310]
    cx = V371 [from 0x804835c:call   0x08048310]
    dx = V372 [from 0x804835c:call   0x08048310]
    bx = V345
    sp = V366-0x20 [from 0x8048357:push   0x08048410]
    bp = 0x0 [from 0x8048340:xor    ebp, ebp]
    si = V365 [from 0x8048342:pop    esi]
    di = V348
    es = V373 [from 0x804835c:call   0x08048310]
    cs = V374 [from 0x804835c:call   0x08048310]
    ss = V375 [from 0x804835c:call   0x08048310]
    ds = V376 [from 0x804835c:call   0x08048310]
    fs = V377 [from 0x804835c:call   0x08048310]
    gs = V378 [from 0x804835c:call   0x08048310]
    cf = V379 [from 0x804835c:call   0x08048310]
    ?1 = V380 [from 0x804835c:call   0x08048310]
    pf = V381 [from 0x804835c:call   0x08048310]
    ?3 = V382 [from 0x804835c:call   0x08048310]
    af = V383 [from 0x804835c:call   0x08048310]
    ?5 = V384 [from 0x804835c:call   0x08048310]
    zf = V385 [from 0x804835c:call   0x08048310]
    sf = V386 [from 0x804835c:call   0x08048310]
    tf = V387 [from 0x804835c:call   0x08048310]
    if = V388 [from 0x804835c:call   0x08048310]
    df = V389 [from 0x804835c:call   0x08048310]
    of = V390 [from 0x804835c:call   0x08048310]
    iopl0 = V391 [from 0x804835c:call   0x08048310]
    iopl1 = V392 [from 0x804835c:call   0x08048310]
    nt = V393 [from 0x804835c:call   0x08048310]
    ?15 = V394 [from 0x804835c:call   0x08048310]
    memory = {}
==============================================
Constant propagation in function "0x8048362"
==============================================
0x8048362:nop    
    ax = V395
    cx = V396
    dx = V397
    bx = V398
    sp = V399
    bp = V400
    si = V401
    di = V402
    es = V403
    cs = V404
    ss = V405
    ds = V406
    fs = V407
    gs = V408
    cf = V409
    ?1 = V410
    pf = V411
    ?3 = V412
    af = V413
    ?5 = V414
    zf = V415
    sf = V416
    tf = V417
    if = V418
    df = V419
    of = V420
    iopl0 = V421
    iopl1 = V422
    nt = V423
    ?15 = V424
    memory = {}
0x8048363:nop    
    ax = V395
    cx = V396
    dx = V397
    bx = V398
    sp = V399
    bp = V400
    si = V401
    di = V402
    es = V403
    cs = V404
    ss = V405
    ds = V406
    fs = V407
    gs = V408
    cf = V409
    ?1 = V410
    pf = V411
    ?3 = V412
    af = V413
    ?5 = V414
    zf = V415
    sf = V416
    tf = V417
    if = V418
    df = V419
    of = V420
    iopl0 = V421
    iopl1 = V422
    nt = V423
    ?15 = V424
    memory = {}
==============================================
Constant propagation in function "call_gmon_start"
==============================================
0x8048364:push   ebp
    ax = V425
    cx = V426
    dx = V427
    bx = V428
    sp = V429-0x4 [from 0x8048364:push   ebp]
    bp = V430
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = V439
    ?1 = V440
    pf = V441
    ?3 = V442
    af = V443
    ?5 = V444
    zf = V445
    sf = V446
    tf = V447
    if = V448
    df = V449
    of = V450
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x8048365:mov    ebp, esp
    ax = V425
    cx = V426
    dx = V427
    bx = V428
    sp = V429-0x4 [from 0x8048364:push   ebp]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = V439
    ?1 = V440
    pf = V441
    ?3 = V442
    af = V443
    ?5 = V444
    zf = V445
    sf = V446
    tf = V447
    if = V448
    df = V449
    of = V450
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x8048367:push   ebx
    ax = V425
    cx = V426
    dx = V427
    bx = V428
    sp = V429-0x8 [from 0x8048367:push   ebx]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = V439
    ?1 = V440
    pf = V441
    ?3 = V442
    af = V443
    ?5 = V444
    zf = V445
    sf = V446
    tf = V447
    if = V448
    df = V449
    of = V450
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x8048368:push   ecx
    ax = V425
    cx = V426
    dx = V427
    bx = V428
    sp = V429-0xc [from 0x8048368:push   ecx]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = V439
    ?1 = V440
    pf = V441
    ?3 = V442
    af = V443
    ?5 = V444
    zf = V445
    sf = V446
    tf = V447
    if = V448
    df = V449
    of = V450
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0xc [from 0x8048368:push   ecx]; value=V426
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x8048369:call   0x0804836e
    ax = V425
    cx = V426
    dx = V427
    bx = V428
    sp = V429-0x10 [from 0x8048369:call   0x0804836e]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = V439
    ?1 = V440
    pf = V441
    ?3 = V442
    af = V443
    ?5 = V444
    zf = V445
    sf = V446
    tf = V447
    if = V448
    df = V449
    of = V450
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=V429-0xc [from 0x8048368:push   ecx]; value=V426
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x804836e:pop    ebx
    ax = V425
    cx = V426
    dx = V427
    bx = 0x804836e [from 0x8048369:call   0x0804836e]
    sp = V429-0xc [from 0x804836e:pop    ebx]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = V439
    ?1 = V440
    pf = V441
    ?3 = V442
    af = V443
    ?5 = V444
    zf = V445
    sf = V446
    tf = V447
    if = V448
    df = V449
    of = V450
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=V429-0xc [from 0x8048368:push   ecx]; value=V426
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x804836f:add    ebx, 0x0000135a
    ax = V425
    cx = V426
    dx = V427
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = V429-0xc [from 0x804836e:pop    ebx]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    ?1 = V440
    pf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    ?3 = V442
    af = 0x1 (-0x1) [from 0x804836f:add    ebx, 0x0000135a]
    ?5 = V444
    zf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    sf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    tf = V447
    if = V448
    df = V449
    of = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=V429-0xc [from 0x8048368:push   ecx]; value=V426
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]
    ax = V425
    cx = V426
    dx = V455 [from 0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]]
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = V429-0xc [from 0x804836e:pop    ebx]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    ?1 = V440
    pf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    ?3 = V442
    af = 0x1 (-0x1) [from 0x804836f:add    ebx, 0x0000135a]
    ?5 = V444
    zf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    sf = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    tf = V447
    if = V448
    df = V449
    of = 0x0 [from 0x804836f:add    ebx, 0x0000135a]
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=V429-0xc [from 0x8048368:push   ecx]; value=V426
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x804837b:test   edx, edx
    ax = V425
    cx = V426
    dx = V455 [from 0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]]
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = V429-0xc [from 0x804836e:pop    ebx]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = 0x0 [from 0x804837b:test   edx, edx]
    ?1 = V440
    pf = -V456-0x1 [from 0x804837b:test   edx, edx]
    ?3 = V442
    af = <top>
    ?5 = V444
    zf = V457 [from 0x804837b:test   edx, edx]
    sf = V458 [from 0x804837b:test   edx, edx]
    tf = V447
    if = V448
    df = V449
    of = 0x0 [from 0x804837b:test   edx, edx]
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=V429-0xc [from 0x8048368:push   ecx]; value=V426
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x804837d:je     0x08048384
    ax = V425
    cx = V426
    dx = V455 [from 0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]]
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = V429-0xc [from 0x804836e:pop    ebx]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = 0x0 [from 0x804837b:test   edx, edx]
    ?1 = V440
    pf = -V456-0x1 [from 0x804837b:test   edx, edx]
    ?3 = V442
    af = <top>
    ?5 = V444
    zf = V457 [from 0x804837b:test   edx, edx]
    sf = V458 [from 0x804837b:test   edx, edx]
    tf = V447
    if = V448
    df = V449
    of = 0x0 [from 0x804837b:test   edx, edx]
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x10 [from 0x8048369:call   0x0804836e]; value=0x804836e [from 0x8048369:call   0x0804836e]
        size=4; addr=V429-0xc [from 0x8048368:push   ecx]; value=V426
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x804837f:call   0x08048330
    ax = V425
    cx = V426
    dx = V455 [from 0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc]]
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = V429-0x10 [from 0x804837f:call   0x08048330]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V433
    cs = V434
    ss = V435
    ds = V436
    fs = V437
    gs = V438
    cf = 0x0 [from 0x804837b:test   edx, edx]
    ?1 = V440
    pf = -V456-0x1 [from 0x804837b:test   edx, edx]
    ?3 = V442
    af = <top>
    ?5 = V444
    zf = V457 [from 0x804837b:test   edx, edx]
    sf = V458 [from 0x804837b:test   edx, edx]
    tf = V447
    if = V448
    df = V449
    of = 0x0 [from 0x804837b:test   edx, edx]
    iopl0 = V451
    iopl1 = V452
    nt = V453
    ?15 = V454
    memory = {
        size=4; addr=V429-0x10 [from 0x804837f:call   0x08048330]; value=0x8048384 [from 0x804837f:call   0x08048330]
        size=4; addr=V429-0xc [from 0x8048368:push   ecx]; value=V426
        size=4; addr=V429-0x8 [from 0x8048367:push   ebx]; value=V428
        size=4; addr=V429-0x4 [from 0x8048364:push   ebp]; value=V430
    }
0x8048384:pop    eax
    ax = V459 [from 0x8048384:pop    eax]
    cx = V460
    dx = V461
    bx = 0x80496c8 [from 0x804836f:add    ebx, 0x0000135a]
    sp = V429-0x8 [from 0x8048384:pop    eax]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V462
    cs = V463
    ss = V464
    ds = V465
    fs = V466
    gs = V467
    cf = V468
    ?1 = V469
    pf = V470
    ?3 = V471
    af = V472 [from 0x804837f:call   0x08048330]
    ?5 = V473
    zf = V474
    sf = V475
    tf = V476
    if = V477
    df = V478
    of = V479
    iopl0 = V480
    iopl1 = V481
    nt = V482
    ?15 = V483
    memory = {}
0x8048385:pop    ebx
    ax = V459 [from 0x8048384:pop    eax]
    cx = V460
    dx = V461
    bx = V484 [from 0x8048385:pop    ebx]
    sp = V429-0x4 [from 0x8048385:pop    ebx]
    bp = V429-0x4 [from 0x8048364:push   ebp]
    si = V431
    di = V432
    es = V462
    cs = V463
    ss = V464
    ds = V465
    fs = V466
    gs = V467
    cf = V468
    ?1 = V469
    pf = V470
    ?3 = V471
    af = V472 [from 0x804837f:call   0x08048330]
    ?5 = V473
    zf = V474
    sf = V475
    tf = V476
    if = V477
    df = V478
    of = V479
    iopl0 = V480
    iopl1 = V481
    nt = V482
    ?15 = V483
    memory = {}
0x8048386:leave  
    ax = V459 [from 0x8048384:pop    eax]
    cx = V460
    dx = V461
    bx = V484 [from 0x8048385:pop    ebx]
    sp = V429 [from 0x8048386:leave  ]
    bp = V485 [from 0x8048386:leave  ]
    si = V431
    di = V432
    es = V462
    cs = V463
    ss = V464
    ds = V465
    fs = V466
    gs = V467
    cf = V468
    ?1 = V469
    pf = V470
    ?3 = V471
    af = V472 [from 0x804837f:call   0x08048330]
    ?5 = V473
    zf = V474
    sf = V475
    tf = V476
    if = V477
    df = V478
    of = V479
    iopl0 = V480
    iopl1 = V481
    nt = V482
    ?15 = V483
    memory = {}
0x8048387:ret    
    ax = V459 [from 0x8048384:pop    eax]
    cx = V460
    dx = V461
    bx = V484 [from 0x8048385:pop    ebx]
    sp = V429+0x4 [from 0x8048387:ret    ]
    bp = V485 [from 0x8048386:leave  ]
    si = V431
    di = V432
    es = V462
    cs = V463
    ss = V464
    ds = V465
    fs = V466
    gs = V467
    cf = V468
    ?1 = V469
    pf = V470
    ?3 = V471
    af = V472 [from 0x804837f:call   0x08048330]
    ?5 = V473
    zf = V474
    sf = V475
    tf = V476
    if = V477
    df = V478
    of = V479
    iopl0 = V480
    iopl1 = V481
    nt = V482
    ?15 = V483
    memory = {}
==============================================
Constant propagation in function "0x8048388"
==============================================
0x8048388:nop    
    ax = V486
    cx = V487
    dx = V488
    bx = V489
    sp = V490
    bp = V491
    si = V492
    di = V493
    es = V494
    cs = V495
    ss = V496
    ds = V497
    fs = V498
    gs = V499
    cf = V500
    ?1 = V501
    pf = V502
    ?3 = V503
    af = V504
    ?5 = V505
    zf = V506
    sf = V507
    tf = V508
    if = V509
    df = V510
    of = V511
    iopl0 = V512
    iopl1 = V513
    nt = V514
    ?15 = V515
    memory = {}
0x8048389:nop    
    ax = V486
    cx = V487
    dx = V488
    bx = V489
    sp = V490
    bp = V491
    si = V492
    di = V493
    es = V494
    cs = V495
    ss = V496
    ds = V497
    fs = V498
    gs = V499
    cf = V500
    ?1 = V501
    pf = V502
    ?3 = V503
    af = V504
    ?5 = V505
    zf = V506
    sf = V507
    tf = V508
    if = V509
    df = V510
    of = V511
    iopl0 = V512
    iopl1 = V513
    nt = V514
    ?15 = V515
    memory = {}
0x804838a:nop    
    ax = V486
    cx = V487
    dx = V488
    bx = V489
    sp = V490
    bp = V491
    si = V492
    di = V493
    es = V494
    cs = V495
    ss = V496
    ds = V497
    fs = V498
    gs = V499
    cf = V500
    ?1 = V501
    pf = V502
    ?3 = V503
    af = V504
    ?5 = V505
    zf = V506
    sf = V507
    tf = V508
    if = V509
    df = V510
    of = V511
    iopl0 = V512
    iopl1 = V513
    nt = V514
    ?15 = V515
    memory = {}
0x804838b:nop    
    ax = V486
    cx = V487
    dx = V488
    bx = V489
    sp = V490
    bp = V491
    si = V492
    di = V493
    es = V494
    cs = V495
    ss = V496
    ds = V497
    fs = V498
    gs = V499
    cf = V500
    ?1 = V501
    pf = V502
    ?3 = V503
    af = V504
    ?5 = V505
    zf = V506
    sf = V507
    tf = V508
    if = V509
    df = V510
    of = V511
    iopl0 = V512
    iopl1 = V513
    nt = V514
    ?15 = V515
    memory = {}
0x804838c:nop    
    ax = V486
    cx = V487
    dx = V488
    bx = V489
    sp = V490
    bp = V491
    si = V492
    di = V493
    es = V494
    cs = V495
    ss = V496
    ds = V497
    fs = V498
    gs = V499
    cf = V500
    ?1 = V501
    pf = V502
    ?3 = V503
    af = V504
    ?5 = V505
    zf = V506
    sf = V507
    tf = V508
    if = V509
    df = V510
    of = V511
    iopl0 = V512
    iopl1 = V513
    nt = V514
    ?15 = V515
    memory = {}
0x804838d:nop    
    ax = V486
    cx = V487
    dx = V488
    bx = V489
    sp = V490
    bp = V491
    si = V492
    di = V493
    es = V494
    cs = V495
    ss = V496
    ds = V497
    fs = V498
    gs = V499
    cf = V500
    ?1 = V501
    pf = V502
    ?3 = V503
    af = V504
    ?5 = V505
    zf = V506
    sf = V507
    tf = V508
    if = V509
    df = V510
    of = V511
    iopl0 = V512
    iopl1 = V513
    nt = V514
    ?15 = V515
    memory = {}
0x804838e:nop    
    ax = V486
    cx = V487
    dx = V488
    bx = V489
    sp = V490
    bp = V491
    si = V492
    di = V493
    es = V494
    cs = V495
    ss = V496
    ds = V497
    fs = V498
    gs = V499
    cf = V500
    ?1 = V501
    pf = V502
    ?3 = V503
    af = V504
    ?5 = V505
    zf = V506
    sf = V507
    tf = V508
    if = V509
    df = V510
    of = V511
    iopl0 = V512
    iopl1 = V513
    nt = V514
    ?15 = V515
    memory = {}
0x804838f:nop    
    ax = V486
    cx = V487
    dx = V488
    bx = V489
    sp = V490
    bp = V491
    si = V492
    di = V493
    es = V494
    cs = V495
    ss = V496
    ds = V497
    fs = V498
    gs = V499
    cf = V500
    ?1 = V501
    pf = V502
    ?3 = V503
    af = V504
    ?5 = V505
    zf = V506
    sf = V507
    tf = V508
    if = V509
    df = V510
    of = V511
    iopl0 = V512
    iopl1 = V513
    nt = V514
    ?15 = V515
    memory = {}
==============================================
Constant propagation in function "__do_global_dtors_aux"
==============================================
0x8048390:push   ebp
    ax = V516
    cx = V517
    dx = V518
    bx = V519
    sp = V520-0x4 [from 0x8048390:push   ebp]
    bp = V521
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = V530
    ?1 = V531
    pf = V532
    ?3 = V533
    af = V534
    ?5 = V535
    zf = V536
    sf = V537
    tf = V538
    if = V539
    df = V540
    of = V541
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x8048391:mov    ebp, esp
    ax = V516
    cx = V517
    dx = V518
    bx = V519
    sp = V520-0x4 [from 0x8048390:push   ebp]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = V530
    ?1 = V531
    pf = V532
    ?3 = V533
    af = V534
    ?5 = V535
    zf = V536
    sf = V537
    tf = V538
    if = V539
    df = V540
    of = V541
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x8048393:sub    esp, 0x08
    ax = V516
    cx = V517
    dx = V518
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = -V546-0x1 [from 0x8048393:sub    esp, 0x08]
    ?1 = V531
    pf = -V547-0x1 [from 0x8048393:sub    esp, 0x08]
    ?3 = V533
    af = -V548-0x1 [from 0x8048393:sub    esp, 0x08]
    ?5 = V535
    zf = V549 [from 0x8048393:sub    esp, 0x08]
    sf = V550 [from 0x8048393:sub    esp, 0x08]
    tf = V538
    if = V539
    df = V540
    of = V551 [from 0x8048393:sub    esp, 0x08]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00
    ax = V516
    cx = V517
    dx = V518
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = -V552-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?1 = V531
    pf = -V553-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?3 = V533
    af = -V554-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = V535
    zf = V555 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    sf = V556 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    tf = V538
    if = V539
    df = V540
    of = V557 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x804839d:jne    0x080483cc
    ax = V516
    cx = V517
    dx = V518
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = -V552-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?1 = V531
    pf = -V553-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?3 = V533
    af = -V554-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = V535
    zf = V555 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    sf = V556 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    tf = V538
    if = V539
    df = V540
    of = V557 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]
    ax = V558 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = V517
    dx = V518
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = -V552-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?1 = V531
    pf = -V553-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?3 = V533
    af = -V554-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = V535
    zf = V555 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    sf = V556 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    tf = V538
    if = V539
    df = V540
    of = V557 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    ax = V558 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = V517
    dx = V559 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = -V552-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?1 = V531
    pf = -V553-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?3 = V533
    af = -V554-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = V535
    zf = V555 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    sf = V556 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    tf = V538
    if = V539
    df = V540
    of = V557 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x80483a6:test   edx, edx
    ax = V558 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = V517
    dx = V559 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = 0x0 [from 0x80483a6:test   edx, edx]
    ?1 = V531
    pf = -V560-0x1 [from 0x80483a6:test   edx, edx]
    ?3 = V533
    af = <top>
    ?5 = V535
    zf = V561 [from 0x80483a6:test   edx, edx]
    sf = V562 [from 0x80483a6:test   edx, edx]
    tf = V538
    if = V539
    df = V540
    of = 0x0 [from 0x80483a6:test   edx, edx]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x80483a8:je     0x080483c5
    ax = V558 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = V517
    dx = V559 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = 0x0 [from 0x80483a6:test   edx, edx]
    ?1 = V531
    pf = -V560-0x1 [from 0x80483a6:test   edx, edx]
    ?3 = V533
    af = <top>
    ?5 = V535
    zf = V561 [from 0x80483a6:test   edx, edx]
    sf = V562 [from 0x80483a6:test   edx, edx]
    tf = V538
    if = V539
    df = V540
    of = 0x0 [from 0x80483a6:test   edx, edx]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x80483aa:lea    esi, [esi + 0x00000000]
    ax = V558 [from 0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]]
    cx = V517
    dx = V559 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = 0x0 [from 0x80483a6:test   edx, edx]
    ?1 = V531
    pf = -V560-0x1 [from 0x80483a6:test   edx, edx]
    ?3 = V533
    af = <top>
    ?5 = V535
    zf = V561 [from 0x80483a6:test   edx, edx]
    sf = V562 [from 0x80483a6:test   edx, edx]
    tf = V538
    if = V539
    df = V540
    of = 0x0 [from 0x80483a6:test   edx, edx]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x80483b0:add    eax, 0x04
    ax = V558+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = V517
    dx = V559 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = V563 [from 0x80483b0:add    eax, 0x04]
    ?1 = V531
    pf = -V564-0x1 [from 0x80483b0:add    eax, 0x04]
    ?3 = V533
    af = V565 [from 0x80483b0:add    eax, 0x04]
    ?5 = V535
    zf = V566 [from 0x80483b0:add    eax, 0x04]
    sf = V567 [from 0x80483b0:add    eax, 0x04]
    tf = V538
    if = V539
    df = V540
    of = V568 [from 0x80483b0:add    eax, 0x04]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x4 [from 0x8048390:push   ebp]; value=V521
    }
0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax
    ax = V558+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = V517
    dx = V559 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = V563 [from 0x80483b0:add    eax, 0x04]
    ?1 = V531
    pf = -V564-0x1 [from 0x80483b0:add    eax, 0x04]
    ?3 = V533
    af = V565 [from 0x80483b0:add    eax, 0x04]
    ?5 = V535
    zf = V566 [from 0x80483b0:add    eax, 0x04]
    sf = V567 [from 0x80483b0:add    eax, 0x04]
    tf = V538
    if = V539
    df = V540
    of = V568 [from 0x80483b0:add    eax, 0x04]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=0x80496f0 [from 0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax]; value=V558+0x4 [from 0x80483b0:add    eax, 0x04]
    }
0x80483b8:call   edx
    ax = V558+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = V517
    dx = V559 [from 0x80483a4:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0x10 [from 0x80483b8:call   edx]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = V523
    es = V524
    cs = V525
    ss = V526
    ds = V527
    fs = V528
    gs = V529
    cf = V563 [from 0x80483b0:add    eax, 0x04]
    ?1 = V531
    pf = -V564-0x1 [from 0x80483b0:add    eax, 0x04]
    ?3 = V533
    af = V565 [from 0x80483b0:add    eax, 0x04]
    ?5 = V535
    zf = V566 [from 0x80483b0:add    eax, 0x04]
    sf = V567 [from 0x80483b0:add    eax, 0x04]
    tf = V538
    if = V539
    df = V540
    of = V568 [from 0x80483b0:add    eax, 0x04]
    iopl0 = V542
    iopl1 = V543
    nt = V544
    ?15 = V545
    memory = {
        size=4; addr=V520-0x10 [from 0x80483b8:call   edx]; value=0x80483ba [from 0x80483b8:call   edx]
    }
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0]
    ax = V558+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = V569 [from 0x80483b8:call   edx]
    dx = V570 [from 0x80483b8:call   edx]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = V523
    es = V571 [from 0x80483b8:call   edx]
    cs = V572 [from 0x80483b8:call   edx]
    ss = V573 [from 0x80483b8:call   edx]
    ds = V574 [from 0x80483b8:call   edx]
    fs = V575 [from 0x80483b8:call   edx]
    gs = V576 [from 0x80483b8:call   edx]
    cf = V577 [from 0x80483b8:call   edx]
    ?1 = V578 [from 0x80483b8:call   edx]
    pf = V579 [from 0x80483b8:call   edx]
    ?3 = V580 [from 0x80483b8:call   edx]
    af = V581 [from 0x80483b8:call   edx]
    ?5 = V582 [from 0x80483b8:call   edx]
    zf = V583 [from 0x80483b8:call   edx]
    sf = V584 [from 0x80483b8:call   edx]
    tf = V585 [from 0x80483b8:call   edx]
    if = V586 [from 0x80483b8:call   edx]
    df = V587 [from 0x80483b8:call   edx]
    of = V588 [from 0x80483b8:call   edx]
    iopl0 = V589 [from 0x80483b8:call   edx]
    iopl1 = V590 [from 0x80483b8:call   edx]
    nt = V591 [from 0x80483b8:call   edx]
    ?15 = V592 [from 0x80483b8:call   edx]
    memory = {
        size=4; addr=0x80496f0 [from 0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax]; value=V558+0x4 [from 0x80483b0:add    eax, 0x04]
    }
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    ax = V558+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = V569 [from 0x80483b8:call   edx]
    dx = V593 [from 0x80483bf:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = V523
    es = V571 [from 0x80483b8:call   edx]
    cs = V572 [from 0x80483b8:call   edx]
    ss = V573 [from 0x80483b8:call   edx]
    ds = V574 [from 0x80483b8:call   edx]
    fs = V575 [from 0x80483b8:call   edx]
    gs = V576 [from 0x80483b8:call   edx]
    cf = V577 [from 0x80483b8:call   edx]
    ?1 = V578 [from 0x80483b8:call   edx]
    pf = V579 [from 0x80483b8:call   edx]
    ?3 = V580 [from 0x80483b8:call   edx]
    af = V581 [from 0x80483b8:call   edx]
    ?5 = V582 [from 0x80483b8:call   edx]
    zf = V583 [from 0x80483b8:call   edx]
    sf = V584 [from 0x80483b8:call   edx]
    tf = V585 [from 0x80483b8:call   edx]
    if = V586 [from 0x80483b8:call   edx]
    df = V587 [from 0x80483b8:call   edx]
    of = V588 [from 0x80483b8:call   edx]
    iopl0 = V589 [from 0x80483b8:call   edx]
    iopl1 = V590 [from 0x80483b8:call   edx]
    nt = V591 [from 0x80483b8:call   edx]
    ?15 = V592 [from 0x80483b8:call   edx]
    memory = {
        size=4; addr=0x80496f0 [from 0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax]; value=V558+0x4 [from 0x80483b0:add    eax, 0x04]
    }
0x80483c1:test   edx, edx
    ax = V558+0x4 [from 0x80483b0:add    eax, 0x04]
    cx = V569 [from 0x80483b8:call   edx]
    dx = V593 [from 0x80483bf:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = V523
    es = V571 [from 0x80483b8:call   edx]
    cs = V572 [from 0x80483b8:call   edx]
    ss = V573 [from 0x80483b8:call   edx]
    ds = V574 [from 0x80483b8:call   edx]
    fs = V575 [from 0x80483b8:call   edx]
    gs = V576 [from 0x80483b8:call   edx]
    cf = 0x0 [from 0x80483c1:test   edx, edx]
    ?1 = V578 [from 0x80483b8:call   edx]
    pf = -V594-0x1 [from 0x80483c1:test   edx, edx]
    ?3 = V580 [from 0x80483b8:call   edx]
    af = <top>
    ?5 = V582 [from 0x80483b8:call   edx]
    zf = V595 [from 0x80483c1:test   edx, edx]
    sf = V596 [from 0x80483c1:test   edx, edx]
    tf = V585 [from 0x80483b8:call   edx]
    if = V586 [from 0x80483b8:call   edx]
    df = V587 [from 0x80483b8:call   edx]
    of = 0x0 [from 0x80483c1:test   edx, edx]
    iopl0 = V589 [from 0x80483b8:call   edx]
    iopl1 = V590 [from 0x80483b8:call   edx]
    nt = V591 [from 0x80483b8:call   edx]
    ?15 = V592 [from 0x80483b8:call   edx]
    memory = {
        size=4; addr=0x80496f0 [from 0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax]; value=V558+0x4 [from 0x80483b0:add    eax, 0x04]
    }
0x80483c3:jne    0x080483b0
    ax = V597
    cx = V569 [from 0x80483b8:call   edx]
    dx = V593 [from 0x80483bf:mov    edx, DWORD PTR ds:[eax]]
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522 [from 0x80483aa:lea    esi, [esi + 0x00000000]]
    di = V523
    es = V571 [from 0x80483b8:call   edx]
    cs = V572 [from 0x80483b8:call   edx]
    ss = V573 [from 0x80483b8:call   edx]
    ds = V574 [from 0x80483b8:call   edx]
    fs = V575 [from 0x80483b8:call   edx]
    gs = V576 [from 0x80483b8:call   edx]
    cf = 0x0 [from 0x80483c1:test   edx, edx]
    ?1 = V578 [from 0x80483b8:call   edx]
    pf = -V594-0x1 [from 0x80483c1:test   edx, edx]
    ?3 = V580 [from 0x80483b8:call   edx]
    af = <top>
    ?5 = V582 [from 0x80483b8:call   edx]
    zf = V595 [from 0x80483c1:test   edx, edx]
    sf = V596 [from 0x80483c1:test   edx, edx]
    tf = V585 [from 0x80483b8:call   edx]
    if = V586 [from 0x80483b8:call   edx]
    df = V587 [from 0x80483b8:call   edx]
    of = 0x0 [from 0x80483c1:test   edx, edx]
    iopl0 = V589 [from 0x80483b8:call   edx]
    iopl1 = V590 [from 0x80483b8:call   edx]
    nt = V591 [from 0x80483b8:call   edx]
    ?15 = V592 [from 0x80483b8:call   edx]
    memory = {}
0x80483c5:mov    BYTE PTR ds:[0x080496f4], 0x01
    ax = V598
    cx = V599
    dx = V600
    bx = V519
    sp = V520-0xc [from 0x8048393:sub    esp, 0x08]
    bp = V520-0x4 [from 0x8048390:push   ebp]
    si = V522
    di = V523
    es = V601
    cs = V602
    ss = V603
    ds = V604
    fs = V605
    gs = V606
    cf = 0x0 [from 0x80483a6:test   edx, edx]
    ?1 = V607
    pf = V608
    ?3 = V609
    af = <top>
    ?5 = V610
    zf = V611
    sf = V612
    tf = V613
    if = V614
    df = V615
    of = 0x0 [from 0x80483a6:test   edx, edx]
    iopl0 = V616
    iopl1 = V617
    nt = V618
    ?15 = V619
    memory = {
        size=1; addr=0x80496f4 [from 0x80483c5:mov    BYTE PTR ds:[0x080496f4], 0x01]; value=0x1 [from 0x80483c5:mov    BYTE PTR ds:[0x080496f4], 0x01]
    }
0x80483cc:leave  
    ax = V620
    cx = V621
    dx = V622
    bx = V519
    sp = V520 [from 0x80483cc:leave  ]
    bp = V623 [from 0x80483cc:leave  ]
    si = V522
    di = V523
    es = V624
    cs = V625
    ss = V626
    ds = V627
    fs = V628
    gs = V629
    cf = V630
    ?1 = V631
    pf = V632
    ?3 = V633
    af = -V554-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = V634
    zf = V635
    sf = V636
    tf = V637
    if = V638
    df = V639
    of = V640
    iopl0 = V641
    iopl1 = V642
    nt = V643
    ?15 = V644
    memory = {}
0x80483cd:ret    
    ax = V620
    cx = V621
    dx = V622
    bx = V519
    sp = V520+0x4 [from 0x80483cd:ret    ]
    bp = V623 [from 0x80483cc:leave  ]
    si = V522
    di = V523
    es = V624
    cs = V625
    ss = V626
    ds = V627
    fs = V628
    gs = V629
    cf = V630
    ?1 = V631
    pf = V632
    ?3 = V633
    af = -V554-0x1 [from 0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00]
    ?5 = V634
    zf = V635
    sf = V636
    tf = V637
    if = V638
    df = V639
    of = V640
    iopl0 = V641
    iopl1 = V642
    nt = V643
    ?15 = V644
    memory = {}
==============================================
Constant propagation in function "frame_dummy"
==============================================
0x80483d0:push   ebp
    ax = V645
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0x4 [from 0x80483d0:push   ebp]
    bp = V650
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = V659
    ?1 = V660
    pf = V661
    ?3 = V662
    af = V663
    ?5 = V664
    zf = V665
    sf = V666
    tf = V667
    if = V668
    df = V669
    of = V670
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x80483d1:mov    ebp, esp
    ax = V645
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0x4 [from 0x80483d0:push   ebp]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = V659
    ?1 = V660
    pf = V661
    ?3 = V662
    af = V663
    ?5 = V664
    zf = V665
    sf = V666
    tf = V667
    if = V668
    df = V669
    of = V670
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x80483d3:sub    esp, 0x08
    ax = V645
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = -V675-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?1 = V660
    pf = -V676-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?3 = V662
    af = -V677-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?5 = V664
    zf = V678 [from 0x80483d3:sub    esp, 0x08]
    sf = V679 [from 0x80483d3:sub    esp, 0x08]
    tf = V667
    if = V668
    df = V669
    of = V680 [from 0x80483d3:sub    esp, 0x08]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]
    ax = V681 [from 0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]]
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = -V675-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?1 = V660
    pf = -V676-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?3 = V662
    af = -V677-0x1 [from 0x80483d3:sub    esp, 0x08]
    ?5 = V664
    zf = V678 [from 0x80483d3:sub    esp, 0x08]
    sf = V679 [from 0x80483d3:sub    esp, 0x08]
    tf = V667
    if = V668
    df = V669
    of = V680 [from 0x80483d3:sub    esp, 0x08]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x80483db:test   eax, eax
    ax = V681 [from 0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]]
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = V660
    pf = -V682-0x1 [from 0x80483db:test   eax, eax]
    ?3 = V662
    af = <top>
    ?5 = V664
    zf = V683 [from 0x80483db:test   eax, eax]
    sf = V684 [from 0x80483db:test   eax, eax]
    tf = V667
    if = V668
    df = V669
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x80483dd:je     0x08048400
    ax = V681 [from 0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]]
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = V660
    pf = -V682-0x1 [from 0x80483db:test   eax, eax]
    ?3 = V662
    af = <top>
    ?5 = V664
    zf = V683 [from 0x80483db:test   eax, eax]
    sf = V684 [from 0x80483db:test   eax, eax]
    tf = V667
    if = V668
    df = V669
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x80483df:mov    eax, 0x00000000
    ax = 0x0 [from 0x80483df:mov    eax, 0x00000000]
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = V660
    pf = -V682-0x1 [from 0x80483db:test   eax, eax]
    ?3 = V662
    af = <top>
    ?5 = V664
    zf = V683 [from 0x80483db:test   eax, eax]
    sf = V684 [from 0x80483db:test   eax, eax]
    tf = V667
    if = V668
    df = V669
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x80483e4:test   eax, eax
    ax = 0x0 [from 0x80483df:mov    eax, 0x00000000]
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = 0x0 [from 0x80483e4:test   eax, eax]
    ?1 = V660
    pf = 0x1 (-0x1) [from 0x80483e4:test   eax, eax]
    ?3 = V662
    af = <top>
    ?5 = V664
    zf = 0x1 (-0x1) [from 0x80483e4:test   eax, eax]
    sf = 0x0 [from 0x80483e4:test   eax, eax]
    tf = V667
    if = V668
    df = V669
    of = 0x0 [from 0x80483e4:test   eax, eax]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x80483e6:je     0x08048400
    ax = 0x0 [from 0x80483df:mov    eax, 0x00000000]
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0xc [from 0x80483d3:sub    esp, 0x08]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = 0x0 [from 0x80483e4:test   eax, eax]
    ?1 = V660
    pf = 0x1 (-0x1) [from 0x80483e4:test   eax, eax]
    ?3 = V662
    af = <top>
    ?5 = V664
    zf = 0x1 (-0x1) [from 0x80483e4:test   eax, eax]
    sf = 0x0 [from 0x80483e4:test   eax, eax]
    tf = V667
    if = V668
    df = V669
    of = 0x0 [from 0x80483e4:test   eax, eax]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {
        size=4; addr=V649-0x4 [from 0x80483d0:push   ebp]; value=V650
    }
0x8048400:mov    esp, ebp
    ax = V685
    cx = V646
    dx = V647
    bx = V648
    sp = V649-0x4 [from 0x80483d0:push   ebp]
    bp = V649-0x4 [from 0x80483d0:push   ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = V660
    pf = V686
    ?3 = V662
    af = <top>
    ?5 = V664
    zf = V687
    sf = V688
    tf = V667
    if = V668
    df = V669
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {}
0x8048402:pop    ebp
    ax = V685
    cx = V646
    dx = V647
    bx = V648
    sp = V649 [from 0x8048402:pop    ebp]
    bp = V689 [from 0x8048402:pop    ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = V660
    pf = V686
    ?3 = V662
    af = <top>
    ?5 = V664
    zf = V687
    sf = V688
    tf = V667
    if = V668
    df = V669
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {}
0x8048403:ret    
    ax = V685
    cx = V646
    dx = V647
    bx = V648
    sp = V649+0x4 [from 0x8048403:ret    ]
    bp = V689 [from 0x8048402:pop    ebp]
    si = V651
    di = V652
    es = V653
    cs = V654
    ss = V655
    ds = V656
    fs = V657
    gs = V658
    cf = 0x0 [from 0x80483db:test   eax, eax]
    ?1 = V660
    pf = V686
    ?3 = V662
    af = <top>
    ?5 = V664
    zf = V687
    sf = V688
    tf = V667
    if = V668
    df = V669
    of = 0x0 [from 0x80483db:test   eax, eax]
    iopl0 = V671
    iopl1 = V672
    nt = V673
    ?15 = V674
    memory = {}
==============================================
Constant propagation in function "0x8048404"
==============================================
0x8048404:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x8048405:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x8048406:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x8048407:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x8048408:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x8048409:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x804840a:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x804840b:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x804840c:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x804840d:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x804840e:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
0x804840f:nop    
    ax = V690
    cx = V691
    dx = V692
    bx = V693
    sp = V694
    bp = V695
    si = V696
    di = V697
    es = V698
    cs = V699
    ss = V700
    ds = V701
    fs = V702
    gs = V703
    cf = V704
    ?1 = V705
    pf = V706
    ?3 = V707
    af = V708
    ?5 = V709
    zf = V710
    sf = V711
    tf = V712
    if = V713
    df = V714
    of = V715
    iopl0 = V716
    iopl1 = V717
    nt = V718
    ?15 = V719
    memory = {}
==============================================
Constant propagation in function "main"
==============================================
0x8048410:push   ebp
    ax = V720
    cx = V721
    dx = V722
    bx = V723
    sp = V724-0x4 [from 0x8048410:push   ebp]
    bp = V725
    si = V726
    di = V727
    es = V728
    cs = V729
    ss = V730
    ds = V731
    fs = V732
    gs = V733
    cf = V734
    ?1 = V735
    pf = V736
    ?3 = V737
    af = V738
    ?5 = V739
    zf = V740
    sf = V741
    tf = V742
    if = V743
    df = V744
    of = V745
    iopl0 = V746
    iopl1 = V747
    nt = V748
    ?15 = V749
    memory = {
        size=4; addr=V724-0x4 [from 0x8048410:push   ebp]; value=V725
    }
0x8048411:mov    edx, 0x08048480
    ax = V720
    cx = V721
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = V723
    sp = V724-0x4 [from 0x8048410:push   ebp]
    bp = V725
    si = V726
    di = V727
    es = V728
    cs = V729
    ss = V730
    ds = V731
    fs = V732
    gs = V733
    cf = V734
    ?1 = V735
    pf = V736
    ?3 = V737
    af = V738
    ?5 = V739
    zf = V740
    sf = V741
    tf = V742
    if = V743
    df = V744
    of = V745
    iopl0 = V746
    iopl1 = V747
    nt = V748
    ?15 = V749
    memory = {
        size=4; addr=V724-0x4 [from 0x8048410:push   ebp]; value=V725
    }
0x8048416:mov    ebp, esp
    ax = V720
    cx = V721
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = V723
    sp = V724-0x4 [from 0x8048410:push   ebp]
    bp = V724-0x4 [from 0x8048410:push   ebp]
    si = V726
    di = V727
    es = V728
    cs = V729
    ss = V730
    ds = V731
    fs = V732
    gs = V733
    cf = V734
    ?1 = V735
    pf = V736
    ?3 = V737
    af = V738
    ?5 = V739
    zf = V740
    sf = V741
    tf = V742
    if = V743
    df = V744
    of = V745
    iopl0 = V746
    iopl1 = V747
    nt = V748
    ?15 = V749
    memory = {
        size=4; addr=V724-0x4 [from 0x8048410:push   ebp]; value=V725
    }
0x8048418:sub    esp, 0x08
    ax = V720
    cx = V721
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = V723
    sp = V724-0xc [from 0x8048418:sub    esp, 0x08]
    bp = V724-0x4 [from 0x8048410:push   ebp]
    si = V726
    di = V727
    es = V728
    cs = V729
    ss = V730
    ds = V731
    fs = V732
    gs = V733
    cf = -V750-0x1 [from 0x8048418:sub    esp, 0x08]
    ?1 = V735
    pf = -V751-0x1 [from 0x8048418:sub    esp, 0x08]
    ?3 = V737
    af = -V752-0x1 [from 0x8048418:sub    esp, 0x08]
    ?5 = V739
    zf = V753 [from 0x8048418:sub    esp, 0x08]
    sf = V754 [from 0x8048418:sub    esp, 0x08]
    tf = V742
    if = V743
    df = V744
    of = V755 [from 0x8048418:sub    esp, 0x08]
    iopl0 = V746
    iopl1 = V747
    nt = V748
    ?15 = V749
    memory = {
        size=4; addr=V724-0x4 [from 0x8048410:push   ebp]; value=V725
    }
0x804841b:and    esp, 0xf0
    ax = V720
    cx = V721
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = V723
    sp = V756 [from 0x804841b:and    esp, 0xf0]
    bp = V724-0x4 [from 0x8048410:push   ebp]
    si = V726
    di = V727
    es = V728
    cs = V729
    ss = V730
    ds = V731
    fs = V732
    gs = V733
    cf = 0x0 [from 0x804841b:and    esp, 0xf0]
    ?1 = V735
    pf = -V757-0x1 [from 0x804841b:and    esp, 0xf0]
    ?3 = V737
    af = <top>
    ?5 = V739
    zf = V758 [from 0x804841b:and    esp, 0xf0]
    sf = V759 [from 0x804841b:and    esp, 0xf0]
    tf = V742
    if = V743
    df = V744
    of = 0x0 [from 0x804841b:and    esp, 0xf0]
    iopl0 = V746
    iopl1 = V747
    nt = V748
    ?15 = V749
    memory = {
        size=4; addr=V724-0x4 [from 0x8048410:push   ebp]; value=V725
    }
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    ax = V720
    cx = V721
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = V723
    sp = V756 [from 0x804841b:and    esp, 0xf0]
    bp = V724-0x4 [from 0x8048410:push   ebp]
    si = V726
    di = V727
    es = V728
    cs = V729
    ss = V730
    ds = V731
    fs = V732
    gs = V733
    cf = 0x0 [from 0x804841b:and    esp, 0xf0]
    ?1 = V735
    pf = -V757-0x1 [from 0x804841b:and    esp, 0xf0]
    ?3 = V737
    af = <top>
    ?5 = V739
    zf = V758 [from 0x804841b:and    esp, 0xf0]
    sf = V759 [from 0x804841b:and    esp, 0xf0]
    tf = V742
    if = V743
    df = V744
    of = 0x0 [from 0x804841b:and    esp, 0xf0]
    iopl0 = V746
    iopl1 = V747
    nt = V748
    ?15 = V749
    memory = {
        size=4; addr=V756+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    ax = V720
    cx = V721
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = V723
    sp = V756 [from 0x804841b:and    esp, 0xf0]
    bp = V724-0x4 [from 0x8048410:push   ebp]
    si = V726
    di = V727
    es = V728
    cs = V729
    ss = V730
    ds = V731
    fs = V732
    gs = V733
    cf = 0x0 [from 0x804841b:and    esp, 0xf0]
    ?1 = V735
    pf = -V757-0x1 [from 0x804841b:and    esp, 0xf0]
    ?3 = V737
    af = <top>
    ?5 = V739
    zf = V758 [from 0x804841b:and    esp, 0xf0]
    sf = V759 [from 0x804841b:and    esp, 0xf0]
    tf = V742
    if = V743
    df = V744
    of = 0x0 [from 0x804841b:and    esp, 0xf0]
    iopl0 = V746
    iopl1 = V747
    nt = V748
    ?15 = V749
    memory = {
        size=4; addr=V756 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=V756+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048429:call   0x080482f0
    ax = V720
    cx = V721
    dx = 0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    bx = V723
    sp = V756-0x4 [from 0x8048429:call   0x080482f0]
    bp = V724-0x4 [from 0x8048410:push   ebp]
    si = V726
    di = V727
    es = V728
    cs = V729
    ss = V730
    ds = V731
    fs = V732
    gs = V733
    cf = 0x0 [from 0x804841b:and    esp, 0xf0]
    ?1 = V735
    pf = -V757-0x1 [from 0x804841b:and    esp, 0xf0]
    ?3 = V737
    af = <top>
    ?5 = V739
    zf = V758 [from 0x804841b:and    esp, 0xf0]
    sf = V759 [from 0x804841b:and    esp, 0xf0]
    tf = V742
    if = V743
    df = V744
    of = 0x0 [from 0x804841b:and    esp, 0xf0]
    iopl0 = V746
    iopl1 = V747
    nt = V748
    ?15 = V749
    memory = {
        size=4; addr=V756 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=V756+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
        size=4; addr=V756-0x4 [from 0x8048429:call   0x080482f0]; value=0x804842e [from 0x8048429:call   0x080482f0]
    }
0x804842e:mov    esp, ebp
    ax = V760 [from 0x8048429:call   0x080482f0]
    cx = V761 [from 0x8048429:call   0x080482f0]
    dx = V762 [from 0x8048429:call   0x080482f0]
    bx = V723
    sp = V724-0x4 [from 0x8048410:push   ebp]
    bp = V724-0x4 [from 0x8048410:push   ebp]
    si = V726
    di = V727
    es = V763 [from 0x8048429:call   0x080482f0]
    cs = V764 [from 0x8048429:call   0x080482f0]
    ss = V765 [from 0x8048429:call   0x080482f0]
    ds = V766 [from 0x8048429:call   0x080482f0]
    fs = V767 [from 0x8048429:call   0x080482f0]
    gs = V768 [from 0x8048429:call   0x080482f0]
    cf = V769 [from 0x8048429:call   0x080482f0]
    ?1 = V770 [from 0x8048429:call   0x080482f0]
    pf = V771 [from 0x8048429:call   0x080482f0]
    ?3 = V772 [from 0x8048429:call   0x080482f0]
    af = V773 [from 0x8048429:call   0x080482f0]
    ?5 = V774 [from 0x8048429:call   0x080482f0]
    zf = V775 [from 0x8048429:call   0x080482f0]
    sf = V776 [from 0x8048429:call   0x080482f0]
    tf = V777 [from 0x8048429:call   0x080482f0]
    if = V778 [from 0x8048429:call   0x080482f0]
    df = V779 [from 0x8048429:call   0x080482f0]
    of = V780 [from 0x8048429:call   0x080482f0]
    iopl0 = V781 [from 0x8048429:call   0x080482f0]
    iopl1 = V782 [from 0x8048429:call   0x080482f0]
    nt = V783 [from 0x8048429:call   0x080482f0]
    ?15 = V784 [from 0x8048429:call   0x080482f0]
    memory = {
        size=4; addr=V756 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=V756+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048430:xor    eax, eax
    ax = 0x0 [from 0x8048430:xor    eax, eax]
    cx = V761 [from 0x8048429:call   0x080482f0]
    dx = V762 [from 0x8048429:call   0x080482f0]
    bx = V723
    sp = V724-0x4 [from 0x8048410:push   ebp]
    bp = V724-0x4 [from 0x8048410:push   ebp]
    si = V726
    di = V727
    es = V763 [from 0x8048429:call   0x080482f0]
    cs = V764 [from 0x8048429:call   0x080482f0]
    ss = V765 [from 0x8048429:call   0x080482f0]
    ds = V766 [from 0x8048429:call   0x080482f0]
    fs = V767 [from 0x8048429:call   0x080482f0]
    gs = V768 [from 0x8048429:call   0x080482f0]
    cf = 0x0 [from 0x8048430:xor    eax, eax]
    ?1 = V770 [from 0x8048429:call   0x080482f0]
    pf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    ?3 = V772 [from 0x8048429:call   0x080482f0]
    af = <top>
    ?5 = V774 [from 0x8048429:call   0x080482f0]
    zf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    sf = 0x0 [from 0x8048430:xor    eax, eax]
    tf = V777 [from 0x8048429:call   0x080482f0]
    if = V778 [from 0x8048429:call   0x080482f0]
    df = V779 [from 0x8048429:call   0x080482f0]
    of = 0x0 [from 0x8048430:xor    eax, eax]
    iopl0 = V781 [from 0x8048429:call   0x080482f0]
    iopl1 = V782 [from 0x8048429:call   0x080482f0]
    nt = V783 [from 0x8048429:call   0x080482f0]
    ?15 = V784 [from 0x8048429:call   0x080482f0]
    memory = {
        size=4; addr=V756 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=V756+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048432:pop    ebp
    ax = 0x0 [from 0x8048430:xor    eax, eax]
    cx = V761 [from 0x8048429:call   0x080482f0]
    dx = V762 [from 0x8048429:call   0x080482f0]
    bx = V723
    sp = V724 [from 0x8048432:pop    ebp]
    bp = V785 [from 0x8048432:pop    ebp]
    si = V726
    di = V727
    es = V763 [from 0x8048429:call   0x080482f0]
    cs = V764 [from 0x8048429:call   0x080482f0]
    ss = V765 [from 0x8048429:call   0x080482f0]
    ds = V766 [from 0x8048429:call   0x080482f0]
    fs = V767 [from 0x8048429:call   0x080482f0]
    gs = V768 [from 0x8048429:call   0x080482f0]
    cf = 0x0 [from 0x8048430:xor    eax, eax]
    ?1 = V770 [from 0x8048429:call   0x080482f0]
    pf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    ?3 = V772 [from 0x8048429:call   0x080482f0]
    af = <top>
    ?5 = V774 [from 0x8048429:call   0x080482f0]
    zf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    sf = 0x0 [from 0x8048430:xor    eax, eax]
    tf = V777 [from 0x8048429:call   0x080482f0]
    if = V778 [from 0x8048429:call   0x080482f0]
    df = V779 [from 0x8048429:call   0x080482f0]
    of = 0x0 [from 0x8048430:xor    eax, eax]
    iopl0 = V781 [from 0x8048429:call   0x080482f0]
    iopl1 = V782 [from 0x8048429:call   0x080482f0]
    nt = V783 [from 0x8048429:call   0x080482f0]
    ?15 = V784 [from 0x8048429:call   0x080482f0]
    memory = {
        size=4; addr=V756 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=V756+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
0x8048433:ret    
    ax = 0x0 [from 0x8048430:xor    eax, eax]
    cx = V761 [from 0x8048429:call   0x080482f0]
    dx = V762 [from 0x8048429:call   0x080482f0]
    bx = V723
    sp = V724+0x4 [from 0x8048433:ret    ]
    bp = V785 [from 0x8048432:pop    ebp]
    si = V726
    di = V727
    es = V763 [from 0x8048429:call   0x080482f0]
    cs = V764 [from 0x8048429:call   0x080482f0]
    ss = V765 [from 0x8048429:call   0x080482f0]
    ds = V766 [from 0x8048429:call   0x080482f0]
    fs = V767 [from 0x8048429:call   0x080482f0]
    gs = V768 [from 0x8048429:call   0x080482f0]
    cf = 0x0 [from 0x8048430:xor    eax, eax]
    ?1 = V770 [from 0x8048429:call   0x080482f0]
    pf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    ?3 = V772 [from 0x8048429:call   0x080482f0]
    af = <top>
    ?5 = V774 [from 0x8048429:call   0x080482f0]
    zf = 0x1 (-0x1) [from 0x8048430:xor    eax, eax]
    sf = 0x0 [from 0x8048430:xor    eax, eax]
    tf = V777 [from 0x8048429:call   0x080482f0]
    if = V778 [from 0x8048429:call   0x080482f0]
    df = V779 [from 0x8048429:call   0x080482f0]
    of = 0x0 [from 0x8048430:xor    eax, eax]
    iopl0 = V781 [from 0x8048429:call   0x080482f0]
    iopl1 = V782 [from 0x8048429:call   0x080482f0]
    nt = V783 [from 0x8048429:call   0x080482f0]
    ?15 = V784 [from 0x8048429:call   0x080482f0]
    memory = {
        size=4; addr=V756 [from 0x804841b:and    esp, 0xf0]; value=0xa [from 0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a]
        size=4; addr=V756+0x4 [from 0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx]; value=0x8048480 [from 0x8048411:mov    edx, 0x08048480]
    }
==============================================
Constant propagation in function "bar"
==============================================
0x8048440:push   ebp
    ax = V786
    cx = V787
    dx = V788
    bx = V789
    sp = V790-0x4 [from 0x8048440:push   ebp]
    bp = V791
    si = V792
    di = V793
    es = V794
    cs = V795
    ss = V796
    ds = V797
    fs = V798
    gs = V799
    cf = V800
    ?1 = V801
    pf = V802
    ?3 = V803
    af = V804
    ?5 = V805
    zf = V806
    sf = V807
    tf = V808
    if = V809
    df = V810
    of = V811
    iopl0 = V812
    iopl1 = V813
    nt = V814
    ?15 = V815
    memory = {
        size=4; addr=V790-0x4 [from 0x8048440:push   ebp]; value=V791
    }
0x8048441:mov    ebp, esp
    ax = V786
    cx = V787
    dx = V788
    bx = V789
    sp = V790-0x4 [from 0x8048440:push   ebp]
    bp = V790-0x4 [from 0x8048440:push   ebp]
    si = V792
    di = V793
    es = V794
    cs = V795
    ss = V796
    ds = V797
    fs = V798
    gs = V799
    cf = V800
    ?1 = V801
    pf = V802
    ?3 = V803
    af = V804
    ?5 = V805
    zf = V806
    sf = V807
    tf = V808
    if = V809
    df = V810
    of = V811
    iopl0 = V812
    iopl1 = V813
    nt = V814
    ?15 = V815
    memory = {
        size=4; addr=V790-0x4 [from 0x8048440:push   ebp]; value=V791
    }
0x8048443:sub    esp, 0x08
    ax = V786
    cx = V787
    dx = V788
    bx = V789
    sp = V790-0xc [from 0x8048443:sub    esp, 0x08]
    bp = V790-0x4 [from 0x8048440:push   ebp]
    si = V792
    di = V793
    es = V794
    cs = V795
    ss = V796
    ds = V797
    fs = V798
    gs = V799
    cf = -V816-0x1 [from 0x8048443:sub    esp, 0x08]
    ?1 = V801
    pf = -V817-0x1 [from 0x8048443:sub    esp, 0x08]
    ?3 = V803
    af = -V818-0x1 [from 0x8048443:sub    esp, 0x08]
    ?5 = V805
    zf = V819 [from 0x8048443:sub    esp, 0x08]
    sf = V820 [from 0x8048443:sub    esp, 0x08]
    tf = V808
    if = V809
    df = V810
    of = V821 [from 0x8048443:sub    esp, 0x08]
    iopl0 = V812
    iopl1 = V813
    nt = V814
    ?15 = V815
    memory = {
        size=4; addr=V790-0x4 [from 0x8048440:push   ebp]; value=V791
    }
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4
    ax = V786
    cx = V787
    dx = V788
    bx = V789
    sp = V790-0xc [from 0x8048443:sub    esp, 0x08]
    bp = V790-0x4 [from 0x8048440:push   ebp]
    si = V792
    di = V793
    es = V794
    cs = V795
    ss = V796
    ds = V797
    fs = V798
    gs = V799
    cf = -V816-0x1 [from 0x8048443:sub    esp, 0x08]
    ?1 = V801
    pf = -V817-0x1 [from 0x8048443:sub    esp, 0x08]
    ?3 = V803
    af = -V818-0x1 [from 0x8048443:sub    esp, 0x08]
    ?5 = V805
    zf = V819 [from 0x8048443:sub    esp, 0x08]
    sf = V820 [from 0x8048443:sub    esp, 0x08]
    tf = V808
    if = V809
    df = V810
    of = V821 [from 0x8048443:sub    esp, 0x08]
    iopl0 = V812
    iopl1 = V813
    nt = V814
    ?15 = V815
    memory = {
        size=4; addr=V790-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=V790-0x4 [from 0x8048440:push   ebp]; value=V791
    }
0x804844d:call   0x08048300
    ax = V786
    cx = V787
    dx = V788
    bx = V789
    sp = V790-0x10 [from 0x804844d:call   0x08048300]
    bp = V790-0x4 [from 0x8048440:push   ebp]
    si = V792
    di = V793
    es = V794
    cs = V795
    ss = V796
    ds = V797
    fs = V798
    gs = V799
    cf = -V816-0x1 [from 0x8048443:sub    esp, 0x08]
    ?1 = V801
    pf = -V817-0x1 [from 0x8048443:sub    esp, 0x08]
    ?3 = V803
    af = -V818-0x1 [from 0x8048443:sub    esp, 0x08]
    ?5 = V805
    zf = V819 [from 0x8048443:sub    esp, 0x08]
    sf = V820 [from 0x8048443:sub    esp, 0x08]
    tf = V808
    if = V809
    df = V810
    of = V821 [from 0x8048443:sub    esp, 0x08]
    iopl0 = V812
    iopl1 = V813
    nt = V814
    ?15 = V815
    memory = {
        size=4; addr=V790-0x10 [from 0x804844d:call   0x08048300]; value=0x8048452 [from 0x804844d:call   0x08048300]
        size=4; addr=V790-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=V790-0x4 [from 0x8048440:push   ebp]; value=V791
    }
0x8048452:mov    esp, ebp
    ax = V822 [from 0x804844d:call   0x08048300]
    cx = V823 [from 0x804844d:call   0x08048300]
    dx = V824 [from 0x804844d:call   0x08048300]
    bx = V789
    sp = V790-0x4 [from 0x8048440:push   ebp]
    bp = V790-0x4 [from 0x8048440:push   ebp]
    si = V792
    di = V793
    es = V825 [from 0x804844d:call   0x08048300]
    cs = V826 [from 0x804844d:call   0x08048300]
    ss = V827 [from 0x804844d:call   0x08048300]
    ds = V828 [from 0x804844d:call   0x08048300]
    fs = V829 [from 0x804844d:call   0x08048300]
    gs = V830 [from 0x804844d:call   0x08048300]
    cf = V831 [from 0x804844d:call   0x08048300]
    ?1 = V832 [from 0x804844d:call   0x08048300]
    pf = V833 [from 0x804844d:call   0x08048300]
    ?3 = V834 [from 0x804844d:call   0x08048300]
    af = V835 [from 0x804844d:call   0x08048300]
    ?5 = V836 [from 0x804844d:call   0x08048300]
    zf = V837 [from 0x804844d:call   0x08048300]
    sf = V838 [from 0x804844d:call   0x08048300]
    tf = V839 [from 0x804844d:call   0x08048300]
    if = V840 [from 0x804844d:call   0x08048300]
    df = V841 [from 0x804844d:call   0x08048300]
    of = V842 [from 0x804844d:call   0x08048300]
    iopl0 = V843 [from 0x804844d:call   0x08048300]
    iopl1 = V844 [from 0x804844d:call   0x08048300]
    nt = V845 [from 0x804844d:call   0x08048300]
    ?15 = V846 [from 0x804844d:call   0x08048300]
    memory = {
        size=4; addr=V790-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=V790-0x4 [from 0x8048440:push   ebp]; value=V791
    }
0x8048454:pop    ebp
    ax = V822 [from 0x804844d:call   0x08048300]
    cx = V823 [from 0x804844d:call   0x08048300]
    dx = V824 [from 0x804844d:call   0x08048300]
    bx = V789
    sp = V790 [from 0x8048454:pop    ebp]
    bp = V791
    si = V792
    di = V793
    es = V825 [from 0x804844d:call   0x08048300]
    cs = V826 [from 0x804844d:call   0x08048300]
    ss = V827 [from 0x804844d:call   0x08048300]
    ds = V828 [from 0x804844d:call   0x08048300]
    fs = V829 [from 0x804844d:call   0x08048300]
    gs = V830 [from 0x804844d:call   0x08048300]
    cf = V831 [from 0x804844d:call   0x08048300]
    ?1 = V832 [from 0x804844d:call   0x08048300]
    pf = V833 [from 0x804844d:call   0x08048300]
    ?3 = V834 [from 0x804844d:call   0x08048300]
    af = V835 [from 0x804844d:call   0x08048300]
    ?5 = V836 [from 0x804844d:call   0x08048300]
    zf = V837 [from 0x804844d:call   0x08048300]
    sf = V838 [from 0x804844d:call   0x08048300]
    tf = V839 [from 0x804844d:call   0x08048300]
    if = V840 [from 0x804844d:call   0x08048300]
    df = V841 [from 0x804844d:call   0x08048300]
    of = V842 [from 0x804844d:call   0x08048300]
    iopl0 = V843 [from 0x804844d:call   0x08048300]
    iopl1 = V844 [from 0x804844d:call   0x08048300]
    nt = V845 [from 0x804844d:call   0x08048300]
    ?15 = V846 [from 0x804844d:call   0x08048300]
    memory = {
        size=4; addr=V790-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=V790-0x4 [from 0x8048440:push   ebp]; value=V791
    }
0x8048455:ret    
    ax = V822 [from 0x804844d:call   0x08048300]
    cx = V823 [from 0x804844d:call   0x08048300]
    dx = V824 [from 0x804844d:call   0x08048300]
    bx = V789
    sp = V790+0x4 [from 0x8048455:ret    ]
    bp = V791
    si = V792
    di = V793
    es = V825 [from 0x804844d:call   0x08048300]
    cs = V826 [from 0x804844d:call   0x08048300]
    ss = V827 [from 0x804844d:call   0x08048300]
    ds = V828 [from 0x804844d:call   0x08048300]
    fs = V829 [from 0x804844d:call   0x08048300]
    gs = V830 [from 0x804844d:call   0x08048300]
    cf = V831 [from 0x804844d:call   0x08048300]
    ?1 = V832 [from 0x804844d:call   0x08048300]
    pf = V833 [from 0x804844d:call   0x08048300]
    ?3 = V834 [from 0x804844d:call   0x08048300]
    af = V835 [from 0x804844d:call   0x08048300]
    ?5 = V836 [from 0x804844d:call   0x08048300]
    zf = V837 [from 0x804844d:call   0x08048300]
    sf = V838 [from 0x804844d:call   0x08048300]
    tf = V839 [from 0x804844d:call   0x08048300]
    if = V840 [from 0x804844d:call   0x08048300]
    df = V841 [from 0x804844d:call   0x08048300]
    of = V842 [from 0x804844d:call   0x08048300]
    iopl0 = V843 [from 0x804844d:call   0x08048300]
    iopl1 = V844 [from 0x804844d:call   0x08048300]
    nt = V845 [from 0x804844d:call   0x08048300]
    ?15 = V846 [from 0x804844d:call   0x08048300]
    memory = {
        size=4; addr=V790-0xc [from 0x8048443:sub    esp, 0x08]; value=0x80485d4 [from 0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=V790-0x4 [from 0x8048440:push   ebp]; value=V791
    }
==============================================
Constant propagation in function "foo"
==============================================
0x8048460:push   ebp
    ax = V847
    cx = V848
    dx = V849
    bx = V850
    sp = V851-0x4 [from 0x8048460:push   ebp]
    bp = V852
    si = V853
    di = V854
    es = V855
    cs = V856
    ss = V857
    ds = V858
    fs = V859
    gs = V860
    cf = V861
    ?1 = V862
    pf = V863
    ?3 = V864
    af = V865
    ?5 = V866
    zf = V867
    sf = V868
    tf = V869
    if = V870
    df = V871
    of = V872
    iopl0 = V873
    iopl1 = V874
    nt = V875
    ?15 = V876
    memory = {
        size=4; addr=V851-0x4 [from 0x8048460:push   ebp]; value=V852
    }
0x8048461:mov    ebp, esp
    ax = V847
    cx = V848
    dx = V849
    bx = V850
    sp = V851-0x4 [from 0x8048460:push   ebp]
    bp = V851-0x4 [from 0x8048460:push   ebp]
    si = V853
    di = V854
    es = V855
    cs = V856
    ss = V857
    ds = V858
    fs = V859
    gs = V860
    cf = V861
    ?1 = V862
    pf = V863
    ?3 = V864
    af = V865
    ?5 = V866
    zf = V867
    sf = V868
    tf = V869
    if = V870
    df = V871
    of = V872
    iopl0 = V873
    iopl1 = V874
    nt = V875
    ?15 = V876
    memory = {
        size=4; addr=V851-0x4 [from 0x8048460:push   ebp]; value=V852
    }
0x8048463:sub    esp, 0x08
    ax = V847
    cx = V848
    dx = V849
    bx = V850
    sp = V851-0xc [from 0x8048463:sub    esp, 0x08]
    bp = V851-0x4 [from 0x8048460:push   ebp]
    si = V853
    di = V854
    es = V855
    cs = V856
    ss = V857
    ds = V858
    fs = V859
    gs = V860
    cf = -V877-0x1 [from 0x8048463:sub    esp, 0x08]
    ?1 = V862
    pf = -V878-0x1 [from 0x8048463:sub    esp, 0x08]
    ?3 = V864
    af = -V879-0x1 [from 0x8048463:sub    esp, 0x08]
    ?5 = V866
    zf = V880 [from 0x8048463:sub    esp, 0x08]
    sf = V881 [from 0x8048463:sub    esp, 0x08]
    tf = V869
    if = V870
    df = V871
    of = V882 [from 0x8048463:sub    esp, 0x08]
    iopl0 = V873
    iopl1 = V874
    nt = V875
    ?15 = V876
    memory = {
        size=4; addr=V851-0x4 [from 0x8048460:push   ebp]; value=V852
    }
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4
    ax = V847
    cx = V848
    dx = V849
    bx = V850
    sp = V851-0xc [from 0x8048463:sub    esp, 0x08]
    bp = V851-0x4 [from 0x8048460:push   ebp]
    si = V853
    di = V854
    es = V855
    cs = V856
    ss = V857
    ds = V858
    fs = V859
    gs = V860
    cf = -V877-0x1 [from 0x8048463:sub    esp, 0x08]
    ?1 = V862
    pf = -V878-0x1 [from 0x8048463:sub    esp, 0x08]
    ?3 = V864
    af = -V879-0x1 [from 0x8048463:sub    esp, 0x08]
    ?5 = V866
    zf = V880 [from 0x8048463:sub    esp, 0x08]
    sf = V881 [from 0x8048463:sub    esp, 0x08]
    tf = V869
    if = V870
    df = V871
    of = V882 [from 0x8048463:sub    esp, 0x08]
    iopl0 = V873
    iopl1 = V874
    nt = V875
    ?15 = V876
    memory = {
        size=4; addr=V851-0xc [from 0x8048463:sub    esp, 0x08]; value=0x80485d4 [from 0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=V851-0x4 [from 0x8048460:push   ebp]; value=V852
    }
0x804846d:call   0x08048300
    ax = V847
    cx = V848
    dx = V849
    bx = V850
    sp = V851-0x10 [from 0x804846d:call   0x08048300]
    bp = V851-0x4 [from 0x8048460:push   ebp]
    si = V853
    di = V854
    es = V855
    cs = V856
    ss = V857
    ds = V858
    fs = V859
    gs = V860
    cf = -V877-0x1 [from 0x8048463:sub    esp, 0x08]
    ?1 = V862
    pf = -V878-0x1 [from 0x8048463:sub    esp, 0x08]
    ?3 = V864
    af = -V879-0x1 [from 0x8048463:sub    esp, 0x08]
    ?5 = V866
    zf = V880 [from 0x8048463:sub    esp, 0x08]
    sf = V881 [from 0x8048463:sub    esp, 0x08]
    tf = V869
    if = V870
    df = V871
    of = V882 [from 0x8048463:sub    esp, 0x08]
    iopl0 = V873
    iopl1 = V874
    nt = V875
    ?15 = V876
    memory = {
        size=4; addr=V851-0x10 [from 0x804846d:call   0x08048300]; value=0x8048472 [from 0x804846d:call   0x08048300]
        size=4; addr=V851-0xc [from 0x8048463:sub    esp, 0x08]; value=0x80485d4 [from 0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4]
        size=4; addr=V851-0x4 [from 0x8048460:push   ebp]; value=V852
    }
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    ax = V883 [from 0x804846d:call   0x08048300]
    cx = V884 [from 0x804846d:call   0x08048300]
    dx = V885 [from 0x804846d:call   0x08048300]
    bx = V850
    sp = V851-0xc [from 0x8048463:sub    esp, 0x08]
    bp = V851-0x4 [from 0x8048460:push   ebp]
    si = V853
    di = V854
    es = V886 [from 0x804846d:call   0x08048300]
    cs = V887 [from 0x804846d:call   0x08048300]
    ss = V888 [from 0x804846d:call   0x08048300]
    ds = V889 [from 0x804846d:call   0x08048300]
    fs = V890 [from 0x804846d:call   0x08048300]
    gs = V891 [from 0x804846d:call   0x08048300]
    cf = V892 [from 0x804846d:call   0x08048300]
    ?1 = V893 [from 0x804846d:call   0x08048300]
    pf = V894 [from 0x804846d:call   0x08048300]
    ?3 = V895 [from 0x804846d:call   0x08048300]
    af = V896 [from 0x804846d:call   0x08048300]
    ?5 = V897 [from 0x804846d:call   0x08048300]
    zf = V898 [from 0x804846d:call   0x08048300]
    sf = V899 [from 0x804846d:call   0x08048300]
    tf = V900 [from 0x804846d:call   0x08048300]
    if = V901 [from 0x804846d:call   0x08048300]
    df = V902 [from 0x804846d:call   0x08048300]
    of = V903 [from 0x804846d:call   0x08048300]
    iopl0 = V904 [from 0x804846d:call   0x08048300]
    iopl1 = V905 [from 0x804846d:call   0x08048300]
    nt = V906 [from 0x804846d:call   0x08048300]
    ?15 = V907 [from 0x804846d:call   0x08048300]
    memory = {
        size=4; addr=V851-0xc [from 0x8048463:sub    esp, 0x08]; value=0x0 [from 0x8048472:mov    DWORD PTR ss:[esp], 0x00000000]
        size=4; addr=V851-0x4 [from 0x8048460:push   ebp]; value=V852
    }
0x8048479:call   0x08048320
    ax = V883 [from 0x804846d:call   0x08048300]
    cx = V884 [from 0x804846d:call   0x08048300]
    dx = V885 [from 0x804846d:call   0x08048300]
    bx = V850
    sp = V851-0x10 [from 0x8048479:call   0x08048320]
    bp = V851-0x4 [from 0x8048460:push   ebp]
    si = V853
    di = V854
    es = V886 [from 0x804846d:call   0x08048300]
    cs = V887 [from 0x804846d:call   0x08048300]
    ss = V888 [from 0x804846d:call   0x08048300]
    ds = V889 [from 0x804846d:call   0x08048300]
    fs = V890 [from 0x804846d:call   0x08048300]
    gs = V891 [from 0x804846d:call   0x08048300]
    cf = V892 [from 0x804846d:call   0x08048300]
    ?1 = V893 [from 0x804846d:call   0x08048300]
    pf = V894 [from 0x804846d:call   0x08048300]
    ?3 = V895 [from 0x804846d:call   0x08048300]
    af = V896 [from 0x804846d:call   0x08048300]
    ?5 = V897 [from 0x804846d:call   0x08048300]
    zf = V898 [from 0x804846d:call   0x08048300]
    sf = V899 [from 0x804846d:call   0x08048300]
    tf = V900 [from 0x804846d:call   0x08048300]
    if = V901 [from 0x804846d:call   0x08048300]
    df = V902 [from 0x804846d:call   0x08048300]
    of = V903 [from 0x804846d:call   0x08048300]
    iopl0 = V904 [from 0x804846d:call   0x08048300]
    iopl1 = V905 [from 0x804846d:call   0x08048300]
    nt = V906 [from 0x804846d:call   0x08048300]
    ?15 = V907 [from 0x804846d:call   0x08048300]
    memory = {
        size=4; addr=V851-0x10 [from 0x8048479:call   0x08048320]; value=0x804847e [from 0x8048479:call   0x08048320]
        size=4; addr=V851-0xc [from 0x8048463:sub    esp, 0x08]; value=0x0 [from 0x8048472:mov    DWORD PTR ss:[esp], 0x00000000]
        size=4; addr=V851-0x4 [from 0x8048460:push   ebp]; value=V852
    }
0x804847e:mov    esi, esi
    ax = V908 [from 0x8048479:call   0x08048320]
    cx = V909 [from 0x8048479:call   0x08048320]
    dx = V910 [from 0x8048479:call   0x08048320]
    bx = V850
    sp = V851-0xc [from 0x8048463:sub    esp, 0x08]
    bp = V851-0x4 [from 0x8048460:push   ebp]
    si = V853
    di = V854
    es = V911 [from 0x8048479:call   0x08048320]
    cs = V912 [from 0x8048479:call   0x08048320]
    ss = V913 [from 0x8048479:call   0x08048320]
    ds = V914 [from 0x8048479:call   0x08048320]
    fs = V915 [from 0x8048479:call   0x08048320]
    gs = V916 [from 0x8048479:call   0x08048320]
    cf = V917 [from 0x8048479:call   0x08048320]
    ?1 = V918 [from 0x8048479:call   0x08048320]
    pf = V919 [from 0x8048479:call   0x08048320]
    ?3 = V920 [from 0x8048479:call   0x08048320]
    af = V921 [from 0x8048479:call   0x08048320]
    ?5 = V922 [from 0x8048479:call   0x08048320]
    zf = V923 [from 0x8048479:call   0x08048320]
    sf = V924 [from 0x8048479:call   0x08048320]
    tf = V925 [from 0x8048479:call   0x08048320]
    if = V926 [from 0x8048479:call   0x08048320]
    df = V927 [from 0x8048479:call   0x08048320]
    of = V928 [from 0x8048479:call   0x08048320]
    iopl0 = V929 [from 0x8048479:call   0x08048320]
    iopl1 = V930 [from 0x8048479:call   0x08048320]
    nt = V931 [from 0x8048479:call   0x08048320]
    ?15 = V932 [from 0x8048479:call   0x08048320]
    memory = {
        size=4; addr=V851-0xc [from 0x8048463:sub    esp, 0x08]; value=0x0 [from 0x8048472:mov    DWORD PTR ss:[esp], 0x00000000]
        size=4; addr=V851-0x4 [from 0x8048460:push   ebp]; value=V852
    }
==============================================
Constant propagation in function "handler"
==============================================
0x8048480:push   ebp
    ax = V933
    cx = V934
    dx = V935
    bx = V936
    sp = V937-0x4 [from 0x8048480:push   ebp]
    bp = V938
    si = V939
    di = V940
    es = V941
    cs = V942
    ss = V943
    ds = V944
    fs = V945
    gs = V946
    cf = V947
    ?1 = V948
    pf = V949
    ?3 = V950
    af = V951
    ?5 = V952
    zf = V953
    sf = V954
    tf = V955
    if = V956
    df = V957
    of = V958
    iopl0 = V959
    iopl1 = V960
    nt = V961
    ?15 = V962
    memory = {
        size=4; addr=V937-0x4 [from 0x8048480:push   ebp]; value=V938
    }
0x8048481:mov    ebp, esp
    ax = V933
    cx = V934
    dx = V935
    bx = V936
    sp = V937-0x4 [from 0x8048480:push   ebp]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V941
    cs = V942
    ss = V943
    ds = V944
    fs = V945
    gs = V946
    cf = V947
    ?1 = V948
    pf = V949
    ?3 = V950
    af = V951
    ?5 = V952
    zf = V953
    sf = V954
    tf = V955
    if = V956
    df = V957
    of = V958
    iopl0 = V959
    iopl1 = V960
    nt = V961
    ?15 = V962
    memory = {
        size=4; addr=V937-0x4 [from 0x8048480:push   ebp]; value=V938
    }
0x8048483:sub    esp, 0x08
    ax = V933
    cx = V934
    dx = V935
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V941
    cs = V942
    ss = V943
    ds = V944
    fs = V945
    gs = V946
    cf = -V963-0x1 [from 0x8048483:sub    esp, 0x08]
    ?1 = V948
    pf = -V964-0x1 [from 0x8048483:sub    esp, 0x08]
    ?3 = V950
    af = -V965-0x1 [from 0x8048483:sub    esp, 0x08]
    ?5 = V952
    zf = V966 [from 0x8048483:sub    esp, 0x08]
    sf = V967 [from 0x8048483:sub    esp, 0x08]
    tf = V955
    if = V956
    df = V957
    of = V968 [from 0x8048483:sub    esp, 0x08]
    iopl0 = V959
    iopl1 = V960
    nt = V961
    ?15 = V962
    memory = {
        size=4; addr=V937-0x4 [from 0x8048480:push   ebp]; value=V938
    }
0x8048486:inc    DWORD PTR ds:[0x080496f8]
    ax = V933
    cx = V934
    dx = V935
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V941
    cs = V942
    ss = V943
    ds = V944
    fs = V945
    gs = V946
    cf = -V963-0x1 [from 0x8048483:sub    esp, 0x08]
    ?1 = V948
    pf = -V969-0x1 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?3 = V950
    af = V970 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?5 = V952
    zf = V971 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    sf = V972 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    tf = V955
    if = V956
    df = V957
    of = V973 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    iopl0 = V959
    iopl1 = V960
    nt = V961
    ?15 = V962
    memory = {
        size=4; addr=0x80496f8 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]; value=V974+0x1 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    }
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4
    ax = V933
    cx = V934
    dx = V935
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V941
    cs = V942
    ss = V943
    ds = V944
    fs = V945
    gs = V946
    cf = -V963-0x1 [from 0x8048483:sub    esp, 0x08]
    ?1 = V948
    pf = -V969-0x1 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?3 = V950
    af = V970 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?5 = V952
    zf = V971 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    sf = V972 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    tf = V955
    if = V956
    df = V957
    of = V973 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    iopl0 = V959
    iopl1 = V960
    nt = V961
    ?15 = V962
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x80485d4 [from 0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4]
    }
0x8048493:call   0x08048300
    ax = V933
    cx = V934
    dx = V935
    bx = V936
    sp = V937-0x10 [from 0x8048493:call   0x08048300]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V941
    cs = V942
    ss = V943
    ds = V944
    fs = V945
    gs = V946
    cf = -V963-0x1 [from 0x8048483:sub    esp, 0x08]
    ?1 = V948
    pf = -V969-0x1 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?3 = V950
    af = V970 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    ?5 = V952
    zf = V971 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    sf = V972 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    tf = V955
    if = V956
    df = V957
    of = V973 [from 0x8048486:inc    DWORD PTR ds:[0x080496f8]]
    iopl0 = V959
    iopl1 = V960
    nt = V961
    ?15 = V962
    memory = {
        size=4; addr=V937-0x10 [from 0x8048493:call   0x08048300]; value=0x8048498 [from 0x8048493:call   0x08048300]
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x80485d4 [from 0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4]
    }
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    ax = V975 [from 0x8048493:call   0x08048300]
    cx = V976 [from 0x8048493:call   0x08048300]
    dx = V977 [from 0x8048493:call   0x08048300]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V978 [from 0x8048493:call   0x08048300]
    cs = V979 [from 0x8048493:call   0x08048300]
    ss = V980 [from 0x8048493:call   0x08048300]
    ds = V981 [from 0x8048493:call   0x08048300]
    fs = V982 [from 0x8048493:call   0x08048300]
    gs = V983 [from 0x8048493:call   0x08048300]
    cf = V984 [from 0x8048493:call   0x08048300]
    ?1 = V985 [from 0x8048493:call   0x08048300]
    pf = V986 [from 0x8048493:call   0x08048300]
    ?3 = V987 [from 0x8048493:call   0x08048300]
    af = V988 [from 0x8048493:call   0x08048300]
    ?5 = V989 [from 0x8048493:call   0x08048300]
    zf = V990 [from 0x8048493:call   0x08048300]
    sf = V991 [from 0x8048493:call   0x08048300]
    tf = V992 [from 0x8048493:call   0x08048300]
    if = V993 [from 0x8048493:call   0x08048300]
    df = V994 [from 0x8048493:call   0x08048300]
    of = V995 [from 0x8048493:call   0x08048300]
    iopl0 = V996 [from 0x8048493:call   0x08048300]
    iopl1 = V997 [from 0x8048493:call   0x08048300]
    nt = V998 [from 0x8048493:call   0x08048300]
    ?15 = V999 [from 0x8048493:call   0x08048300]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x804849f:call   0x08048320
    ax = V975 [from 0x8048493:call   0x08048300]
    cx = V976 [from 0x8048493:call   0x08048300]
    dx = V977 [from 0x8048493:call   0x08048300]
    bx = V936
    sp = V937-0x10 [from 0x804849f:call   0x08048320]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V978 [from 0x8048493:call   0x08048300]
    cs = V979 [from 0x8048493:call   0x08048300]
    ss = V980 [from 0x8048493:call   0x08048300]
    ds = V981 [from 0x8048493:call   0x08048300]
    fs = V982 [from 0x8048493:call   0x08048300]
    gs = V983 [from 0x8048493:call   0x08048300]
    cf = V984 [from 0x8048493:call   0x08048300]
    ?1 = V985 [from 0x8048493:call   0x08048300]
    pf = V986 [from 0x8048493:call   0x08048300]
    ?3 = V987 [from 0x8048493:call   0x08048300]
    af = V988 [from 0x8048493:call   0x08048300]
    ?5 = V989 [from 0x8048493:call   0x08048300]
    zf = V990 [from 0x8048493:call   0x08048300]
    sf = V991 [from 0x8048493:call   0x08048300]
    tf = V992 [from 0x8048493:call   0x08048300]
    if = V993 [from 0x8048493:call   0x08048300]
    df = V994 [from 0x8048493:call   0x08048300]
    of = V995 [from 0x8048493:call   0x08048300]
    iopl0 = V996 [from 0x8048493:call   0x08048300]
    iopl1 = V997 [from 0x8048493:call   0x08048300]
    nt = V998 [from 0x8048493:call   0x08048300]
    ?15 = V999 [from 0x8048493:call   0x08048300]
    memory = {
        size=4; addr=V937-0x10 [from 0x804849f:call   0x08048320]; value=0x80484a4 [from 0x804849f:call   0x08048320]
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a4:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a5:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a6:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a7:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a8:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484a9:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484aa:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484ab:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484ac:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484ad:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484ae:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
0x80484af:nop    
    ax = V1000 [from 0x804849f:call   0x08048320]
    cx = V1001 [from 0x804849f:call   0x08048320]
    dx = V1002 [from 0x804849f:call   0x08048320]
    bx = V936
    sp = V937-0xc [from 0x8048483:sub    esp, 0x08]
    bp = V937-0x4 [from 0x8048480:push   ebp]
    si = V939
    di = V940
    es = V1003 [from 0x804849f:call   0x08048320]
    cs = V1004 [from 0x804849f:call   0x08048320]
    ss = V1005 [from 0x804849f:call   0x08048320]
    ds = V1006 [from 0x804849f:call   0x08048320]
    fs = V1007 [from 0x804849f:call   0x08048320]
    gs = V1008 [from 0x804849f:call   0x08048320]
    cf = V1009 [from 0x804849f:call   0x08048320]
    ?1 = V1010 [from 0x804849f:call   0x08048320]
    pf = V1011 [from 0x804849f:call   0x08048320]
    ?3 = V1012 [from 0x804849f:call   0x08048320]
    af = V1013 [from 0x804849f:call   0x08048320]
    ?5 = V1014 [from 0x804849f:call   0x08048320]
    zf = V1015 [from 0x804849f:call   0x08048320]
    sf = V1016 [from 0x804849f:call   0x08048320]
    tf = V1017 [from 0x804849f:call   0x08048320]
    if = V1018 [from 0x804849f:call   0x08048320]
    df = V1019 [from 0x804849f:call   0x08048320]
    of = V1020 [from 0x804849f:call   0x08048320]
    iopl0 = V1021 [from 0x804849f:call   0x08048320]
    iopl1 = V1022 [from 0x804849f:call   0x08048320]
    nt = V1023 [from 0x804849f:call   0x08048320]
    ?15 = V1024 [from 0x804849f:call   0x08048320]
    memory = {
        size=4; addr=V937-0xc [from 0x8048483:sub    esp, 0x08]; value=0x0 [from 0x8048498:mov    DWORD PTR ss:[esp], 0x00000000]
    }
==============================================
Constant propagation in function "__libc_csu_init"
==============================================
0x80484b0:push   ebp
    ax = V1025
    cx = V1026
    dx = V1027
    bx = V1028
    sp = V1029-0x4 [from 0x80484b0:push   ebp]
    bp = V1030
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = V1039
    ?1 = V1040
    pf = V1041
    ?3 = V1042
    af = V1043
    ?5 = V1044
    zf = V1045
    sf = V1046
    tf = V1047
    if = V1048
    df = V1049
    of = V1050
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484b1:mov    ebp, esp
    ax = V1025
    cx = V1026
    dx = V1027
    bx = V1028
    sp = V1029-0x4 [from 0x80484b0:push   ebp]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = V1039
    ?1 = V1040
    pf = V1041
    ?3 = V1042
    af = V1043
    ?5 = V1044
    zf = V1045
    sf = V1046
    tf = V1047
    if = V1048
    df = V1049
    of = V1050
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484b3:push   edi
    ax = V1025
    cx = V1026
    dx = V1027
    bx = V1028
    sp = V1029-0x8 [from 0x80484b3:push   edi]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = V1039
    ?1 = V1040
    pf = V1041
    ?3 = V1042
    af = V1043
    ?5 = V1044
    zf = V1045
    sf = V1046
    tf = V1047
    if = V1048
    df = V1049
    of = V1050
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484b4:push   esi
    ax = V1025
    cx = V1026
    dx = V1027
    bx = V1028
    sp = V1029-0xc [from 0x80484b4:push   esi]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = V1039
    ?1 = V1040
    pf = V1041
    ?3 = V1042
    af = V1043
    ?5 = V1044
    zf = V1045
    sf = V1046
    tf = V1047
    if = V1048
    df = V1049
    of = V1050
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484b5:push   ebx
    ax = V1025
    cx = V1026
    dx = V1027
    bx = V1028
    sp = V1029-0x10 [from 0x80484b5:push   ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = V1039
    ?1 = V1040
    pf = V1041
    ?3 = V1042
    af = V1043
    ?5 = V1044
    zf = V1045
    sf = V1046
    tf = V1047
    if = V1048
    df = V1049
    of = V1050
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484b6:sub    esp, 0x0c
    ax = V1025
    cx = V1026
    dx = V1027
    bx = V1028
    sp = V1029-0x1c [from 0x80484b6:sub    esp, 0x0c]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = -V1055-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?1 = V1040
    pf = -V1056-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?3 = V1042
    af = -V1057-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?5 = V1044
    zf = V1058 [from 0x80484b6:sub    esp, 0x0c]
    sf = V1059 [from 0x80484b6:sub    esp, 0x0c]
    tf = V1047
    if = V1048
    df = V1049
    of = V1060 [from 0x80484b6:sub    esp, 0x0c]
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484b9:call   0x080484be
    ax = V1025
    cx = V1026
    dx = V1027
    bx = V1028
    sp = V1029-0x20 [from 0x80484b9:call   0x080484be]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = -V1055-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?1 = V1040
    pf = -V1056-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?3 = V1042
    af = -V1057-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?5 = V1044
    zf = V1058 [from 0x80484b6:sub    esp, 0x0c]
    sf = V1059 [from 0x80484b6:sub    esp, 0x0c]
    tf = V1047
    if = V1048
    df = V1049
    of = V1060 [from 0x80484b6:sub    esp, 0x0c]
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484be:pop    ebx
    ax = V1025
    cx = V1026
    dx = V1027
    bx = 0x80484be [from 0x80484b9:call   0x080484be]
    sp = V1029-0x1c [from 0x80484be:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = -V1055-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?1 = V1040
    pf = -V1056-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?3 = V1042
    af = -V1057-0x1 [from 0x80484b6:sub    esp, 0x0c]
    ?5 = V1044
    zf = V1058 [from 0x80484b6:sub    esp, 0x0c]
    sf = V1059 [from 0x80484b6:sub    esp, 0x0c]
    tf = V1047
    if = V1048
    df = V1049
    of = V1060 [from 0x80484b6:sub    esp, 0x0c]
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484bf:add    ebx, 0x0000120a
    ax = V1025
    cx = V1026
    dx = V1027
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x1c [from 0x80484be:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    ?1 = V1040
    pf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    ?3 = V1042
    af = 0x1 (-0x1) [from 0x80484bf:add    ebx, 0x0000120a]
    ?5 = V1044
    zf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    sf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    tf = V1047
    if = V1048
    df = V1049
    of = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484c5:call   0x080482c8
    ax = V1025
    cx = V1026
    dx = V1027
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x20 [from 0x80484c5:call   0x080482c8]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1033
    cs = V1034
    ss = V1035
    ds = V1036
    fs = V1037
    gs = V1038
    cf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    ?1 = V1040
    pf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    ?3 = V1042
    af = 0x1 (-0x1) [from 0x80484bf:add    ebx, 0x0000120a]
    ?5 = V1044
    zf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    sf = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    tf = V1047
    if = V1048
    df = V1049
    of = 0x0 [from 0x80484bf:add    ebx, 0x0000120a]
    iopl0 = V1051
    iopl1 = V1052
    nt = V1053
    ?15 = V1054
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484c5:call   0x080482c8]; value=0x80484ca [from 0x80484c5:call   0x080482c8]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484ca:lea    eax, [ebx + 0xffffff20]
    ax = 0x80495e8 [from 0x80484ca:lea    eax, [ebx + 0xffffff20]]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = V1062 [from 0x80484c5:call   0x080482c8]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x1c [from 0x80484be:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = V1069 [from 0x80484c5:call   0x080482c8]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = V1071 [from 0x80484c5:call   0x080482c8]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = V1073 [from 0x80484c5:call   0x080482c8]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = V1075 [from 0x80484c5:call   0x080482c8]
    sf = V1076 [from 0x80484c5:call   0x080482c8]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = V1080 [from 0x80484c5:call   0x080482c8]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484d0:lea    edx, [ebx + 0xffffff20]
    ax = 0x80495e8 [from 0x80484ca:lea    eax, [ebx + 0xffffff20]]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x1c [from 0x80484be:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = V1069 [from 0x80484c5:call   0x080482c8]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = V1071 [from 0x80484c5:call   0x080482c8]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = V1073 [from 0x80484c5:call   0x080482c8]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = V1075 [from 0x80484c5:call   0x080482c8]
    sf = V1076 [from 0x80484c5:call   0x080482c8]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = V1080 [from 0x80484c5:call   0x080482c8]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484d6:sub    eax, edx
    ax = 0x0 [from 0x80484d6:sub    eax, edx]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x1c [from 0x80484be:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = 0x0 [from 0x80484d6:sub    eax, edx]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = 0x1 (-0x1) [from 0x80484d6:sub    eax, edx]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = 0x0 [from 0x80484d6:sub    eax, edx]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = 0x1 (-0x1) [from 0x80484d6:sub    eax, edx]
    sf = 0x0 [from 0x80484d6:sub    eax, edx]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = 0x0 [from 0x80484d6:sub    eax, edx]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484d8:sar    eax, 0x02
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x1c [from 0x80484be:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = <top>
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    sf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = 0x0 [from 0x80484d8:sar    eax, 0x02]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x1c [from 0x80484be:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = <top>
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    sf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = 0x0 [from 0x80484d8:sar    eax, 0x02]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484de:jne    0x080484f0
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x1c [from 0x80484be:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = <top>
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = 0x1 (-0x1) [from 0x80484d8:sar    eax, 0x02]
    sf = 0x0 [from 0x80484d8:sar    eax, 0x02]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = 0x0 [from 0x80484d8:sar    eax, 0x02]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484e0:add    esp, 0x0c
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x80484bf:add    ebx, 0x0000120a]
    sp = V1029-0x10 [from 0x80484e0:add    esp, 0x0c]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = V1085 [from 0x80484e0:add    esp, 0x0c]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = -V1086-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = V1087 [from 0x80484e0:add    esp, 0x0c]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = V1088 [from 0x80484e0:add    esp, 0x0c]
    sf = V1089 [from 0x80484e0:add    esp, 0x0c]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = V1090 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484e3:pop    ebx
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = V1028
    sp = V1029-0xc [from 0x80484e3:pop    ebx]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = V1085 [from 0x80484e0:add    esp, 0x0c]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = -V1086-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = V1087 [from 0x80484e0:add    esp, 0x0c]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = V1088 [from 0x80484e0:add    esp, 0x0c]
    sf = V1089 [from 0x80484e0:add    esp, 0x0c]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = V1090 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484e4:pop    esi
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = V1028
    sp = V1029-0x8 [from 0x80484e4:pop    esi]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = V1085 [from 0x80484e0:add    esp, 0x0c]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = -V1086-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = V1087 [from 0x80484e0:add    esp, 0x0c]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = V1088 [from 0x80484e0:add    esp, 0x0c]
    sf = V1089 [from 0x80484e0:add    esp, 0x0c]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = V1090 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484e5:pop    edi
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = V1028
    sp = V1029-0x4 [from 0x80484e5:pop    edi]
    bp = V1029-0x4 [from 0x80484b0:push   ebp]
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = V1085 [from 0x80484e0:add    esp, 0x0c]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = -V1086-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = V1087 [from 0x80484e0:add    esp, 0x0c]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = V1088 [from 0x80484e0:add    esp, 0x0c]
    sf = V1089 [from 0x80484e0:add    esp, 0x0c]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = V1090 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484e6:pop    ebp
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = V1028
    sp = V1029 [from 0x80484e6:pop    ebp]
    bp = V1030
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = V1085 [from 0x80484e0:add    esp, 0x0c]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = -V1086-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = V1087 [from 0x80484e0:add    esp, 0x0c]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = V1088 [from 0x80484e0:add    esp, 0x0c]
    sf = V1089 [from 0x80484e0:add    esp, 0x0c]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = V1090 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484e7:ret    
    ax = 0x0 [from 0x80484d8:sar    eax, 0x02]
    cx = V1061 [from 0x80484c5:call   0x080482c8]
    dx = 0x80495e8 [from 0x80484d0:lea    edx, [ebx + 0xffffff20]]
    bx = V1028
    sp = V1029+0x4 [from 0x80484e7:ret    ]
    bp = V1030
    si = V1031
    di = V1032
    es = V1063 [from 0x80484c5:call   0x080482c8]
    cs = V1064 [from 0x80484c5:call   0x080482c8]
    ss = V1065 [from 0x80484c5:call   0x080482c8]
    ds = V1066 [from 0x80484c5:call   0x080482c8]
    fs = V1067 [from 0x80484c5:call   0x080482c8]
    gs = V1068 [from 0x80484c5:call   0x080482c8]
    cf = V1085 [from 0x80484e0:add    esp, 0x0c]
    ?1 = V1070 [from 0x80484c5:call   0x080482c8]
    pf = -V1086-0x1 [from 0x80484e0:add    esp, 0x0c]
    ?3 = V1072 [from 0x80484c5:call   0x080482c8]
    af = V1087 [from 0x80484e0:add    esp, 0x0c]
    ?5 = V1074 [from 0x80484c5:call   0x080482c8]
    zf = V1088 [from 0x80484e0:add    esp, 0x0c]
    sf = V1089 [from 0x80484e0:add    esp, 0x0c]
    tf = V1077 [from 0x80484c5:call   0x080482c8]
    if = V1078 [from 0x80484c5:call   0x080482c8]
    df = V1079 [from 0x80484c5:call   0x080482c8]
    of = V1090 [from 0x80484e0:add    esp, 0x0c]
    iopl0 = V1081 [from 0x80484c5:call   0x080482c8]
    iopl1 = V1082 [from 0x80484c5:call   0x080482c8]
    nt = V1083 [from 0x80484c5:call   0x080482c8]
    ?15 = V1084 [from 0x80484c5:call   0x080482c8]
    memory = {
        size=4; addr=V1029-0x20 [from 0x80484b9:call   0x080484be]; value=0x80484be [from 0x80484b9:call   0x080484be]
        size=4; addr=V1029-0x14 [from 0x80484db:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x80484d8:sar    eax, 0x02]
        size=4; addr=V1029-0x10 [from 0x80484b5:push   ebx]; value=V1028
        size=4; addr=V1029-0xc [from 0x80484b4:push   esi]; value=V1031
        size=4; addr=V1029-0x8 [from 0x80484b3:push   edi]; value=V1032
        size=4; addr=V1029-0x4 [from 0x80484b0:push   ebp]; value=V1030
    }
0x80484f0:xor    edi, edi
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484f2:mov    esi, edx
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484f4:lea    esi, [esi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x80484fa:lea    edi, [edi + 0x00000000]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory =     <top>
0x8048500:call   DWORD PTR ds:[esi]
    ax = <top>
    cx = <top>
    dx = <top>
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = <top>
    cs = <top>
    ss = <top>
    ds = <top>
    fs = <top>
    gs = <top>
    cf = 0x0 [from 0x80484f0:xor    edi, edi]
    ?1 = <top>
    pf = <top>
    ?3 = <top>
    af = <top>
    ?5 = <top>
    zf = <top>
    sf = <top>
    tf = <top>
    if = <top>
    df = <top>
    of = 0x0 [from 0x80484f0:xor    edi, edi]
    iopl0 = <top>
    iopl1 = <top>
    nt = <top>
    ?15 = <top>
    memory = {
        size=4; addr=<top>; value=0x8048502 [from 0x8048500:call   DWORD PTR ds:[esi]]
    }
0x8048502:inc    edi
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = V1100 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048503:add    esi, 0x04
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048506:cmp    edi, DWORD PTR ss:[ebp + 0xf0]
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048509:jb     0x08048500
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x804850b:add    esp, 0x0c
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x804850e:pop    ebx
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x804850f:pop    esi
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048510:pop    edi
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048511:pop    ebp
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
0x8048512:ret    
    ax = V1091 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cx = V1092 [from 0x8048500:call   DWORD PTR ds:[esi]]
    dx = V1093 [from 0x8048500:call   DWORD PTR ds:[esi]]
    bx = <top>
    sp = <top>
    bp = <top>
    si = <top>
    di = <top>
    es = V1094 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cs = V1095 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ss = V1096 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ds = V1097 [from 0x8048500:call   DWORD PTR ds:[esi]]
    fs = V1098 [from 0x8048500:call   DWORD PTR ds:[esi]]
    gs = V1099 [from 0x8048500:call   DWORD PTR ds:[esi]]
    cf = <top>
    ?1 = V1101 [from 0x8048500:call   DWORD PTR ds:[esi]]
    pf = <top>
    ?3 = V1102 [from 0x8048500:call   DWORD PTR ds:[esi]]
    af = <top>
    ?5 = V1103 [from 0x8048500:call   DWORD PTR ds:[esi]]
    zf = <top>
    sf = <top>
    tf = V1104 [from 0x8048500:call   DWORD PTR ds:[esi]]
    if = V1105 [from 0x8048500:call   DWORD PTR ds:[esi]]
    df = V1106 [from 0x8048500:call   DWORD PTR ds:[esi]]
    of = <top>
    iopl0 = V1107 [from 0x8048500:call   DWORD PTR ds:[esi]]
    iopl1 = V1108 [from 0x8048500:call   DWORD PTR ds:[esi]]
    nt = V1109 [from 0x8048500:call   DWORD PTR ds:[esi]]
    ?15 = V1110 [from 0x8048500:call   DWORD PTR ds:[esi]]
    memory =     <top>
==============================================
Constant propagation in function "__libc_csu_fini"
==============================================
0x8048520:push   ebp
    ax = V1111
    cx = V1112
    dx = V1113
    bx = V1114
    sp = V1115-0x4 [from 0x8048520:push   ebp]
    bp = V1116
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = V1125
    ?1 = V1126
    pf = V1127
    ?3 = V1128
    af = V1129
    ?5 = V1130
    zf = V1131
    sf = V1132
    tf = V1133
    if = V1134
    df = V1135
    of = V1136
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048521:mov    ebp, esp
    ax = V1111
    cx = V1112
    dx = V1113
    bx = V1114
    sp = V1115-0x4 [from 0x8048520:push   ebp]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = V1125
    ?1 = V1126
    pf = V1127
    ?3 = V1128
    af = V1129
    ?5 = V1130
    zf = V1131
    sf = V1132
    tf = V1133
    if = V1134
    df = V1135
    of = V1136
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048523:push   edi
    ax = V1111
    cx = V1112
    dx = V1113
    bx = V1114
    sp = V1115-0x8 [from 0x8048523:push   edi]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = V1125
    ?1 = V1126
    pf = V1127
    ?3 = V1128
    af = V1129
    ?5 = V1130
    zf = V1131
    sf = V1132
    tf = V1133
    if = V1134
    df = V1135
    of = V1136
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048524:push   esi
    ax = V1111
    cx = V1112
    dx = V1113
    bx = V1114
    sp = V1115-0xc [from 0x8048524:push   esi]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = V1125
    ?1 = V1126
    pf = V1127
    ?3 = V1128
    af = V1129
    ?5 = V1130
    zf = V1131
    sf = V1132
    tf = V1133
    if = V1134
    df = V1135
    of = V1136
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048525:push   ebx
    ax = V1111
    cx = V1112
    dx = V1113
    bx = V1114
    sp = V1115-0x10 [from 0x8048525:push   ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = V1125
    ?1 = V1126
    pf = V1127
    ?3 = V1128
    af = V1129
    ?5 = V1130
    zf = V1131
    sf = V1132
    tf = V1133
    if = V1134
    df = V1135
    of = V1136
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048526:sub    esp, 0x0c
    ax = V1111
    cx = V1112
    dx = V1113
    bx = V1114
    sp = V1115-0x1c [from 0x8048526:sub    esp, 0x0c]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = -V1141-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?1 = V1126
    pf = -V1142-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?3 = V1128
    af = -V1143-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?5 = V1130
    zf = V1144 [from 0x8048526:sub    esp, 0x0c]
    sf = V1145 [from 0x8048526:sub    esp, 0x0c]
    tf = V1133
    if = V1134
    df = V1135
    of = V1146 [from 0x8048526:sub    esp, 0x0c]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048529:call   0x0804852e
    ax = V1111
    cx = V1112
    dx = V1113
    bx = V1114
    sp = V1115-0x20 [from 0x8048529:call   0x0804852e]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = -V1141-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?1 = V1126
    pf = -V1142-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?3 = V1128
    af = -V1143-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?5 = V1130
    zf = V1144 [from 0x8048526:sub    esp, 0x0c]
    sf = V1145 [from 0x8048526:sub    esp, 0x0c]
    tf = V1133
    if = V1134
    df = V1135
    of = V1146 [from 0x8048526:sub    esp, 0x0c]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x804852e:pop    ebx
    ax = V1111
    cx = V1112
    dx = V1113
    bx = 0x804852e [from 0x8048529:call   0x0804852e]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = -V1141-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?1 = V1126
    pf = -V1142-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?3 = V1128
    af = -V1143-0x1 [from 0x8048526:sub    esp, 0x0c]
    ?5 = V1130
    zf = V1144 [from 0x8048526:sub    esp, 0x0c]
    sf = V1145 [from 0x8048526:sub    esp, 0x0c]
    tf = V1133
    if = V1134
    df = V1135
    of = V1146 [from 0x8048526:sub    esp, 0x0c]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x804852f:add    ebx, 0x0000119a
    ax = V1111
    cx = V1112
    dx = V1113
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?1 = V1126
    pf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?3 = V1128
    af = 0x1 (-0x1) [from 0x804852f:add    ebx, 0x0000119a]
    ?5 = V1130
    zf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    sf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048535:lea    eax, [ebx + 0xffffff20]
    ax = 0x80495e8 [from 0x8048535:lea    eax, [ebx + 0xffffff20]]
    cx = V1112
    dx = V1113
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?1 = V1126
    pf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?3 = V1128
    af = 0x1 (-0x1) [from 0x804852f:add    ebx, 0x0000119a]
    ?5 = V1130
    zf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    sf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x804853b:lea    edx, [ebx + 0xffffff20]
    ax = 0x80495e8 [from 0x8048535:lea    eax, [ebx + 0xffffff20]]
    cx = V1112
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?1 = V1126
    pf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    ?3 = V1128
    af = 0x1 (-0x1) [from 0x804852f:add    ebx, 0x0000119a]
    ?5 = V1130
    zf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    sf = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x804852f:add    ebx, 0x0000119a]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048541:sub    eax, edx
    ax = 0x0 [from 0x8048541:sub    eax, edx]
    cx = V1112
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x8048541:sub    eax, edx]
    ?1 = V1126
    pf = 0x1 (-0x1) [from 0x8048541:sub    eax, edx]
    ?3 = V1128
    af = 0x0 [from 0x8048541:sub    eax, edx]
    ?5 = V1130
    zf = 0x1 (-0x1) [from 0x8048541:sub    eax, edx]
    sf = 0x0 [from 0x8048541:sub    eax, edx]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x8048541:sub    eax, edx]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048543:sar    eax, 0x02
    ax = 0x0 [from 0x8048543:sar    eax, 0x02]
    cx = V1112
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x8048543:sar    eax, 0x02]
    ?1 = V1126
    pf = 0x1 (-0x1) [from 0x8048543:sar    eax, 0x02]
    ?3 = V1128
    af = <top>
    ?5 = V1130
    zf = 0x1 (-0x1) [from 0x8048543:sar    eax, 0x02]
    sf = 0x0 [from 0x8048543:sar    eax, 0x02]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x8048543:sar    eax, 0x02]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax
    ax = 0x0 [from 0x8048543:sar    eax, 0x02]
    cx = V1112
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x8048543:sar    eax, 0x02]
    ?1 = V1126
    pf = 0x1 (-0x1) [from 0x8048543:sar    eax, 0x02]
    ?3 = V1128
    af = <top>
    ?5 = V1130
    zf = 0x1 (-0x1) [from 0x8048543:sar    eax, 0x02]
    sf = 0x0 [from 0x8048543:sar    eax, 0x02]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x8048543:sar    eax, 0x02]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048549:dec    eax
    ax = 0xffffffff (-0x1) [from 0x8048549:dec    eax]
    cx = V1112
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x8048543:sar    eax, 0x02]
    ?1 = V1126
    pf = 0x1 (-0x1) [from 0x8048549:dec    eax]
    ?3 = V1128
    af = 0x1 (-0x1) [from 0x8048549:dec    eax]
    ?5 = V1130
    zf = 0x0 [from 0x8048549:dec    eax]
    sf = 0x1 (-0x1) [from 0x8048549:dec    eax]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x8048549:dec    eax]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x804854a:cmp    eax, 0xff
    ax = 0xffffffff (-0x1) [from 0x8048549:dec    eax]
    cx = V1112
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?1 = V1126
    pf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    ?3 = V1128
    af = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?5 = V1130
    zf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    sf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x804854a:cmp    eax, 0xff]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x804854d:je     0x0804856b
    ax = 0xffffffff (-0x1) [from 0x8048549:dec    eax]
    cx = V1112
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x1c [from 0x804852e:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?1 = V1126
    pf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    ?3 = V1128
    af = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?5 = V1130
    zf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    sf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x804854a:cmp    eax, 0xff]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x804856b:call   0x080485b0
    ax = 0xffffffff (-0x1) [from 0x8048549:dec    eax]
    cx = V1112
    dx = 0x80495e8 [from 0x804853b:lea    edx, [ebx + 0xffffff20]]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x20 [from 0x804856b:call   0x080485b0]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1119
    cs = V1120
    ss = V1121
    ds = V1122
    fs = V1123
    gs = V1124
    cf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?1 = V1126
    pf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    ?3 = V1128
    af = 0x0 [from 0x804854a:cmp    eax, 0xff]
    ?5 = V1130
    zf = 0x1 (-0x1) [from 0x804854a:cmp    eax, 0xff]
    sf = 0x0 [from 0x804854a:cmp    eax, 0xff]
    tf = V1133
    if = V1134
    df = V1135
    of = 0x0 [from 0x804854a:cmp    eax, 0xff]
    iopl0 = V1137
    iopl1 = V1138
    nt = V1139
    ?15 = V1140
    memory = {
        size=4; addr=V1115-0x20 [from 0x804856b:call   0x080485b0]; value=0x8048570 [from 0x804856b:call   0x080485b0]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048570:add    esp, 0x0c
    ax = V1147 [from 0x804856b:call   0x080485b0]
    cx = V1148 [from 0x804856b:call   0x080485b0]
    dx = V1149 [from 0x804856b:call   0x080485b0]
    bx = 0x80496c8 [from 0x804852f:add    ebx, 0x0000119a]
    sp = V1115-0x10 [from 0x8048570:add    esp, 0x0c]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1150 [from 0x804856b:call   0x080485b0]
    cs = V1151 [from 0x804856b:call   0x080485b0]
    ss = V1152 [from 0x804856b:call   0x080485b0]
    ds = V1153 [from 0x804856b:call   0x080485b0]
    fs = V1154 [from 0x804856b:call   0x080485b0]
    gs = V1155 [from 0x804856b:call   0x080485b0]
    cf = V1156 [from 0x8048570:add    esp, 0x0c]
    ?1 = V1157 [from 0x804856b:call   0x080485b0]
    pf = -V1158-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = V1159 [from 0x804856b:call   0x080485b0]
    af = V1160 [from 0x8048570:add    esp, 0x0c]
    ?5 = V1161 [from 0x804856b:call   0x080485b0]
    zf = V1162 [from 0x8048570:add    esp, 0x0c]
    sf = V1163 [from 0x8048570:add    esp, 0x0c]
    tf = V1164 [from 0x804856b:call   0x080485b0]
    if = V1165 [from 0x804856b:call   0x080485b0]
    df = V1166 [from 0x804856b:call   0x080485b0]
    of = V1167 [from 0x8048570:add    esp, 0x0c]
    iopl0 = V1168 [from 0x804856b:call   0x080485b0]
    iopl1 = V1169 [from 0x804856b:call   0x080485b0]
    nt = V1170 [from 0x804856b:call   0x080485b0]
    ?15 = V1171 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048573:pop    ebx
    ax = V1147 [from 0x804856b:call   0x080485b0]
    cx = V1148 [from 0x804856b:call   0x080485b0]
    dx = V1149 [from 0x804856b:call   0x080485b0]
    bx = V1114
    sp = V1115-0xc [from 0x8048573:pop    ebx]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1150 [from 0x804856b:call   0x080485b0]
    cs = V1151 [from 0x804856b:call   0x080485b0]
    ss = V1152 [from 0x804856b:call   0x080485b0]
    ds = V1153 [from 0x804856b:call   0x080485b0]
    fs = V1154 [from 0x804856b:call   0x080485b0]
    gs = V1155 [from 0x804856b:call   0x080485b0]
    cf = V1156 [from 0x8048570:add    esp, 0x0c]
    ?1 = V1157 [from 0x804856b:call   0x080485b0]
    pf = -V1158-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = V1159 [from 0x804856b:call   0x080485b0]
    af = V1160 [from 0x8048570:add    esp, 0x0c]
    ?5 = V1161 [from 0x804856b:call   0x080485b0]
    zf = V1162 [from 0x8048570:add    esp, 0x0c]
    sf = V1163 [from 0x8048570:add    esp, 0x0c]
    tf = V1164 [from 0x804856b:call   0x080485b0]
    if = V1165 [from 0x804856b:call   0x080485b0]
    df = V1166 [from 0x804856b:call   0x080485b0]
    of = V1167 [from 0x8048570:add    esp, 0x0c]
    iopl0 = V1168 [from 0x804856b:call   0x080485b0]
    iopl1 = V1169 [from 0x804856b:call   0x080485b0]
    nt = V1170 [from 0x804856b:call   0x080485b0]
    ?15 = V1171 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048574:pop    esi
    ax = V1147 [from 0x804856b:call   0x080485b0]
    cx = V1148 [from 0x804856b:call   0x080485b0]
    dx = V1149 [from 0x804856b:call   0x080485b0]
    bx = V1114
    sp = V1115-0x8 [from 0x8048574:pop    esi]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1150 [from 0x804856b:call   0x080485b0]
    cs = V1151 [from 0x804856b:call   0x080485b0]
    ss = V1152 [from 0x804856b:call   0x080485b0]
    ds = V1153 [from 0x804856b:call   0x080485b0]
    fs = V1154 [from 0x804856b:call   0x080485b0]
    gs = V1155 [from 0x804856b:call   0x080485b0]
    cf = V1156 [from 0x8048570:add    esp, 0x0c]
    ?1 = V1157 [from 0x804856b:call   0x080485b0]
    pf = -V1158-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = V1159 [from 0x804856b:call   0x080485b0]
    af = V1160 [from 0x8048570:add    esp, 0x0c]
    ?5 = V1161 [from 0x804856b:call   0x080485b0]
    zf = V1162 [from 0x8048570:add    esp, 0x0c]
    sf = V1163 [from 0x8048570:add    esp, 0x0c]
    tf = V1164 [from 0x804856b:call   0x080485b0]
    if = V1165 [from 0x804856b:call   0x080485b0]
    df = V1166 [from 0x804856b:call   0x080485b0]
    of = V1167 [from 0x8048570:add    esp, 0x0c]
    iopl0 = V1168 [from 0x804856b:call   0x080485b0]
    iopl1 = V1169 [from 0x804856b:call   0x080485b0]
    nt = V1170 [from 0x804856b:call   0x080485b0]
    ?15 = V1171 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048575:pop    edi
    ax = V1147 [from 0x804856b:call   0x080485b0]
    cx = V1148 [from 0x804856b:call   0x080485b0]
    dx = V1149 [from 0x804856b:call   0x080485b0]
    bx = V1114
    sp = V1115-0x4 [from 0x8048575:pop    edi]
    bp = V1115-0x4 [from 0x8048520:push   ebp]
    si = V1117
    di = V1118
    es = V1150 [from 0x804856b:call   0x080485b0]
    cs = V1151 [from 0x804856b:call   0x080485b0]
    ss = V1152 [from 0x804856b:call   0x080485b0]
    ds = V1153 [from 0x804856b:call   0x080485b0]
    fs = V1154 [from 0x804856b:call   0x080485b0]
    gs = V1155 [from 0x804856b:call   0x080485b0]
    cf = V1156 [from 0x8048570:add    esp, 0x0c]
    ?1 = V1157 [from 0x804856b:call   0x080485b0]
    pf = -V1158-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = V1159 [from 0x804856b:call   0x080485b0]
    af = V1160 [from 0x8048570:add    esp, 0x0c]
    ?5 = V1161 [from 0x804856b:call   0x080485b0]
    zf = V1162 [from 0x8048570:add    esp, 0x0c]
    sf = V1163 [from 0x8048570:add    esp, 0x0c]
    tf = V1164 [from 0x804856b:call   0x080485b0]
    if = V1165 [from 0x804856b:call   0x080485b0]
    df = V1166 [from 0x804856b:call   0x080485b0]
    of = V1167 [from 0x8048570:add    esp, 0x0c]
    iopl0 = V1168 [from 0x804856b:call   0x080485b0]
    iopl1 = V1169 [from 0x804856b:call   0x080485b0]
    nt = V1170 [from 0x804856b:call   0x080485b0]
    ?15 = V1171 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048576:pop    ebp
    ax = V1147 [from 0x804856b:call   0x080485b0]
    cx = V1148 [from 0x804856b:call   0x080485b0]
    dx = V1149 [from 0x804856b:call   0x080485b0]
    bx = V1114
    sp = V1115 [from 0x8048576:pop    ebp]
    bp = V1116
    si = V1117
    di = V1118
    es = V1150 [from 0x804856b:call   0x080485b0]
    cs = V1151 [from 0x804856b:call   0x080485b0]
    ss = V1152 [from 0x804856b:call   0x080485b0]
    ds = V1153 [from 0x804856b:call   0x080485b0]
    fs = V1154 [from 0x804856b:call   0x080485b0]
    gs = V1155 [from 0x804856b:call   0x080485b0]
    cf = V1156 [from 0x8048570:add    esp, 0x0c]
    ?1 = V1157 [from 0x804856b:call   0x080485b0]
    pf = -V1158-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = V1159 [from 0x804856b:call   0x080485b0]
    af = V1160 [from 0x8048570:add    esp, 0x0c]
    ?5 = V1161 [from 0x804856b:call   0x080485b0]
    zf = V1162 [from 0x8048570:add    esp, 0x0c]
    sf = V1163 [from 0x8048570:add    esp, 0x0c]
    tf = V1164 [from 0x804856b:call   0x080485b0]
    if = V1165 [from 0x804856b:call   0x080485b0]
    df = V1166 [from 0x804856b:call   0x080485b0]
    of = V1167 [from 0x8048570:add    esp, 0x0c]
    iopl0 = V1168 [from 0x804856b:call   0x080485b0]
    iopl1 = V1169 [from 0x804856b:call   0x080485b0]
    nt = V1170 [from 0x804856b:call   0x080485b0]
    ?15 = V1171 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
0x8048577:ret    
    ax = V1147 [from 0x804856b:call   0x080485b0]
    cx = V1148 [from 0x804856b:call   0x080485b0]
    dx = V1149 [from 0x804856b:call   0x080485b0]
    bx = V1114
    sp = V1115+0x4 [from 0x8048577:ret    ]
    bp = V1116
    si = V1117
    di = V1118
    es = V1150 [from 0x804856b:call   0x080485b0]
    cs = V1151 [from 0x804856b:call   0x080485b0]
    ss = V1152 [from 0x804856b:call   0x080485b0]
    ds = V1153 [from 0x804856b:call   0x080485b0]
    fs = V1154 [from 0x804856b:call   0x080485b0]
    gs = V1155 [from 0x804856b:call   0x080485b0]
    cf = V1156 [from 0x8048570:add    esp, 0x0c]
    ?1 = V1157 [from 0x804856b:call   0x080485b0]
    pf = -V1158-0x1 [from 0x8048570:add    esp, 0x0c]
    ?3 = V1159 [from 0x804856b:call   0x080485b0]
    af = V1160 [from 0x8048570:add    esp, 0x0c]
    ?5 = V1161 [from 0x804856b:call   0x080485b0]
    zf = V1162 [from 0x8048570:add    esp, 0x0c]
    sf = V1163 [from 0x8048570:add    esp, 0x0c]
    tf = V1164 [from 0x804856b:call   0x080485b0]
    if = V1165 [from 0x804856b:call   0x080485b0]
    df = V1166 [from 0x804856b:call   0x080485b0]
    of = V1167 [from 0x8048570:add    esp, 0x0c]
    iopl0 = V1168 [from 0x804856b:call   0x080485b0]
    iopl1 = V1169 [from 0x804856b:call   0x080485b0]
    nt = V1170 [from 0x804856b:call   0x080485b0]
    ?15 = V1171 [from 0x804856b:call   0x080485b0]
    memory = {
        size=4; addr=V1115-0x20 [from 0x8048529:call   0x0804852e]; value=0x804852e [from 0x8048529:call   0x0804852e]
        size=4; addr=V1115-0x14 [from 0x8048546:mov    DWORD PTR ss:[ebp + 0xf0], eax]; value=0x0 [from 0x8048543:sar    eax, 0x02]
        size=4; addr=V1115-0x10 [from 0x8048525:push   ebx]; value=V1114
        size=4; addr=V1115-0xc [from 0x8048524:push   esi]; value=V1117
        size=4; addr=V1115-0x8 [from 0x8048523:push   edi]; value=V1118
        size=4; addr=V1115-0x4 [from 0x8048520:push   ebp]; value=V1116
    }
==============================================
Constant propagation in function "0x8048578"
==============================================
0x8048578:nop    
    ax = V1172
    cx = V1173
    dx = V1174
    bx = V1175
    sp = V1176
    bp = V1177
    si = V1178
    di = V1179
    es = V1180
    cs = V1181
    ss = V1182
    ds = V1183
    fs = V1184
    gs = V1185
    cf = V1186
    ?1 = V1187
    pf = V1188
    ?3 = V1189
    af = V1190
    ?5 = V1191
    zf = V1192
    sf = V1193
    tf = V1194
    if = V1195
    df = V1196
    of = V1197
    iopl0 = V1198
    iopl1 = V1199
    nt = V1200
    ?15 = V1201
    memory = {}
0x8048579:nop    
    ax = V1172
    cx = V1173
    dx = V1174
    bx = V1175
    sp = V1176
    bp = V1177
    si = V1178
    di = V1179
    es = V1180
    cs = V1181
    ss = V1182
    ds = V1183
    fs = V1184
    gs = V1185
    cf = V1186
    ?1 = V1187
    pf = V1188
    ?3 = V1189
    af = V1190
    ?5 = V1191
    zf = V1192
    sf = V1193
    tf = V1194
    if = V1195
    df = V1196
    of = V1197
    iopl0 = V1198
    iopl1 = V1199
    nt = V1200
    ?15 = V1201
    memory = {}
0x804857a:nop    
    ax = V1172
    cx = V1173
    dx = V1174
    bx = V1175
    sp = V1176
    bp = V1177
    si = V1178
    di = V1179
    es = V1180
    cs = V1181
    ss = V1182
    ds = V1183
    fs = V1184
    gs = V1185
    cf = V1186
    ?1 = V1187
    pf = V1188
    ?3 = V1189
    af = V1190
    ?5 = V1191
    zf = V1192
    sf = V1193
    tf = V1194
    if = V1195
    df = V1196
    of = V1197
    iopl0 = V1198
    iopl1 = V1199
    nt = V1200
    ?15 = V1201
    memory = {}
0x804857b:nop    
    ax = V1172
    cx = V1173
    dx = V1174
    bx = V1175
    sp = V1176
    bp = V1177
    si = V1178
    di = V1179
    es = V1180
    cs = V1181
    ss = V1182
    ds = V1183
    fs = V1184
    gs = V1185
    cf = V1186
    ?1 = V1187
    pf = V1188
    ?3 = V1189
    af = V1190
    ?5 = V1191
    zf = V1192
    sf = V1193
    tf = V1194
    if = V1195
    df = V1196
    of = V1197
    iopl0 = V1198
    iopl1 = V1199
    nt = V1200
    ?15 = V1201
    memory = {}
0x804857c:nop    
    ax = V1172
    cx = V1173
    dx = V1174
    bx = V1175
    sp = V1176
    bp = V1177
    si = V1178
    di = V1179
    es = V1180
    cs = V1181
    ss = V1182
    ds = V1183
    fs = V1184
    gs = V1185
    cf = V1186
    ?1 = V1187
    pf = V1188
    ?3 = V1189
    af = V1190
    ?5 = V1191
    zf = V1192
    sf = V1193
    tf = V1194
    if = V1195
    df = V1196
    of = V1197
    iopl0 = V1198
    iopl1 = V1199
    nt = V1200
    ?15 = V1201
    memory = {}
0x804857d:nop    
    ax = V1172
    cx = V1173
    dx = V1174
    bx = V1175
    sp = V1176
    bp = V1177
    si = V1178
    di = V1179
    es = V1180
    cs = V1181
    ss = V1182
    ds = V1183
    fs = V1184
    gs = V1185
    cf = V1186
    ?1 = V1187
    pf = V1188
    ?3 = V1189
    af = V1190
    ?5 = V1191
    zf = V1192
    sf = V1193
    tf = V1194
    if = V1195
    df = V1196
    of = V1197
    iopl0 = V1198
    iopl1 = V1199
    nt = V1200
    ?15 = V1201
    memory = {}
0x804857e:nop    
    ax = V1172
    cx = V1173
    dx = V1174
    bx = V1175
    sp = V1176
    bp = V1177
    si = V1178
    di = V1179
    es = V1180
    cs = V1181
    ss = V1182
    ds = V1183
    fs = V1184
    gs = V1185
    cf = V1186
    ?1 = V1187
    pf = V1188
    ?3 = V1189
    af = V1190
    ?5 = V1191
    zf = V1192
    sf = V1193
    tf = V1194
    if = V1195
    df = V1196
    of = V1197
    iopl0 = V1198
    iopl1 = V1199
    nt = V1200
    ?15 = V1201
    memory = {}
0x804857f:nop    
    ax = V1172
    cx = V1173
    dx = V1174
    bx = V1175
    sp = V1176
    bp = V1177
    si = V1178
    di = V1179
    es = V1180
    cs = V1181
    ss = V1182
    ds = V1183
    fs = V1184
    gs = V1185
    cf = V1186
    ?1 = V1187
    pf = V1188
    ?3 = V1189
    af = V1190
    ?5 = V1191
    zf = V1192
    sf = V1193
    tf = V1194
    if = V1195
    df = V1196
    of = V1197
    iopl0 = V1198
    iopl1 = V1199
    nt = V1200
    ?15 = V1201
    memory = {}
==============================================
Constant propagation in function "__do_global_ctors_aux"
==============================================
0x8048580:push   ebp
    ax = V1202
    cx = V1203
    dx = V1204
    bx = V1205
    sp = V1206-0x4 [from 0x8048580:push   ebp]
    bp = V1207
    si = V1208
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = V1216
    ?1 = V1217
    pf = V1218
    ?3 = V1219
    af = V1220
    ?5 = V1221
    zf = V1222
    sf = V1223
    tf = V1224
    if = V1225
    df = V1226
    of = V1227
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x8048581:mov    ebp, esp
    ax = V1202
    cx = V1203
    dx = V1204
    bx = V1205
    sp = V1206-0x4 [from 0x8048580:push   ebp]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = V1216
    ?1 = V1217
    pf = V1218
    ?3 = V1219
    af = V1220
    ?5 = V1221
    zf = V1222
    sf = V1223
    tf = V1224
    if = V1225
    df = V1226
    of = V1227
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x8048583:push   ebx
    ax = V1202
    cx = V1203
    dx = V1204
    bx = V1205
    sp = V1206-0x8 [from 0x8048583:push   ebx]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = V1216
    ?1 = V1217
    pf = V1218
    ?3 = V1219
    af = V1220
    ?5 = V1221
    zf = V1222
    sf = V1223
    tf = V1224
    if = V1225
    df = V1226
    of = V1227
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x8048584:sub    esp, 0x04
    ax = V1202
    cx = V1203
    dx = V1204
    bx = V1205
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = -V1232-0x1 [from 0x8048584:sub    esp, 0x04]
    ?1 = V1217
    pf = -V1233-0x1 [from 0x8048584:sub    esp, 0x04]
    ?3 = V1219
    af = -V1234-0x1 [from 0x8048584:sub    esp, 0x04]
    ?5 = V1221
    zf = V1235 [from 0x8048584:sub    esp, 0x04]
    sf = V1236 [from 0x8048584:sub    esp, 0x04]
    tf = V1224
    if = V1225
    df = V1226
    of = V1237 [from 0x8048584:sub    esp, 0x04]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x8048587:mov    ebx, 0x080495e8
    ax = V1202
    cx = V1203
    dx = V1204
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = -V1232-0x1 [from 0x8048584:sub    esp, 0x04]
    ?1 = V1217
    pf = -V1233-0x1 [from 0x8048584:sub    esp, 0x04]
    ?3 = V1219
    af = -V1234-0x1 [from 0x8048584:sub    esp, 0x04]
    ?5 = V1221
    zf = V1235 [from 0x8048584:sub    esp, 0x04]
    sf = V1236 [from 0x8048584:sub    esp, 0x04]
    tf = V1224
    if = V1225
    df = V1226
    of = V1237 [from 0x8048584:sub    esp, 0x04]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]
    ax = V1238 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = V1203
    dx = V1204
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = -V1232-0x1 [from 0x8048584:sub    esp, 0x04]
    ?1 = V1217
    pf = -V1233-0x1 [from 0x8048584:sub    esp, 0x04]
    ?3 = V1219
    af = -V1234-0x1 [from 0x8048584:sub    esp, 0x04]
    ?5 = V1221
    zf = V1235 [from 0x8048584:sub    esp, 0x04]
    sf = V1236 [from 0x8048584:sub    esp, 0x04]
    tf = V1224
    if = V1225
    df = V1226
    of = V1237 [from 0x8048584:sub    esp, 0x04]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x8048591:cmp    eax, 0xff
    ax = V1238 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = V1203
    dx = V1204
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = -V1239-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?1 = V1217
    pf = -V1240-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?3 = V1219
    af = -V1241-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?5 = V1221
    zf = V1242 [from 0x8048591:cmp    eax, 0xff]
    sf = V1243 [from 0x8048591:cmp    eax, 0xff]
    tf = V1224
    if = V1225
    df = V1226
    of = V1244 [from 0x8048591:cmp    eax, 0xff]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x8048594:je     0x080485ac
    ax = V1238 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = V1203
    dx = V1204
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = -V1239-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?1 = V1217
    pf = -V1240-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?3 = V1219
    af = -V1241-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?5 = V1221
    zf = V1242 [from 0x8048591:cmp    eax, 0xff]
    sf = V1243 [from 0x8048591:cmp    eax, 0xff]
    tf = V1224
    if = V1225
    df = V1226
    of = V1244 [from 0x8048591:cmp    eax, 0xff]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x8048596:lea    esi, [esi + 0x00]
    ax = V1238 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = V1203
    dx = V1204
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = V1209
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = -V1239-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?1 = V1217
    pf = -V1240-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?3 = V1219
    af = -V1241-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?5 = V1221
    zf = V1242 [from 0x8048591:cmp    eax, 0xff]
    sf = V1243 [from 0x8048591:cmp    eax, 0xff]
    tf = V1224
    if = V1225
    df = V1226
    of = V1244 [from 0x8048591:cmp    eax, 0xff]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x8048599:lea    edi, [edi + 0x00000000]
    ax = V1238 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = V1203
    dx = V1204
    bx = 0x80495e8 [from 0x8048587:mov    ebx, 0x080495e8]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = V1209 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = -V1239-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?1 = V1217
    pf = -V1240-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?3 = V1219
    af = -V1241-0x1 [from 0x8048591:cmp    eax, 0xff]
    ?5 = V1221
    zf = V1242 [from 0x8048591:cmp    eax, 0xff]
    sf = V1243 [from 0x8048591:cmp    eax, 0xff]
    tf = V1224
    if = V1225
    df = V1226
    of = V1244 [from 0x8048591:cmp    eax, 0xff]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x80485a0:sub    ebx, 0x04
    ax = V1238 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = V1203
    dx = V1204
    bx = 0x80495e4 [from 0x80485a0:sub    ebx, 0x04]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = V1209 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    ?1 = V1217
    pf = 0x1 (-0x1) [from 0x80485a0:sub    ebx, 0x04]
    ?3 = V1219
    af = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    ?5 = V1221
    zf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    sf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    tf = V1224
    if = V1225
    df = V1226
    of = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x80485a3:call   eax
    ax = V1238 [from 0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]]
    cx = V1203
    dx = V1204
    bx = 0x80495e4 [from 0x80485a0:sub    ebx, 0x04]
    sp = V1206-0x10 [from 0x80485a3:call   eax]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = V1209 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = V1210
    cs = V1211
    ss = V1212
    ds = V1213
    fs = V1214
    gs = V1215
    cf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    ?1 = V1217
    pf = 0x1 (-0x1) [from 0x80485a0:sub    ebx, 0x04]
    ?3 = V1219
    af = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    ?5 = V1221
    zf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    sf = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    tf = V1224
    if = V1225
    df = V1226
    of = 0x0 [from 0x80485a0:sub    ebx, 0x04]
    iopl0 = V1228
    iopl1 = V1229
    nt = V1230
    ?15 = V1231
    memory = {
        size=4; addr=V1206-0x10 [from 0x80485a3:call   eax]; value=0x80485a5 [from 0x80485a3:call   eax]
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    ax = V1245 [from 0x80485a5:mov    eax, DWORD PTR ds:[ebx]]
    cx = V1246 [from 0x80485a3:call   eax]
    dx = V1247 [from 0x80485a3:call   eax]
    bx = 0x80495e4 [from 0x80485a0:sub    ebx, 0x04]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = V1209 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = V1248 [from 0x80485a3:call   eax]
    cs = V1249 [from 0x80485a3:call   eax]
    ss = V1250 [from 0x80485a3:call   eax]
    ds = V1251 [from 0x80485a3:call   eax]
    fs = V1252 [from 0x80485a3:call   eax]
    gs = V1253 [from 0x80485a3:call   eax]
    cf = V1254 [from 0x80485a3:call   eax]
    ?1 = V1255 [from 0x80485a3:call   eax]
    pf = V1256 [from 0x80485a3:call   eax]
    ?3 = V1257 [from 0x80485a3:call   eax]
    af = V1258 [from 0x80485a3:call   eax]
    ?5 = V1259 [from 0x80485a3:call   eax]
    zf = V1260 [from 0x80485a3:call   eax]
    sf = V1261 [from 0x80485a3:call   eax]
    tf = V1262 [from 0x80485a3:call   eax]
    if = V1263 [from 0x80485a3:call   eax]
    df = V1264 [from 0x80485a3:call   eax]
    of = V1265 [from 0x80485a3:call   eax]
    iopl0 = V1266 [from 0x80485a3:call   eax]
    iopl1 = V1267 [from 0x80485a3:call   eax]
    nt = V1268 [from 0x80485a3:call   eax]
    ?15 = V1269 [from 0x80485a3:call   eax]
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x80485a7:cmp    eax, 0xff
    ax = V1245 [from 0x80485a5:mov    eax, DWORD PTR ds:[ebx]]
    cx = V1246 [from 0x80485a3:call   eax]
    dx = V1247 [from 0x80485a3:call   eax]
    bx = 0x80495e4 [from 0x80485a0:sub    ebx, 0x04]
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = V1209 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = V1248 [from 0x80485a3:call   eax]
    cs = V1249 [from 0x80485a3:call   eax]
    ss = V1250 [from 0x80485a3:call   eax]
    ds = V1251 [from 0x80485a3:call   eax]
    fs = V1252 [from 0x80485a3:call   eax]
    gs = V1253 [from 0x80485a3:call   eax]
    cf = -V1270-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?1 = V1255 [from 0x80485a3:call   eax]
    pf = -V1271-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?3 = V1257 [from 0x80485a3:call   eax]
    af = -V1272-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?5 = V1259 [from 0x80485a3:call   eax]
    zf = V1273 [from 0x80485a7:cmp    eax, 0xff]
    sf = V1274 [from 0x80485a7:cmp    eax, 0xff]
    tf = V1262 [from 0x80485a3:call   eax]
    if = V1263 [from 0x80485a3:call   eax]
    df = V1264 [from 0x80485a3:call   eax]
    of = V1275 [from 0x80485a7:cmp    eax, 0xff]
    iopl0 = V1266 [from 0x80485a3:call   eax]
    iopl1 = V1267 [from 0x80485a3:call   eax]
    nt = V1268 [from 0x80485a3:call   eax]
    ?15 = V1269 [from 0x80485a3:call   eax]
    memory = {
        size=4; addr=V1206-0x8 [from 0x8048583:push   ebx]; value=V1205
        size=4; addr=V1206-0x4 [from 0x8048580:push   ebp]; value=V1207
    }
0x80485aa:jne    0x080485a0
    ax = V1245 [from 0x80485a5:mov    eax, DWORD PTR ds:[ebx]]
    cx = V1246 [from 0x80485a3:call   eax]
    dx = V1247 [from 0x80485a3:call   eax]
    bx = V1276
    sp = V1206-0xc [from 0x8048584:sub    esp, 0x04]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208 [from 0x8048596:lea    esi, [esi + 0x00]]
    di = V1209 [from 0x8048599:lea    edi, [edi + 0x00000000]]
    es = V1248 [from 0x80485a3:call   eax]
    cs = V1249 [from 0x80485a3:call   eax]
    ss = V1250 [from 0x80485a3:call   eax]
    ds = V1251 [from 0x80485a3:call   eax]
    fs = V1252 [from 0x80485a3:call   eax]
    gs = V1253 [from 0x80485a3:call   eax]
    cf = -V1270-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?1 = V1255 [from 0x80485a3:call   eax]
    pf = -V1271-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?3 = V1257 [from 0x80485a3:call   eax]
    af = -V1272-0x1 [from 0x80485a7:cmp    eax, 0xff]
    ?5 = V1259 [from 0x80485a3:call   eax]
    zf = V1273 [from 0x80485a7:cmp    eax, 0xff]
    sf = V1274 [from 0x80485a7:cmp    eax, 0xff]
    tf = V1262 [from 0x80485a3:call   eax]
    if = V1263 [from 0x80485a3:call   eax]
    df = V1264 [from 0x80485a3:call   eax]
    of = V1275 [from 0x80485a7:cmp    eax, 0xff]
    iopl0 = V1266 [from 0x80485a3:call   eax]
    iopl1 = V1267 [from 0x80485a3:call   eax]
    nt = V1268 [from 0x80485a3:call   eax]
    ?15 = V1269 [from 0x80485a3:call   eax]
    memory = {}
0x80485ac:pop    eax
    ax = V1277 [from 0x80485ac:pop    eax]
    cx = V1278
    dx = V1279
    bx = V1280
    sp = V1206-0x8 [from 0x80485ac:pop    eax]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1281
    cs = V1282
    ss = V1283
    ds = V1284
    fs = V1285
    gs = V1286
    cf = V1287
    ?1 = V1288
    pf = V1289
    ?3 = V1290
    af = V1291
    ?5 = V1292
    zf = V1293
    sf = V1294
    tf = V1295
    if = V1296
    df = V1297
    of = V1298
    iopl0 = V1299
    iopl1 = V1300
    nt = V1301
    ?15 = V1302
    memory = {}
0x80485ad:pop    ebx
    ax = V1277 [from 0x80485ac:pop    eax]
    cx = V1278
    dx = V1279
    bx = V1303 [from 0x80485ad:pop    ebx]
    sp = V1206-0x4 [from 0x80485ad:pop    ebx]
    bp = V1206-0x4 [from 0x8048580:push   ebp]
    si = V1208
    di = V1209
    es = V1281
    cs = V1282
    ss = V1283
    ds = V1284
    fs = V1285
    gs = V1286
    cf = V1287
    ?1 = V1288
    pf = V1289
    ?3 = V1290
    af = V1291
    ?5 = V1292
    zf = V1293
    sf = V1294
    tf = V1295
    if = V1296
    df = V1297
    of = V1298
    iopl0 = V1299
    iopl1 = V1300
    nt = V1301
    ?15 = V1302
    memory = {}
0x80485ae:pop    ebp
    ax = V1277 [from 0x80485ac:pop    eax]
    cx = V1278
    dx = V1279
    bx = V1303 [from 0x80485ad:pop    ebx]
    sp = V1206 [from 0x80485ae:pop    ebp]
    bp = V1304 [from 0x80485ae:pop    ebp]
    si = V1208
    di = V1209
    es = V1281
    cs = V1282
    ss = V1283
    ds = V1284
    fs = V1285
    gs = V1286
    cf = V1287
    ?1 = V1288
    pf = V1289
    ?3 = V1290
    af = V1291
    ?5 = V1292
    zf = V1293
    sf = V1294
    tf = V1295
    if = V1296
    df = V1297
    of = V1298
    iopl0 = V1299
    iopl1 = V1300
    nt = V1301
    ?15 = V1302
    memory = {}
0x80485af:ret    
    ax = V1277 [from 0x80485ac:pop    eax]
    cx = V1278
    dx = V1279
    bx = V1303 [from 0x80485ad:pop    ebx]
    sp = V1206+0x4 [from 0x80485af:ret    ]
    bp = V1304 [from 0x80485ae:pop    ebp]
    si = V1208
    di = V1209
    es = V1281
    cs = V1282
    ss = V1283
    ds = V1284
    fs = V1285
    gs = V1286
    cf = V1287
    ?1 = V1288
    pf = V1289
    ?3 = V1290
    af = V1291
    ?5 = V1292
    zf = V1293
    sf = V1294
    tf = V1295
    if = V1296
    df = V1297
    of = V1298
    iopl0 = V1299
    iopl1 = V1300
    nt = V1301
    ?15 = V1302
    memory = {}
==============================================
Constant propagation in function "_fini"
==============================================
0x80485b0:push   ebp
    ax = V1305
    cx = V1306
    dx = V1307
    bx = V1308
    sp = V1309-0x4 [from 0x80485b0:push   ebp]
    bp = V1310
    si = V1311
    di = V1312
    es = V1313
    cs = V1314
    ss = V1315
    ds = V1316
    fs = V1317
    gs = V1318
    cf = V1319
    ?1 = V1320
    pf = V1321
    ?3 = V1322
    af = V1323
    ?5 = V1324
    zf = V1325
    sf = V1326
    tf = V1327
    if = V1328
    df = V1329
    of = V1330
    iopl0 = V1331
    iopl1 = V1332
    nt = V1333
    ?15 = V1334
    memory = {
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485b1:mov    ebp, esp
    ax = V1305
    cx = V1306
    dx = V1307
    bx = V1308
    sp = V1309-0x4 [from 0x80485b0:push   ebp]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1313
    cs = V1314
    ss = V1315
    ds = V1316
    fs = V1317
    gs = V1318
    cf = V1319
    ?1 = V1320
    pf = V1321
    ?3 = V1322
    af = V1323
    ?5 = V1324
    zf = V1325
    sf = V1326
    tf = V1327
    if = V1328
    df = V1329
    of = V1330
    iopl0 = V1331
    iopl1 = V1332
    nt = V1333
    ?15 = V1334
    memory = {
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485b3:push   ebx
    ax = V1305
    cx = V1306
    dx = V1307
    bx = V1308
    sp = V1309-0x8 [from 0x80485b3:push   ebx]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1313
    cs = V1314
    ss = V1315
    ds = V1316
    fs = V1317
    gs = V1318
    cf = V1319
    ?1 = V1320
    pf = V1321
    ?3 = V1322
    af = V1323
    ?5 = V1324
    zf = V1325
    sf = V1326
    tf = V1327
    if = V1328
    df = V1329
    of = V1330
    iopl0 = V1331
    iopl1 = V1332
    nt = V1333
    ?15 = V1334
    memory = {
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485b4:push   eax
    ax = V1305
    cx = V1306
    dx = V1307
    bx = V1308
    sp = V1309-0xc [from 0x80485b4:push   eax]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1313
    cs = V1314
    ss = V1315
    ds = V1316
    fs = V1317
    gs = V1318
    cf = V1319
    ?1 = V1320
    pf = V1321
    ?3 = V1322
    af = V1323
    ?5 = V1324
    zf = V1325
    sf = V1326
    tf = V1327
    if = V1328
    df = V1329
    of = V1330
    iopl0 = V1331
    iopl1 = V1332
    nt = V1333
    ?15 = V1334
    memory = {
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485b5:call   0x080485ba
    ax = V1305
    cx = V1306
    dx = V1307
    bx = V1308
    sp = V1309-0x10 [from 0x80485b5:call   0x080485ba]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1313
    cs = V1314
    ss = V1315
    ds = V1316
    fs = V1317
    gs = V1318
    cf = V1319
    ?1 = V1320
    pf = V1321
    ?3 = V1322
    af = V1323
    ?5 = V1324
    zf = V1325
    sf = V1326
    tf = V1327
    if = V1328
    df = V1329
    of = V1330
    iopl0 = V1331
    iopl1 = V1332
    nt = V1333
    ?15 = V1334
    memory = {
        size=4; addr=V1309-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485ba:pop    ebx
    ax = V1305
    cx = V1306
    dx = V1307
    bx = 0x80485ba [from 0x80485b5:call   0x080485ba]
    sp = V1309-0xc [from 0x80485ba:pop    ebx]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1313
    cs = V1314
    ss = V1315
    ds = V1316
    fs = V1317
    gs = V1318
    cf = V1319
    ?1 = V1320
    pf = V1321
    ?3 = V1322
    af = V1323
    ?5 = V1324
    zf = V1325
    sf = V1326
    tf = V1327
    if = V1328
    df = V1329
    of = V1330
    iopl0 = V1331
    iopl1 = V1332
    nt = V1333
    ?15 = V1334
    memory = {
        size=4; addr=V1309-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485bb:add    ebx, 0x0000110e
    ax = V1305
    cx = V1306
    dx = V1307
    bx = 0x80496c8 [from 0x80485bb:add    ebx, 0x0000110e]
    sp = V1309-0xc [from 0x80485ba:pop    ebx]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1313
    cs = V1314
    ss = V1315
    ds = V1316
    fs = V1317
    gs = V1318
    cf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    ?1 = V1320
    pf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    ?3 = V1322
    af = 0x1 (-0x1) [from 0x80485bb:add    ebx, 0x0000110e]
    ?5 = V1324
    zf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    sf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    tf = V1327
    if = V1328
    df = V1329
    of = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    iopl0 = V1331
    iopl1 = V1332
    nt = V1333
    ?15 = V1334
    memory = {
        size=4; addr=V1309-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485c1:call   0x08048390
    ax = V1305
    cx = V1306
    dx = V1307
    bx = 0x80496c8 [from 0x80485bb:add    ebx, 0x0000110e]
    sp = V1309-0x10 [from 0x80485c1:call   0x08048390]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1313
    cs = V1314
    ss = V1315
    ds = V1316
    fs = V1317
    gs = V1318
    cf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    ?1 = V1320
    pf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    ?3 = V1322
    af = 0x1 (-0x1) [from 0x80485bb:add    ebx, 0x0000110e]
    ?5 = V1324
    zf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    sf = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    tf = V1327
    if = V1328
    df = V1329
    of = 0x0 [from 0x80485bb:add    ebx, 0x0000110e]
    iopl0 = V1331
    iopl1 = V1332
    nt = V1333
    ?15 = V1334
    memory = {
        size=4; addr=V1309-0x10 [from 0x80485c1:call   0x08048390]; value=0x80485c6 [from 0x80485c1:call   0x08048390]
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485c6:pop    eax
    ax = V1305
    cx = V1335 [from 0x80485c1:call   0x08048390]
    dx = V1336 [from 0x80485c1:call   0x08048390]
    bx = 0x80496c8 [from 0x80485bb:add    ebx, 0x0000110e]
    sp = V1309-0x8 [from 0x80485c6:pop    eax]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1337 [from 0x80485c1:call   0x08048390]
    cs = V1338 [from 0x80485c1:call   0x08048390]
    ss = V1339 [from 0x80485c1:call   0x08048390]
    ds = V1340 [from 0x80485c1:call   0x08048390]
    fs = V1341 [from 0x80485c1:call   0x08048390]
    gs = V1342 [from 0x80485c1:call   0x08048390]
    cf = V1343 [from 0x80485c1:call   0x08048390]
    ?1 = V1344 [from 0x80485c1:call   0x08048390]
    pf = V1345 [from 0x80485c1:call   0x08048390]
    ?3 = V1346 [from 0x80485c1:call   0x08048390]
    af = V1347 [from 0x80485c1:call   0x08048390]
    ?5 = V1348 [from 0x80485c1:call   0x08048390]
    zf = V1349 [from 0x80485c1:call   0x08048390]
    sf = V1350 [from 0x80485c1:call   0x08048390]
    tf = V1351 [from 0x80485c1:call   0x08048390]
    if = V1352 [from 0x80485c1:call   0x08048390]
    df = V1353 [from 0x80485c1:call   0x08048390]
    of = V1354 [from 0x80485c1:call   0x08048390]
    iopl0 = V1355 [from 0x80485c1:call   0x08048390]
    iopl1 = V1356 [from 0x80485c1:call   0x08048390]
    nt = V1357 [from 0x80485c1:call   0x08048390]
    ?15 = V1358 [from 0x80485c1:call   0x08048390]
    memory = {
        size=4; addr=V1309-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485c7:pop    ebx
    ax = V1305
    cx = V1335 [from 0x80485c1:call   0x08048390]
    dx = V1336 [from 0x80485c1:call   0x08048390]
    bx = V1308
    sp = V1309-0x4 [from 0x80485c7:pop    ebx]
    bp = V1309-0x4 [from 0x80485b0:push   ebp]
    si = V1311
    di = V1312
    es = V1337 [from 0x80485c1:call   0x08048390]
    cs = V1338 [from 0x80485c1:call   0x08048390]
    ss = V1339 [from 0x80485c1:call   0x08048390]
    ds = V1340 [from 0x80485c1:call   0x08048390]
    fs = V1341 [from 0x80485c1:call   0x08048390]
    gs = V1342 [from 0x80485c1:call   0x08048390]
    cf = V1343 [from 0x80485c1:call   0x08048390]
    ?1 = V1344 [from 0x80485c1:call   0x08048390]
    pf = V1345 [from 0x80485c1:call   0x08048390]
    ?3 = V1346 [from 0x80485c1:call   0x08048390]
    af = V1347 [from 0x80485c1:call   0x08048390]
    ?5 = V1348 [from 0x80485c1:call   0x08048390]
    zf = V1349 [from 0x80485c1:call   0x08048390]
    sf = V1350 [from 0x80485c1:call   0x08048390]
    tf = V1351 [from 0x80485c1:call   0x08048390]
    if = V1352 [from 0x80485c1:call   0x08048390]
    df = V1353 [from 0x80485c1:call   0x08048390]
    of = V1354 [from 0x80485c1:call   0x08048390]
    iopl0 = V1355 [from 0x80485c1:call   0x08048390]
    iopl1 = V1356 [from 0x80485c1:call   0x08048390]
    nt = V1357 [from 0x80485c1:call   0x08048390]
    ?15 = V1358 [from 0x80485c1:call   0x08048390]
    memory = {
        size=4; addr=V1309-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485c8:leave  
    ax = V1305
    cx = V1335 [from 0x80485c1:call   0x08048390]
    dx = V1336 [from 0x80485c1:call   0x08048390]
    bx = V1308
    sp = V1309 [from 0x80485c8:leave  ]
    bp = V1310
    si = V1311
    di = V1312
    es = V1337 [from 0x80485c1:call   0x08048390]
    cs = V1338 [from 0x80485c1:call   0x08048390]
    ss = V1339 [from 0x80485c1:call   0x08048390]
    ds = V1340 [from 0x80485c1:call   0x08048390]
    fs = V1341 [from 0x80485c1:call   0x08048390]
    gs = V1342 [from 0x80485c1:call   0x08048390]
    cf = V1343 [from 0x80485c1:call   0x08048390]
    ?1 = V1344 [from 0x80485c1:call   0x08048390]
    pf = V1345 [from 0x80485c1:call   0x08048390]
    ?3 = V1346 [from 0x80485c1:call   0x08048390]
    af = V1347 [from 0x80485c1:call   0x08048390]
    ?5 = V1348 [from 0x80485c1:call   0x08048390]
    zf = V1349 [from 0x80485c1:call   0x08048390]
    sf = V1350 [from 0x80485c1:call   0x08048390]
    tf = V1351 [from 0x80485c1:call   0x08048390]
    if = V1352 [from 0x80485c1:call   0x08048390]
    df = V1353 [from 0x80485c1:call   0x08048390]
    of = V1354 [from 0x80485c1:call   0x08048390]
    iopl0 = V1355 [from 0x80485c1:call   0x08048390]
    iopl1 = V1356 [from 0x80485c1:call   0x08048390]
    nt = V1357 [from 0x80485c1:call   0x08048390]
    ?15 = V1358 [from 0x80485c1:call   0x08048390]
    memory = {
        size=4; addr=V1309-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
0x80485c9:ret    
    ax = V1305
    cx = V1335 [from 0x80485c1:call   0x08048390]
    dx = V1336 [from 0x80485c1:call   0x08048390]
    bx = V1308
    sp = V1309+0x4 [from 0x80485c9:ret    ]
    bp = V1310
    si = V1311
    di = V1312
    es = V1337 [from 0x80485c1:call   0x08048390]
    cs = V1338 [from 0x80485c1:call   0x08048390]
    ss = V1339 [from 0x80485c1:call   0x08048390]
    ds = V1340 [from 0x80485c1:call   0x08048390]
    fs = V1341 [from 0x80485c1:call   0x08048390]
    gs = V1342 [from 0x80485c1:call   0x08048390]
    cf = V1343 [from 0x80485c1:call   0x08048390]
    ?1 = V1344 [from 0x80485c1:call   0x08048390]
    pf = V1345 [from 0x80485c1:call   0x08048390]
    ?3 = V1346 [from 0x80485c1:call   0x08048390]
    af = V1347 [from 0x80485c1:call   0x08048390]
    ?5 = V1348 [from 0x80485c1:call   0x08048390]
    zf = V1349 [from 0x80485c1:call   0x08048390]
    sf = V1350 [from 0x80485c1:call   0x08048390]
    tf = V1351 [from 0x80485c1:call   0x08048390]
    if = V1352 [from 0x80485c1:call   0x08048390]
    df = V1353 [from 0x80485c1:call   0x08048390]
    of = V1354 [from 0x80485c1:call   0x08048390]
    iopl0 = V1355 [from 0x80485c1:call   0x08048390]
    iopl1 = V1356 [from 0x80485c1:call   0x08048390]
    nt = V1357 [from 0x80485c1:call   0x08048390]
    ?15 = V1358 [from 0x80485c1:call   0x08048390]
    memory = {
        size=4; addr=V1309-0x10 [from 0x80485b5:call   0x080485ba]; value=0x80485ba [from 0x80485b5:call   0x080485ba]
        size=4; addr=V1309-0xc [from 0x80485b4:push   eax]; value=V1305
        size=4; addr=V1309-0x8 [from 0x80485b3:push   ebx]; value=V1308
        size=4; addr=V1309-0x4 [from 0x80485b0:push   ebp]; value=V1310
    }
analyzed headers: 1
