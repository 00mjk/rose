%{
#include <stdio.h>
#include <string.h>

#include "crsh.hpp"

void yyerror(const char *str)
{
  fprintf(stderr,"error: %s\n",str);
}

int yywrap()
{
  return 1;
}

int yylex();

%}

%error-verbose

%union {
  int                 m_num;
  char*               m_str;
  Crsh::EnvValue*     m_env;
  Environment*        m_environment;
  std::string*        m_arg;
  Arguments*          m_arguments;
  InvocationDesc*     m_invoke;
  Crsh::expectation   m_success;
}

%token CONNECT
%token EQUAL
%token EXIT
%token EXPORT
%token FAILURE
%token LBLK
%token RBLK
%token RUN
%token QUAL
%token SPECIMEN
%token SUCCESS
%token <m_num> NUM
%token <m_str> SQLLITE
%token <m_str> STRING

%type <m_num>         num num_opt
%type <m_str>         filename ident string specimen testsuite_opt
%type <m_env>         export
%type <m_environment> environ_opt
%type <m_arg>         argument
%type <m_arguments>   arguments_opt
%type <m_invoke>      test_invoke
%type <m_success>     fail_opt

%start crush

%%
num              : NUM                       { $$ = $1; }
                 ;

filename         : SQLLITE                   { $$ = $1; }
                 ;

ident            : STRING                    { $$ = $1; }
                 ;

string           : STRING                    { $$ = $1; }
              /* | '"' words_opt '"';        { $$ = $2; } */
                 ;

export           : EXPORT ident EQUAL string { $$ = crsh().envvar($2, $4); }

environ_opt      : /* empty */               { $$ = crsh().environment();       }
                 | environ_opt export        { $$ = crsh().environment($1, $2); }
                 ;

argument         : string                    { $$ = crsh().arg($1); }
                 ;

arguments_opt    : /* empty */               { $$ = crsh().args();       }
                 | arguments_opt argument    { $$ = crsh().args($1, $2); }
                 ;

specimen         : string                    { $$ = $1; }
                 ;

fail_opt         : /* empty */               { $$ = Crsh::none;    }
                 | FAILURE                   { $$ = Crsh::failure; }
                 | SUCCESS                   { $$ = Crsh::success; }
                 ;

test_invoke      : specimen arguments_opt    { $$ = crsh().invoke($1, $2); }
                 ;

test_cmd         : ident QUAL ident
                   fail_opt
                   LBLK
                     environ_opt
                     test_invoke
                   RBLK                      { crsh().test($1, $3, $4, $6, $7); }
                 ;

testsuite_opt    : /* empty */               { $$ = NULL; }
                 | ident                     { $$ = $1; }
                 ;

num_opt          : /* empty */               { $$ = -1; }
                 | num                       { $$ = $1; }
                 ;

exec_cmd         : RUN testsuite_opt num_opt { crsh().run($2, $3); }
                 ;

connect_cmd      : CONNECT filename          { crsh().connect($2); }
                 ;

exit_cmd         : EXIT
                 ;

cmd              : test_cmd
                 | exec_cmd
                 | connect_cmd
                 | exit_cmd
                 ;

cmds_opt         : /* empty */
                 | cmd cmds_opt
                 ;

crush            : cmds_opt
                 ;
