$Id: satire_attributes_auxiliary_functions,v 1.11 2008-06-06 13:00:06 gergo Exp $

This file lists all CFG attributes and auxiliary functions accessible from
PAG analysis specifications when using the SATIrE system.


CFG Attributes
==============
A CFG attribute is accessible from the analysis specification by name,
essentially like a variable that may have different values in different
places. See Chapter 12 of the PAG manual for details on the general concept.
The attributes are presented in a way that is similar to the syntax used in
the .optla file.

GLOBAL Attributes
-----------------
globals: *VariableSymbolNT #
    A list of the global variables in the program. Types and initializers of
    global variables can be accessed via auxiliary functions, see below.

numtypes: unum #
    The number of different data types in the program. Types are associated
    with unique numbers that can be manipulated using auxiliary functions,
    see below.

numexprs: unum #
    The number of lexically different expressions in the program. Each
    expression is associated with a unique integer that can be manipulated
    using auxiliary functions, see below.

ROUTINE Attributes
------------------
procnum: snum #
    A unique numerical identifier for the current procedure. Procedure
    numbers are never negative.

BLOCK Attributes
----------------
label: snum #
    A unique numerical label for the block; as each block in SATIrE consists
    of exactly one statement, this can also be considered a unique label for
    each statement. Labels are never negative.


SATIrE Types
============
SATIrE defines a number of data types that can be used in PAG analysis
specifications. In contrast to the AST types defined in the syn file, the
types listed here behave more like built-in PAG types. In particular, they
can be used in the analyzer's carrier type.
The following types are provided as opaque identifiers for important data:

VariableId
    A unique identifier for each variable in the program. Two variables have
    the same identifier iff they are in fact the same variable. That is,
    variables with the same name, but in different scopes, have different
    VariableIds. There are conversion functions described below that convert
    VariableSymbolNTs or VarRefExps to the variable's VariableId.

ExpressionId
    A unique identifier for each expression in the program. Expressions are
    identified iff they are structurally equivalent, that is, they consist
    of identical operators applied to identical operands. Leaf variables are
    compared as VariableIds are, so two occurrences of  a + b  in the
    program text will get the same ExpressionId iff they refer to the same
    variables a and b.

TypeId
    A unique identifier for each type in the program. Types are identical if
    they are the same basic type or the same class type (i.e., have the same
    definition, structural equivalence does not suffice) or are derived from
    the same basic/class type using exactly the same specifiers and
    modifiers (pointer, const, etc.).

Any analysis specification that wishes to use one of these types must
provide a dummy declaration for the type in the .set file. These dummy
declarations are arbitrary, but must contain at least one type constructor.
The following declarations usually work fine:
    VariableId   = VariableId * VariableId
    ExpressionId = ExpressionId * ExpressionId * ExpressionId
    TypeId       = TypeId * TypeId * TypeId * TypeId

Note that these type definitions do *not* mean that VariableIds or
ExpressionIds are tuples; the type definitions are only needed to make PAG
accept that the type on the left hand side really exists. When using them in
analysis specifications, do not assume anything about the types' internal
structure. Comparisons for equality are provided, ordering relations will be
considered for a future release.


Auxiliary Functions
===================
Auxiliary functions are functions provided by the SATIrE library to support
some common operations that would be impossible or very complicated to
implement in FULA. The definitions for these functions are automatically
linked against the generated analyzer. To use one of the functions, simply
copy the declaration listed below into the SUPPORT section of your analysis
specification. PAG will issue a warning that the function has an empty body;
you can disregard the warning as the definitions for the functions are
supplied elsewhere.

List of Auxiliary Functions
---------------------------
is_unary :: Expression -> bool;
    test whether an Expression is a unary expression

is_binary :: Expression -> bool;
    test whether an Expression is a binary expression

is_value :: Expression -> bool;
    test whether an Expression is a value expression (a constant appearing
    in the source code)

unary_get_child :: Expression -> Expression;
    get the operand expression of a unary expression

binary_get_left_child :: Expression -> Expression;
    get left child of a binary expression

binary_get_right_child :: Expression -> Expression;
    get right child of a binary expression

is_subtype_of :: Type, Type -> bool;
    test whether type1 is a subtype of type2 (in the object oriented class
    hierarchy)

expr_type :: Expression -> Type;
    get the type of an expression

global_get_type :: VariableSymbolNT -> Type;
    get the type of the global variable

global_has_initializer :: VariableSymbolNT -> bool;
    test whether the global variable has an initializer expression

global_get_initializer :: VariableSymbolNT -> Expression;
    get the initializer expression of the global variable

varsym_varid :: VariableSymbolNT -> VariableId;
    maps a variable symbol to its VariableId

varref_varid :: Expression -> VariableId;
    maps a VarRefExp to its VariableId; it is an error to call this with any
    other subtype of Expression!

expr_exprid :: Expression -> ExpressionId;
    maps the expression to its ExpressionId

exprid_expr :: ExpressionId -> Expression;
    maps the expression identifier to the actual expression it represents

is_tmpvarid :: VariableId -> bool;
    determines whether the variable identifier refers to a temporary
    variable introduced by SATIrE (for logical values, function return
    values, etc.)

varid_str :: VariableId -> str;
    gives the name of the variable with the given identifier

exprid_str :: ExpressionId -> str;
    gives the string representation of the expression with the given
    identifier

varid_exprid :: VariableId -> ExpressionId;
    maps a variable identifier to an expression identifier which denotes a
    VarRefExp for that variable

type_typeid :: Type -> TypeId;
    convert a type to its corresponding TypeId

typeid_type :: TypeId -> Type;
    convert a type identifier to the actual type it represents

typeid_str :: TypeId -> str;
    convert a type identifier to a string representation of the type

exprid_typeid :: ExpressionId -> TypeId;
    get the type identifier for a given expression identifier

add_tmpvarid :: TypeId -> VariableId;
    creates a new, unique temporary variable of the given type; this
    function returns different values for each call

Deprecated Auxiliary Functions
------------------------------
The following functions have been deprecated because they use old-style
identifiers for expressions. The new opaque types offer better type safety
and better visualization of analysis results.

type_to_typenum :: Type -> unum;
    convert a type to its corresponding type number, a unique integer
    associated with each type

typenum_to_type :: unum -> Type;
    convert a type number to the corresponding type

typenum_to_str :: unum -> str;
    convert a type number to its corresponding string representation

is_subtypenum_of :: unum, unum -> bool;
    test whether typenumber1 represents a subtype of the type corresponding
    to typenumber2 (in the object oriented class hierarchy)

expr_to_exprnum :: Expression -> unum;
    convert an expression to the corresponding expression number, a unique
    integer associated with each lexically distinct expression

exprnum_to_expr :: unum -> Expression;
    convert an expression number to the corresponding expression

exprnum_to_str :: unum -> str;
    convert an expression number to the corresponding string (of the
    expression)

exprnum_typenum :: unum -> unum;
    get the type number for a given expression number
