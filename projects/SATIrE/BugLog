% SATIrE bug log $Id: BugLog,v 1.1 2008-03-11 11:03:10 gergo Exp $
% The intended syntax should be clear. It might be a good idea to add fields
% describing how to reproduce the error, i.e. a command line. (But we can't
% include sample input files in this file.)
% In the Status field, the opposite of "Resolved" is "BROKEN".

Logged:
    2008-03-10, GB
Symptoms:
    Duplicated goto edges in ICFG, expression and type numbering runs
    multiple times
Reason:
    CFGTraversal::getCFG is called multiple times and performs goto
    backpatching and expression numbering each time
Fix:
    Guard calls to these actions to execute them exactly once
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    ICFG builder exits with failure and the message "unknown object"
Reason:
    The support function calling_object_address returns NULL. This function
    computes the address of the object a method is invoked on; this address
    is then assigned to the method's this pointer. This address cannot be
    computed in all cases, in particular for static methods, or when
    invoking a method on the same object.
Fix:
    Handle these cases in calling_object_address (passing NULL as the this
    pointer for static methods), make the "unknown object" message more
    informative.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    Final unparsing fails with some variant of "get_parent() != NULL"
    assertion
Reason:
    The ICFG builder appears to modify some parent pointers in the original
    AST, which is another big problem, but will be addressed separately.
Fix:
    If you must modify the original AST, at least fix the parent pointers
    afterwards. It turns out that ROSE's resetParentPointers function is
    quite elaborate, but does not handle all broken parent pointers;
    satireResetParentPointers was implemented to handle this.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    Prolog term construction fails with "scope != NULL" assertion on
    SgMemberFunctionDeclaration
Reason:
    In some cases, the term builder copies sub-ASTs and performs some action
    on them. For SgMemberFunctionDeclaration, this includes calling
    get_class_scope on the copy, but in the (deep) AST copy, the parent
    pointer, which is the scope, is NULL. This might be a bug in
    ROSE-0.9.0b, as the copy statement also produces warnings like:
    WARNING: Scopes do NOT match! variable = 0x2aaaadaa2760 = n (could this
    be a static variable, or has the symbol table been setup before the
    scopes have been set?) 
    Error: Symbol not found for initializedName_copy = 0x2aaaadaa2760 = n
Fix:
    Manually copy the parent pointer.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    ICFG builder fails with message "Error: base class
    SgExpression::replace_expression called, likely a mistake!" and
    assertion "rose-0.9.0b/src/ROSETTA/Grammar/Expression.code:999: virtual
    int SgExpression::replace_expression(SgExpression*, SgExpression*):
    Assertion `false' failed."
    (submitted by Stefan Stattelmann of AbsInt)
Reason:
    Some subclasses of SgExpression, in particular SgEnumVal, and apparently
    all other subclasses of SgValueExp as well, do not reimplement
    SgExpression::replace_expression. (BTW, replace_expression is marked as
    deprecated, but replaceChild, which we use and which calls
    replace_expression, isn't.) This might be an oversight because somebody
    thought that ValueExps don't have children; they have their
    originalExpressionTrees, however. Our attempt to replace the original
    expression tree (in the concrete case, this is a conditional expression)
    leads to the incorrect call to the abstract base class.
Fix:
    Wrapper satireReplaceChild around replaceChild that ignores requests to
    replace the originalExpressionTree in a SgValueExp; we don't use the
    original expression anyway. This wrapper might also come in handy if
    some day replaceChild were also deprecated and removed.
Status:
    Resolved 2008-03-10, GB


Logged:
    2008-03-10, GB
Symptoms:
    Unreachable nodes in the ICFG for programs like:
        if (cond)
            return foo;
        else
            return bar;
    CFG test emits warnings (as it should).
    (submitted, among others, by Stefan Stattelmann of AbsInt)
Reason:
    The ICFG builder always inserts an IfJoin node, even if it is not
    reachable due to jumps out of both branches.
Fix:
    Remove unreachable nodes from the ICFG. Even better: Handle this
    correctly when the ICFG builder is completely rewritten.
Status:
    Resolved 2008-03-11, GB
