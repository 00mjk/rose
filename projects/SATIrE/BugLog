% SATIrE bug log $Id: BugLog,v 1.4 2008-03-13 14:58:17 gergo Exp $
% The intended syntax should be clear. It might be a good idea to add fields
% describing how to reproduce the error, i.e. a command line. (But we can't
% include sample input files in this file, or can we?)
% In the Status field, the opposite of "Resolved" is "BROKEN".

Logged:
    2008-03-10, GB
Symptoms:
    Duplicated goto edges in ICFG, expression and type numbering runs
    multiple times
Reason:
    CFGTraversal::getCFG is called multiple times and performs goto
    backpatching and expression numbering each time
Fix:
    Guard calls to these actions to execute them exactly once
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    ICFG builder exits with failure and the message "unknown object"
Reason:
    The support function calling_object_address returns NULL. This function
    computes the address of the object a method is invoked on; this address
    is then assigned to the method's this pointer. This address cannot be
    computed in all cases, in particular for static methods, or when
    invoking a method on the same object.
Fix:
    Handle these cases in calling_object_address (passing NULL as the this
    pointer for static methods), make the "unknown object" message more
    informative.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    Final unparsing fails with some variant of "get_parent() != NULL"
    assertion
Reason:
    The ICFG builder appears to modify some parent pointers in the original
    AST, which is another big problem, but will be addressed separately.
Fix:
    If you must modify the original AST, at least fix the parent pointers
    afterwards. It turns out that ROSE's resetParentPointers function is
    quite elaborate, but does not handle all broken parent pointers;
    satireResetParentPointers was implemented to handle this.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    Prolog term construction fails with "scope != NULL" assertion on
    SgMemberFunctionDeclaration
Reason:
    In some cases, the term builder copies sub-ASTs and performs some action
    on them. For SgMemberFunctionDeclaration, this includes calling
    get_class_scope on the copy, but in the (deep) AST copy, the parent
    pointer, which is the scope, is NULL. This might be a bug in
    ROSE-0.9.0b, as the copy statement also produces warnings like:
    WARNING: Scopes do NOT match! variable = 0x2aaaadaa2760 = n (could this
    be a static variable, or has the symbol table been setup before the
    scopes have been set?) 
    Error: Symbol not found for initializedName_copy = 0x2aaaadaa2760 = n
Fix:
    Manually copy the parent pointer.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    ICFG builder fails with message "Error: base class
    SgExpression::replace_expression called, likely a mistake!" and
    assertion "rose-0.9.0b/src/ROSETTA/Grammar/Expression.code:999: virtual
    int SgExpression::replace_expression(SgExpression*, SgExpression*):
    Assertion `false' failed."
    (submitted by Stefan Stattelmann of AbsInt)
Reason:
    Some subclasses of SgExpression, in particular SgEnumVal, and apparently
    all other subclasses of SgValueExp as well, do not reimplement
    SgExpression::replace_expression. (BTW, replace_expression is marked as
    deprecated, but replaceChild, which we use and which calls
    replace_expression, isn't.) This might be an oversight because somebody
    thought that ValueExps don't have children; they have their
    originalExpressionTrees, however. Our attempt to replace the original
    expression tree (in the concrete case, this is a conditional expression)
    leads to the incorrect call to the abstract base class.
Fix:
    Wrapper satireReplaceChild around replaceChild that ignores requests to
    replace the originalExpressionTree in a SgValueExp; we don't use the
    original expression anyway. This wrapper might also come in handy if
    some day replaceChild were also deprecated and removed.
Status:
    Resolved 2008-03-10, GB


Logged:
    2008-03-10, GB
Symptoms:
    Unreachable nodes in the ICFG for programs like:
        if (cond)
            return foo;
        else
            return bar;
    CFG test emits warnings (as it should).
    (submitted, among others, by Stefan Stattelmann of AbsInt)
Reason:
    The ICFG builder always inserts an IfJoin node, even if it is not
    reachable due to jumps out of both branches.
Fix:
    Remove unreachable nodes from the ICFG. Even better: Handle this
    correctly when the ICFG builder is completely rewritten.
Status:
    Resolved 2008-03-11, GB


Logged:
    2008-03-11, GB
Symptoms:
    Variables within functions may remain declared at the end of the
    function. In particular, return from within a nested scope will skip
    undeclaration of all variables from enclosing scopes. This is a common
    case. See deepreturn.c for an example.
Reason:
    The ICFG builder only introduces undeclare nodes at the ends of blocks
    and immediately after returns (I think). These undeclare nodes contain
    only the variables declared in the same block.
Fix:
    Two possible fixes come to mind: Either be more sophisticated in filling
    undeclare nodes for returns, or simply add all of a function's variables
    to the undeclaration list in the end node. The latter seems simpler to
    get right, especially in the presence of gotos and the like.
    Later the same day: It turns out that the second of these fixes has been
    implemented for some time, it's just that the variables were not visible
    in the GDL visualization. They have always been present in the ICFG, and
    analyses processed them correctly.
Status:
    Resolved 2008-03-11, GB


Logged:
    2008-03-11, GB
Symptoms:
    make installcheck fails with: "rose-0.9.0b/src/backend/unparser/
    languageIndependenceSupport/name_qualification_support.C:441: SgName
    Unparser_Nameq::generateNameQualifier(SgDeclarationStatement*, const
    SgUnparse_Info&, bool): Assertion `info.get_declstatement_ptr() !=
    __null || nestedQualification == true' failed." when testing constprop
    on testsuite/success/classes3.C
Reason:
    Error in ROSE 0.9.0b, not in our code. Can be observed by simply calling
    the ROSE identityTranslator on the file.
Fix:
    TODO: Send file to Dan.
Status:
    BROKEN as of 2008-03-12


Logged:
    2008-03-11, GB
Symptoms:
    make installcheck segfaults when testing constprop on
    testsuite/success/destructor.C
Reason:
    unknown, possibly out of memory
Fix:
    unknown
Status:
    BROKEN as of 2008-03-11


Logged:
    2008-03-12, GB
Symptoms:
    Argument assignments (at least for some constructor calls on non-pointer
    objects) and return nodes (at least for some constructor calls) contain
    wrong variables.
Reason:
    Argument assignments were broken partly because of a typo, and mainly
    because once more a deep copy statement did not copy a parent pointer.
    If such problems recur, we should consider wrapping the ROSE copy
    mechanism. Return nodes were broken because a few lines to update the
    list of variables were missing in the code that handles constructor
    calls.
Fix:
    Copy parent pointer, update variable list for return nodes.
Status:
    Resolved 2008-03-12, GB


Logged:
    2008-03-12, GB
Symptoms:
    C++ code of the form:
        a = new A();
    produces an ICFG like:
        ArgumentAssignment($A$this, new A());
        Call(A, [$A$this]);
        Return(A, [$A$this]);
        a = $A$this;
    This is not good because, unlike in all other cases, the ReturnStmt is
    *not* allowed to kill the variable $A$this in its param list because it
    is needed in the subsequent statement.
Reason:
    This point was not given enough thought when this part of the ICFG
    builder was written.
Fix:
    Change the ICFG builder to construct a structure preserving the property
    that the variables in a ReturnStmt may safely be killed. This is done by
    removing the 'this' pointer from the ReturnStmt's list iff the
    constructor call resulted from the application of the 'new' operator. In
    this case, the occurrence of $A$this in the subsequent statement is the
    only occurrence, it can therefore be killed at that point.
Status:
    Resolved 2008-03-13


Logged:
    2008-03-13, GB
Symptoms:
    Error message "error during ICFG construction: constructor has more
    arguments than parameters!"
Reason:
    The ICFG builder does not correctly resolve overloaded member
    function/constructor calls, thus the numbers of arguments and parameters
    may indeed differ. Overloaded member functions weren't always resolved
    correctly, either.
Fix:
    Correct comparison of names/mangled names and parameter types.
Status:
    Resolved 2008-03-13, GB


Logged:
    2008-03-13, GB
Symptoms:
    No direct ones. When using aisee to view the ICFG of a program
    containing overloaded functions, aisee complains that there are nodes
    (the functions' CFGs) with identical names: "Double defined node A::A".
Reason:
    The internal names of the functions are the same.
Fix:
    None really necessary since a) aisee is not our product, and b) names
    don't matter, the graph is correct. Still, when the ICFG builder is
    rewritten, this can be kept in mind. We could disambiguate function
    names by listing their parameters along with the name.
Status:
    Present but irrelevant as of 2008-03-13
