/* Author: Markus Schordan, Viktor Pavlu
   E-mail: markus@complang.tuwien.ac.at
   Year  : 2006, 2007
*/

UNIVERSAL
kill_norm_temps : bool#

BLOCK
label : snum#

PROBLEM srw
    direction  : forward
    carrier    : dfi
    init       : bot
    init_start : lift((({},{}),{}))
    equal      : eq
    combine    : comb
    retfunc    : comb
    widening   : w


TRANSFER

ExprStatement(e),_: expression(e,str(label),(@));

ArgumentAssignment(VarRefExp(na_l),NewExp(_,_,_)),_:
let
    rx = val-aststring(na_l);
in
    lift(assign_x_new(rx,drop(@)));

ArgumentAssignment(VarRefExp(na_l),VarRefExp(na_r)),_:
let
    rx = val-aststring(na_l);
    ry = val-aststring(na_r);
in
    lift(tassign_x_y(rx,ry,drop(@)));

ParamAssignment(VariableSymbol(na_l),VariableSymbol(param)),_:
let
    rx = val-aststring(na_l);
    ry = val-aststring(param);
in
    delete_var(lift(tassign_x_y(rx,ry,drop(@))),ry);

ReturnAssignment(VariableSymbol(na_l),VariableSymbol(na_r)),_:
let
    rx = val-aststring(na_l);
    ry = val-aststring(na_r);
in let
    newinfo=lift(tassign_x_y(rx,ry,drop(@)));
in
    delete_var(newinfo,ry);

FunctionCall(_,_),local_edge: bot;

FunctionExit(functionName,params), _:
    kill_vars(@, params);

_,_: @;


SUPPORT

eq(a,b) = a=b;

w::dfi,dfi->dfi;
w(a,b) = b;

comb::dfi,dfi->dfi;
comb(a,b) =
    if a = bot then b else
    if b = bot then a else
    case drop(a),drop(b) of ((V1,E1),I1),((V2,E2),I2) =>
        lift(((union(V1,V2),union(E1,E2)),union(I1,I2)));
    endcase
    endif
    endif;

kill_vars :: dfi, *VariableSymbolNT -> dfi;
kill_vars(s, [!]) = s;
kill_vars(s, VariableSymbol(p)::ps) =
    delete_var(kill_vars(s, ps),val-aststring(p));

delete_var::dfi,str->dfi;
delete_var(g,var) =
    case g of
        top => top;
        bot => bot;
        info => lift(assign_x_null(var,drop(info)));
    endcase;
    
/* Author: Viktor Pavlu
   E-mail: e0425543@student.tuwien.ac.at
   Year  : 2006
*/

/* highlevel functions that can handle arbitrarily nested
 * expressions by introducing temporary variables 
 */

    
is_temp :: str -> bool;
is_temp(s) = substr(s, 0, 0) = "$";

// --------------------------------------------------------------------------
// highlevel functions handle normalisation and special cases using tassign()
// --------------------------------------------------------------------------

expression :: Expression,str,dfi -> dfi;
expression(_,_,bot) = bot;
expression(_,_,top) = top;
expression(e,label,lifted_g) =
    let ops = normalisation_ops(e,label); in
    let result_g = execute(ops, lifted_g); in
    if kill_norm_temps then
        kill_normalisation_temps(ops, result_g)
    else
        result_g
    endif;

/* call tassign_ functions according to the opcodes 
 * to alter the shapegraph. while going along, collect
 * all temporary variables.
 * return (modified graph, temp vars)
 */
execute :: OpCodeList,dfi -> dfi;
execute( [], lifted_g) = lifted_g;
execute((op,args):cdr, lifted_g) =
    let g = drop(lifted_g); in
    let g1 = case op of
        "x_new" =>
            tassign_x_new(pick(args,1),g);

        "x_null" =>
            tassign_x_null(pick(args,1),g);

        "x_y" =>
            let g1 = tassign_x_y(pick(args,1),pick(args,2),g); in
            if (!is_temp(pick(args,2))) then
                g1
            else
                drop(delete_var(lift(g1),pick(args,2)))
            endif;

        "x_ysel" =>
            tassign_x_ysel(pick(args,1),pick(args,2),pick(args,3),g);

        "xsel_null" =>
            tassign_xsel_null(pick(args,1),pick(args,2),g);

        "xsel_y" =>
            let g1 = tassign_xsel_y(pick(args,1),pick(args,2),pick(args,3),g); in
            if (!is_temp(pick(args,3))) then
                g1
            else
                drop(delete_var(lift(g1),pick(args,3)))
            endif;

        _ =>
            print("unrecognized opcode: ") print(op) print("\n") g;
    endcase; in
    execute(cdr,lift(g1));

pick :: StrList,snum -> str;
pick(car:cdr,1) = car;
pick(car:cdr,n) = if n > 1 then pick(cdr, n - 1) else print("pick beyond bounds") "" endif;

// -------------------------------------------------------------------------------------------
// normalisation of nested pointer expressions (using temporary assignments for decomposition)
// -------------------------------------------------------------------------------------------
/* Author: Viktor Pavlu
   E-mail: e0425543@student.tuwien.ac.at
   Year  : 2006
*/

/* decomposes arbitrarily nested expressions into primitive
 * forms by introducing temporary variables.
 * a list of opcodes is returned that specifies which transfer
 * functions need to be called. by doing so, the normalisation
 * functions do not need to modify the shape graph, hence 
 * they do not need to be adapted to different carrier types.
 *
 * an opcode looks like this: ("x_ysel", ["arg1", "arg2", ...])
 * interpretation of the opcodes is done by the function
 * execute :: OpCodeList,<carrier> -> <carrier>;
 */
 
// -------------------------------------
// functions for temp normalisation vars
// -------------------------------------

is_normalisation_temp :: str -> bool;
is_normalisation_temp(s) = substr(s, 0, 5) = "#norm_";

gen_normalisation_temp :: str -> str;
gen_normalisation_temp(label) = "#norm_".label."_";

kill_normalisation_temps :: OpCodeList,dfi -> dfi;
kill_normalisation_temps(list,sg) = kill_normalisation_temps1([x !! x <-- extract_tempvars(list,{})], sg);

kill_normalisation_temps1 :: StrList,dfi -> dfi;
kill_normalisation_temps1( [], s) = s;
kill_normalisation_temps1(car:cdr, s) = delete_var(kill_normalisation_temps1(cdr,s),car);

extract_tempvars :: OpCodeList,VarSet -> VarSet;
extract_tempvars( [], temps) = temps;
extract_tempvars((_,v:_):cdr, temps) =
    let new_temps = if is_normalisation_temp(v) then {v} else {} endif; in
    extract_tempvars(cdr, union(temps,new_temps));

// -----------------------------
// expression accessor functions
// -----------------------------

min :: snum,snum -> snum;
min(a,b) = if a < b then a else b endif;

max :: snum,snum -> snum;
max(a,b) = if a > b then a else b endif;

expr_depth :: Expression -> snum;
expr_depth(e) = case e of
    ArrowExp(VarRefExp(_),VarRefExp(_)) => 0;
    ArrowExp(child,_) => 1 + expr_depth(child);
    DotExp(PointerDerefExp(child),_) => 1 + expr_depth(child);
    _ => 0;
endcase;

expr_is_complex :: Expression -> bool;
expr_is_complex(e) = case e of
    DotExp(PointerDerefExp(child),_) => true;
    ArrowExp(child,_) => true;
    _ => false;
endcase;

// returns the expression at the given depth, where
// 0 is the topmost expression that contains the others, and
expr_at :: Expression,snum -> Expression;
expr_at(e,nesting_level) =
    let
        descending_steps = min(nesting_level, expr_depth(e));
    in
        rec_expr_at(e, descending_steps);

rec_expr_at :: Expression,snum -> Expression;
rec_expr_at(e,0) = e;
rec_expr_at(DotExp(PointerDerefExp(child),_),descending_steps) = rec_expr_at(child, descending_steps - 1);
rec_expr_at(ArrowExp(child,_),descending_steps) = rec_expr_at(child, descending_steps - 1);

expr_innermost :: Expression -> Expression;
expr_innermost(e) = expr_at(e, expr_depth(e));

// -----------------------------------------------------------
// normalisation function, generates the normalisation opcodes
// -----------------------------------------------------------

normalisation_ops :: Expression,str -> OpCodeList;
normalisation_ops(e,label) =
    case e of AssignOp(lhs,rhs) =>
        let tmp = gen_normalisation_temp(label); in
        let lhs_tmp = tmp."l";
            rhs_tmp = tmp."r";
        in
            rec_normalise(lhs,expr_depth(lhs),lhs_tmp,[]) ++
            rec_normalise(rhs,expr_depth(rhs),rhs_tmp,[]) ++
            perform_assign(e,lhs_tmp,rhs_tmp,[]);
        _ => [];
    endcase;

rec_normalise :: Expression,snum,str,OpCodeList -> OpCodeList;
rec_normalise( _, 0, _, list) = list;
rec_normalise(lhs, lhs_cursor, tmpvar_prefix, list) =
    let new_var = tmpvar_prefix . str(lhs_cursor - 1); in
    let new_list = case expr_at(lhs,lhs_cursor) of

        // <new_var> = <parent_var>.sel
        DotExp(PointerDerefExp(_),VarRefExp(na_sel)) =>
            [("x_ysel", [new_var, tmpvar_prefix.str(lhs_cursor), val-aststring(na_sel)])];

        // <new_var> = x.sel
        ArrowExp(VarRefExp(na_x),VarRefExp(na_sel)) =>
            [("x_ysel", [new_var,val-aststring(na_x),val-aststring(na_sel)])];

        // <new_var> = x
        VarRefExp(na_x) =>
            [("x_y", [new_var,val-aststring(na_x)])];

        _ => [];

    endcase; in
    rec_normalise(lhs, lhs_cursor - 1, tmpvar_prefix, list ++ new_list);

perform_assign :: Expression,str,str,OpCodeList -> OpCodeList;
perform_assign(e,lhs_tmp,rhs_tmp,list) =
    case e of
        // x = new;
        AssignOp(VarRefExp(na_x),NewExp(_,_,_)) =>
            [("x_new", [val-aststring(na_x)])];

        // x = null;
        AssignOp(VarRefExp(na_x),CastExp(IntVal(n),_)) =>  
            [("x_null", [val-aststring(na_x)])];
            
        // x = y;
        AssignOp(VarRefExp(na_x),VarRefExp(na_y)) => 
            [("x_y", [val-aststring(na_x),val-aststring(na_y)])];

        // x.sel = null;
        AssignOp(ArrowExp(VarRefExp(na_x),VarRefExp(na_sel)),CastExp(IntVal(n),_)) => 
            [("xsel_null", [val-aststring(na_x),val-aststring(na_sel)])];

        // ...sel = null;  NEW
        AssignOp(DotExp(PointerDerefExp(_),VarRefExp(na_sel)),CastExp(IntVal(n),_)) => 
            [("xsel_null", [lhs_tmp."0", val-aststring(na_sel)])];

        // x.sel = y;
        AssignOp(ArrowExp(VarRefExp(na_x),VarRefExp(na_sel)),VarRefExp(na_y)) =>
            [("xsel_null", [val-aststring(na_x), val-aststring(na_sel), "DEBUG"]),
             ("xsel_y",    [val-aststring(na_x), val-aststring(na_sel), val-aststring(na_y)])];

        // ...sel = y; NEW
        AssignOp(DotExp(PointerDerefExp(_),VarRefExp(na_sel)),VarRefExp(na_y)) =>
            [("xsel_null", [lhs_tmp."0", val-aststring(na_sel)]),
             ("xsel_y",    [lhs_tmp."0", val-aststring(na_sel), val-aststring(na_y)])];

        // x = y.sel;
        AssignOp(VarRefExp(na_x),ArrowExp(VarRefExp(na_y),VarRefExp(na_sel))) => 
            [("x_ysel", [val-aststring(na_x), val-aststring(na_y), val-aststring(na_sel)])];

        // x = ...sel; NEW
        AssignOp(VarRefExp(na_x),DotExp(PointerDerefExp(_),VarRefExp(na_sel))) => 
            [("x_ysel", [val-aststring(na_x), rhs_tmp."0", val-aststring(na_sel)])];

        // x.sel = y.sel; NEW
        AssignOp(ArrowExp(VarRefExp(na_x),VarRefExp(na_xsel)),ArrowExp(VarRefExp(na_y),VarRefExp(na_ysel))) =>
            [("x_ysel", [rhs_tmp."a", val-aststring(na_y), val-aststring(na_ysel)]),
             ("xsel_y", [val-aststring(na_x), val-aststring(na_xsel), rhs_tmp."a"])];
            
        // ...sel = y.sel; NEW
        AssignOp(DotExp(PointerDerefExp(_),VarRefExp(na_xsel)),ArrowExp(VarRefExp(na_y),VarRefExp(na_ysel))) =>
            [("x_ysel", [rhs_tmp."a", val-aststring(na_y), val-aststring(na_ysel)]),
             ("xsel_y", [lhs_tmp."0", val-aststring(na_xsel), rhs_tmp."a"])];

        // x.sel = ...sel; NEW
        AssignOp(ArrowExp(VarRefExp(na_x),VarRefExp(na_xsel)),DotExp(PointerDerefExp(_),VarRefExp(na_ysel))) =>
            [("x_ysel", [rhs_tmp."a", rhs_tmp."0", val-aststring(na_ysel)]),
             ("xsel_y", [val-aststring(na_x), val-aststring(na_xsel), rhs_tmp."a"])];
            
        // ...sel = ...sel; NEW
        AssignOp(DotExp(PointerDerefExp(_),VarRefExp(na_xsel)),DotExp(PointerDerefExp(_),VarRefExp(na_ysel))) =>
            [("x_ysel", [rhs_tmp."a", rhs_tmp."0", val-aststring(na_ysel)]),
             ("xsel_y", [lhs_tmp."0", val-aststring(na_xsel), rhs_tmp."a"])];

        _ => list;
    endcase;


/* Author: Markus Schordan
   E-mail: markus@complang.tuwien.ac.at
   Year  : 2006
*/

// ---------------------------------------------------------------------
// High-level functions, creating temporaries for handling special cases
// ---------------------------------------------------------------------

tassign_x_null::str,ShapeGraph -> ShapeGraph;
tassign_x_null(x,sg) = assign_x_null(x,sg);

tassign_xsel_null::str,str,ShapeGraph -> ShapeGraph;
tassign_xsel_null(x,sel,sg) = assign_xsel_null(x,sel,sg);

tassign_x_y::str,str,ShapeGraph->ShapeGraph;
tassign_x_y(x,y,G) =
  if x = y then
    G
  else
    let G1=assign_x_y("_$",y,G); in
    let G2=assign_x_null(x,G1); in

    let G3=assign_x_y(x,"_$",G2); in
      assign_x_null("_$",G3)
  endif
;


tassign_xsel_y::str,str,str,ShapeGraph->ShapeGraph;
tassign_xsel_y(x,selp,y,G) =
  let G1=assign_x_y("_$",y,G); in
  let G2=assign_xsel_null(x,selp,G1); in
  let G3=assign_xsel_y(x,selp,"_$",G2); in
    assign_x_null("_$",G3);


tassign_x_ysel::str,str,str,ShapeGraph -> ShapeGraph;
tassign_x_ysel(x,y,selp,G) =
  let G1=assign_x_ysel("_$",y,selp,G); in
  let G2=assign_x_null(x,G1); in
  let G3=assign_x_y(x,"_$",G2); in
    assign_x_null("_$",G3);


tassign_x_new::str,ShapeGraph->ShapeGraph;
tassign_x_new(x,G) =
    let G1=assign_x_null(x,G); in
      assign_x_new(x,G1);


tassign_xsel_new::str,str,ShapeGraph->ShapeGraph;
tassign_xsel_new(x,selp,G) =
    let G1=assign_xsel_null(x,selp,G); in
    let G2=assign_x_new("_$",G1); in
    let G3=assign_xsel_y(x,selp,"_$",G2); in
      assign_x_null("_$",G3);

// ----------------------------------------------------------------------
// Low-level functions, without temporaries (do not handle special cases)
// ----------------------------------------------------------------------

assign_x_null::str,ShapeGraph -> ShapeGraph;
assign_x_null(x,((Ev0,Es0),is0)) =
  let Ev1={(y,rem(x,W))!!(y,W) <-- Ev0, if !(y=x)};
    Es1={(rem(x,V),sel0,rem(x,W))!!(V,sel0,W) <-- Es0};
    is1={rem(x,n) !! n <-- is0}; in
  ((Ev1,Es1),is1);


assign_xsel_null::str,str,ShapeGraph -> ShapeGraph;
assign_xsel_null(x,selp,((Ev0,Es0),is0)) =
         let Es1 = edgesetminus(Es0,{(X0,sel0,ANY0) !! (X0,sel0,ANY0) <-- Es0, if x ? X0 && sel0=selp});
         in
           let is1 = nodesetminus(is0,{n !! n <-- is0, if (!iis(Es1,n)) && no_outedge_exists(Es1,n)});
           in ((Ev0,Es1),is1);



no_outedge_exists::HeapEdgeSet,VarSet -> bool;
no_outedge_exists(Es,n)=
  {"1" !! (X0,sel0,Y0) <-- Es, if X0={} && Y0=n} = {};


assign_x_new::str,ShapeGraph->ShapeGraph;
assign_x_new(x,((Ev0,Es0),is0)) =
  ((union(Ev0,{(x,{x})}),Es0),is0);


assign_x_y::str,str,ShapeGraph -> ShapeGraph;
assign_x_y(x,y,((Ev0,Es0),is0)) =
  let Ev1=union({(za,msgc(x,y,Z))!!(za,Z) <-- Ev0},
              {(x,msgc(x,y,Z))!!(y1,Z) <-- Ev0, if y1=y});
    Es1={(msgc(x,y,Z1),sel0,msgc(x,y,Z2))!!(Z1,sel0,Z2) <-- Es0};
    is1={msgc(x,y,Z)!!Z <-- is0}; in
    ((Ev1,Es1),is1);


assign_xsel_y::str,str,str,ShapeGraph -> ShapeGraph;
assign_xsel_y(x,selp,y,((Ev0,Es0),is0)) =
  let Es1 = union(Es0,{(X0,selp,Y0) !! (xa,X0) <-- Ev0, (ya,Y0) <-- Ev0,
                                       if xa=x && ya=y && compatible2(X0,Y0)}
                 ); in
  let is1 = union(is0,{n !! (ya,n) <-- Ev0, if ya=y && iis(Es1,n)}); in
    ((Ev0,Es1),is1);


assign_x_ysel::str,str,str,ShapeGraph -> ShapeGraph;
assign_x_ysel(x,y,selp,((Ev0,Es0),is0)) =
  let G=((Ev0,Es0),is0); in
    let Ev1 = union(Ev0,union(
        {(x,h(x,Z))!!(ya,Y0) <-- Ev0, (Y1,sel0,Z) <-- Es0,
                 if ya=y && Y0=Y1 && selp=sel0},
        {(za,h(x,Z))!!(ya,Y0) <-- Ev0, (Y1,sel0,Z1) <-- Es0, (za,Z) <-- Ev0,
                 if y=ya && Y0=Y1 && selp=sel0 && Z1=Z}));

       temp = {aux_as(x,y,Y0,selp,Z,G) !! (ya,Y0) <-- Ev0, (Y2,sel0,Z) <-- Es0,
                                    if y=ya && Y0=Y2 && selp=sel0};
       in
       let Es1 = union(
                   (edgesetminus(Es0,{(Y0,sel0,Z)!!(Y0,sel0,Z) <-- Es0, if (y ? Y0) && sel0=selp})),
                   ssunion(temp));
       in
       let is1 = new_is(is0,x);

       in ((Ev1,Es1),is1);





N::StackEdgeSet,HeapEdgeSet -> NodeSet;
N(Ev,Es) = union({n!!(x,n)<--Ev},NEs(Es));

NEs::HeapEdgeSet -> NodeSet;
NEs(Es) = union({s!!(s,a,e)<--Es},{e!!(s,a,e)<--Es});

edgesetminus::HeapEdgeSet,HeapEdgeSet -> HeapEdgeSet;
edgesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

stackedgesetminus::StackEdgeSet,StackEdgeSet -> StackEdgeSet;
stackedgesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

nodesetminus::NodeSet,NodeSet -> NodeSet;
nodesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

ssunion::HeapEdgeSetSet -> HeapEdgeSet;
ssunion(ss) = { e !! s <-- ss, e <-- s };

// ----------------------------------------------------
// Auxiliary functions for low-level transfer functions
// ----------------------------------------------------

semeq::VarSet,VarSet -> bool;
semeq(X,Y) = X=Y;

semneq::VarSet,VarSet -> bool;
semneq(X,Y) =
  (!(X = Y)) || (X={} && Y={});

compatible3::VarSet,VarSet,VarSet -> bool;
compatible3(X,Y,Z) =
     (X=Y || intersect(X,Y)={})
  && (X=Z || intersect(X,Z)={})
  && (Y=Z || intersect(Y,Z)={});

compatible2::VarSet,VarSet -> bool;
compatible2(X,Y) =
  X=Y || intersect(X,Y)={};

rem::str,VarSet -> VarSet;
rem(x,Z) =
  { v !! v <-- Z, if !(x=v) };




h::str,VarSet -> VarSet;
h(x,Z) = union(Z,{x});

msgc::str,str,VarSet -> VarSet;
msgc(x,y,Z) =
 if y ? Z then union(Z,{x})
 else Z
 endif;

iis::HeapEdgeSet,VarSet -> bool;
iis(Es,Z) =
  let exist = { "1" !! (Z1,sel1,Z31) <-- Es, (Z2,sel2,Z32) <-- Es,
                if Z31=Z && Z32=Z && compatible3(Z1,Z2,Z)
                   &&( semneq(Z1,Z2) || !(sel1=sel2))}; in
      !(exist = {});


compat_in::StackEdge,HeapEdge,HeapEdge,ShapeGraph -> bool;
compat_in((_,Y),(Y2,sel0,Z),(W,sel1,Z3),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z3
    && compatible3(Y,Z,W)
    && semneq(Z,W)
    && ((semeq(Y,W) && sel0=sel1) || (Z ? is0));

compat_out::StackEdge,HeapEdge,HeapEdge,ShapeGraph -> bool;
compat_out((_,Y),(Y2,sel0,Z),(W,sel1,Z3),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z3
    && compatible3(Y,Z,W)
    && semneq(Z,W)
    && (semneq(Y,Z) || !(sel0=sel1));

compat_self::StackEdge,HeapEdge,HeapEdge,ShapeGraph -> bool;
compat_self((_,Y),(Y2,sel0,Z),(Z31,sel1,Z32),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z31 && Z=Z32 && Z31=Z32
      && compatible2(Y,Z)
      && ((semeq(Y,Z) && sel0=sel1) || (Z ? is0));

aux_as::str,str,VarSet,str,VarSet,ShapeGraph -> HeapEdgeSet;
aux_as(x,yp,Y,selp,Z,((Ev0,Es0),is0)) =
 let newin = {(W,sel1,h(x,Z)) !! (W,sel1,Z3) <-- Es0,
         if Z=Z3
         && compat_in((yp,Y),(Y,selp,Z),(W,sel1,Z),((Ev0,Es0),is0))};
    newself = {(h(x,Z),sel1,h(x,Z)) !! (Z31,sel1,Z32) <-- Es0,
        if Z=Z31 && Z=Z32
         && compat_self((yp,Y),(Y,selp,Z),(Z,sel1,Z),((Ev0,Es0),is0))};
    newout = {(h(x,Z),sel1,W) !! (Z3,sel1,W) <-- Es0,
        if Z=Z3
         && compat_out((yp,Y),(Y,selp,Z),(Z,sel1,W),((Ev0,Es0),is0))};
    in
    union(union(newin,newself),newout);

new_is(rest,x) = { ha # x !! ha <-- rest };

mybot::->dfi;
mybot() = bot;

/* Author: Markus Schordan
   E-mail: markus@complang.tuwien.ac.at
   Year  : 2006
*/

// -------------------------------------------------
// GARBAGE COLLECTION functions (not used currently)
// -------------------------------------------------

gc::ShapeGraph -> ShapeGraph;
gc(((EV,ES),I)) = let newev = reach({a !! (x,a) <-- EV},ES) ;
                         in let 
                              ES_ = { obj !! (x,_,y) as obj  <-- ES, 
                                             if x ? newev,
                                             if y ? newev };
                              IS_ = intersect(I , newev); 
                              in ((EV,ES_),IS_);
   
gc_up(info) = let info2 <= info;  in  lift(gc(info2));

reach(ev,es) = let newev = union({ x !! (y,_,x) <-- es, if y ? ev } , ev);
               in if ev != newev 
                     then reach(newev,es) else newev endif;


/* Author: Viktor Pavlu
   E-mail: vpavlu@gmail.com
   Year  : 2006
*/

// ---------------------------------------
// SUPPORT FUNCTIONS CALLED BY APPLICATION
// ---------------------------------------

extract_stackedge_set :: ShapeGraph -> StackEdgeSet;
extract_stackedge_set(((EV,_),_)) = EV;

extract_stackedges::ShapeGraph -> StackEdgeList;
extract_stackedges(((EV,_),_)) = [x !! x <-- EV];

extract_heapnodes::ShapeGraph -> NodeList;
extract_heapnodes(((EV,ES),_))  =
   [ x !! x <-- union(union({ a !! (a,_,_) <-- ES},{ c !! (_,_,c) <-- ES}),{b !! (_,b) <-- EV}) ];

extract_heapedges::ShapeGraph -> HeapEdgeList;
extract_heapedges(((_,ES),_)) = [x !! x <-- ES];

extract_is_shared::ShapeGraph -> NodeList;
extract_is_shared((_,iss)) = [x !! x <-- iss];

src_sel_exists :: VarSet,str,ShapeGraph -> bool;
src_sel_exists(src,sel,((_,H0),_)) = {e !! (nv,sv,_) as e <-- H0, if (src = nv) && (sel = sv)} != {};


// AUXILIARY FUNCTIONS FOR SUPPORT FUNCTIONS

str_list_member::str,StrList->bool;
str_list_member(a,b:c) = if a=b then true else str_list_member(a,c) endif;
str_list_member(a,[])  = false;

mk_unique_str_list::StrList->StrList;
mk_unique_str_list(a:b) = if str_list_member(a,b) then mk_unique_str_list(b) else a: mk_unique_str_list(b) endif;
mk_unique_str_list([])  = [];

/* Author: Viktor Pavlu
   E-mail: e0425543@student.tuwien.ac.at
   Year  : 2006
*/
// ------------------------------------------------
// GRAPH TRANSFORMATION FUNCTIONS (SRW <-> Nielson)
// ------------------------------------------------

srw_extract_graphs :: ShapeGraph -> SrwNielsonPair;
srw_extract_graphs(sg) = (sg,sgSet_to_sgList(srwSG_to_nielsonSG(sg)));

nielson_extract_graphs :: ShapeGraphSet -> SrwNielsonPair;
nielson_extract_graphs(sg) = (nielsonSG_to_srwSG(sg), sgSet_to_sgList(sg));

sgSet_to_sgList :: ShapeGraphSet -> ShapeGraphList;
sgSet_to_sgList(sgs) = [sg !! sg <-- sgs];


//srw_extract_summaryGraph :: ShapeGraph -> ShapeGraphList;
//srw_extract_summaryGraph(sg) = [sg];
//srw_extract_shapeGraphs :: ShapeGraph -> ShapeGraphList;
//srw_extract_shapeGraphs(sg) = [x !! x <-- srwSG_to_nielsonSG(sg)];

//nielson_extract_summaryGraph :: ShapeGraphSet -> ShapeGraphList;
//nielson_extract_summaryGraph(sg) = [nielsonSG_to_srwSG(sg)];
//nielson_extract_shapeGraphs :: ShapeGraphSet -> ShapeGraphList;
//nielson_extract_shapeGraphs(sg) = [x !! x <-- sg];

/*
  convert nielson to srw graph
  nielson: set of graphs, each selector points to one node
  srw: single graph, each selector can point to many nodes
*/

nielsonSG_to_srwSG :: ShapeGraphSet -> ShapeGraph;
nielsonSG_to_srwSG(graphs) = rec_join_shapegraphs( (({},{}),{}), [x !! x <-- graphs]);

rec_join_shapegraphs :: ShapeGraph,ShapeGraphList -> ShapeGraph;
rec_join_shapegraphs(sg, []) = sg;
rec_join_shapegraphs(((S0,H0),is0), car:cdr) =
    case car of ((S1,H1),is1) =>
        let 
            new_S = union(S0,S1);
            new_H = union(H0,H1);
        in let
            new_sharing = nielson_compute_is(((new_S,new_H),union(is0,is1)));
        in
            rec_join_shapegraphs(((new_S,new_H),new_sharing), cdr);
    endcase;


// computes shared nodes 
//  - Inv4: is = intersect(is, union({n !! ({},_,n)}, nodes_that_are_more_than_once_target_of_an_heapedge()))
//  - Inv5: i s+= (nodes_that_are_mone_than_once_target_of_an_heapedge() / {})
nielson_compute_is :: ShapeGraph -> NodeSet;
nielson_compute_is(((S,H),iss)) =
    union(
        // Inv4: if nx is shared, then
        //  - Inv4a: ({},_,nx) must be one of the heapedges OR
        //  - Inv4b: nx must be the target of more than one heapedge
        intersect(
            iss,
            union(
                {x !! x <-  dests_of_heapedges(heapedges_by_src({},H))},   // Inv 4a
                {y !! y <-- more_than_once(dests_of_heapedges(H))}         //Inv 4b
            )
        ),

        // Inv5: nx is shared if two or more heapedges have nx as their
        // target (if nx != {})
        nodes_target2plus(((S,H),iss))
    );


// nodes that are target of 2 (or more) heapedges, but not {}
nodes_target2plus :: ShapeGraph -> NodeSet;
nodes_target2plus(((_,H),_)) = more_than_once(dests_of_heapedges(H)) # {};

dests_of_heapedges :: HeapEdgeSet -> NodeList;
dests_of_heapedges(H) = [d !! (_,_,d) <-- H];

more_than_once :: NodeList -> NodeSet;
more_than_once(nodes) = rec_more_than_once(nodes,{},{});

rec_more_than_once :: NodeList,NodeSet,NodeSet -> NodeSet;
rec_more_than_once([],         _, result) = result;
rec_more_than_once(car:cdr, seen, result) = 
    if car ? seen then 
        rec_more_than_once(cdr, seen, union(result, {car}))
    else
        rec_more_than_once(cdr, union(seen, {car}), result)
    endif;


/*
  convert srw to nielson graph
  nielson: set of graphs, each selector points to one node
  srw: single graph, each selector can point to many nodes
*/

srwSG_to_nielsonSG :: ShapeGraph -> ShapeGraphSet;
srwSG_to_nielsonSG(((ES,EH),IS)) =
    {((ESn,EHn),IS) !!
        ESn <- transform_stackedges(ES),
        EHn <- transform_heapedges(
            reachable_heapedges({n !! (_,n) <-- ESn}, EH), // only pass reachable edges
                                {n !! (_,n) <-- ESn})      // startnodes (reachable via ES)
        };

// -- transform the stackedges
transform_stackedges::StackEdgeSet->StackEdgeSetList;
transform_stackedges(ES) = rec_transform_stackedges(ES, {});

rec_transform_stackedges :: StackEdgeSet,StackEdgeSet -> StackEdgeSetList;
rec_transform_stackedges(      {}, res_Graph) = [res_Graph];
rec_transform_stackedges(in_Graph, res_Graph) =
    let
        var   = hd(vars_by_stackedges(in_Graph));  // pick a variable var
    in let
        edges = stackedges_by_var(var,in_Graph);  // select all out-edges of var
    in
        [rg !! (_,node) as edge <-- edges,
             rg <- rec_transform_stackedges(
  //           stackedge_subtract(in_Graph, {edge}), //stackedges_by_vars(node,in_Graph)), //FIXME mit [b]
               stackedge_subtract(in_Graph, stackedges_by_vars(node,in_Graph)), //FIXME ohne [b]
               union(res_Graph, stackedges_by_dest(node, in_Graph))
             )];

// -- transform the heapedges
transform_heapedges::HeapEdgeSet,NodeSet->HeapEdgeSetList;
transform_heapedges(EH,startnodes) = rec_transform_heapedges(EH,startnodes,{});

rec_transform_heapedges :: HeapEdgeSet,NodeSet,HeapEdgeSet -> HeapEdgeSetList;
rec_transform_heapedges(      {},          _, res_Graph) = [res_Graph];
rec_transform_heapedges(in_Graph, startnodes, res_Graph) =
    let
        out_edges         = [e !! e <-- reachable_heapedges(startnodes, in_Graph)];
    in
        if out_edges = [] then
            [res_Graph]
        else
            let
                src_sel_pattern   = hd(out_edges);
            in let
                src               = src_of_heapedge(src_sel_pattern);
                sel               = sel_of_heapedge(src_sel_pattern);
            in let
                edges             = heapedges_by_src_sel(src,sel,in_Graph);
            in
                [rg !! (_,_,dest) as edge <-- edges,
                 rg <- rec_transform_heapedges(
                   heapedge_subtract(in_Graph, edges),
                   union(startnodes, {dest}),
                   union(res_Graph, {edge})
                 )]
        endif;



// ----------------------------------------
// Auxiliary functions for graph conversion
// ----------------------------------------

shapeGraph_list_member::ShapeGraph,ShapeGraphList->bool;
shapeGraph_list_member(a,b:c) = if a=b then true else shapeGraph_list_member(a,c) endif;
shapeGraph_list_member(a,[])  = false;

mk_unique_shapeGraph_list::ShapeGraphList->ShapeGraphList;
mk_unique_shapeGraph_list(a:b) = if shapeGraph_list_member(a,b) then mk_unique_shapeGraph_list(b) else a: mk_unique_shapeGraph_list(b) endif;
mk_unique_shapeGraph_list([])  = [];

// all stackedges that originiate from <var>
stackedges_by_var::str,StackEdgeSet->StackEdgeSet;
stackedges_by_var(var,edges) = {e !! (v,_) as e <-- edges, if v = var};

// all stackedges that originate from any of <vars>
stackedges_by_vars::VarSet,StackEdgeSet->StackEdgeSet;
stackedges_by_vars(vars,edges) = {e !! (_,n) as e <-- edges, if !(intersect(vars,n) = {})};

// all stackedges that point to <node>
stackedges_by_dest::VarSet,StackEdgeSet->StackEdgeSet;
stackedges_by_dest(dest,edges) = {e !! (_,d) as e <-- edges, if d = dest};

// all vars of stackedges
vars_by_stackedges::StackEdgeSet->StrList;
vars_by_stackedges(ES) = mk_unique_str_list([v !! (v,n) <-- ES]);

stackedge_subtract::StackEdgeSet,StackEdgeSet -> StackEdgeSet;
stackedge_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};

heapedge_subtract::HeapEdgeSet,HeapEdgeSet -> HeapEdgeSet;
heapedge_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};

heapedges_by_src::VarSet,HeapEdgeSet -> HeapEdgeSet;
heapedges_by_src(src,edges) = {e !! (s,_,_) as e <-- edges, if s = src};

heapedges_by_dest::VarSet,HeapEdgeSet -> HeapEdgeSet;
heapedges_by_dest(dest,edges) = {e !! (_,_,d) as e <-- edges, if d = dest};

heapedges_by_src_sel::VarSet,str,HeapEdgeSet -> HeapEdgeSet;
heapedges_by_src_sel(src,sel,edges) = {e !! (srcx,selx,_) as e <-- edges, if srcx = src && selx = sel};

src_of_heapedge::HeapEdge->VarSet;
src_of_heapedge((src,_,_)) = src;

sel_of_heapedge::HeapEdge->str;
sel_of_heapedge((_,sel,_)) = sel;

dest_of_heapedge::HeapEdge->VarSet;
dest_of_heapedge((_,_,dest)) = dest;

reachable_heapedges::NodeSet,HeapEdgeSet -> HeapEdgeSet;
reachable_heapedges(nodes, es) =
    flatten_heapedge_set({heapedges_by_src(src, es) !! src <-- reachable_heapnodes(nodes,es)});

reachable_heapnodes::NodeSet,HeapEdgeSet -> NodeSet;
reachable_heapnodes(nodes,es) =
    let
        new_nodes = union({dest !! (src,_,dest) <-- es, if src ? nodes}, nodes);
    in
        if nodes != new_nodes then reachable_heapnodes(new_nodes,es) else new_nodes endif;

flatten_heapedge_set::HeapEdgeSetSet -> HeapEdgeSet;
flatten_heapedge_set(sets) = rec_flatten_heapedge_set([s !! s <-- sets],{});

rec_flatten_heapedge_set::HeapEdgeSetList,HeapEdgeSet -> HeapEdgeSet;
rec_flatten_heapedge_set(    [],set) = set;
rec_flatten_heapedge_set(s:sets,set) = rec_flatten_heapedge_set(sets, union(set,s));

// ----------------------------
// is_may_alias / is_must_alias
// -----------------------------

is_no_alias :: Expression,Expression,ShapeGraphSet -> bool;
is_no_alias(a,b,sgs) = !is_may_alias(a,b,sgs);

// a,b are may aliases
// if there EXISTS one graph in which a and b refer to the same node
is_may_alias :: Expression,Expression,ShapeGraphSet -> bool;
is_may_alias(a,b,sgs) = {g !! g <-- sgs, if is_same_node("may",a,b,g)} != {};

// a,b are must aliases
// if and b refer to the same node in ALL the graphs
is_must_alias :: Expression,Expression,ShapeGraphSet -> bool;
is_must_alias(a,b,sgs) = {g !! g <-- sgs, if !is_same_node("must",a,b,g)} = {};

is_same_node :: str,Expression,Expression,ShapeGraph -> bool;
is_same_node(may_or_must,expr_a,expr_b,(_,is0) as sg) =
  let 
      a = get_node(expr_a,sg);
      b = get_node(expr_b,sg);
  in
      if a = {"0$not_in_graph"} || b = {"0$not_in_graph"} || a != b then
          false
      else if a != {} then
          true
      else
          // both a and b point to {}
          // - if {} is unshared, they point to different nodes
          // - otherwise they MAY point to the same node
          //   but they don't necessarily do, as a shared {}
          //   only means that two (or more) nodes point to
          //   the same unnamed node (but there could be more)
          if !({} ? is0) then false else if may_or_must = "may" then true else false endif endif
      endif endif;

get_node :: Expression, ShapeGraph -> VarSet;
get_node(e, sg) = rec_get_node(e, sg);

rec_get_node :: Expression, ShapeGraph -> VarSet;
rec_get_node(VarRefExp(na_x), g) = 
    let x = val-aststring(na_x); in
    if var_exists(x,g) then node_by_var(x,g) else {"0$not_in_graph"} endif;
    
rec_get_node(e, g) =
    let srcsel = case e of
        // <act>.sel
        DotExp(PointerDerefExp(parent),VarRefExp(na_sel)) =>
            (rec_get_node(parent, g), val-aststring(na_sel));

        // x.sel
        ArrowExp(VarRefExp(na_x),VarRefExp(na_sel)) =>
            let x = val-aststring(na_x); in
            if var_exists(x,g) then (node_by_var(x,g),val-aststring(na_sel)) else ({"0$not_in_graph"},"0") endif;

        _ =>
            print("can not parse Expr: ") print(e) print("\n")
            ({"0$not_in_graph"},"0");
    endcase; in case srcsel of (src,sel) =>
        if src_sel_exists(src,sel,g) then node_by_src_sel(src,sel,g) else {"0$not_in_graph"} endif;
    endcase;

var_exists :: str,ShapeGraph -> bool;
var_exists(x,((S0,_),_)) =  {e !! (y,ny) as e <-- S0, if (x=y)} != {};

node_by_var :: str,ShapeGraph -> VarSet;
node_by_var(x,((S0,_),_) as g) = hd([nk !! (k,nk) <-- S0, if (k=x)]);

node_by_src_sel :: VarSet,str,ShapeGraph -> VarSet;
node_by_src_sel(x,sel,((_,H0),_)) = hd([nk !! (x1,sel1,nk) <-- H0, if x1 = x && sel1 = sel]);

/* special conversion function for shape */
shape_carrier_to_shapegraphset :: dfi -> ShapeGraphSet;
shape_carrier_to_shapegraphset(lifted_sg) = srwSG_to_nielsonSG(drop(lifted_sg));

//nielson_carrier_to_shapegraphset :: dfi -> ShapeGraphSet;
