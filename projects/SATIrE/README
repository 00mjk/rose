------------------------------------------------------------
SATIrE: Static Analysis Tool Integration Engine
------------------------------------------------------------

SATIrE integrates static analysis tools into existing compiler
infrastructures.  Currently the focus is on integration of AbsInt's
Program Analysis Generator (PAG), the C/C++ infrastructure LLNL-ROSE,
and support for an external format (reading and writing) in Prolog
term syntax.

SATIrE 0.7.8 was tested with 
 - ROSE 0.8.10e
 - PAG 6.1.6.96
 - flex 2.5.33
 - bison 2.3
 - g++ 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)

------------------------------------------------------------
(1) INSTALLATION
------------------------------------------------------------

 a) Before you can install SATIrE
    i)  you must install LLNL-ROSE - http://www.llnl.gov/casc/rose/
    ii) you must install PAG - http://www.absint.com/pag/

 b) Unpack the satire tar-ball with:
    tar xvzf SATIrE-0.7.8.tgz

 c) Go to the satire directory:
    cd SATIrE-0.7.8

 d) Configure the sources for your platform and set the path for ROSE and PAG:

    e.g.    
    ./configure --prefix=/usr/local --with-rosedir=/usr/local/rose/ --with-pagdir=/usr/local/pag

    ./configure --help

    run 'make' for compiling all SATIrE modules and analyzers
    run 'make install' to install SATIrE to the location specified by --prefix=<INSTALL_PREFIX>
    run 'make installcheck' to run SATIrE tests on the installation

    Now you are ready to specify, compile, and run an anlysis.

------------------------------------------------------------
(2) GETTING STARTED WITH AN ANALYSIS THAT COMES WITH SATIrE
------------------------------------------------------------

 a) Ensure that SATIrE's <INSTALL_PREFIX>/bin is in your environment variable path.

 b) We chose the example sl1rd:
    [let's assume that you unpacked SATIrE-0.7.8.tgz in your home directory]
    cp -r ~/SATIrE-0.7.8/examples/sl1rd . [copy all files and test files to your directory]
    cd sl1rd                              [change to the directory]
    newanalysis                           [generate and configure all required files]
    make                                  [compile the analyzer (links ROSE,PAG,SATIrE files)]
    sl1rd --help                          [prints an overview of the available options]
    sl1rd tests/rdtest1.C                 [run the analyzer on the test file 'rdtest1.C']
    aisee sl1rd_result.gdl                [view the analysis result with aisee]
    sl1rd --sourceoutput tests/rdtest1.C  [generate an annotated source file tests/rose_rdtest1.C]
    sl1rd --termoutput tests/rdtest1.C    [generate a term representation in tests/rdtest1.C.pl]

 c) If you are starting with a shape analysis (srw98_shape or nnh99_shape) you must use
    newanalysis -u
    The option 'u' ensures that existing files are not overwritten by 'newanalysis' which
    is currently necessary for the shape analyses to allow for analysis results post-processing
    and non-default visualizations.

------------------------------------------------------------
(3) CRAFTING A NEW ANALYSIS
------------------------------------------------------------

 a) Ensure that <INSTALL_PREFIX>/bin is in your environment variable path.

 b) mkdir <ANALYSIS_NAME>

 c) cd <ANALYSIS_NAME>

 d) Implement <ANALYSIS_NAME>.optla and <ANALYSIS_NAME>.set

 e) Run 'newanalysis' to have all required files copied into your
    directory. (you can rerun newanalysis later again)

    If you do modify the generated files do not want them to be overwritten
    in subsequent uses of new analysis use option '-u' (for update). 
    The option '-u' *must* be used if you are apply newanalysis to the examples
    srw98_shape and nnh99_shape to not overwrite main.C and main.h which are
    predefined for the two shape analyses. (Future versions of SATIrE will
    include a configure file that allows to handle such cases in a more 
    convenient way)

 f) Run 'make' to compile your analyzer

 g) Run your analyzer '<ANALYSIS_NAME> <INPUTFILE>'. The input file is a
    C/C++ source file and the executable analyzer has the name <ANALYSIS_NAME>.
    This will generate a file '<ANALYSIS_NAME>_result.gdl' which can be
    viewed with the tool aiSee.

    Note, the command 'newanalysis' never modifies *.set or *.optla files
    but does overwrite Makefile, main.C, main-support.C in the directory 
    where it is run. 

------------------------------------------------------------
(4) FURTHER INFORMATION & CONTACT
------------------------------------------------------------
  
 a) Documentation that comes with the distribution can be found
    in the directory 'docs'.
    satire_overview.pdf: gives an overview of the SATIrE infrastructure
    satire_cfgconstruction.pdf: describes the structure of the ICFG
    satire_attributes_auxiliary_functions: a text document on the auxiliary
          functions that can be used in PAG analysis specifications to 
          access various program information.
    
 b) On the web information can be found at:
    http://www.complang.tuwien.ac.at/markus/satire
    http://www.complang.tuwien.ac.at/markus/satirefaq

 c) For questions, feedback, bug reports, or suggestions on SATIrE send
    email to: markus@complang.tuwien.ac.at
