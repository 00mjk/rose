// -*- C++ -*-
// vim: syntax=cpp

// Include guards and definition of ANALYSIS macro generated by newanalysis
// script.

#include <satire.h>

// This header declares functions and classes specific to this analysis; we
// put these into a sub-namespace of the SATIrE namespace identified by the
// ANALYSIS macro.
// Much of the old macro hackery has thus been turned into somewhat cleaner
// namespace hackery (but the name of the inner namespace is still a macro).

namespace SATIrE
{

namespace ANALYSIS
{

class Implementation
  : public DataFlowAnalysis::Implementation
{           
public: 
    std::string identifier() const;
    std::string description() const;

    void analysisDoit(CFG *cfg);
    void makePersistent() const;

    void setDebugStat(int debugStat) const;
    void setGlobalRetfunc(int global_retfunc) const;
    
    void annotateProgram(Program *program);
    void outputAnnotatedProgram(Program *program, bool prefixFiles = true);
    void outputAnalysisVisualization(
            Program *program, bool prefixFiles = true);

private:
 // This member holds the information computed by the analysis; it is really
 // of some type called DFI_STORE, but we do not want to export DFI_STORE's
 // definition (which is generated by PAG).
    void *analysisInfo;
        
 // This method need not be part of the interface as it should only be
 // called via outputAnalysisVisualization.
    void createGDL(const char *filename) const;
};

} // namespace ANALYSIS

} // namespace SATIrE

// undefine ANALYSIS macro defined by newanalysis script
#undef ANALYSIS

// end of include guards
#endif
