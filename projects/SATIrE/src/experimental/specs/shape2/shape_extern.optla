/* Author: Viktor Pavlu
   E-mail: vpavlu@gmail.com
   Year  : 2006
*/

// ----------------------------------------------------------------------
// SUPPORT FUNCTIONS
// CALLED BY APPLICATION

extract_stackedge_set :: ShapeGraph -> StackEdgeSet;
extract_stackedge_set(((EV,_),_)) = EV;

extract_stackedges::ShapeGraph -> StackEdgeList;
extract_stackedges(((EV,_),_)) = [x !! x <-- EV];

extract_heapnodes::ShapeGraph -> NodeList;
extract_heapnodes(((EV,ES),_))  =
   [ x !! x <-- union(union({ a !! (a,_,_) <-- ES},{ c !! (_,_,c) <-- ES}),{b !! (_,b) <-- EV}) ];

extract_heapedges::ShapeGraph -> HeapEdgeList;
extract_heapedges(((_,ES),_)) = [x !! x <-- ES];

extract_is_shared::ShapeGraph -> NodeList;
extract_is_shared((_,iss)) = [x !! x <-- iss];

var_exists :: str,ShapeGraph -> bool;
var_exists(x,((S0,_),_)) =  {e !! (y,ny) as e <-- S0, if (x=y)} != {};

node_by_var :: str,ShapeGraph -> VarSet;
node_by_var(x,((S0,_),_) as g) = hd([nk !! (k,nk) <-- S0, if (k=x)]);

src_sel_exists :: VarSet,str,ShapeGraph -> bool;
src_sel_exists(src,sel,((_,H0),_)) = {e !! (nv,sv,_) as e <-- H0, if (src = nv) && (sel = sv)} != {};


// AUXILIARY FUNCTIONS FOR SUPPORT FUNCTIONS

str_list_member::str,StrList->bool;
str_list_member(a,b:c) = if a=b then true else str_list_member(a,c) endif;
str_list_member(a,[])  = false;

mk_unique_str_list::StrList->StrList;
mk_unique_str_list(a:b) = if str_list_member(a,b) then mk_unique_str_list(b) else a: mk_unique_str_list(b) endif;
mk_unique_str_list([])  = [];


// ----------------------------------------------------------------------
// TRANSFORMATION FUNCTIONS:
//   transforms list of shapegraphs where each selector may appear only
//   once per node (nielson) into a single shapegraph where selectors may
//   point to more than one node at the same time (srw), and vice versa.
//

//
// functions for Sagiv/Reps/Wilhelm analysis
//

srw_extract_summaryGraph :: ShapeGraph -> ShapeGraphList;
srw_extract_summaryGraph(sg) = [sg];

srw_extract_shapeGraphs :: ShapeGraph -> ShapeGraphList;
srw_extract_shapeGraphs(sg) = srwSG_to_nielsonSG(sg);


//
// functions for Nielson analysis
//

nielson_extract_summaryGraph :: ShapeGraphList -> ShapeGraphList;
nielson_extract_summaryGraph(sg) = [nielsonSG_to_srwSG(sg)];

nielson_extract_shapeGraphs :: ShapeGraphList -> ShapeGraphList;
nielson_extract_shapeGraphs(sg) = sg;


//
// conversion functions
//

// converts a "Nielson shapegraph" (a list of graphs where
// each selector may appear at most once at a certain node) into a
// "Sagiv/Reps/Wilhelm shapegraph" (a single graph where selectors
// may point to more than one node simultaneously)

nielsonSG_to_srwSG :: ShapeGraphList -> ShapeGraph;
nielsonSG_to_srwSG(graphs) = rec_combine_graphs(hd(graphs),tl(graphs));

rec_combine_graphs :: ShapeGraph,ShapeGraphList -> ShapeGraph;
rec_combine_graphs(g, []     ) = g;
rec_combine_graphs(((EV0,ES0),IS0), ((EV1,ES1),IS1):rest) =
  rec_combine_graphs(((union(EV0,EV1),union(ES0,ES1)),union(IS0,IS1)), rest);

// converts a "Sagiv/Reps/Wilhelm shapegraph" (a single graph where selectors
// may point to more than one node simultaneously)
// into a "Hanne Riis Nielson shapegraph" (a list of graphs where
// each selector may appear at most once at a certain node)

srwSG_to_nielsonSG :: ShapeGraph -> ShapeGraphList;
srwSG_to_nielsonSG(((EV,ES),IS)) =
    mk_unique_shapeGraph_list([((EVn,ESn),IS) !!
        EVn <- transform_stackedges(EV),
        ESn <- transform_heapedges(
            reachable_heapedges({n !! (_,n) <-- EVn}, ES), // only pass reachable edges
                                {n !! (_,n) <-- EVn})      // startnodes (reachable via EV)
    ]);

// -- transform the var-edges (EV)
transform_stackedges::StackEdgeSet->StackEdgeSetList;
transform_stackedges(EV) = rec_transform_stackedges(EV, {});

rec_transform_stackedges :: StackEdgeSet,StackEdgeSet -> StackEdgeSetList;
rec_transform_stackedges(      {}, res_Graph) = [res_Graph];
rec_transform_stackedges(in_Graph, res_Graph) =
  let
    var   = hd(vars_by_stackedges(in_Graph));  // pick a variable var
  in let
    edges = stackedges_by_var(var,in_Graph);  // select all out-edges of var
  in
    [rg !! (_,node) as edge <-- edges, //FIXME as edge weg
           rg <- rec_transform_stackedges(
//             stackedge_subtract(in_Graph, {edge}), //stackedges_by_vars(node,in_Graph)), //FIXME mit [b]
             stackedge_subtract(in_Graph, stackedges_by_vars(node,in_Graph)), //FIXME ohne [b]
             union(res_Graph, stackedges_by_heapnode(node, in_Graph))
           )];

// -- transform the selector-edges (ES)
transform_heapedges::HeapEdgeSet,NodeSet->HeapEdgeSetList;
transform_heapedges(ES,startnodes) = rec_transform_heapedges(ES,startnodes,{});

rec_transform_heapedges :: HeapEdgeSet,NodeSet,HeapEdgeSet -> HeapEdgeSetList;
rec_transform_heapedges(      {},          _, res_Graph) = [res_Graph];
rec_transform_heapedges(in_Graph, startnodes, res_Graph) =
    let
        out_edges = [e !! e <-- reachable_heapedges(startnodes, in_Graph)];
    in
        if out_edges = [] then
            [res_Graph]
        else
            let src_sel_pattern = hd(out_edges); in
            let
                src = srcnode_of_heapedge(src_sel_pattern);
                sel = selector_of_heapedge(src_sel_pattern);
            in let
                edges = heapedges_by_srcnode_sel(src,sel,in_Graph);
            in
                [rg !! (_,_,dest) as edge <-- edges,
                 rg <- rec_transform_heapedges(
                       heapedge_subtract(in_Graph, edges),
                       union(startnodes, {dest}),
                       union(res_Graph, {edge})
                     )]
        endif;


// AUXILIARY FUNCTIONS FOR TRANSFORMATION INTO SET OF GRAPHS

shapeGraph_list_member::ShapeGraph,ShapeGraphList->bool;
shapeGraph_list_member(a,b:c) = if a=b then true else shapeGraph_list_member(a,c) endif;
shapeGraph_list_member(a,[])  = false;


mk_unique_shapeGraph_list::ShapeGraphList->ShapeGraphList;
mk_unique_shapeGraph_list([])  = [];
mk_unique_shapeGraph_list(a:b) =
    if shapeGraph_list_member(a,b) then
        mk_unique_shapeGraph_list(b)
    else 
        a: mk_unique_shapeGraph_list(b)
    endif;

// all ev that originiate from <var>
stackedges_by_var::str,StackEdgeSet->StackEdgeSet;
stackedges_by_var(var,edges) = {e !! (v,_) as e <-- edges, if v = var};

// all ev that originate from any of <vars>
stackedges_by_vars::VarSet,StackEdgeSet->StackEdgeSet;
stackedges_by_vars(vars,edges) = {e !! (_,n) as e <-- edges, if !(intersect(vars,n) = {})};

// all ev that point to <node>
stackedges_by_heapnode::VarSet,StackEdgeSet->StackEdgeSet;
stackedges_by_heapnode(node,edges) = {e !! (_,n) as e <-- edges, if n = node};

vars_by_stackedges::StackEdgeSet->StrList;
vars_by_stackedges(EV) = mk_unique_str_list([v !! (v,n) <-- EV]);

stackedge_subtract::StackEdgeSet,StackEdgeSet -> StackEdgeSet;
stackedge_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};

heapedge_subtract::HeapEdgeSet,HeapEdgeSet -> HeapEdgeSet;
heapedge_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};



heapedges_by_srcnode::VarSet,HeapEdgeSet -> HeapEdgeSet;
heapedges_by_srcnode(src,edges) = {e !! (s,_,_) as e <-- edges, if s = src};

heapedges_by_srcnode_sel::VarSet,str,HeapEdgeSet -> HeapEdgeSet;
heapedges_by_srcnode_sel(src,sel,edges) = {e !! (srcx,selx,_) as e <-- edges, if srcx = src && selx = sel};

srcnode_of_heapedge::HeapEdge->VarSet;
srcnode_of_heapedge((src,_,_)) = src;

selector_of_heapedge::HeapEdge->str;
selector_of_heapedge((_,sel,_)) = sel;

//es_extract_dest::HeapEdge->VarSet;
//es_extract_dest((_,_,dest)) = dest;

reachable_heapedges::NodeSet,HeapEdgeSet -> HeapEdgeSet;
reachable_heapedges(nodes, es) =
  flatten_heapedge_set({heapedges_by_srcnode(src, es) !! src <-- reachable_heapnodes(nodes,es)});

reachable_heapnodes::NodeSet,HeapEdgeSet -> NodeSet;
reachable_heapnodes(nodes,es) =
    let
        new_nodes = union({dest !! (src,_,dest) <-- es, if src ? nodes}, nodes);
    in
        if nodes != new_nodes then reachable_heapnodes(new_nodes,es) else new_nodes endif;

flatten_heapedge_set::HeapEdgeSetSet -> HeapEdgeSet;
flatten_heapedge_set(sets) = rec_flatten_heapedge_set([s !! s <-- sets],{});

rec_flatten_heapedge_set::HeapEdgeSetList,HeapEdgeSet -> HeapEdgeSet;
rec_flatten_heapedge_set(    [],set) = set;
rec_flatten_heapedge_set(s:sets,set) = rec_flatten_heapedge_set(sets, union(set,s));



// -- rest --

//extract_ES :: ShapeGraph->HeapEdgeSet;
//extract_ES(((_,es),_)) = es;

//extract_IS :: ShapeGraph -> NodeSet;
//extract_IS((_,IS)) = IS;

emptylist :: -> ShapeGraphList;
emptylist() = [];

// -----------------------------
// is_may_alias / is_must_alias
// -----------------------------

is_no_alias :: Expression,Expression,dfi -> bool;
is_no_alias(a,b,srw) = !is_may_alias(a,b,srw);

// a,b are may aliases
// if there EXISTS one graph in which a and b refer to the same node
is_may_alias :: Expression,Expression,dfi -> bool;
is_may_alias(a,b,srw) = let sgl = srwSG_to_nielsonSG(drop(srw)); in {g !! g <- sgl, if is_same_node("may",a,b,g)} != {};
//ion(a,b,lifted_sgs) = let sgs = drop(lifted_sgs); in {g !! g <-- sgs, if is_same_node("may",a,b,g)} != {};

// a,b are must aliases
// if and b refer to the same node in ALL the graphs
is_must_alias :: Expression,Expression,dfi -> bool;
is_must_alias(a,b,srw) = let sgl = srwSG_to_nielsonSG(drop(srw)); in {g !! g <- sgl, if !is_same_node("must",a,b,g)} = {};
//lson(a,b,lifted_sgs) = let sgs = drop(lifted_sgs); in {g !! g <-- sgs, if !is_same_node("must",a,b,g)} = {};

is_same_node :: str,Expression,Expression,ShapeGraph -> bool;
is_same_node(may_or_must,expr_a,expr_b,(_,is0) as sg) =
  let 
      a = get_node(expr_a,sg);
      b = get_node(expr_b,sg);
  in
      if a = {"0$not_in_graph"} || b = {"0$not_in_graph"} || a != b then
          false
      else if a != {} then
          true
      else
          // both a and b point to {}
          // - if {} is unshared, they point to different nodes
          // - otherwise they MAY point to the same node
          //   but they don't necessarily do, as a shared {}
          //   only means that two (or more) nodes point to
          //   the same unnamed node (but there could be more)
          if !({} ? is0) then false else if may_or_must = "may" then true else false endif endif
      endif endif;

get_node :: Expression, ShapeGraph -> VarSet;
get_node(e, sg) = rec_get_node(e, sg);

rec_get_node :: Expression, ShapeGraph -> VarSet;
rec_get_node(VarRefExp(na_x), g) = 
    let x = val-aststring(na_x); in
    if var_exists(x,g) then node_by_var(x,g) else {"0$not_in_graph"} endif;
    
rec_get_node(e, g) =
    let srcsel = case e of
        // <act>.sel
        DotExp(PointerDerefExp(parent),VarRefExp(na_sel)) =>
            (rec_get_node(parent, g), val-aststring(na_sel));

        // x.sel
        ArrowExp(VarRefExp(na_x),VarRefExp(na_sel)) =>
            let x = val-aststring(na_x); in
            if var_exists(x,g) then (node_by_var(x,g),val-aststring(na_sel)) else ({"0$not_in_graph"},"0") endif;

        _ =>
            print("can not parse Expr: ") print(e) print("\n")
            ({"0$not_in_graph"},"0");
    endcase; in case srcsel of (src,sel) =>
        if src_sel_exists(src,sel,g) then node_by_src_sel(src,sel,g) else {"0$not_in_graph"} endif;
    endcase;
    

node_by_src_sel :: VarSet,str,ShapeGraph -> VarSet;
node_by_src_sel(x,sel,((_,H0),_)) = hd([nk !! (x1,sel1,nk) <-- H0, if x1 = x && sel1 = sel]);

