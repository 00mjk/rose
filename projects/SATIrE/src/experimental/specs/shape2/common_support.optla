// common support functions

// Author: Viktor Pavlu
// E-mail: e0425543@student.tuwien.ac.at
// Year  : 2006, 2007, 2008


delete_vars::dfi,*VariableSymbolNT->dfi;
delete_vars(g,[!]) = g;
delete_vars(g,VariableSymbol(_) as v::vs) = delete_vars(delete_var(g,varsym_varid(v)), vs);

delete_var::dfi,VariableId->dfi;
delete_var(top,_) = top;
delete_var(bot,_) = bot;
delete_var(  g,v) = lift(tassign_x_null(v,drop(g)));

extract_stackedge_set::ShapeGraph->StackEdgeSet;
extract_stackedge_set(((se,_),_)) = se;

extract_stackedges::ShapeGraph->StackEdgeList;
extract_stackedges(((se,_),_)) = [x !! x <-- se];

extract_heapnodes::ShapeGraph->NodeList;
extract_heapnodes(((EV,ES),_))  =
  [ x !! x <-- union(union({ a !! (a,_,_) <-- ES},{ c !! (_,_,c) <-- ES}),{b !! (_,b) <-- EV}) ];

extract_heapedges::ShapeGraph->HeapEdgeList;
extract_heapedges(((_,ES),_)) = [x !! x <-- ES];

extract_is_shared::ShapeGraph->NodeList;
extract_is_shared((_,iss)) = [x !! x <-- iss];

src_sel_exists::Node,VariableId,ShapeGraph->bool;
src_sel_exists(src,sel,((_,H0),_)) = {e !! (nv,sv,_) as e <-- H0, if (src = nv) && (sel = sv)} != {};

var_sel_exists::VariableId,VariableId,ShapeGraph->bool;
var_sel_exists(x,sel,((_,H0),_)) = {e !! (nv,sv,_) as e <-- H0, if (x ? nv) && (sv = sel)} != {};

heapedge_by_var_sel::VariableId,VariableId,HeapEdgeSet->HeapEdge;
heapedge_by_var_sel(x,sel,edges) = hd([e !! (nv,sv,_) as e <-- edges, if (x ? nv) && (sv = sel)]);

no_duplicates::VarList->VarList;
no_duplicates(list) = [x !! x <-- {y !! y <- list}];

srw_extract_graphs::ShapeGraph->SrwNnhPair;
srw_extract_graphs(sg) = (sg,sgSet_to_sgList(srwSG_to_nnhSG(sg)));

nnh_extract_graphs::ShapeGraphSet->SrwNnhPair;
nnh_extract_graphs(sg) = (nnhSG_to_srwSG(sg), sgSet_to_sgList(sg));

sgSet_to_sgList::ShapeGraphSet->ShapeGraphList;
sgSet_to_sgList(sgs) = [sg !! sg <-- sgs];

//srw_extract_summaryGraph::ShapeGraph->ShapeGraphList;
//srw_extract_summaryGraph(sg) = [sg];
//srw_extract_shapeGraphs::ShapeGraph->ShapeGraphList;
//srw_extract_shapeGraphs(sg) = [x !! x <-- srwSG_to_nnhSG(sg)];

//nnh_extract_summaryGraph::ShapeGraphSet->ShapeGraphList;
//nnh_extract_summaryGraph(sg) = [nnhSG_to_srwSG(sg)];
//nnh_extract_shapeGraphs::ShapeGraphSet->ShapeGraphList;
//nnh_extract_shapeGraphs(sg) = [x !! x <-- sg];

// convert nnh to srw graph
// nnh: set of graphs, each selector points to one node
// srw: single graph, each selector can point to many nodes

nnhSG_to_srwSG::ShapeGraphSet->ShapeGraph;
nnhSG_to_srwSG(graphs) = rec_join_shapegraphs( (({},{}),{}), [x !! x <-- graphs]);

rec_join_shapegraphs::ShapeGraph,ShapeGraphList->ShapeGraph;
rec_join_shapegraphs(sg, []) = sg;
rec_join_shapegraphs(((S0,H0),is0), ((S1,H1),is1):cdr) =
  let new_S = union(S0,S1);
      new_H = union(H0,H1); in
  let new_sharing = nnh_compute_is(((new_S,new_H),union(is0,is1))); in
  rec_join_shapegraphs(((new_S,new_H),new_sharing), cdr);

// computes shared nodes 
//  - Inv4: is = intersect(is, union({n !! ({},_,n)}, nodes_that_are_more_than_once_target_of_an_heapedge()))
//  - Inv5: i s+= (nodes_that_are_mone_than_once_target_of_an_heapedge() / {})
nnh_compute_is::ShapeGraph->NodeSet;
nnh_compute_is(((S,H),iss)) =
  union(
    // Inv4: if nx is shared, then
    //  - Inv4a: ({},_,nx) must be one of the heapedges OR
    //  - Inv4b: nx must be the target of more than one heapedge
    intersect(
      iss,
      union(
        {x !! x <-  dests_of_heapedges(heapedges_by_src({},H))},   // Inv 4a
        {y !! y <-- more_than_once(dests_of_heapedges(H))}         //Inv 4b
      )
    ),
    // Inv5: nx is shared if two or more heapedges have nx as their
    // target (if nx != {})
    nodes_target2plus(((S,H),iss))
  );

// nodes that are target of 2 (or more) heapedges, but not {}
nodes_target2plus::ShapeGraph->NodeSet;
nodes_target2plus(((_,H),_)) = more_than_once(dests_of_heapedges(H)) # {};

dests_of_heapedges::HeapEdgeSet->NodeList;
dests_of_heapedges(H) = [d !! (_,_,d) <-- H];

more_than_once::NodeList->NodeSet;
more_than_once(nodes) = rec_more_than_once(nodes,{},{});

rec_more_than_once::NodeList,NodeSet,NodeSet->NodeSet;
rec_more_than_once([],         _, result) = result;
rec_more_than_once(car:cdr, seen, result) =
  if car ? seen then
    rec_more_than_once(cdr, seen, union(result, {car}))
  else
    rec_more_than_once(cdr, union(seen, {car}), result)
  endif;

// convert srw to nnh graph
// nnh: set of graphs, each selector points to one node
// srw: single graph, each selector can point to many nodes

srwSG_to_nnhSG::ShapeGraph->ShapeGraphSet;
srwSG_to_nnhSG(((ES,EH),IS)) =
  {((ESn,EHn),IS) !!
    ESn <- transform_stackedges(ES),
    EHn <- transform_heapedges(
      reachable_heapedges({n !! (_,n) <-- ESn}, EH), // only pass reachable edges
                          {n !! (_,n) <-- ESn})      // startnodes (reachable via ES)
  };

// -- transform the stackedges
transform_stackedges::StackEdgeSet->StackEdgeSetList;
transform_stackedges(ES) = rec_transform_stackedges(ES, {});

rec_transform_stackedges::StackEdgeSet,StackEdgeSet->StackEdgeSetList;
rec_transform_stackedges(      {}, res_Graph) = [res_Graph];
rec_transform_stackedges(in_Graph, res_Graph) =
  let var   = hd(vars_by_stackedges(in_Graph)); in // pick a variable var
  let edges = stackedges_by_var(var,in_Graph); in  // select all out-edges of var
  [rg !! (_,node) as edge <-- edges,
    rg <- rec_transform_stackedges(
  //  stackedge_subtract(in_Graph, {edge}), //stackedges_by_vars(node,in_Graph)), //FIXME mit [b]
    stackedge_subtract(in_Graph, stackedges_by_vars(node,in_Graph)), //FIXME ohne [b]
    union(res_Graph, stackedges_by_dest(node, in_Graph))
  )];

// -- transform the heapedges
transform_heapedges::HeapEdgeSet,NodeSet->HeapEdgeSetList;
transform_heapedges(EH,startnodes) = rec_transform_heapedges(EH,startnodes,{});

rec_transform_heapedges::HeapEdgeSet,NodeSet,HeapEdgeSet->HeapEdgeSetList;
rec_transform_heapedges(      {},          _, res_Graph) = [res_Graph];
rec_transform_heapedges(in_Graph, startnodes, res_Graph) =
  let out_edges = [e !! e <-- reachable_heapedges(startnodes, in_Graph)]; in
  if out_edges = [] then
    [res_Graph]
  else
    let src_sel_pattern = hd(out_edges); in
    let src             = src_of_heapedge(src_sel_pattern);
        sel             = sel_of_heapedge(src_sel_pattern); in
    let edges           = heapedges_by_src_sel(src,sel,in_Graph); in
    [rg !! (_,_,dest) as edge <-- edges,
      rg <- rec_transform_heapedges(
        heapedge_subtract(in_Graph, edges),
          union(startnodes, {dest}),
          union(res_Graph, {edge})
      )
    ]
  endif;

// ----------------------------------------
// Auxiliary functions for graph conversion
// ----------------------------------------

shapeGraph_list_member::ShapeGraph,ShapeGraphList->bool;
shapeGraph_list_member(a,b:c) = if a=b then true else shapeGraph_list_member(a,c) endif;
shapeGraph_list_member(a,[])  = false;

mk_unique_shapeGraph_list::ShapeGraphList->ShapeGraphList;
mk_unique_shapeGraph_list(a:b) = if shapeGraph_list_member(a,b) then mk_unique_shapeGraph_list(b) else a: mk_unique_shapeGraph_list(b) endif;
mk_unique_shapeGraph_list([])  = [];

// all stackedges that originiate from <var>
stackedges_by_var::VariableId,StackEdgeSet->StackEdgeSet;
stackedges_by_var(var,edges) = {e !! (v,_) as e <-- edges, if v = var};

// all stackedges that originate from any of <vars>
stackedges_by_vars::Node,StackEdgeSet->StackEdgeSet;
stackedges_by_vars(vars,edges) = {e !! (_,n) as e <-- edges, if !(intersect(vars,n) = {})};

// all stackedges that point to <node>
stackedges_by_dest::Node,StackEdgeSet->StackEdgeSet;
stackedges_by_dest(dest,edges) = {e !! (_,d) as e <-- edges, if d = dest};

// all vars of stackedges
vars_by_stackedges::StackEdgeSet->VarList;
//vars_by_stackedges(ES) = no_duplicates([v !! (v,n) <-- ES]);
vars_by_stackedges(S) = [v1 !! v1 <-- {v2 !! (v2,_) <-- S}];

// all vars of stackedges (as set)
nodes_by_stackedges::StackEdgeSet->NodeSet;
nodes_by_stackedges(S) = {{nx} !! (nx,_) <-- S};

// all vars of heapedges (as set)
nodes_by_heapedges::HeapEdgeSet->NodeSet;
nodes_by_heapedges(H) = {n !! n <-- union({nv !! (nv,_,_) <-- H},{nw !! (_,_,nw) <-- H})};

stackedge_subtract::StackEdgeSet,StackEdgeSet->StackEdgeSet;
stackedge_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};

heapedge_subtract::HeapEdgeSet,HeapEdgeSet->HeapEdgeSet;
heapedge_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};

heapedges_by_src::Node,HeapEdgeSet->HeapEdgeSet;
heapedges_by_src(src,edges) = {e !! (s,_,_) as e <-- edges, if s = src};

heapedges_by_dest::Node,HeapEdgeSet->HeapEdgeSet;
heapedges_by_dest(dest,edges) = {e !! (_,_,d) as e <-- edges, if d = dest};

heapedges_by_src_sel::Node,VariableId,HeapEdgeSet->HeapEdgeSet;
heapedges_by_src_sel(src,sel,edges) = {e !! (srcx,selx,_) as e <-- edges, if srcx = src && selx = sel};

src_of_heapedge::HeapEdge->Node;
src_of_heapedge((src,_,_)) = src;

sel_of_heapedge::HeapEdge->VariableId;
sel_of_heapedge((_,sel,_)) = sel;

dest_of_heapedge::HeapEdge->Node;
dest_of_heapedge((_,_,dest)) = dest;

reachable_heapedges::NodeSet,HeapEdgeSet->HeapEdgeSet;
reachable_heapedges(nodes, es) =
  flatten_heapedge_set({heapedges_by_src(src, es) !! src <-- reachable_heapnodes(nodes,es)});

reachable_heapnodes::NodeSet,HeapEdgeSet->NodeSet;
reachable_heapnodes(nodes,es) =
  let new_nodes = union({dest !! (src,_,dest) <-- es, if src ? nodes}, nodes); in
  if nodes != new_nodes then reachable_heapnodes(new_nodes,es) else new_nodes endif;

flatten_heapedge_set::HeapEdgeSetSet->HeapEdgeSet;
flatten_heapedge_set(sets) = rec_flatten_heapedge_set([s !! s <-- sets],{});

rec_flatten_heapedge_set::HeapEdgeSetList,HeapEdgeSet->HeapEdgeSet;
rec_flatten_heapedge_set(    [],set) = set;
rec_flatten_heapedge_set(s:sets,set) = rec_flatten_heapedge_set(sets, union(set,s));

// ----------------------------
// is_may_alias / is_must_alias
// ----------------------------

is_no_alias::Expression,Expression,ShapeGraphSet->bool;
is_no_alias(a,b,sgs) = !is_may_alias(a,b,sgs);

// a,b are may aliases
// if there EXISTS one graph in which a and b refer to the same node
is_may_alias::Expression,Expression,ShapeGraphSet->bool;
is_may_alias(a,b,sgs) = {g !! g <-- sgs, if is_same_node(Alias_May,a,b,g)} != {};

// a,b are must aliases
// if there exists no graph in which a and b refer NOT to the same node (ie they do refer in all nodes)
is_must_alias::Expression,Expression,ShapeGraphSet->bool;
is_must_alias(a,b,sgs) = {g !! g <-- sgs, if !is_same_node(Alias_Must,a,b,g)} = {};

// returns true if both expressions refer to the same node
is_same_node::EnumAlias,Expression,Expression,ShapeGraph->bool;
is_same_node(alias_type,expr_a,expr_b,(_,is0) as sg) =
  let invalid_node = {add_tmpvarid_like_expr(expr_a)}; in  // will be used to indicate "node not found" case
  let a_nodes      = nodes_visited_by_expr(expr_a,sg,invalid_node);
      b_nodes      = nodes_visited_by_expr(expr_b,sg,invalid_node);
      a_sels       = selectors_visited_by_expr(expr_a);
      b_sels       = selectors_visited_by_expr(expr_b); in
  rec_is_same_node(alias_type, {} ? is0, a_sels, a_nodes, b_sels, b_nodes, invalid_node);

rec_is_same_node::EnumAlias,bool, VarList,NodeList, VarList,NodeList, Node->bool;
rec_is_same_node(_, _, _, [], _,  _, _) = false;
rec_is_same_node(_, _, _,  _, _, [], _) = false;
rec_is_same_node(alias_type, summary_is_shared, a_sels, a:a_rest, b_sels, b:b_rest, invalid_node) =
  if a != b || a = invalid_node || b = invalid_node then
    // different nodes or not in graph at all
    false 
  else
    // nodes are equal
    if a != {} then
      // same node and not the summary node, hooray!
      true
    else
      // both paths lead to the summary node
      if Alias_May = alias_type && summary_is_shared then
        // when the summary node is shared, any two paths leading
        // to the summary node POSSIBLY end at the same summary node
        true
      else
        // a and b can still be aliases if the paths minus the
        // last selector ended at the same node if the same
        // selector was used on both paths
        // (nb: while the selectors are identical on both paths, the elements in the selector- and nodelists can be dropped -- investigate: faster??)
        if a_sels = [] || b_sels = [] || a_sels != b_sels then
          false
        else
          rec_is_same_node(alias_type, summary_is_shared, tl(a_sels), a_rest, tl(b_sels), b_rest, invalid_node)
        endif
      endif
    endif
  endif;

// returns list of names where expressions like
// (*(a->b)).c->d yield
// [d,c,b,a]
selectors_visited_by_expr::Expression->VarList;
selectors_visited_by_expr(e) = reverse(rec_selectors_visited_by_expr(e, expr_depth(e)));

rec_selectors_visited_by_expr::Expression,snum->VarList;
rec_selectors_visited_by_expr(_, -1) = []; // intentionally -1, topmost case in iteration
rec_selectors_visited_by_expr(e, e_cursor) =
  let inner_e  = expr_at(e,e_cursor); in
  let new_list = case inner_e of
    VarRefExp(_) as ref_x                                   => [varref_varid(ref_x)];
    ArrowExp(VarRefExp(_) as ref_x,VarRefExp(_) as ref_sel) => [varref_varid(ref_x),varref_varid(ref_sel)];
    DotExp(PointerDerefExp(_),VarRefExp(_) as ref_sel)      => [varref_varid(ref_sel)];
    _ => print(inner_e) print(": ") error("unhandled expression.");
  endcase; in
  new_list ++ rec_selectors_visited_by_expr(e, e_cursor - 1);

// returns list of all heapnodes on a path given by the expression
// [node(n), node(n-1), node(n-2), ..., node(0)]
nodes_visited_by_expr::Expression,ShapeGraph,Node->NodeList;
nodes_visited_by_expr(e,g,invalid_node) = rec_nodes_visited_by_expr(e, expr_depth(e),g,[],invalid_node);

rec_nodes_visited_by_expr::Expression,snum,ShapeGraph,NodeList,Node->NodeList;
rec_nodes_visited_by_expr(_,       -1, _, trail,            _) = trail; // intentionally -1, topmost case in iteration
rec_nodes_visited_by_expr(e, e_cursor, g, trail, invalid_node) =
  let inner_e  = expr_at(e,e_cursor); in
  let new_list = case inner_e of

    VarRefExp(_) as ref_x =>
      let x   = varref_varid(ref_x); in
      if var_exists(x,g) then [node_by_var(x,g)] else [invalid_node] endif;

    ArrowExp(VarRefExp(_) as ref_x,VarRefExp(_) as ref_sel) =>
      let x   = varref_varid(ref_x);
          sel = varref_varid(ref_sel); in
      let nl0 = if var_exists(x,g) then [node_by_var(x,g)] else [invalid_node] endif; in
      let nl1 = if src_sel_exists({x},sel,g) then [node_by_src_sel({x},sel,g)] else [invalid_node] endif; in
      nl1 ++ nl0;

    DotExp(PointerDerefExp(_),VarRefExp(_) as ref_sel) =>
      let x   = hd(trail);
          sel = varref_varid(ref_sel); in
      if src_sel_exists(x,sel,g) then [node_by_src_sel(x,sel,g)] else [invalid_node] endif;

    _ => print(inner_e) print(": ") error("unhandled expression.");
  endcase; in
  rec_nodes_visited_by_expr(e, e_cursor - 1, g, new_list ++ trail, invalid_node);

var_exists::VariableId,ShapeGraph->bool;
var_exists(x,((S0,_),_)) =  {e !! (y,ny) as e <-- S0, if (x=y)} != {};

node_by_var::VariableId,ShapeGraph->Node;
node_by_var(x,((S0,_),_) as g) = hd([nk !! (k,nk) <-- S0, if (k=x)]);

node_by_src_sel::Node,VariableId,ShapeGraph->Node;
node_by_src_sel(x,sel,((_,H0),_)) = hd([nk !! (x1,sel1,nk) <-- H0, if x1 = x && sel1 = sel]);


// Predefined SATIrE Support Functions
expr_type::Expression->Type;
expr_exprid::Expression->ExpressionId;
exprid_expr::ExpressionId->Expression;
exprid_str::ExpressionId->str;

varsym_varid::VariableSymbolNT->VariableId;
varref_varid::Expression->VariableId;
varid_exprid::VariableId->ExpressionId;
varid_str::VariableId->str;

exprid_typeid::ExpressionId->TypeId;
type_typeid::Type->TypeId;
typeid_type::TypeId->Type;
typeid_str::TypeId->str;

is_tmpvarid::VariableId->bool;
add_tmpvarid::TypeId->VariableId;

stmt_asttext::Statement->str;
expr_asttext::Expression->str;

// garbage collection (Markus Schordan)
/*
gc::dfi->dfi;
gc(lifted_sg) = if option_kill_unreachable_nodes then
  case drop(lifted_sg) of sgs => lift(remove_empty_graph({gc_sg(sg) !! sg <-- sgs})); endcase
else
  lift(remove_empty_graph(drop(lifted_sg)))
endif;


gc_sg::ShapeGraph->ShapeGraph;
gc_sg(((v,e),s) as sg) =
let
  var_nodes = {n !! (_,n) <-- v};
in let 
  v_new = v;
  e_new = reachable_heapedges(var_nodes,e);
  s_new = intersect(s,reachable_heapnodes(var_nodes,e));
in
  ((v_new,e_new),s_new);
*/

