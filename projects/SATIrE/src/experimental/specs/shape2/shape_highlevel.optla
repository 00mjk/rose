/* Author: Viktor Pavlu
   E-mail: e0425543@student.tuwien.ac.at
   Year  : 2006
*/

/* highlevel functions that can handle arbitrarily nested
 * expressions by introducing temporary variables 
 */

is_temp :: str -> bool;
is_temp(s) = substr(s, 0, 0) = "$";

expression :: Expression,str,dfi -> dfi;
expression(_,_,bot) = bot;
expression(_,_,top) = top;
expression(e,label,lifted_g) =
    let ops = normalisation_ops(e,label); in
    let result_g = execute(ops, lifted_g); in
    if kill_norm_temps then
        kill_normalisation_temps(ops, result_g)
    else
        result_g
    endif;


/* call tassign_ functions according to the opcodes 
 * to alter the shapegraph. while going along, collect
 * all temporary variables.
 * return (modified graph, temp vars)
 */
execute :: OpCodeList,dfi -> dfi;
execute(           [], lifted_g) = lifted_g;
execute((op,args):cdr, lifted_g) =
    let g = drop(lifted_g); in
    let g1 = case op of
        "x_new" =>
            tassign_x_new(pick(args,1),g);
            
        "x_null" =>
            tassign_x_null(pick(args,1),g);
            
        "x_y" =>
            let g1 = tassign_x_y(pick(args,1),pick(args,2),g); in
            if (!is_temp(pick(args,2))) then 
                g1 
            else 
                drop(delete_var(lift(g1),pick(args,2))) // temporary is assigned exactly once and can be eliminated
            endif; 
            
        "x_ysel" =>
            tassign_x_ysel(pick(args,1),pick(args,2),pick(args,3),g);
            
        "xsel_null" =>
            tassign_xsel_null(pick(args,1),pick(args,2),g);
            
        "xsel_y" =>
            let g1 = tassign_xsel_y(pick(args,1),pick(args,2),pick(args,3),g); in
            if (!is_temp(pick(args,3))) then 
                g1 
            else 
                drop(delete_var(lift(g1),pick(args,3))) // temporary is assigned exactly once and can be eliminated
            endif; 

        _ =>
            print("unrecognized opcode: ") print(op) print("\n") g;
    endcase; in
    execute(cdr,lift(g1));

pick :: StrList,snum -> str;
pick(car:cdr,1) = car;
pick(car:cdr,n) = if n > 1 then pick(cdr, n - 1) else print("pick beyond bounds") "" endif;

