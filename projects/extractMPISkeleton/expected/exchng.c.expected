#include <stdio.h>
#include "mpi.h"
/* This example handles a 12 x 12 mesh, on 4 processors only. */
#define maxn 12

int main(argc,argv)
int argc;
char **argv;
{
  int rank;
  int size;
  int errcnt;
  int toterr;
  int i;
  int j;
  MPI_Status status;
  double xlocal[5UL][12UL];
  MPI_Init(&argc,&argv);
  MPI_Comm_rank(&ompi_mpi_comm_world,&rank);
  MPI_Comm_size(&ompi_mpi_comm_world,&size);
  if (size != 4) 
    MPI_Abort(&ompi_mpi_comm_world,1);
/* Send up unless I'm at the top, then receive from below */
/* Note the use of xlocal[i] for &xlocal[i][0] */
  if (rank < (size - 1)) 
    MPI_Send(xlocal[12 / size],12,&ompi_mpi_double,(rank + 1),0,&ompi_mpi_comm_world);
  if (rank > 0) 
    MPI_Recv(xlocal[0],12,&ompi_mpi_double,(rank - 1),0,&ompi_mpi_comm_world,&status);
/* Send down unless I'm at the bottom */
  if (rank > 0) 
    MPI_Send(xlocal[1],12,&ompi_mpi_double,(rank - 1),1,&ompi_mpi_comm_world);
  if (rank < (size - 1)) 
    MPI_Recv(xlocal[(12 / size) + 1],12,&ompi_mpi_double,(rank + 1),1,&ompi_mpi_comm_world,&status);
  MPI_Reduce((&errcnt),(&toterr),1,&ompi_mpi_int,&ompi_mpi_op_sum,0,&ompi_mpi_comm_world);
  MPI_Finalize();
  return 0;
}
