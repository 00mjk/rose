#include <stdio.h>
#include <string.h>
#include "mpi.h"

int main(int argc,char **argv)
{
  int rank;
  MPI_Comm new_comm;
  MPI_Init(&argc,&argv);
  MPI_Comm_rank(&ompi_mpi_comm_world,&rank);
  MPI_Comm_split(&ompi_mpi_comm_world,(rank == 0),0,&new_comm);
  if (rank == 0) 
    master_io(&ompi_mpi_comm_world,new_comm);
  else 
    slave_io(&ompi_mpi_comm_world,new_comm);
  MPI_Finalize();
  return 0;
}
/* This is the master */

int master_io(MPI_Comm master_comm,MPI_Comm comm)
{
  int i;
  int j;
  int size;
  char buf[256UL];
  MPI_Status status;
  MPI_Comm_size(master_comm,&size);
  for (j = 1; j <= 2; j++) {
    for (i = 1; i < size; i++) {
      MPI_Recv(buf,256,&ompi_mpi_char,i,0,master_comm,&status);
    }
  }
  return 0;
}
/* This is the slave */

int slave_io(MPI_Comm master_comm,MPI_Comm comm)
{
  char buf[256UL];
  int rank;
  MPI_Comm_rank(comm,&rank);
  MPI_Send(buf,(strlen(buf) + 1),&ompi_mpi_char,0,0,master_comm);
  MPI_Send(buf,(strlen(buf) + 1),&ompi_mpi_char,0,0,master_comm);
  return 0;
}
