#!/bin/bash 

# Author: Markus Schordan, 2014.

function check {
dirname=$1 # directory where to test
origtestresult=$2 # result file
fullbenchname=$3 # name of program
#echo "DEBUG:dirname $dirname"
#echo "DEBUG:origtestresult $origtestresult"
#echo "DEBUG:fullbenchname $fullbenchname"
onlybenchname=`basename "$fullbenchname"`

echo -n "checking variant: ${onlybenchname}.c: " 
if [ -e ${fullbenchname}.c ]; then
  ./codethorn ${fullbenchname}.c -I${dirname} -DARRAYSIZE=16 -DSTEPSIZE=2 --threads=6 --edg:no_warnings --dump1=yes --csv-stats=${fullbenchname}.stats #>& /dev/null
  cp arrayupdates.txt ${fullbenchname}.check
  if(diff ${origtestresult} ${fullbenchname}.check >& /dev/null); then
  echo "PASS" > ${fullbenchname}.verify
  cat ${fullbenchname}.verify
  else
  echo "FAIL" > ${fullbenchname}.verify
  cat ${fullbenchname}.verify
  fi
else
  echo "SKIP (does not exist)"
  # generate empty stats file
  echo "Sizes, -, -, -, -">${fullbenchname}.stats
  echo "Runtime(readable), -, -, -, -, -">>${fullbenchname}.stats
  echo "rewrite-stats, -, -, -, -, -,-">>${fullbenchname}.stats
fi
}

#for k in tests/polyhedralTest-size16-tilesize16/stencils ; do
#  if [ -d "$k" ]; then
#    echo "-------------------------"
#    echo "CHECKING $k"
#    for i in ${k}/* ; do

function check_benchmark {
  i=$1 # directory name
      if [ -d "$i" ]; then
        benchname=`basename "$i"`;
        echo "Checking: ${benchname}"

        # create orig-benchmark result
        echo "analyzing: ${i}/${benchname}.c"
        ./codethorn ${i}/${benchname}.c -I${i} -DARRAYSIZE=16 -DSTEPSIZE=2 --threads=6 --edg:no_warnings --dump1=yes --csv-stats=${i}/${benchname}.stats #>& /dev/null
        cp arrayupdates.txt ${i}/${benchname}.check

        # check with variants
        check "${i}" "${i}/${benchname}.check" "${i}/1st_tile_${benchname}"
        #check "${i}" "${i}/${benchname}.check" "${i}/2nd_tile_${benchname}"
        check "${i}" "${i}/${benchname}.check" "${i}/nest_tile_${benchname}"
        check "${i}" "${i}/${benchname}.check" "${i}/fuse_${benchname}"
      else
        echo "Error2: ${i} does not exit."
        exit
      fi
}

#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/kernels/doitgen" # SLOW
#check_benchmark "tests/polyhedralTest-size16-tilesize16/stencils/fdtd-apml" # SLOW
#check_benchmark "tests/polyhedralTest-size16-tilesize16/stencils/adi" # unkown, SLOW

#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/solvers/dynprog" # no 1st_tile
#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/kernels/2mm" # no 1st tile
#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/kernels/3mm" # no 1st tile

#check_benchmark "tests/polyhedralTest-size16-tilesize16/stencils/jacobi-1d-imper" # OK
#check_benchmark "tests/polyhedralTest-size16-tilesize16/stencils/jacobi-2d-imper" # OK
#check_benchmark "tests/polyhedralTest-size16-tilesize16/stencils/seidel-2d" # OK
#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/kernels/trmm" # OK
#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/kernels/trisolv" # OK
#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/kernels/cholesky" # PASS (very fast)
#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/solvers/lu" # OK
#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/solvers/gramschmidt" # PASS
#check_benchmark "tests/polyhedralTest-size16-tilesize16/linear-algebra/solvers/durbin" # PASS

mypath="tests"

# failing because of function call
failing="datamining/correlation"

allbenchmarks="stencils/jacobi-1d-imper stencils/jacobi-2d-imper stencils/seidel-2d linear-algebra/kernels/2mm linear-algebra/kernels/3mm linear-algebra/kernels/atax linear-algebra/kernels/bicg linear-algebra/kernels/cholesky linear-algebra/kernels/doitgen linear-algebra/kernels/gemm linear-algebra/kernels/gemver linear-algebra/kernels/gesummv linear-algebra/kernels/mvt linear-algebra/kernels/symm linear-algebra/kernels/syr2k linear-algebra/kernels/syrk linear-algebra/kernels/trisolv linear-algebra/kernels/trmm linear-algebra/solvers/durbin linear-algebra/solvers/dynprog linear-algebra/solvers/gramschmidt linear-algebra/solvers/lu linear-algebra/solvers/ludcmp datamining/correlation datamining/covariance stencils/adi stencils/fdtd-2d stencils/fdtd-apml"


function runallgeneralbenchmarks {
# all benchmarks for 3 above cases
for mybenchpath in polyhedralTest-size16-smartfuse; do
for mybench in ${allbenchmarks}; do
  FULLNAME=${mypath}/${mybenchpath}/${mybench}
  check_benchmark $FULLNAME 
done
done
}

function runallcornercases {
# all corner cases
for mybenchpath in polyhedralTest-size16-tilesize16 polyhedralTest-size16-tilesizePrime polyhedralTest-size16-Largetilesize polyhedralTest-size16-maxfuse polyhedralTest-size16-nofuse polyhedralTest-size16-smartfuse polyhedralTest-size16-tilesize1 polyhedralTest-size16-tilesize16 polyhedralTest-size16-tilesizePrime polyhedralTest-size16-tilesizePrime2; do
for mybench in "stencils/jacobi-2d-imper" "linear-algebra/kernels/cholesky" "datamining/covariance"; do
  FULLNAME=${mypath}/${mybenchpath}/${mybench}
  check_benchmark $FULLNAME
done
done
}

# to run the two test sets in parallel (use &)
runallgeneralbenchmarks
runallcornercases

#  fi
#done
