#!/bin/bash 

# Author: Markus Schordan, 2014.

# this file assumes codethorn to be available in PATH.

CODETHORN=/export/tmp.schordan1/development/rosework/mainbranch/compiletree/projects/CodeThorn/src/codethorn
MYBENCHPATH="./"

function check {
dirname=$1 # directory where to test
origtestresult=$2 # result file
fullbenchname=$3 # name of program
#echo "DEBUG:dirname $dirname"
#echo "DEBUG:origtestresult $origtestresult"
#echo "DEBUG:fullbenchname $fullbenchname"
onlybenchname=`basename "$fullbenchname"`

echo -n "checking variant: ${onlybenchname}.c: " 
if [ -e ${fullbenchname}.c ]; then
  ${CODETHORN} ${fullbenchname}.c -I${dirname} -DARRAYSIZE=16 -DSTEPSIZE=2 --threads=6 --edg:no_warnings --dump-sorted=${fullbenchname}.check --dump-non-sorted=${fullbenchname}.nscheck --csv-stats=${fullbenchname}.stats #>& /dev/null
#  cp arrayupdates.txt ${fullbenchname}.check
  if(diff ${origtestresult} ${fullbenchname}.check >& /dev/null); then
  echo "PASS" > ${fullbenchname}.verify
  cat ${fullbenchname}.verify
  else
  echo "FAIL" > ${fullbenchname}.verify
  cat ${fullbenchname}.verify
  fi
else
  echo "SKIP (does not exist)"
  # generate empty stats file
  echo "Sizes, -, -, -, -">${fullbenchname}.stats
  echo "Runtime(readable), -, -, -, -, -">>${fullbenchname}.stats
  echo "rewrite-stats, -, -, -, -, -,-">>${fullbenchname}.stats
fi
}

#for k in tests/polyhedralTest-size16-tilesize16/stencils ; do
#  if [ -d "$k" ]; then
#    echo "-------------------------"
#    echo "CHECKING $k"
#    for i in ${k}/* ; do

function check_benchmark {
  i=$1 # directory path
  benchname=$2
      if [ -f "${i}/${benchname}_mod.c" ]; then
        echo "Checking: ${benchname}"

        # create mod-benchmark result
        echo "analyzing: ${benchname}_mod.c"
        ${CODETHORN} ${i}/${benchname}_mod.c -I${i} -DARRAYSIZE=16 -DSTEPSIZE=2 --threads=6 --edg:no_warnings --dump-sorted=${i}/${benchname}_mod.check --dump-non-sorted=${i}/${benchname}_mod.nscheck --csv-stats=${i}/${benchname}_mod.stats #>& /dev/null
#        cp arrayupdates.txt ${i}/${benchname}.check

        # check with variants
        check "${i}" "${i}/${benchname}_mod.check" "${i}/${benchname}_mod_fuse_nofuse"
        check "${i}" "${i}/${benchname}_mod.check" "${i}/${benchname}_mod_fuse_smartfuse"
        check "${i}" "${i}/${benchname}_mod.check" "${i}/${benchname}_mod_tile_1_5_1"
      else
        echo "Error2: "${i}/${benchname}_mod.c" does not exit."
        exit
      fi
}

# failing because of function call
failing="datamining/correlation"

allbenchmarks="stencils/jacobi-1d-imper stencils/jacobi-2d-imper stencils/seidel-2d linear-algebra/kernels/2mm linear-algebra/kernels/3mm linear-algebra/kernels/atax linear-algebra/kernels/bicg linear-algebra/kernels/cholesky linear-algebra/kernels/doitgen linear-algebra/kernels/gemm linear-algebra/kernels/gemver linear-algebra/kernels/gesummv linear-algebra/kernels/mvt linear-algebra/kernels/symm linear-algebra/kernels/syr2k linear-algebra/kernels/syrk linear-algebra/kernels/trisolv linear-algebra/kernels/trmm linear-algebra/solvers/durbin linear-algebra/solvers/dynprog linear-algebra/solvers/gramschmidt linear-algebra/solvers/lu linear-algebra/solvers/ludcmp datamining/correlation datamining/covariance stencils/adi stencils/fdtd-2d stencils/fdtd-apml"

allbenchmarks_new="2mm 3mm adi atax bicg cholesky correlation covariance durbin fdtd-2d fdtd-apml floyd-warshall gemm gemver gesummv gramschmidt jacobi-1d-imper jacobi-2d-imper ludcmp lu mvt reg_detect seidel-2d symm syr2k syrk trisolv trmm"

function runallgeneralbenchmarks_param {
selectedbenchmarks="$1"
# all benchmarks for 3 above cases

for mybench in ${selectedbenchmarks}; do
  check_benchmark ${MYBENCHPATH} ${mybench}
done
}

function runallgeneralbenchmarks {
# all benchmarks for 3 above cases
for mybenchpath in polybench_variants; do
for mybench in ${allbenchmarks_new}; do
  check_benchmark $MYBENCHPATH ${mybench}
done
done
}

function runallcornercases {
# all corner cases
for mybenchpath in polyhedralTest-size16-tilesize16 polyhedralTest-size16-tilesizePrime polyhedralTest-size16-Largetilesize polyhedralTest-size16-maxfuse polyhedralTest-size16-nofuse polyhedralTest-size16-smartfuse polyhedralTest-size16-tilesize1 polyhedralTest-size16-tilesize16 polyhedralTest-size16-tilesizePrime polyhedralTest-size16-tilesizePrime2; do
for mybench in "stencils/jacobi-2d-imper" "linear-algebra/kernels/cholesky" "datamining/covariance"; do
  FULLNAME=${mypath}/${mybenchpath}/${mybench}
  check_benchmark $FULLNAME
done
done
}

if [ "$#" -ne 1 ]; then
    echo "Usage: polycheck_all --check1 | --check2 | --par | --seq"
    exit
fi
   case "$1" in
        --check1) runallgeneralbenchmarks
            ;;
        --check2) runallcornercases
            ;;
        --par) runallgeneralbenchmarks &
               runallcornercases &
            ;;
        --seq)
               runallgeneralbenchmarks
               runallcornercases
            ;;
	    --longcheck1)
               runallgeneralbenchmarks_param "fdtd-apml"
            ;;
	    --longcheck2)
               runallgeneralbenchmarks_param "doitgen"
            ;;
       --funcallcheck)
           # cond-operator: cholesky, correlation
           # function call only: gramschmidt
           runallgeneralbenchmarks_param "cholesky correlation gramschmidt"
           ;;
       --fastcheck)
           runallgeneralbenchmarks_param "atax covariance jacobi-1d-imper jacobi-2d-imper"
           ;;



        --*) echo "bad option $1"
            ;;
        *) echo "argument $1"
            ;;
    esac


