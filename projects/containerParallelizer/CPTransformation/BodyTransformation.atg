/* Abstract C++ Attribute Grammar */
$CX /* Generate C++ code */

COMPILER SgNode

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

// #include "sgnodes.hpp"
#include <stdio.h>
#include <iostream>
#include <typeinfo>

#include "sage3.h"
#include "roseInternal.h"

#include "AstRestructure.h"

extern SgNode* currentAstNode;
extern AstRestructure* subst;

//typedef bool DerefExpAttribute;

TOKENS

SgName
SgSymbolTable
SgInitializedName
SgModifierNodes
Sg_File_Info
SgFile
SgProject
SgOptions
SgUnparse_Info
SgBaseClass
SgTypedefSeq
SgFunctionParameterTypeList
SgPragma
SgFuncDecl_attr
SgClassDecl_attr
SgFunctionTypeTable
SgExprStatement
SgLabelStatement
SgCaseOptionStmt
SgTryStmt
SgDefaultOptionStmt
SgBreakStmt
SgContinueStmt
SgReturnStmt
SgGotoStatement
SgSpawnStmt
SgPragmaStatement
SgForInitStatement
SgCatchStatementSeq
SgClinkageStartStatement
SgIncludeDirectiveStatement
SgDefineDirectiveStatement
SgUndefDirectiveStatement
SgIfdefDirectiveStatement
SgIfndefDirectiveStatement
SgIfDirectiveStatement
SgElseDirectiveStatement
SgElseifDirectiveStatement
SgEndifDirectiveStatement
SgLineDirectiveStatement
SgErrorDirectiveStatement
SgC_StyleCommentStatement
SgCxxStyleCommentStatement
SgVariableDeclaration
SgVariableDefinition
SgEnumDeclaration
SgAsmStmt
SgTypedefDeclaration
SgTemplateDeclaration
SgFunctionParameterList
SgCtorInitializerList
SgTemplateInstantiationDecl
SgMemberFunctionDeclaration
SgFunctionDeclaration
SgGlobal
SgBasicBlock
SgIfStmt
SgForStatement
SgFunctionDefinition
SgWhileStmt
SgDoWhileStmt
SgSwitchStatement
SgCatchOptionStmt
SgTemplateInstantiationDefn
SgExprListExp
SgVarRefExp
SgClassNameRefExp
SgFunctionRefExp
SgMemberFunctionRefExp
SgFunctionCallExp
SgSizeOfOp
SgTypeIdOp
SgConditionalExp
SgNewExp
SgDeleteExp
SgThisExp
SgRefExp
SgAggregateInitializer
SgConstructorInitializer
SgAssignInitializer
SgBoolValExp
SgStringVal
SgShortVal
SgCharVal
SgUnsignedCharVal
SgWcharVal
SgUnsignedShortVal
SgIntVal
SgEnumVal
SgUnsignedIntVal
SgLongIntVal
SgLongLongIntVal
SgUnsignedLongLongIntVal
SgUnsignedLongVal
SgFloatVal
SgDoubleVal
SgLongDoubleVal
SgArrowExp
SgDotExp
SgDotStarOp
SgArrowStarOp
SgEqualityOp
SgLessThanOp
SgGreaterThanOp
SgNotEqualOp
SgLessOrEqualOp
SgGreaterOrEqualOp
SgAddOp
SgSubtractOp
SgMultiplyOp
SgDivideOp
SgIntegerDivideOp
SgModOp
SgAndOp
SgOrOp
SgBitXorOp
SgBitAndOp
SgBitOrOp
SgCommaOpExp
SgLshiftOp
SgRshiftOp
SgPntrArrRefExp
SgScopeOp
SgAssignOp
SgPlusAssignOp
SgMinusAssignOp
SgAndAssignOp
SgIorAssignOp
SgMultAssignOp
SgDivAssignOp
SgModAssignOp
SgXorAssignOp
SgLshiftAssignOp
SgRshiftAssignOp
SgExpressionRoot
SgMinusOp
SgUnaryAddOp
SgNotOp
SgPointerDerefExp
SgAddressOfOp
SgMinusMinusOp
SgPlusPlusOp
SgBitComplementOp
SgCastExp
SgThrowOp
SgVariableSymbol
SgFunctionTypeSymbol
SgTemplateSymbol
SgEnumSymbol
SgEnumFieldSymbol
SgTypedefSymbol
SgLabelSymbol
SgDefaultSymbol
SgTemplateInstantiationSymbol
SgMemberFunctionSymbol
SgFunctionSymbol
SgTypeUnknown
SgTypeChar
SgTypeSignedChar
SgTypeUnsignedChar
SgTypeShort
SgTypeSignedShort
SgTypeUnsignedShort
SgTypeInt
SgTypeSignedInt
SgTypeUnsignedInt
SgTypeLong
SgTypeSignedLong
SgTypeUnsignedLong
SgTypeVoid
SgTypeGlobalVoid
SgTypeWchar
SgTypeFloat
SgTypeDouble
SgTypeLongLong
SgTypeUnsignedLongLong
SgTypeLongDouble
SgTypeString
SgTypeBool
SgComplex
SgTypeDefault
SgReferenceType
SgModifierType
SgArrayType
SgTypeEllipse
SgPartialFunctionType
SgUnknownMemberFunctionType
SgEnumType
SgTypedefType
SgTemplateInstantiationType
SgPointerMemberType
SgClassDeclaration
SgClassDefinition

PRODUCTIONS

SgNode = SgSupport
    | SgLocatedNode
    | SgSymbol
    .
SgSupport = SgName  "("  ")" 
    | SgSymbolTable  "("  ")" 
    | SgInitializedNameNT
    | SgModifierNodes  "("  ")" 
    | SgFileNT
    | SgProject  "(" { SgFileNT } ")" 
    | SgOptions  "("  ")" 
    | SgBaseClass  "(" SgClassDeclarationNT  ")" 
    | SgFunctionParameterTypeList  "("  ")" 
    | SgAttribute
    .

SgGlobalNT = SgGlobal "(" { SgDeclarationStatement } ")"
    .

SgFileNT = SgFile  "(" SgGlobalNT ")"
    .

SgInitializedNameNT = SgInitializedName  "(" [SgInitializedNameNT] [SgInitializer]  ")"
    .

SgAttribute = SgPragma  "("  ")" 
    | SgBitAttribute
    .
SgBitAttribute = SgFuncDecl_attr  "("  ")" 
    | SgClassDecl_attr  "("  ")" 
    .
SgLocatedNode =
      (. DerefExpAttribute derefExpSpec;
         DerefExpSynAttribute derefExpSyn; .) 
      SgStatement<derefExpSpec, derefExpSyn>
    | SgExpression<derefExpSpec, derefExpSyn>
    .
SgStatement<DerefExpAttribute derefExpSpec, DerefExpSynAttribute& derefExpSyn> = SgExprStatement "(" SgExpressionRootNT ")"
    | SgLabelStatement  "("  ")" 
    | SgCaseOptionStmt  "(" SgBasicBlockNT<derefExpSpec, derefExpSyn> SgExpressionRootNT  ")" 
    | SgTryStmt  "(" SgBasicBlockNT<derefExpSpec, derefExpSyn> SgCatchStatementSeq  ")" 
    | SgDefaultOptionStmt  "(" SgBasicBlockNT<derefExpSpec, derefExpSyn>  ")" 
    | SgBreakStmt  "("  ")" 
    | SgContinueStmt  "("  ")" 
    | SgReturnStmt  "(" SgExpressionRootNT  ")" 
    | SgGotoStatement  "(" SgLabelStatement  ")" 
    | SgSpawnStmt  "(" SgFunctionCallExpNT SgExpressionRootNT  ")" 
    | SgPragmaStatement  "(" SgPragma  ")"
    | SgCatchStatementSeq  "("  { SgStatement<derefExpSpec, derefExpSyn> }   ")" 
    | SgClinkageStartStatement  "("  ")" 
    | SgC_PreprocessorDirectiveStatement
    | SgCommentStatement
    | SgDeclarationStatement
    | SgScopeStatement<derefExpSpec, derefExpSyn>
    | SgForInitStatementNT<derefExpSpec, derefExpSyn>
    .

SgForInitStatementNT<DerefExpAttribute derefExpSpec, DerefExpSynAttribute& derefExpSyn> = 
    SgForInitStatement "("  { SgStatement<derefExpSpec, derefExpSyn> }   ")" 
    .

SgC_PreprocessorDirectiveStatement = SgIncludeDirectiveStatement  "("  ")" 
    | SgDefineDirectiveStatement  "("  ")" 
    | SgUndefDirectiveStatement  "("  ")" 
    | SgIfdefDirectiveStatement  "("  ")" 
    | SgIfndefDirectiveStatement  "("  ")" 
    | SgIfDirectiveStatement  "("  ")" 
    | SgElseDirectiveStatement  "("  ")" 
    | SgElseifDirectiveStatement  "("  ")" 
    | SgEndifDirectiveStatement  "("  ")" 
    | SgLineDirectiveStatement  "("  ")" 
    | SgErrorDirectiveStatement  "("  ")" 
    .
SgCommentStatement = SgC_StyleCommentStatement  "("  ")" 
    | SgCxxStyleCommentStatement  "("  ")" 
    .

SgDeclarationStatement = SgVariableDeclaration  "("  { SgInitializedNameNT }   ")" 
    | SgVariableDefinition  "(" SgInitializedNameNT SgUnsignedLongValNT SgExpressionRootNT  ")" 
    | SgEnumDeclaration  "("  ")" 
    | SgAsmStmt  "(" SgExpressionRootNT  ")" 
    | SgTemplateDeclaration  "("  ")" 
    | SgFunctionParameterListNT
    | SgCtorInitializerListNT
    | SgClassDeclarationNT
    | SgFunctionDeclarationNT
    | SgTypedefDeclaration  "(" [SgDeclarationStatement]  ")" 
    .

SgUnsignedLongValNT = SgUnsignedLongVal "(" ")"
    .

SgCtorInitializerListNT = SgCtorInitializerList  "("  { SgInitializedNameNT }   ")"
    .

SgFunctionParameterListNT = 
    SgFunctionParameterList  "("  { SgInitializedNameNT }   ")" 
    .

SgClassDeclarationNT = SgClassDeclaration "(" [ SgClassDefinitionNT ] ")" 
    | SgTemplateInstantiationDecl  "(" SgClassDefinitionNT SgNode  ")" 
    .
SgFunctionDeclarationNT = SgFunctionDeclaration "(" SgFunctionParameterListNT [ SgFunctionDefinitionNT ] ")" 
    | SgMemberFunctionDeclaration  "(" SgFunctionParameterListNT [SgFunctionDefinitionNT] SgCtorInitializerListNT  ")" 
    .
SgScopeStatement<DerefExpAttribute derefExpSpec, DerefExpSynAttribute& derefExpSyn> = SgGlobal  "("  { SgDeclarationStatement }   ")" 
    | SgIfStmt  "(" SgStatement<derefExpSpec, derefExpSyn> SgBasicBlockNT<derefExpSpec, derefExpSyn> [SgBasicBlockNT<derefExpSpec, derefExpSyn>]  ")" 
    | SgForStatement "(" SgForInitStatementNT<derefExpSpec, derefExpSyn> SgExpressionRootNT SgExpressionRootNT SgBasicBlockNT<derefExpSpec, derefExpSyn> ")"
    | SgWhileStmt  "(" SgStatement<derefExpSpec, derefExpSyn> SgBasicBlockNT<derefExpSpec, derefExpSyn>  ")" 
    | SgDoWhileStmt  "(" SgStatement<derefExpSpec, derefExpSyn> SgBasicBlockNT<derefExpSpec, derefExpSyn>  ")" 
    | SgSwitchStatement  "(" SgBasicBlockNT<derefExpSpec, derefExpSyn> SgExpressionRootNT  ")" 
    | SgCatchOptionStmt  "(" SgVariableDeclaration SgBasicBlockNT<derefExpSpec, derefExpSyn>  ")" 
    | SgClassDefinitionNT
    | SgFunctionDefinitionNT
    | SgBasicBlockNT<derefExpSpec, derefExpSyn>
    .

SgBasicBlockNT<DerefExpAttribute derefExpSpec, DerefExpSynAttribute& derefExpSyn> =
    SgBasicBlock  "("  { SgStatement<derefExpSpec, derefExpSyn> }   ")" 
    .

SgFunctionDefinitionNT = (. DerefExpAttribute derefExpSpec;
                            DerefExpSynAttribute derefExpSyn; .) 
    SgFunctionDefinition  "(" [ SgBasicBlockNT<derefExpSpec, derefExpSyn> ] ")" 
    .

SgClassDefinitionNT = SgClassDefinition  "("  { SgDeclarationStatement }   ")" 
    | SgTemplateInstantiationDefn  "("  { SgDeclarationStatement }   ")" 
    .

SgExpression<DerefExpAttribute derefExpSpec, DerefExpSynAttribute& derefExpSyn> 
    = SgVarRefExp 
      (. 
	 if(astNode->unparseToString()==iVarName) {
	   derefExpSyn.varNameMatches=true;
           cout << "SgVarRefExp:" << astNode->unparseToString() << " : varname matches";
         } else {
	   cout << "SgVarRefExp:" << astNode->unparseToString() << " : varname does NOT match";
         }
	cout << " Type:" << astNode->get_type()->unparseToString() << endl;
      .) "("  ")" 
    | SgClassNameRefExp  "("  ")" 
    | SgFunctionRefExp  "("  ")" 
    | SgMemberFunctionRefExp  (.
        /* check if deref operator of TYPE list! */ 
        if(astNode->unparseToString()=="*") {// overloaded deref operator
          derefExpSyn.isIteratorDeref=true; cout << "IteratorDeref:found: " << astNode->unparseToString() << endl;
        } else {
	  cout << "IteratorDeref:NOT found: " << astNode->unparseToString() << endl;
        }
      .) 
      "("  ")" 
    | SgFunctionCallExpNT
    | SgSizeOfOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgConditionalExp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn> [ SgExpression<derefExpSpec, derefExpSyn> ] ")" 
    | SgNewExp  "(" [ SgExprListExpNT<derefExpSpec, derefExpSyn> ] SgConstructorInitializerNT [ SgExpression<derefExpSpec, derefExpSyn> ] ")" 
    | SgDeleteExp  "(" SgExpression<derefExpSpec, derefExpSyn> ")" 
    | SgThisExp  "("  ")" 
    | SgRefExp  "("  ")" 
    | SgInitializer
    | SgValueExp
    | SgBinaryOp<derefExpSpec, derefExpSyn>
    | SgUnaryOp<derefExpSpec, derefExpSyn>
    .

SgFunctionCallExpNT 
    = SgFunctionCallExp 
      (. DerefExpAttribute derefExpSpec; derefExpSpec.withinFunctionCallExp=true; .)
      (. DerefExpSynAttribute derefExpSyn; .)
    "(" [ SgExpression<derefExpSpec, derefExpSyn> ] [ SgExprListExpNT<derefExpSpec, derefExpSyn> ] ")"
      (. if(derefExpSyn.lhsFunctionCallIsIteratorAccess && true/* ExprListExp is empty list */) {
           cout << "iterator-access found: " << astNode->unparseToString() << endl;
	   subst->unparserReplace(astNode,"l[i]");
         }
      .)
    .

SgExprListExpNT<DerefExpAttribute derefExpSpec, DerefExpSynAttribute& derefExpSyn> = SgExprListExp  "("  { SgExpression<derefExpSpec, derefExpSyn> } ")"
    .

SgInitializer 
    = (. DerefExpAttribute derefExpSpec;
         DerefExpSynAttribute derefExpSyn;
      .) 
      SgAggregateInitializer  "(" [ SgExprListExpNT<derefExpSpec, derefExpSyn> ] ")" 
    | SgConstructorInitializerNT
    | SgAssignInitializer  "(" [ SgExpression<derefExpSpec, derefExpSyn> ] ")" 
    .

SgConstructorInitializerNT 
    = 
      (. DerefExpAttribute derefExpSpec; .)
      (. DerefExpSynAttribute derefExpSyn; .)
    SgConstructorInitializer  "(" [ SgExprListExpNT<derefExpSpec, derefExpSyn> ] ")"
    .

SgValueExp = SgBoolValExp  "("  ")" 
    | SgStringVal  "("  ")" 
    | SgShortVal  "("  ")" 
    | SgCharVal  "("  ")" 
    | SgUnsignedCharVal  "("  ")" 
    | SgWcharVal  "("  ")" 
    | SgUnsignedShortVal  "("  ")" 
    | SgIntVal  "("  ")" 
    | SgEnumVal  "("  ")" 
    | SgUnsignedIntVal  "("  ")" 
    | SgLongIntVal  "("  ")" 
    | SgLongLongIntVal  "("  ")" 
    | SgUnsignedLongLongIntVal  "("  ")" 
    | SgUnsignedLongVal  "("  ")" 
    | SgFloatVal  "("  ")" 
    | SgDoubleVal  "("  ")" 
    | SgLongDoubleVal  "("  ")" 
    .
SgBinaryOp<DerefExpAttribute derefExpSpec, DerefExpSynAttribute& derefExpSyn>
    = SgArrowExp  "(" SgExpression<derefExpSpec, derefExpSyn> [ SgExpression<derefExpSpec, derefExpSyn> ] ")" 
    | SgDotExp  "(" SgExpression<derefExpSpec, derefExpSyn> 
      (. bool lhsVarNameMatches=derefExpSyn.varNameMatches; .)
      [ SgExpression<derefExpSpec, derefExpSyn> ] ")" 
      (.
         if(lhsVarNameMatches && derefExpSyn.isIteratorDeref) {
	   derefExpSyn.lhsFunctionCallIsIteratorAccess=true;
         }
      .)
    | SgDotStarOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgArrowStarOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgEqualityOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgLessThanOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgGreaterThanOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgNotEqualOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgLessOrEqualOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgGreaterOrEqualOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgAddOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgSubtractOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgMultiplyOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgDivideOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgIntegerDivideOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgModOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgAndOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgOrOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgBitXorOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgBitAndOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgBitOrOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgCommaOpExp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgLshiftOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgRshiftOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgPntrArrRefExp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgScopeOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> [ SgExpression<derefExpSpec, derefExpSyn> ] ")" 
    | SgPlusAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgMinusAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgAndAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgIorAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgMultAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgDivAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgModAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgXorAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgLshiftAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgRshiftAssignOp  "(" SgExpression<derefExpSpec, derefExpSyn> SgExpression<derefExpSpec, derefExpSyn>  ")" 
    .

SgExpressionRootNT =
    (. DerefExpAttribute derefExpSpec; .)
    (. DerefExpSynAttribute derefExpSyn; .)
    SgExpressionRoot 
    "(" [ SgExpression<derefExpSpec, derefExpSyn> ] ")"
    .

SgUnaryOp<DerefExpAttribute derefExpSpec, DerefExpSynAttribute& derefExpSyn>
    = SgExpressionRootNT
    | SgMinusOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgUnaryAddOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgNotOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgPointerDerefExp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgAddressOfOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgMinusMinusOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgPlusPlusOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgBitComplementOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    | SgCastExp  "(" [ SgExpression<derefExpSpec, derefExpSyn> ] ")" 
    | SgThrowOp  "(" SgExpression<derefExpSpec, derefExpSyn>  ")" 
    .
SgSymbol = SgVariableSymbol  "("  ")" 
    | SgTemplateSymbol  "(" SgTemplateDeclaration  ")" 
    | SgEnumSymbol  "(" SgEnumDeclaration  ")" 
    | SgEnumFieldSymbol  "("  ")" 
    | SgLabelSymbol  "(" SgLabelStatement  ")" 
    | SgDefaultSymbol  "("  ")" 
    | SgClassSymbol
    | SgFunctionSymbolNT
    | SgTypedefSymbol  "(" SgTypedefDeclaration  ")" 
    .
SgClassSymbol = SgTemplateInstantiationSymbol  "(" SgClassDeclarationNT  ")" 
    .
SgFunctionSymbolNT = SgFunctionSymbol  "(" SgFunctionDeclarationNT  ")" 
    | SgMemberFunctionSymbol  "(" SgFunctionDeclarationNT  ")" 
    .

END SgNode.

