       // Special constructor for this class
          CLASSNAME ( ROSE_Expression* expr );

       // Make this class an abstract base class so that we can be certain that
       // we will not ever try to build one of these directly.
          virtual ROSE_TransformableNode* transform() = 0;
          ROSE_TransformableNode* assembleTransform ( ROSE_NonTransformableExpression* lhs,
                                                      ROSE_NonTransformableExpression* rhs );

       // Member functions specific to CLASSNAME
          virtual ROSE_Expression* getLhsRoseExpression();
          virtual ROSE_Expression* getRhsRoseExpression();

          virtual void setLhsRoseExpression ( ROSE_Expression* expr );
          virtual void setRhsRoseExpression ( ROSE_Expression* expr );

          virtual void setLhsTransformableExpression ( ROSE_TransformableExpression* transformableExpr );
          virtual void setRhsTransformableExpression ( ROSE_TransformableExpression* transformableExpr );

          virtual ROSE_TransformableExpression* getLhsTransformableExpression ();
          virtual ROSE_TransformableExpression* getRhsTransformableExpression ();

       // void setSageBinaryOperator ( SgBinaryOp* newBinaryOperator );
       // SgBinaryOp* getSageBinaryOperator ();

     protected:
       // SgBinaryOp* sageBinaryOperator;

          ROSE_TransformableExpression* lhsTransformableExpression;
          ROSE_TransformableExpression* rhsTransformableExpression;
