CLASSNAME::~CLASSNAME ()
   {
   }

CLASSNAME::CLASSNAME ( ROSE_Expression* expr )
   : BASECLASSNAME(expr)
   {
     ROSE_TransformableNode::setUp (CLASSNAME_TAG,expr);

     if ( (ROSE_DEBUG > 0) || (ROSE::verbose == TRUE) )
          printf ("$$$$$$$$$$ In CLASSNAME constructor: arrayGrammarTerminalNames[%d].name = %s \n",
               expr->getVariant(), arrayGrammarTerminalNames[expr->getVariant()].name);
   }

#if 1
ROSE_TransformableNode* CLASSNAME::transform()
   {
  // printf ("Sorry not implemented, CLASSNAME::Tranform() \n");
  // ROSE_ABORT();


  // We are at a leaf so we don't have to assemble the transformed expression 
  // from the collection of other pieces.  So the can get the transformation directly.
     ROSE_C_Expression* roseOperandExpression = (ROSE_C_Expression*) getRoseExpression()->transform();
     ROSE_ASSERT (roseOperandExpression != NULL);

     ROSE_NonTransformableExpression* returnTransformableOperandExpression =
          new ROSE_NonTransformableExpression (roseOperandExpression);
     ROSE_ASSERT (returnTransformableOperandExpression != NULL);

#if 0
     printf ("Exiting at base of CLASSNAME::transform() \n");
     ROSE_ABORT();
#endif

     return returnTransformableOperandExpression;
   }
#endif


