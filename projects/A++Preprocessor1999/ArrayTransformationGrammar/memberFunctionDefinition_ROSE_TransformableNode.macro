ROSE_TransformableNode::~ROSE_TransformableNode ()
   {
  // delete roseSubTree;
     roseSubTree = NULL;
   }

void ROSE_TransformableNode::setUp ( ROSE_TransformableGrammarVariants newId, ROSE_Node* newSubTree )
   {
     ROSE_ASSERT (newId != ROSE_TRANSFORMABLE_LAST_TAG);
  // ROSE_ASSERT (newId != ROSE_TransformableNodeTag);
     setVariant(newId);      // Default value until reset properly
     ROSE_ASSERT (newSubTree != NULL);
     setRoseSubTree(newSubTree); // Pointer to Sage Tree (is it the copy?)
     setParseError(FALSE);   // The current state will generate an error

     ROSE_ASSERT (!error());
   }

ROSE_TransformableNode::ROSE_TransformableNode ()
   {
  // The default constructor is not useful in the sense that more 
  // information is required to properly setup the ROSE_TransformableNode base class
#if 0
     setUp (ROSE_TRANSFORMABLE_LAST_TAG,NULL);
#else
     id          = ROSE_TRANSFORMABLE_LAST_TAG;  // Default value until reset properly
     roseSubTree = NULL;           // Pointer to Sage Tree (is it the copy?)
     parseError  = TRUE;        // The current state will generate an error
#endif
   }

#if 0
ROSE_TransformableNode::ROSE_TransformableNode ( ROSE_GrammarVariants newId, SgNode* newSubTree )
   {
     setUp (newId,newSubTree);
   }
#endif

ROSE_TransformableNode::ROSE_TransformableNode ( ROSE_Node* newSubTree )
   {
     setUp (ROSE_TransformableNodeTag,newSubTree);
   }

ROSE_TransformableGrammarVariants ROSE_TransformableNode::getVariant()
   {
     ROSE_ASSERT (!error());
     return id;
   }

void ROSE_TransformableNode::setVariant (  ROSE_TransformableGrammarVariants newId )
   {
     id = newId;
   }

#if 0
// This is a pure virtual function and so it should not be defined
ROSE_TransformableNode* ROSE_TransformableNode::transform()
   {
     printf ("ERROR: Base class ROSE_TransformableNode::transform() called \n");
     ROSE_ABORT();

     return NULL;
   }
#endif

Boolean ROSE_TransformableNode::error()
   {
  // Error recovery mechanism (for the parser)
     ROSE_ASSERT (!parseError);
     return parseError;
   }

void ROSE_TransformableNode::setParseError ( Boolean X )
   {
     parseError = X;
   }

const ROSE_Node* ROSE_TransformableNode::getRoseSubTree()
   {
     ROSE_ASSERT (!error());
     return roseSubTree;
   }

void ROSE_TransformableNode::setRoseSubTree ( const ROSE_Node* node )
   {
  // I think we want to avoid letting the input be a NULL pointer
  // ROSE_ASSERT (node != NULL);
     roseSubTree = (ROSE_Node*) node;
   }


