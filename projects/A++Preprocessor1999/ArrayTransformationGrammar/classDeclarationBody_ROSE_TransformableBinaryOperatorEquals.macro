       // Special constructor for this class
          CLASSNAME ( ROSE_Expression* expr );

       // Make this class an abstract base class so that we can be certain that
       // we will not ever try to build one of these directly.
          virtual ROSE_TransformableNode* transform();

       // virtual ROSE_TransformableNode* transform ( ROSE_Expression* lhs, ROSE_Expression* rhs );
       // virtual ROSE_TransformableNode* transform ( ROSE_NonTransformableExpression* lhs,
       //                                             ROSE_NonTransformableExpression* rhs );

       // ROSE_ArrayOperandExpression*  getLhsTransformableExpression();
       // ROSE_Expression*              getRhsTransformableExpression();

       // We want to define a special implementation of this function since 
       // we want to return a ROSE_TransformableOperandExpression*
          ROSE_TransformableExpression* getLhsTransformableExpression();

       // Use the base class implementation of this function
       // ROSE_TransformableExpression* getRhsTransformableExpression();

       // We need this to simplify the casting of the base class getRoseExpression() member function
          ROSE_BinaryArrayOperatorEquals* getRoseExpression ();