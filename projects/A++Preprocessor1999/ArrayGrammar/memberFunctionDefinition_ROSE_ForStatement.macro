CLASSNAME::~CLASSNAME ()
   {
   }

CLASSNAME::CLASSNAME ( SgForStatement* forStatement )
   : BASECLASSNAME(forStatement)
   {
  // This function is a virtual member function 
     recognizeSageSubTree (forStatement);
   }

ROSE_Node* CLASSNAME::transform()
   {
  // printf ("Sorry not implemented, CLASSNAME::Tranform() \n");
  // ROSE_ABORT();

     ROSE_ASSERT (!error());

     SgStatement* stmt = (SgStatement*) getSageSubTree();

     if ( (ROSE_DEBUG > 0) || (ROSE::verbose == TRUE) )
          printf ("In CLASSNAME::transform(): (file name = %s line number = %d) loop body size = %d \n",
               ROSE::getFileName(stmt),ROSE::getLineNumber(stmt),
               roseForStatementBlock->getNumberOfStatements() );

  // roseConditionalStatement->transform();
     roseForStatementBlock->transform();

  // Return the "this" pointer for now
     return this;
   }

void CLASSNAME::recognizeSageSubTree ( SgForStatement* forStatement )
   {
#if ROSE_INTERNAL_DEBUG
     if (ROSE_DEBUG > 3)
        {
          printf ("Sorry, not implemented: CLASSNAME::recognizeSageSubTree(SgForStatement*) \n");
        }
#endif

     ROSE_Node::setUp (CLASSNAME_TAG,forStatement);
   }

#if 0
void CLASSNAME::setRoseConditionalStatement  ( ROSE_Statement* roseStatement )
   {
     ROSE_ASSERT (roseStatement != NULL);
     roseConditionalStatement = roseStatement;
   }
#endif

void CLASSNAME::setRoseForStatementBlock  ( ROSE_StatementBlock* roseStatementBlock )
   {
     ROSE_ASSERT (roseStatementBlock != NULL);
     roseForStatementBlock = roseStatementBlock;
   }

#if 0
ROSE_Statement* CLASSNAME::getRoseConditionalStatement  ()
   {
     ROSE_ASSERT (roseConditionalStatement != NULL);
     return roseConditionalStatement;
   }
#endif

ROSE_StatementBlock* CLASSNAME::getRoseForStatementBlock  ()
   {
     ROSE_ASSERT (roseForStatementBlock != NULL);
     return roseForStatementBlock;
   }

