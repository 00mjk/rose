
CLASSNAME::~CLASSNAME()
   {
   }

#if 0
CLASSNAME::CLASSNAME()
   {
   }
#endif

CLASSNAME::CLASSNAME( SgExpression* expr )
   : BASECLASSNAME(expr)
   {
     ROSE_ASSERT (expr != NULL);
     ROSE_Node::setUp (CLASSNAME_TAG,expr);
   }

ROSE_Node* CLASSNAME::transform()
   {
     printf ("Sorry not implemented, CLASSNAME::Tranform() \n");
     ROSE_ABORT();

     return this;
   }

void CLASSNAME::setSageExpressionListExpression ( SgExprListExp* exprListExp )
   {
     ROSE_ASSERT (exprListExp != NULL);
     sageExpressionListExpression = exprListExp;
   }

SgExprListExp* CLASSNAME::getSageExpressionListExpression()
   {
     ROSE_ASSERT (sageExpressionListExpression != NULL);
     return sageExpressionListExpression;
   }

List<ROSE_Expression> & CLASSNAME::getRoseExpressionList ()
   {
     return roseExpressionList;
   }

void CLASSNAME::addArgumentExpression ( ROSE_Expression* roseExpression )
   {
     ROSE_ASSERT (roseExpression != NULL);
     roseExpressionList.addElement(*roseExpression);
   }

int CLASSNAME::numberOfArguments()
   {
     return roseExpressionList.getLength();
   }

void CLASSNAME::resetArgumentExpression ( ROSE_Expression* expr, int index )
   {
     ROSE_ASSERT (index >= 0);
     ROSE_ASSERT (index <= 1);  // The most we have is a binary operator for now!
     ROSE_ASSERT (roseExpressionList.getElementPtr(index) != NULL);
     ROSE_ASSERT (numberOfArguments() <= 2);

  // LIST.setElementPtr(T *X, int i);
     roseExpressionList.setElementPtr (expr,index);
     ROSE_ASSERT (numberOfArguments() <= 2);
   }

void CLASSNAME::addArgumentExpression   ( ROSE_Expression* expr, int index )
   {
     ROSE_ASSERT (index >= 0);
     ROSE_ASSERT (index <= 1);  // The most we have is a binary operator for now!
  // ROSE_ASSERT (roseExpressionList.getElementPtr(index) != NULL);
     ROSE_ASSERT (numberOfArguments() <= 2);

#if 0
     if (numberOfArguments() < 2)
      {
        if (index == 0)
           {
          // addElement(T &X, int index);
             roseExpressionList.addElement (*expr,index);
           }
      }
     else
      {
      }
#endif

  // Use addElement(T &X, int index);
     roseExpressionList.addElement (expr,index);
     ROSE_ASSERT (numberOfArguments() <= 2);
   }

ROSE_Expression* CLASSNAME::getArgumentExpression ( int index )
   {
  // Use T* getElementPtr(int index);
     ROSE_ASSERT (numberOfArguments() <= 2);
     ROSE_Expression* returnExpr = roseExpressionList.getElementPtr(index);
     ROSE_ASSERT (returnExpr != NULL);

     return returnExpr;
   }












