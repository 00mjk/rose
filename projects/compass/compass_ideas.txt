Are function pointer offsets (in libc) constant so that just knowing the 
offsets could permit function pointer values to be set without ever 
referencing the functions?

This would rule out detection of function pointer arithmatic as a mechanism 
to establish what functions might be called.


Problem tests:
singleParameterConstructorExplicitModifierTest1

Problem Checkers:
   bufferOverflowFunctions
   charStarForString
   dynamicCast
   nameConsistency
   typeTypedef

Problem with documentation
   noExceptions
   noTemplateUsage


GUI ideas:
  1) Mark checker warnings to be ignored (use hashing to identify targets of warnings).
        Need to generate unique identified for compass warning in a files
           file_id::scope_id::function_id::scope_id::statement_id::expression_id
        Build exclude file of ignored warnings
        Could also define different levels of ignored warnings.

  2) Define subsets of checkers using files and unions of separate standards.
        Need file suffix for rule selection files.
        Need selection mechanism in GUI for selection rule files
        Need mechanism to create selection rule file.

  3) Save bug profile for code (report trends)
        Save lists of warnings in file (with unique id tags)

  4) Associate changes to developers (via CVS) and use that to associate bugs to
     developers.
     How can we read CVS and SVN generated diffs?
     

