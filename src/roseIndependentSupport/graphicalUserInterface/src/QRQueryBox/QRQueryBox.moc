/****************************************************************************
** QRQueryBox meta object code from reading C++ file 'QRQueryBox.h'
**
** Created: Mon May 2 13:47:35 2005
**      by: The Qt MOC ($Id: QRQueryBox.moc,v 1.1 2005/09/03 19:38:00 dquinlan Exp $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "QRQueryBox.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.4. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *QRQueryBox::className() const
{
    return "QRQueryBox";
}

QMetaObject *QRQueryBox::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QRQueryBox( "QRQueryBox", &QRQueryBox::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QRQueryBox::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QRQueryBox", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QRQueryBox::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QRQueryBox", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QRQueryBox::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QWidget::staticMetaObject();
    static const QUMethod slot_0 = {"domainSetDefault", 0, 0 };
    static const QUMethod slot_1 = {"domainClear", 0, 0 };
    static const QUParameter param_slot_2[] = {
	{ "isOn", &static_QUType_bool, 0, QUParameter::In }
    };
    static const QUMethod slot_2 = {"domainAdd", 1, param_slot_2 };
    static const QUParameter param_slot_3[] = {
	{ "id", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_3 = {"domainViewClick", 1, param_slot_3 };
    static const QUParameter param_slot_4[] = {
	{ "id", &static_QUType_ptr, "QRQueryDomain::TypeDomainExpansion", QUParameter::In }
    };
    static const QUMethod slot_4 = {"domainSetExpMode", 1, param_slot_4 };
    static const QUMethod slot_5 = {"opPerformQuery", 0, 0 };
    static const QUParameter param_slot_6[] = {
	{ "isOn", &static_QUType_bool, 0, QUParameter::In }
    };
    static const QUMethod slot_6 = {"opLoadQueryList", 1, param_slot_6 };
    static const QUMethod slot_7 = {"opLoadBuiltInVariantQueries", 0, 0 };
    static const QUMethod slot_8 = {"opLoadVariantViewDesc", 0, 0 };
    static const QUParameter param_slot_9[] = {
	{ "id", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_9 = {"opSyncVariantQueryWithDesc", 1, param_slot_9 };
    static const QUMethod slot_10 = {"opSyncDescWithVariantQuery", 0, 0 };
    static const QUMethod slot_11 = {"rangeShowResults", 0, 0 };
    static const QUMethod slot_12 = {"rangeBroadcast", 0, 0 };
    static const QUMethod slot_13 = {"rangeSetDomain", 0, 0 };
    static const QUMethod slot_14 = {"rangeClear", 0, 0 };
    static const QUParameter param_slot_15[] = {
	{ 0, &static_QUType_ptr, "QListViewItem", QUParameter::In },
	{ 0, &static_QUType_varptr, "\x0e", QUParameter::In },
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_15 = {"opQueryListClick", 3, param_slot_15 };
    static const QUParameter param_slot_16[] = {
	{ "id", &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_16 = {"domainSetExpMode", 1, param_slot_16 };
    static const QUParameter param_slot_17[] = {
	{ 0, &static_QUType_ptr, "QListViewItem", QUParameter::In },
	{ 0, &static_QUType_varptr, "\x0e", QUParameter::In },
	{ 0, &static_QUType_int, 0, QUParameter::In }
    };
    static const QUMethod slot_17 = {"rangeResDoubleClick", 3, param_slot_17 };
    static const QMetaData slot_tbl[] = {
	{ "domainSetDefault()", &slot_0, QMetaData::Public },
	{ "domainClear()", &slot_1, QMetaData::Public },
	{ "domainAdd(bool)", &slot_2, QMetaData::Public },
	{ "domainViewClick(int)", &slot_3, QMetaData::Public },
	{ "domainSetExpMode(QRQueryDomain::TypeDomainExpansion)", &slot_4, QMetaData::Public },
	{ "opPerformQuery()", &slot_5, QMetaData::Public },
	{ "opLoadQueryList(bool)", &slot_6, QMetaData::Public },
	{ "opLoadBuiltInVariantQueries()", &slot_7, QMetaData::Public },
	{ "opLoadVariantViewDesc()", &slot_8, QMetaData::Public },
	{ "opSyncVariantQueryWithDesc(int)", &slot_9, QMetaData::Public },
	{ "opSyncDescWithVariantQuery()", &slot_10, QMetaData::Public },
	{ "rangeShowResults()", &slot_11, QMetaData::Public },
	{ "rangeBroadcast()", &slot_12, QMetaData::Public },
	{ "rangeSetDomain()", &slot_13, QMetaData::Public },
	{ "rangeClear()", &slot_14, QMetaData::Public },
	{ "opQueryListClick(QListViewItem*,const QPoint&,int)", &slot_15, QMetaData::Protected },
	{ "domainSetExpMode(int)", &slot_16, QMetaData::Protected },
	{ "rangeResDoubleClick(QListViewItem*,const QPoint&,int)", &slot_17, QMetaData::Protected }
    };
    static const QUMethod signal_0 = {"newQueryResults", 0, 0 };
    static const QMetaData signal_tbl[] = {
	{ "newQueryResults()", &signal_0, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"QRQueryBox", parentObject,
	slot_tbl, 18,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QRQueryBox.setMetaObject( metaObj );
    return metaObj;
}

void* QRQueryBox::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QRQueryBox" ) )
	return this;
    if ( !qstrcmp( clname, "QRoseGroupWidget" ) )
	return (QRoseGroupWidget*)this;
    return QWidget::qt_cast( clname );
}

// SIGNAL newQueryResults
void QRQueryBox::newQueryResults()
{
    activate_signal( staticMetaObject()->signalOffset() + 0 );
}

bool QRQueryBox::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: domainSetDefault(); break;
    case 1: domainClear(); break;
    case 2: domainAdd((bool)static_QUType_bool.get(_o+1)); break;
    case 3: domainViewClick((int)static_QUType_int.get(_o+1)); break;
    case 4: domainSetExpMode((QRQueryDomain::TypeDomainExpansion)(*((QRQueryDomain::TypeDomainExpansion*)static_QUType_ptr.get(_o+1)))); break;
    case 5: opPerformQuery(); break;
    case 6: opLoadQueryList((bool)static_QUType_bool.get(_o+1)); break;
    case 7: opLoadBuiltInVariantQueries(); break;
    case 8: opLoadVariantViewDesc(); break;
    case 9: opSyncVariantQueryWithDesc((int)static_QUType_int.get(_o+1)); break;
    case 10: opSyncDescWithVariantQuery(); break;
    case 11: rangeShowResults(); break;
    case 12: rangeBroadcast(); break;
    case 13: rangeSetDomain(); break;
    case 14: rangeClear(); break;
    case 15: opQueryListClick((QListViewItem*)static_QUType_ptr.get(_o+1),(const QPoint&)*((const QPoint*)static_QUType_ptr.get(_o+2)),(int)static_QUType_int.get(_o+3)); break;
    case 16: domainSetExpMode((int)static_QUType_int.get(_o+1)); break;
    case 17: rangeResDoubleClick((QListViewItem*)static_QUType_ptr.get(_o+1),(const QPoint&)*((const QPoint*)static_QUType_ptr.get(_o+2)),(int)static_QUType_int.get(_o+3)); break;
    default:
	return QWidget::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool QRQueryBox::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: newQueryResults(); break;
    default:
	return QWidget::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool QRQueryBox::qt_property( int id, int f, QVariant* v)
{
    return QWidget::qt_property( id, f, v);
}

bool QRQueryBox::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
