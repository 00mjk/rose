/****************************************************************************
** QRGroup meta object code from reading C++ file 'QRGroup.h'
**
** Created: Tue Apr 26 17:20:16 2005
**      by: The Qt MOC ($Id: QRGroup.moc,v 1.1 2005/09/03 19:37:59 dquinlan Exp $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "QRGroup.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.4. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *QRGroup::className() const
{
    return "QRGroup";
}

QMetaObject *QRGroup::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QRGroup( "QRGroup", &QRGroup::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QRGroup::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QRGroup", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QRGroup::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QRGroup", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QRGroup::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ "emitter", &static_QUType_ptr, "QRGroupWidget", QUParameter::In },
	{ "msg", &static_QUType_ptr, "QRMessage", QUParameter::In }
    };
    static const QUMethod slot_0 = {"doBroadcast", 2, param_slot_0 };
    static const QMetaData slot_tbl[] = {
	{ "doBroadcast(QRGroupWidget*,QRMessage*)", &slot_0, QMetaData::Public }
    };
    static const QUParameter param_signal_0[] = {
	{ "emmiter", &static_QUType_ptr, "QRGroupWidget", QUParameter::In },
	{ "msg", &static_QUType_ptr, "QRMessage", QUParameter::In }
    };
    static const QUMethod signal_0 = {"broadcastEvent", 2, param_signal_0 };
    static const QMetaData signal_tbl[] = {
	{ "broadcastEvent(QRGroupWidget*,QRMessage*)", &signal_0, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"QRGroup", parentObject,
	slot_tbl, 1,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QRGroup.setMetaObject( metaObj );
    return metaObj;
}

void* QRGroup::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QRGroup" ) )
	return this;
    return QObject::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL broadcastEvent
void QRGroup::broadcastEvent( QRGroupWidget* t0, QRMessage* t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_ptr.set(o+1,t0);
    static_QUType_ptr.set(o+2,t1);
    activate_signal( clist, o );
}

bool QRGroup::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: doBroadcast((QRGroupWidget*)static_QUType_ptr.get(_o+1),(QRMessage*)static_QUType_ptr.get(_o+2)); break;
    default:
	return QObject::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool QRGroup::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: broadcastEvent((QRGroupWidget*)static_QUType_ptr.get(_o+1),(QRMessage*)static_QUType_ptr.get(_o+2)); break;
    default:
	return QObject::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool QRGroup::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool QRGroup::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES


const char *QRLink::className() const
{
    return "QRLink";
}

QMetaObject *QRLink::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QRLink( "QRLink", &QRLink::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QRLink::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QRLink", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QRLink::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QRLink", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QRLink::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ "emmiter", &static_QUType_ptr, "QRGroupWidget", QUParameter::In },
	{ "msg", &static_QUType_ptr, "QRMessage", QUParameter::In }
    };
    static const QUMethod slot_0 = {"receiveMsg", 2, param_slot_0 };
    static const QMetaData slot_tbl[] = {
	{ "receiveMsg(QRGroupWidget*,QRMessage*)", &slot_0, QMetaData::Public }
    };
    static const QUParameter param_signal_0[] = {
	{ "emmiter", &static_QUType_ptr, "QRGroupWidget", QUParameter::In },
	{ "msg", &static_QUType_ptr, "QRMessage", QUParameter::In }
    };
    static const QUMethod signal_0 = {"triggerBroadcast", 2, param_signal_0 };
    static const QMetaData signal_tbl[] = {
	{ "triggerBroadcast(QRGroupWidget*,QRMessage*)", &signal_0, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"QRLink", parentObject,
	slot_tbl, 1,
	signal_tbl, 1,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QRLink.setMetaObject( metaObj );
    return metaObj;
}

void* QRLink::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QRLink" ) )
	return this;
    return QObject::qt_cast( clname );
}

// SIGNAL triggerBroadcast
void QRLink::triggerBroadcast( QRGroupWidget* t0, QRMessage* t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_ptr.set(o+1,t0);
    static_QUType_ptr.set(o+2,t1);
    activate_signal( clist, o );
}

bool QRLink::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: receiveMsg((QRGroupWidget*)static_QUType_ptr.get(_o+1),(QRMessage*)static_QUType_ptr.get(_o+2)); break;
    default:
	return QObject::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool QRLink::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: triggerBroadcast((QRGroupWidget*)static_QUType_ptr.get(_o+1),(QRMessage*)static_QUType_ptr.get(_o+2)); break;
    default:
	return QObject::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool QRLink::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool QRLink::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
