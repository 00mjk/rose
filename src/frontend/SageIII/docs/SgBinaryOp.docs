/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBinaryOp
//////////////////////////////////////////////////////////////////////////
/*!
\class SgBinaryOp
\brief This class represents the notion of a binary operator.
It is derived from a SgExpression because operators are expressions.
    There are no uses of this IR node anywhere.  All expressions
are derived from this IR node to build derived classes.  Example
binary operators include binary minus, binary plus, the address operator,
etc.
\internal This is a base class for all binary operators.
\sa
\ref SgBinaryOp_usage  "Example of using a SgBinaryOp object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBinaryOp data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBinaryOp member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
     NOT IMPLEMENTED IN C++ SOURCE CODE
\fn SgBinaryOp::SgBinaryOp (const SgBinaryOp &X)
\brief Copy constructor (made private to prevent being called by accident).
*/
/*!
\fn SgBinaryOp::~SgBinaryOp()
\brief This is the destructor.
   Only the Sg_File_Info object can be deleted in this object.
*/
/*!
\fn SgBinaryOp::isSgBinaryOp (SgNode *s)
\brief Cast function (from derived class to SgBinaryOp pointer).
   This functions returns a SgBinaryOp pointer for any input of a 
pointer to an object derived from a SgBinaryOp.
\return Returns valid pointer to SgBinaryOp if input is derived from a SgBinaryOp.
*/
/*!
\fn SgBinaryOp::isSgBinaryOp (const SgNode *s)
\brief Cast function (from derived class to SgBinaryOp pointer).
   This functions returns a SgBinaryOp pointer for any input of a 
pointer to an object derived from a SgBinaryOp.
\return Returns valid pointer to SgBinaryOp if input is derived from a SgBinaryOp.
*/
/*!
\fn SgBinaryOp::get_expression_type (void) const
\brief returns type of operator expression.
   This function returns the type of the binary operator.
\return Returns type of operator expression.
*/
/*!
\fn SgBinaryOp::set_expression_type (SgType* expression_type)
\brief This function allows the p_expression_type pointer to be set (used internally).
   This function is mostly used internally and is only required to support editing 
of existing SgBinaryOp objects. In general it is not changed once it is set.
\param expression_type - sets value of internal p_expression_type pointer.
\return Returns void.
*/
/*
      NOT IMPLEMENTED IN C++ SOURCE CODE
\fn SgBinaryOp::get_next() const
\brief Returns next operand (virtual function)
     This function returns the next operand and is part of an 
older iterator interface within Sage II which didn't use STL, but implemented 
iterators for the operands (since their is only one for a binary operator
and two for a binary operator we don't support such an iterator interface
within Sage III.  The goal of Sage III is a minimal easily maintained 
interface.  This function is not used and is not a defined part a minumal 
interface for Sage III.
\deprecated This function is not used.
\return Returns int
*/
/*! \name Deprecated*/
//@{
/*!
\fn bool SgBinaryOp::empty() const
\brief Returns true if number of operands is zero, else false.
   This function returns boolean value given by (length() == 0).
This function is not used and is not a defined part a minumal interface 
for Sage III.
\deprecated This function is not used.
\return Returns bool
*/
/*!
\fn int SgBinaryOp::length() const
\brief Returns number of operands (virtual function)
     Returns number of operands (all binary operators return value = 1).
This function is not used and is not a defined part a minumal interface 
for Sage III.
\deprecated This function is not used.
\return Returns int
*/
/*!
\fn void SgBinaryOp::set_lhs_operand_i(SgExpression *lhs_operand_i)
\brief This function allows the p_lhs_operand_i pointer to be set (used internally).
   This function is mostly used internally and is only required to support editing 
of existing SgBinaryOp objects.
See  *lhs_operand_i)
lhs_operand_i for documentation \deprecated This function is not used.
\param operand - sets value of internal p_lhs_operand pointer.
\return Returns void.
*/
/*!
\fn SgExpression *SgBinaryOp::get_lhs_operand_i() const
\brief returns SgExpression pointer to the operand associated with this binary operator.
See  const
lhs_operand_i for documentation \deprecated This function is not used.
\return Returns SgExpression pointer.
*/
/*!
\fn SgExpression *SgBinaryOp::get_rhs_operand_i() const
\brief returns SgExpression pointer to the operand associated with this binary operator.
See  const
rhs_operand_i for documentation \deprecated This function is not used.
\return Returns SgExpression pointer.
*/
/*!
\fn void SgBinaryOp::set_rhs_operand_i(SgExpression *rhs_operand_i)
\brief This function allows the p_rhs_operand_i pointer to be set (used internally).
   This function is mostly used internally and is only required to support editing 
of existing SgBinaryOp objects.
See  *rhs_operand_i)
rhs_operand_i for documentation \deprecated This function is not used.
\param operand - sets value of internal p_rhs_operand pointer.
\return Returns void.
*/
//@}
/*! \name Class Members*/
//@{
/*!
\var SgExpression *SgBinaryOp::p_lhs_operand_i
\brief This is the operand associated with the lhs of the binary operator.
   Every binary operator is applied to two operands, this
variable stores the lhs operand to which the binary operator is applied
(with the rhs).
*/
/*!
\var SgExpression *SgBinaryOp::p_rhs_operand_i
\brief This is the operand associated with the rhs of the binary operator.
   Every binary operator is applied to two operands, this
variable stores the rhs operand to which the binary operator is applied
(with the lhs).
*/
/*!
\var SgType *SgBinaryOp::p_expression_type
\brief This SgType is the type of the operator (function type).
    This value is the return type of the operator, different from 
a SgFunctionRefExp, but similar to a SgFunctionCall.  Note 
that overloaded operators appear in Sage III as functions
with a specific name (e.g. operator+, operator-, operator*, etc.).
They are not Binary operator, they are SgFunctionRefExp objects.
Other mechanisms within ROSE provide support for the classification of
overloader operators \ref OverloaderOperatorSupport.
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgBinaryOp::SgBinaryOp(Sg_File_Info *startOfConstruct,SgExpression *lhs_operand_i=(0),SgExpression *rhs_operand_i=(0),SgType *expression_type=(0))
\brief This is the constructor.
   This constructor builds the SgBinaryOp base class.
\param startOfConstruct represents the position in the source code
\param lhs_operand_i represents the lhs operand to which the operator is applied
\param rhs_operand_i represents the rhs operand to which the operator is applied
\param expression_type represents the type of the return value of the operator
\sa 
\ref SgBinaryOp_create "Example:create an SgBinaryOp object"
*/
/*!\fn SgBinaryOp::SgBinaryOp(const SgBinaryOpStorageClass &source)
*/
/*!\fn inline static void SgBinaryOp::operator delete(void *pointer)
*/
/*!\fn static SgBinaryOp *SgBinaryOp::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgBinaryOp::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgBinaryOp::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgBinaryOp::initializeStorageClassArray(SgBinaryOpStorageClass *storageArray)
*/
/*!\fn static void SgBinaryOp::clearMemoryPool()
*/
/*!\fn static void SgBinaryOp::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgBinaryOp::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgBinaryOp::roseRTI()
*/
/*!\fn virtual SgBinaryOp::~SgBinaryOp()
*/
/*!\fn virtual SgNode *SgBinaryOp::copy(SgCopyHelp &help) const
*/
/*!\fn virtual int SgBinaryOp::replace_expression(SgExpression *,SgExpression *)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgBinaryOp::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgBinaryOp::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgBinaryOp::cfgIndexForEnd() const
*/
/*!\fn virtual void SgBinaryOp::post_construction_initialization()
*/
/*!
\fn void SgBinaryOp::set_lhs_operand(SgExpression *exp)
\brief This function allows the p_lhs_operand pointer to be set (used internally).
   This function is mostly used internally and is only required to support editing 
of existing SgBinaryOp objects.
See  *exp)
lhs_operand for documentation \param operand - sets value of internal p_lhs_operand pointer.
\return Returns void.
*/
/*!
\fn void SgBinaryOp::set_rhs_operand(SgExpression *exp)
\brief This function allows the p_rhs_operand pointer to be set (used internally).
   This function is mostly used internally and is only required to support editing 
of existing SgBinaryOp objects.
See  *exp)
rhs_operand for documentation \param operand - sets value of internal p_rhs_operand pointer.
\return Returns void.
*/
/*!
\fn SgExpression *SgBinaryOp::get_lhs_operand() const
\brief returns SgExpression pointer to the lhs operand associated with this binary operator.
See  const
lhs_operand for documentation \return Returns SgExpression pointer.
*/
/*!\fn SgExpression *SgBinaryOp::get_next(int &n) const
\description See  const
next for documentation */
/*!
\fn SgExpression *SgBinaryOp::get_rhs_operand() const
\brief returns SgExpression pointer to the rhs operand associated with this binary operator.
See  const
rhs_operand for documentation \return Returns SgExpression pointer.
*/
/*!\fn virtual SgNode *SgBinaryOp::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual SgType *SgBinaryOp::get_type() const
\description See  const
type for documentation */
/*!\fn virtual size_t SgBinaryOp::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgBinaryOp::get_numberOfTraversalSuccessors()
\description See  SgBinaryOp::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgBinaryOp::get_traversalSuccessorContainer()
\description See  SgBinaryOp::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgBinaryOp::get_traversalSuccessorNamesContainer()
\description See  SgBinaryOp::traversalSuccessorNamesContainer for documentation */
/*!\fn SgBinaryOp::SgBinaryOp(SgExpression *lhs_operand_i,SgExpression *rhs_operand_i,SgType *expression_type)
*/
//@}
int SAGE_Doxygen_Dummy_19768190216664;
