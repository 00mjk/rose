/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateDeclaration
//////////////////////////////////////////////////////////////////////////
/*!
\class SgTemplateDeclaration
\brief This class represents the concept of a template declaration.
   This template declaration is internally marked as being either a
     - class (e_template_class), 
     - member class (e_template_m_class), 
     - function (e_template_function), 
     - member function (e_template_m_function), or 
     - member data (e_template_m_data)
The name of the template is available from the get_name() member function.
The rest of the template is internally strored as a string (this will be 
changed very quickly).  The template parameters are available within from
the get_templateParameters() member function.  The scope is stored explicitly
for this IR node, since name qualification permits it to have a scope
independent of its structural location within the source code.
\todo Template declarations marked as friend don't seem to be marked as friend internally.
\todo The scope of a SgTemplateDeclaration should be a SgTemplateInstantiationDefn, since
    it could be associated which more than one definition.  What we need, and don't have
    yet, is a SgTemplateDefinition to accompany the SgTemplateDeclaration then a 
    SgTemplateDeclaration could have a SgTemplateDefinition for a parent and or scope
    when it is a member function or namespace or global scope (typically), otherwise.
\todo Make the "*PtrList" typed objects non-pointer data members (lists) instead of
    pointer to lists.
\note Template specializations appear in syntax to be a template declaration (with
    explicit template arguments), but they are really just an explicit template
    instantiation. Thus Sage III stores such template specializations as template
    instantiations and references the associated template declaration
    (SgTemplateDeclaration) internally.
\sa
\ref SgTemplateDeclaration_usage  "Example of using a SgTemplateDeclaration object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateDeclaration data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateDeclaration member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgTemplateDeclaration_create "Example:create an SgTemplateDeclaration object"
*/
/*!
\fn SgTemplateDeclaration::~SgTemplateDeclaration()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgTemplateDeclaration::isSgTemplateDeclaration (SgNode *s)
\brief Cast function (from derived class to SgTemplateDeclaration pointer).
   This functions returns a SgTemplateDeclaration pointer for any input of a 
pointer to an object derived from a SgTemplateDeclaration.
\return Returns valid pointer to SgTemplateDeclaration if input is derived from a SgLocatedNode.
*/
/*!
\fn SgTemplateDeclaration::isSgTemplateDeclaration (const SgNode *s)
\brief Cast function (from derived class to SgTemplateDeclaration pointer).
   This functions returns a SgTemplateDeclaration pointer for any input of a 
pointer to an object derived from a SgTemplateDeclaration.
\return Returns valid pointer to SgTemplateDeclaration if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgName SgTemplateDeclaration::p_name
\brief This is the name of the template
   This is the name of the template (e.g. for "template<class T> class X;",
the name is "X".
*/
/*! \var SgName SgTemplateDeclaration::p_string
\brief This is the full template declaration as a string only.
   This is the template declaration as a string (e.g. for "template<class T> class X {};",
the string is "template<class T> class X {};".
\todo Check the accuracy of this statement in the unparser!
*/
/*! \var SgTemplateParameterPtrListPtr SgTemplateDeclaration::p_templateParameters
\brief This is the STL list of pointers template parameters (SgTemplateParameter objects)
  This is the STL list of pointers to template parameters (SgTemplateParameter objects)
For example, for "template<class T> class X;", the STL list would contain a SgTemplateParameter
representing T.
*/
/*! \var enum SgTemplateDeclaration::template_type_enum SgTemplateDeclaration::p_template_kind
\brief This is the classification of the template declaration
   This is the classification of the template declaration.
   This template declaration is internally marked as being either a
     - class (e_template_class), 
     - member class (e_template_m_class), 
     - function (e_template_function), 
     - member function (e_template_m_function), or 
     - member data (e_template_m_data)
*/
/*! \var SgScopeStatement *SgTemplateDeclaration::p_scope
\brief This is the scope of the template declaration.
   This is stored explicitly since name qualification can be used to 
place some declarations in positions that are different from their
scope if it were computed structureally from the parent pointer data.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgTemplateDeclaration::SgTemplateDeclaration(Sg_File_Info *startOfConstruct,SgName name=(""),SgName string=(""),enum SgTemplateDeclaration::template_type_enum template_kind=SgTemplateDeclaration::e_template_none,SgTemplateParameterPtrListPtr templateParameters=(0))
*/
/*!
\fn SgTemplateDeclaration::SgTemplateDeclaration(const SgTemplateDeclarationStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgTemplateDeclaration base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn inline static void SgTemplateDeclaration::operator delete(void *pointer)
*/
/*!\fn static SgTemplateDeclaration *SgTemplateDeclaration::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgTemplateDeclaration::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgTemplateDeclaration::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgTemplateDeclaration::initializeStorageClassArray(SgTemplateDeclarationStorageClass *storageArray)
*/
/*!\fn static void SgTemplateDeclaration::clearMemoryPool()
*/
/*!\fn static void SgTemplateDeclaration::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgTemplateDeclaration::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgTemplateDeclaration::roseRTI()
*/
/*!\fn virtual SgNode *SgTemplateDeclaration::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgTemplateDeclaration::~SgTemplateDeclaration()
*/
/*!\fn virtual void SgTemplateDeclaration::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateDeclaration::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateDeclaration::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateDeclaration::post_construction_initialization()
*/
/*!\fn virtual void SgTemplateDeclaration::set_scope(SgScopeStatement *scope)
\brief \brief See  *scope)
scope for documentation */
/*!
\fn void SgTemplateDeclaration::set_name(SgName name)
\brief Access function for p_name.See  name)
name for documentation 
\return Returns void.
*/
/*!
\fn void SgTemplateDeclaration::set_string(SgName string)
\brief Access function for p_string.See  string)
string for documentation 
\return Returns void.
*/
/*!\fn void SgTemplateDeclaration::set_templateParameters(SgTemplateParameterPtrListPtr templateParameters)
\brief \brief See  templateParameters)
templateParameters for documentation */
/*!
\fn void SgTemplateDeclaration::set_template_kind(enum SgTemplateDeclaration::template_type_enum template_kind)
\brief Access function for p_template_kind.See  template_kind)
template_kind for documentation 
\return Returns void.
*/
/*!
\fn SgName SgTemplateDeclaration::get_name() const
\brief Returns name of template declaration.See  const
name for documentation 
\return Returns SgName by value.
*/
/*!
\fn SgName SgTemplateDeclaration::get_string() const
\brief Returns stringified template declaration.See  const
string for documentation 
\return Returns SgName by value.
*/
/*!\fn SgTemplateParameterPtrListPtr SgTemplateDeclaration::get_templateParameters() const
\brief \brief See  const
templateParameters for documentation */
/*!
\fn enum SgTemplateDeclaration::template_type_enum SgTemplateDeclaration::get_template_kind() const
\brief Returns enum value (function, class, etc.)See  const
template_kind for documentation 
\return Returns enum value
*/
/*!\fn virtual SgName SgTemplateDeclaration::get_mangled_name() const
\brief \brief See  const
mangled_name for documentation */
/*!\fn virtual SgName SgTemplateDeclaration::get_qualified_name() const
\brief \brief See  const
qualified_name for documentation */
/*!\fn virtual SgNode *SgTemplateDeclaration::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual SgScopeStatement *SgTemplateDeclaration::get_scope() const
\brief \brief See  const
scope for documentation */
/*!\fn virtual SgSymbol *SgTemplateDeclaration::get_symbol_from_symbol_table() const
\brief \brief See  const
symbol_from_symbol_table for documentation */
/*!\fn virtual size_t SgTemplateDeclaration::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgTemplateDeclaration::get_numberOfTraversalSuccessors()
\brief \brief See  SgTemplateDeclaration::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgTemplateDeclaration::get_traversalSuccessorContainer()
\brief \brief See  SgTemplateDeclaration::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgTemplateDeclaration::get_traversalSuccessorNamesContainer()
\brief \brief See  SgTemplateDeclaration::traversalSuccessorNamesContainer for documentation */
/*!\fn SgTemplateDeclaration::SgTemplateDeclaration(SgName name,SgName string,enum SgTemplateDeclaration::template_type_enum template_kind,SgTemplateParameterPtrListPtr templateParameters)
*/
//@}
int SAGE_Doxygen_Dummy_270762311625847;
