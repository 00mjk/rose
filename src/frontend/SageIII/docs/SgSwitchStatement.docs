/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgSwitchStatement
//////////////////////////////////////////////////////////////////////////
/*!
\class SgSwitchStatement
\brief This class represents the concept of a switch.
\internal Note that the design or some aspect of the design may be the cause of falure to
    handle the Duff's Device example code. I think this is not fixed, Oct 2005.
\todo FIXED: The conditional test should be a SgStatement so that a declaration can
      be used, it is currently an SgExpression (specifically a SgExpressionRoot).
\todo The body of the SgSwitch should really be a SgStatement not a SgBasicBlock.
      DuffsDevice can be modified to should an example of this but there are also
      much more trivial examples.  See comment about this in the SgStatement todo list.
*/
/*
\sa
\ref SgSwitchStatement_usage  "Example of using a SgSwitchStatement object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgSwitchStatement data members
/////////////////////////////////////////////////////////////////////////
/*! \var SgSwitchStatement::p_item_selector_root
\brief This pointer a SgExpressionRoot.
\note I think this is a poor name for this variable.
\todo This should be changed to be a SgStatement (to follow the C++ standard).
    this way it could be an expression (via an expression statement) or a variable
    declaration with initializer (via a SgVariableDeclaration).
    We also have the condition specified before the body within the ROSETTA
    specification and this causes the traversal to travers the condition and body in the
    wrong order (for do-while, the traversal should be body forst and condition second).
    See test2005_114.C for more details and example code (example of strange loops).
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgSwitchStatement member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgSwitchStatement_create "Example:create an SgSwitchStatement object"
*/
/*!
\fn SgSwitchStatement::~SgSwitchStatement()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgSwitchStatement::isSgSwitchStatement (SgNode *s)
\brief Cast function (from derived class to SgSwitchStatement pointer).
   This functions returns a SgSwitchStatement pointer for any input of a 
pointer to an object derived from a SgSwitchStatement.
\return Returns valid pointer to SgSwitchStatement if input is derived from a SgLocatedNode.
*/
/*!
\fn SgSwitchStatement::isSgSwitchStatement (const SgNode *s)
\brief Cast function (from derived class to SgSwitchStatement pointer).
   This functions returns a SgSwitchStatement pointer for any input of a 
pointer to an object derived from a SgSwitchStatement.
\return Returns valid pointer to SgSwitchStatement if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgBasicBlock *SgSwitchStatement::p_body
\brief This pointer a SgBasicBlock, and holds the cases in the body of the switch.
*/
/*!\var SgStatement *SgSwitchStatement::p_item_selector
*/
/*!\var int SgSwitchStatement::p_end_numeric_label
*/
/*!\var std::string SgSwitchStatement::p_string_label
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgSwitchStatement::SgSwitchStatement(Sg_File_Info *startOfConstruct,SgStatement *item_selector=(0),SgBasicBlock *body=(0))
*/
/*!\fn SgSwitchStatement::SgSwitchStatement(const SgSwitchStatementStorageClass &source)
*/
/*!\fn inline static void SgSwitchStatement::operator delete(void *pointer)
*/
/*!\fn static SgSwitchStatement *SgSwitchStatement::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgSwitchStatement::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgSwitchStatement::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgSwitchStatement::initializeStorageClassArray(SgSwitchStatementStorageClass *storageArray)
*/
/*!\fn static void SgSwitchStatement::clearMemoryPool()
*/
/*!\fn static void SgSwitchStatement::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgSwitchStatement::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgSwitchStatement::roseRTI()
*/
/*!
\fn virtual SgNode *SgSwitchStatement::copy(SgCopyHelp &help) const
\brief Makes a copy (deap of shallow depending on SgCopyHelp).
\return Returns pointer to copy of SgSwitchStatement.
*/
/*!\fn virtual SgSwitchStatement::~SgSwitchStatement()
*/
/*!\fn virtual bool SgSwitchStatement::cfgIsIndexInteresting(unsigned int ) const
*/
/*!\fn virtual bool SgSwitchStatement::replace_child(SgStatement *,SgStatement *,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgSwitchStatement::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgSwitchStatement::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgSwitchStatement::cfgIndexForEnd() const
*/
/*!\fn virtual void SgSwitchStatement::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgSwitchStatement::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgSwitchStatement::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgSwitchStatement::post_construction_initialization()
*/
/*!\fn void SgSwitchStatement::append_case(SgCaseOptionStmt *&)
*/
/*!\fn void SgSwitchStatement::append_default(SgDefaultOptionStmt *&)
*/
/*!\fn void SgSwitchStatement::prepend_case(SgCaseOptionStmt *&)
*/
/*!
\fn void SgSwitchStatement::set_body(SgBasicBlock *body)
\brief Access function for p_body.
See  *body)
body for documentation \param loop_body SgBasicBlock pointer
\return Returns void.
*/
/*!\fn void SgSwitchStatement::set_end_numeric_label(int end_numeric_label)
\description See  end_numeric_label)
end_numeric_label for documentation */
/*!
\fn void SgSwitchStatement::set_item_selector(SgStatement *item_selector)
\brief Access function for p_item_selector.
See  *item_selector)
item_selector for documentation \param for_init_stmt SgExpression pointer
\return Returns void.
*/
/*!\fn void SgSwitchStatement::set_string_label(std::string string_label)
\description See  string_label)
string_label for documentation */
/*!
\fn SgBasicBlock *SgSwitchStatement::get_body() const
\brief Access function for p_body.
See  const
body for documentation \return Returns a pointer to a SgBasicBlock.
*/
/*!
\fn SgStatement *SgSwitchStatement::get_item_selector() const
\brief Access function for p_item_selector_root.
See  const
item_selector for documentation \return Returns a pointer to a SgExpression.
*/
/*!\fn int SgSwitchStatement::get_end_numeric_label() const
\description See  const
end_numeric_label for documentation */
/*!\fn std::string SgSwitchStatement::get_string_label() const
\description See  const
string_label for documentation */
/*!\fn virtual SgName SgSwitchStatement::get_mangled_name() const
\description See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgSwitchStatement::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgSwitchStatement::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgSwitchStatement::get_numberOfTraversalSuccessors()
\description See  SgSwitchStatement::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgSwitchStatement::get_traversalSuccessorContainer()
\description See  SgSwitchStatement::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgSwitchStatement::get_traversalSuccessorNamesContainer()
\description See  SgSwitchStatement::traversalSuccessorNamesContainer for documentation */
/*!
\fn SgSwitchStatement::SgSwitchStatement(SgStatement *item_selector,SgBasicBlock *body)
\brief This is the constructor.
   This constructor builds the SgSwitchStatement base class.
\param startOfConstruct represents the position in the source code
*/
//@}
int SAGE_Doxygen_Dummy_15051383618080;
