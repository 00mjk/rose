/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCatchOptionStmt
//////////////////////////////////////////////////////////////////////////
/*!
\class SgCatchOptionStmt
\brief This class represents the concept of a catch within a try-catch construct used in
    C++ exception handling.
\internal try and catch, though linked semanticaly, are seperate statements in the IR.
*/
/*
\sa
\ref SgCatchOptionStmt_usage  "Example of using a SgCatchOptionStmt object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCatchOptionStmt data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCatchOptionStmt member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgCatchOptionStmt_create "Example:create an SgCatchOptionStmt object"
*/
/*!
\fn SgCatchOptionStmt::~SgCatchOptionStmt()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgCatchOptionStmt::isSgCatchOptionStmt (SgNode *s)
\brief Cast function (from derived class to SgCatchOptionStmt pointer).
   This functions returns a SgCatchOptionStmt pointer for any input of a 
pointer to an object derived from a SgCatchOptionStmt.
\return Returns valid pointer to SgCatchOptionStmt if input is derived from a SgLocatedNode.
*/
/*!
\fn SgCatchOptionStmt::isSgCatchOptionStmt (const SgNode *s)
\brief Cast function (from derived class to SgCatchOptionStmt pointer).
   This functions returns a SgCatchOptionStmt pointer for any input of a 
pointer to an object derived from a SgCatchOptionStmt.
\return Returns valid pointer to SgCatchOptionStmt if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgBasicBlock *SgCatchOptionStmt::p_body
\brief This pointer to a SgBasicBlock used to hold the statements to be executed when the
    exception is caught.
*/
/*! \var SgVariableDeclaration *SgCatchOptionStmt::p_condition
\brief This pointer to a SgVariableDeclaration.
*/
/*! \var SgTryStmt *SgCatchOptionStmt::p_trystmt
\brief This pointer to a SgTryStmt (a declaration) that is associated with this catch option.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgCatchOptionStmt::SgCatchOptionStmt(Sg_File_Info *startOfConstruct,SgVariableDeclaration *condition=(0),SgBasicBlock *body=(0),SgTryStmt *trystmt=(0))
*/
/*!
\fn SgCatchOptionStmt::SgCatchOptionStmt(const SgCatchOptionStmtStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgCatchOptionStmt base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn inline static void SgCatchOptionStmt::operator delete(void *pointer)
*/
/*!\fn static SgCatchOptionStmt *SgCatchOptionStmt::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgCatchOptionStmt::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgCatchOptionStmt::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgCatchOptionStmt::initializeStorageClassArray(SgCatchOptionStmtStorageClass *storageArray)
*/
/*!\fn static void SgCatchOptionStmt::clearMemoryPool()
*/
/*!\fn static void SgCatchOptionStmt::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgCatchOptionStmt::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgCatchOptionStmt::roseRTI()
*/
/*!\fn virtual SgCatchOptionStmt::~SgCatchOptionStmt()
*/
/*!
\fn virtual SgNode *SgCatchOptionStmt::copy(SgCopyHelp &help) const
\brief Makes a copy (deap of shallow depending on SgCopyHelp).
\return Returns pointer to copy of SgCatchOptionStmt.
*/
/*!\fn virtual bool SgCatchOptionStmt::replace_child(SgStatement *,SgStatement *,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgCatchOptionStmt::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgCatchOptionStmt::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgCatchOptionStmt::cfgIndexForEnd() const
*/
/*!\fn virtual void SgCatchOptionStmt::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCatchOptionStmt::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCatchOptionStmt::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCatchOptionStmt::post_construction_initialization()
*/
/*!
\fn void SgCatchOptionStmt::set_body(SgBasicBlock *body)
\brief Access function for p_body.
See  *body)
body for documentation \param body SgBasicBlock pointer
\return Returns void.
*/
/*!
\fn void SgCatchOptionStmt::set_condition(SgVariableDeclaration *condition)
\brief Access function for p_condition.
See  *condition)
condition for documentation \param condition SgVariableDeclaration pointer
\return Returns void.
*/
/*!
\fn void SgCatchOptionStmt::set_trystmt(SgTryStmt *trystmt)
\brief Access function for p_trystmt.
See  *trystmt)
trystmt for documentation \param trystmt SgTryStmt pointer
\return Returns void.
*/
/*!
\fn SgBasicBlock *SgCatchOptionStmt::get_body() const
\brief Access function for p_body.
See  const
body for documentation \return Returns a pointer to a SgBasicBlock.
*/
/*!
\fn SgTryStmt *SgCatchOptionStmt::get_trystmt() const
\brief Access function for p_trystmt.
See  const
trystmt for documentation \return Returns a pointer to a SgTryStmt.
*/
/*!
\fn SgVariableDeclaration *SgCatchOptionStmt::get_condition() const
\brief Access function for p_condition.
See  const
condition for documentation \return Returns a pointer to a SgVariableDeclaration.
*/
/*!\fn virtual SgName SgCatchOptionStmt::get_mangled_name() const
\description See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgCatchOptionStmt::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgCatchOptionStmt::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgCatchOptionStmt::get_numberOfTraversalSuccessors()
\description See  SgCatchOptionStmt::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgCatchOptionStmt::get_traversalSuccessorContainer()
\description See  SgCatchOptionStmt::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgCatchOptionStmt::get_traversalSuccessorNamesContainer()
\description See  SgCatchOptionStmt::traversalSuccessorNamesContainer for documentation */
/*!\fn SgCatchOptionStmt::SgCatchOptionStmt(SgVariableDeclaration *condition,SgBasicBlock *body,SgTryStmt *trystmt)
*/
//@}
int SAGE_Doxygen_Dummy_23828302031674;
