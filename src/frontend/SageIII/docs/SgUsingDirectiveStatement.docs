/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUsingDirectiveStatement
//////////////////////////////////////////////////////////////////////////
/*!
\class SgUsingDirectiveStatement
\brief This class represents the concept of a C++ using directive.
\todo Explain difference between using declaration and using directive.
\sa
\ref SgUsingDirectiveStatement_usage  "Example of using a SgUsingDirectiveStatement object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUsingDirectiveStatement data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUsingDirectiveStatement member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgUsingDirectiveStatement_create "Example:create an SgUsingDirectiveStatement object"
*/
/*!
\fn SgUsingDirectiveStatement::~SgUsingDirectiveStatement()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgUsingDirectiveStatement::isSgUsingDirectiveStatement (SgNode *s)
\brief Cast function (from derived class to SgUsingDirectiveStatement pointer).
   This functions returns a SgUsingDirectiveStatement pointer for any input of a 
pointer to an object derived from a SgUsingDirectiveStatement.
\return Returns valid pointer to SgUsingDirectiveStatement if input is derived from a SgLocatedNode.
*/
/*!
\fn SgUsingDirectiveStatement::isSgUsingDirectiveStatement (const SgNode *s)
\brief Cast function (from derived class to SgUsingDirectiveStatement pointer).
   This functions returns a SgUsingDirectiveStatement pointer for any input of a 
pointer to an object derived from a SgUsingDirectiveStatement.
\return Returns valid pointer to SgUsingDirectiveStatement if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgNamespaceDeclarationStatement *SgUsingDirectiveStatement::p_namespaceDeclaration
\brief This pointer points to namespace declaration being used.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgUsingDirectiveStatement::SgUsingDirectiveStatement(Sg_File_Info *startOfConstruct,SgNamespaceDeclarationStatement *namespaceDeclaration=(0))
*/
/*!
\fn SgUsingDirectiveStatement::SgUsingDirectiveStatement(const SgUsingDirectiveStatementStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgUsingDirectiveStatement base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn inline static void SgUsingDirectiveStatement::operator delete(void *pointer)
*/
/*!\fn static SgUsingDirectiveStatement *SgUsingDirectiveStatement::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgUsingDirectiveStatement::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgUsingDirectiveStatement::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgUsingDirectiveStatement::initializeStorageClassArray(SgUsingDirectiveStatementStorageClass *storageArray)
*/
/*!\fn static void SgUsingDirectiveStatement::clearMemoryPool()
*/
/*!\fn static void SgUsingDirectiveStatement::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgUsingDirectiveStatement::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgUsingDirectiveStatement::roseRTI()
*/
/*!\fn virtual SgNode *SgUsingDirectiveStatement::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgUsingDirectiveStatement::~SgUsingDirectiveStatement()
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgUsingDirectiveStatement::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgUsingDirectiveStatement::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgUsingDirectiveStatement::cfgIndexForEnd() const
*/
/*!\fn virtual void SgUsingDirectiveStatement::post_construction_initialization()
*/
/*!
\fn void SgUsingDirectiveStatement::set_namespaceDeclaration(SgNamespaceDeclarationStatement *namespaceDeclaration)
\brief Access function for p_namespaceDeclaration.See  *namespaceDeclaration)
namespaceDeclaration for documentation 
\return Returns void.
*/
/*!
\fn SgNamespaceDeclarationStatement *SgUsingDirectiveStatement::get_namespaceDeclaration() const
\brief Access function for p_namespaceDeclaration.See  const
namespaceDeclaration for documentation 
\return Returns pointer to SgNamespaceDeclarationStatement.
*/
/*!\fn virtual SgName SgUsingDirectiveStatement::get_mangled_name() const
\brief \brief See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgUsingDirectiveStatement::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgUsingDirectiveStatement::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgUsingDirectiveStatement::get_numberOfTraversalSuccessors()
\brief \brief See  SgUsingDirectiveStatement::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgUsingDirectiveStatement::get_traversalSuccessorContainer()
\brief \brief See  SgUsingDirectiveStatement::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgUsingDirectiveStatement::get_traversalSuccessorNamesContainer()
\brief \brief See  SgUsingDirectiveStatement::traversalSuccessorNamesContainer for documentation */
/*!\fn SgUsingDirectiveStatement::SgUsingDirectiveStatement(SgNamespaceDeclarationStatement *namespaceDeclaration)
*/
//@}
int SAGE_Doxygen_Dummy_1441137512036;
