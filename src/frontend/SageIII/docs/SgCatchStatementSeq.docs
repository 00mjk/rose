/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCatchStatementSeq
//////////////////////////////////////////////////////////////////////////
/*!
\class SgCatchStatementSeq
\brief This class represents the concept of a C++ sequence of catch statements.
    This is associated with a try statement.
\sa
\ref SgCatchStatementSeq_usage  "Example of using a SgCatchStatementSeq object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCatchStatementSeq data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCatchStatementSeq member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgCatchStatementSeq_create "Example:create an SgCatchStatementSeq object"
*/
/*!
\fn SgCatchStatementSeq::~SgCatchStatementSeq()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgCatchStatementSeq::isSgCatchStatementSeq (SgNode *s)
\brief Cast function (from derived class to SgCatchStatementSeq pointer).
   This functions returns a SgCatchStatementSeq pointer for any input of a 
pointer to an object derived from a SgCatchStatementSeq.
\return Returns valid pointer to SgCatchStatementSeq if input is derived from a SgLocatedNode.
*/
/*!
\fn SgCatchStatementSeq::isSgCatchStatementSeq (const SgNode *s)
\brief Cast function (from derived class to SgCatchStatementSeq pointer).
   This functions returns a SgCatchStatementSeq pointer for any input of a 
pointer to an object derived from a SgCatchStatementSeq.
\return Returns valid pointer to SgCatchStatementSeq if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgStatementPtrList SgCatchStatementSeq::p_catch_statement_seq
\brief This is an STL list of pointers to SgStatement objects.
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgCatchStatementSeq::SgCatchStatementSeq(Sg_File_Info *startOfConstruct)
\brief This is the constructor.
   This constructor builds the SgCatchStatementSeq base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn SgCatchStatementSeq::SgCatchStatementSeq(const SgCatchStatementSeqStorageClass &source)
*/
/*!\fn inline static void SgCatchStatementSeq::operator delete(void *pointer)
*/
/*!\fn static SgCatchStatementSeq *SgCatchStatementSeq::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgCatchStatementSeq::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgCatchStatementSeq::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgCatchStatementSeq::initializeStorageClassArray(SgCatchStatementSeqStorageClass *storageArray)
*/
/*!\fn static void SgCatchStatementSeq::clearMemoryPool()
*/
/*!\fn static void SgCatchStatementSeq::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgCatchStatementSeq::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgCatchStatementSeq::roseRTI()
*/
/*!\fn virtual SgCatchStatementSeq::~SgCatchStatementSeq()
*/
/*!\fn virtual SgNode *SgCatchStatementSeq::copy(SgCopyHelp &help) const
*/
/*!\fn virtual bool SgCatchStatementSeq::cfgIsIndexInteresting(unsigned int ) const
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgCatchStatementSeq::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgCatchStatementSeq::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgCatchStatementSeq::cfgIndexForEnd() const
*/
/*!\fn virtual void SgCatchStatementSeq::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCatchStatementSeq::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCatchStatementSeq::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCatchStatementSeq::post_construction_initialization()
*/
/*!\fn void SgCatchStatementSeq::append_catch_statement(SgStatement *element)
*/
/*!\fn void SgCatchStatementSeq::insert_catch_statement(const std::vector < SgStatement * , std::allocator< SgStatement * > > ::iterator &list,SgStatement *element)
*/
/*!\fn void SgCatchStatementSeq::prepend_catch_statement(SgStatement *element)
*/
/*!
\fn SgStatementPtrList &SgCatchStatementSeq::get_catch_statement_seq()
\brief Access function for p_catch_statement_seq.See  &SgCatchStatementSeq::catch_statement_seq for documentation 
\return Returns non-const reference to SgStatementPtrList.
*/
/*!
\fn const SgStatementPtrList &SgCatchStatementSeq::get_catch_statement_seq() const
\brief Access function for p_catch_statement_seq.See  const
catch_statement_seq for documentation 
\return Returns const reference to SgStatementPtrList.
*/
/*!\fn virtual SgNode *SgCatchStatementSeq::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgCatchStatementSeq::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgCatchStatementSeq::get_numberOfTraversalSuccessors()
\brief \brief See  SgCatchStatementSeq::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgCatchStatementSeq::get_traversalSuccessorContainer()
\brief \brief See  SgCatchStatementSeq::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgCatchStatementSeq::get_traversalSuccessorNamesContainer()
\brief \brief See  SgCatchStatementSeq::traversalSuccessorNamesContainer for documentation */
/*!\fn SgCatchStatementSeq::SgCatchStatementSeq()
*/
//@}
int SAGE_Doxygen_Dummy_139302182716110;
