/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateArgument
//////////////////////////////////////////////////////////////////////////
/*!
\class SgTemplateArgument
\brief This class represents template argument within the use of a template to build an instantiation.
    The template argument is used for the instatiation of templates.  They can also have
    default values and not be specified explicitly.
\internal Note that this is not the same as a template parameter, which appears in the
    template declaration as a placeholder for template argument in the declaration of the
    template.
\todo Move this be a SgLocatedNode since it should have a position in the source code.
\sa
\ref SgTemplateArgument_usage  "Example of using a SgTemplateArgument object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateArgument data members
/////////////////////////////////////////////////////////////////////////
/*!
\var SgTemplateArgument::p_arumentType
\brief This is the type of the argument specificed to the template in the instantiation of
    the template.
\internal  
*/
/*!
\var SgTemplateArgument::p_templateInstantiation
\brief This is the associated template instantiation.
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateArgument member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgTemplateArgument::~SgTemplateArgument()
\brief This is the destructor.
   There is nothing to delete in this object.
*/
/*!
\fn SgTemplateArgument::isSgTemplateArgument (SgNode *s)
\brief Cast function (from derived class to SgTemplateArgument pointer).
   This functions returns a SgTemplateArgument pointer for any input of a 
pointer to an object derived from a SgTemplateArgument.
\return Returns valid pointer to SgTemplateArgument if input is derived from a SgLocatedNode.
*/
/*!
\fn SgTemplateArgument::isSgTemplateArgument (const SgNode *s)
\brief Cast function (from derived class to SgTemplateArgument pointer).
   This functions returns a SgTemplateArgument pointer for any input of a 
pointer to an object derived from a SgTemplateArgument.
\return Returns valid pointer to SgTemplateArgument if input is derived from a SgLocatedNode.
*/
/*!
\fn set_type ( SgType *type )
\brief This function sets the argumentType.
\return Returns void.
*/
/*!
\fn set_expression ( SgExpression *exp )
\brief This function sets the argumentExpression.
\return Returns void.
*/
/*!
\fn set_templateInstantiation ( SgTemplateInstantiationDecl *expression )
\brief This function sets the argumentExpression.
\return Returns void.
*/
/*!
\fn SgTemplateInstantiationDecl* SgTemplateArgument::get_templateInstantiation () const
\brief This function returns templateInstantiation.
\return Returns SgTemplateInstantiationDecl pointer.
*/
/*! \name Class Members*/
//@{
/*!
\var SgExpression *SgTemplateArgument::p_expression
\brief This is the template argument's reference to an expression (if it is an expression).
    This pointer is valid if the argumentType is "nontype_argument".
*/
/*!\var SgTemplateDeclaration *SgTemplateArgument::p_templateDeclaration
*/
/*!
\var SgType *SgTemplateArgument::p_type
\brief This is the template argument's reference to a type (if it is a type).
    This pointer is valid if the argumentType is "type_argument".
*/
/*!
\var bool SgTemplateArgument::p_isArrayBoundUnknownType
\brief Template arguments can be used as array bounds, if so this this marks the arguments
    use as such.
*/
/*!\var enum SgTemplateArgument::template_argument_enum SgTemplateArgument::p_argumentType
*/
/*!
\var bool SgTemplateArgument::p_explicitlySpecified
\brief This true only if for a function template the argument is explicit in the source
    code (it need not always be.)
   For template<typename T> void foo(T t); 
   we could specify:
      -# foo(1.0);
   or:
      -# foo<float>(1.0);
   only in the second case is the template argument explicit.  For all instantiated 
   member function templates the value is false.
\internal 
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgTemplateArgument::SgTemplateArgument(SgExpression *parameter,bool explicitlySpecified)
\brief Constructor used with expressions.
\internal 
\sa 
\ref SgTemplateArgument_create "Example:create an SgTemplateArgument object"
*/
/*!
\fn SgTemplateArgument::SgTemplateArgument(SgTemplateDeclaration *parameter,bool explicitlySpecified)
\brief Constructor used with template instantiations.
\internal 
\sa 
\ref SgTemplateArgument_create "Example:create an SgTemplateArgument object"
*/
/*!
\fn SgTemplateArgument::SgTemplateArgument(SgType *parameter,bool explicitlySpecified)
\brief Constructor used with types.
\internal 
\sa 
\ref SgTemplateArgument_create "Example:create an SgTemplateArgument object"
*/
/*!
\fn SgTemplateArgument::SgTemplateArgument(const SgTemplateArgumentStorageClass &source)
   \brief This the copy constructor (deep copy made).
\internal This constructor does a deep copy of all data in the SgTemplateArgument object.
\sa 
\ref SgTemplateArgument_create "Example:create an SgTemplateArgument object"
*/
/*!\fn inline static void SgTemplateArgument::operator delete(void *pointer)
*/
/*!\fn static SgTemplateArgument *SgTemplateArgument::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgTemplateArgument::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgTemplateArgument::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgTemplateArgument::initializeStorageClassArray(SgTemplateArgumentStorageClass *storageArray)
*/
/*!\fn static void SgTemplateArgument::clearMemoryPool()
*/
/*!\fn static void SgTemplateArgument::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgTemplateArgument::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgTemplateArgument::roseRTI()
*/
/*!\fn virtual SgNode *SgTemplateArgument::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgTemplateArgument::~SgTemplateArgument()
*/
/*!\fn virtual void SgTemplateArgument::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateArgument::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateArgument::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateArgument::post_construction_initialization()
*/
/*!
\fn void SgTemplateArgument::set_argumentType(enum SgTemplateArgument::template_argument_enum argumentType)
\brief This function sets argumentType.
See  argumentType)
argumentType for documentation \return Returns void.
*/
/*!
\fn void SgTemplateArgument::set_explicitlySpecified(bool explicitlySpecified)
\brief This function sets explicitlySpecified.
See  explicitlySpecified)
explicitlySpecified for documentation \return Returns void.
*/
/*!\fn void SgTemplateArgument::set_expression(SgExpression *expression)
\description See  *expression)
expression for documentation */
/*!
\fn void SgTemplateArgument::set_isArrayBoundUnknownType(bool isArrayBoundUnknownType)
\brief This function sets isArrayBoundUnknownType.
See  isArrayBoundUnknownType)
isArrayBoundUnknownType for documentation \return Returns void.
*/
/*!\fn void SgTemplateArgument::set_templateDeclaration(SgTemplateDeclaration *templateDeclaration)
\description See  *templateDeclaration)
templateDeclaration for documentation */
/*!\fn void SgTemplateArgument::set_type(SgType *type)
\description See  *type)
type for documentation */
/*!
\fn SgExpression *SgTemplateArgument::get_expression() const
\brief This function returns argumentExpression.
See  const
expression for documentation \return Returns SgExpression pointer.
*/
/*!\fn SgTemplateDeclaration *SgTemplateArgument::get_templateDeclaration() const
\description See  const
templateDeclaration for documentation */
/*!
\fn SgType *SgTemplateArgument::get_type() const
\brief This function returns argumentType.
See  const
type for documentation \return Returns SgType pointer.
*/
/*!
\fn bool SgTemplateArgument::get_explicitlySpecified() const
\brief This function returns explicitlySpecified.
See  const
explicitlySpecified for documentation \return Returns bool.
*/
/*!
\fn bool SgTemplateArgument::get_isArrayBoundUnknownType() const
\brief This function returns isArrayBoundUnknownType.
See  const
isArrayBoundUnknownType for documentation \return Returns bool.
*/
/*!
\fn enum SgTemplateArgument::template_argument_enum SgTemplateArgument::get_argumentType() const
\brief This function returns argumentType.
See  const
argumentType for documentation \return Returns SgTemplateArgument::template_argument_enum.
*/
/*!\fn virtual SgNode *SgTemplateArgument::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgTemplateArgument::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgTemplateArgument::get_numberOfTraversalSuccessors()
\description See  SgTemplateArgument::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgTemplateArgument::get_traversalSuccessorContainer()
\description See  SgTemplateArgument::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgTemplateArgument::get_traversalSuccessorNamesContainer()
\description See  SgTemplateArgument::traversalSuccessorNamesContainer for documentation */
/*!
\fn SgTemplateArgument::SgTemplateArgument(enum SgTemplateArgument::template_argument_enum argumentType=SgTemplateArgument::argument_undefined,bool isArrayBoundUnknownType=false,SgType *type=(0),SgExpression *expression=(0),SgTemplateDeclaration *templateDeclaration=(0),bool explicitlySpecified=true)
\brief Constructor using all possible parameters.
\internal 
\sa 
\ref SgTemplateArgument_create "Example:create an SgTemplateArgument object"
*/
//@}
int SAGE_Doxygen_Dummy_120171980917807;
