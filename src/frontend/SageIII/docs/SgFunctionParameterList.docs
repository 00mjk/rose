/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionParameterList
//////////////////////////////////////////////////////////////////////////
/*!
\class SgFunctionParameterList
\brief This class represents the concept of a declaration list.
   This class is used in the function declaration IR node (SgFunctionDeclaration).
\internal This class is separated as its own IR node so that the traversals can 
    have either a list or a collection on non-list data members.
\todo Check scopes of variables in function parameter list, should point to function
    definition, if the function definition exists, else they are undefined. If they
    are undefined then we still have to have something for them to point to, we could
    propose that this be the scope of the function declaration (I think this is what is
    done).  The test in the tutorial tests this and it seems to be correct.
\todo Not clear if this should be a declaration statement (might make more sense derived
    from SgSupport, or perhaps from SgLocatedNode (with other IR nodes that are currently 
    derived from SgSupport, see SgLocatedNode for details).
\todo If this should be a SgDeclarationStatement (and there is a reasonable argument for
    this) then perhaps the declaration containing any default parameters should be the
    defining declaration, independent of the defining declaration of the associated
    function declaration.
\sa
\ref SgFunctionParameterList_usage  "Example of using a SgFunctionParameterList object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionParameterList data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionParameterList member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgFunctionParameterList_create "Example:create an SgFunctionParameterList object"
*/
/*!
\fn SgFunctionParameterList::~SgFunctionParameterList()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgFunctionParameterList::isSgFunctionParameterList (SgNode *s)
\brief Cast function (from derived class to SgFunctionParameterList pointer).
   This functions returns a SgFunctionParameterList pointer for any input of a 
pointer to an object derived from a SgFunctionParameterList.
\return Returns valid pointer to SgFunctionParameterList if input is derived from a SgLocatedNode.
*/
/*!
\fn SgFunctionParameterList::isSgFunctionParameterList (const SgNode *s)
\brief Cast function (from derived class to SgFunctionParameterList pointer).
   This functions returns a SgFunctionParameterList pointer for any input of a 
pointer to an object derived from a SgFunctionParameterList.
\return Returns valid pointer to SgFunctionParameterList if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgInitializedNamePtrList SgFunctionParameterList::p_args
\brief STL list of pointers to SgInitializedName object (used for function parameter declarations).
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgFunctionParameterList::SgFunctionParameterList(Sg_File_Info *startOfConstruct)
\brief This is the constructor.
   This constructor builds the SgFunctionParameterList base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn SgFunctionParameterList::SgFunctionParameterList(const SgFunctionParameterListStorageClass &source)
*/
/*!\fn inline static void SgFunctionParameterList::operator delete(void *pointer)
*/
/*!\fn static SgFunctionParameterList *SgFunctionParameterList::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgFunctionParameterList::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgFunctionParameterList::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgFunctionParameterList::initializeStorageClassArray(SgFunctionParameterListStorageClass *storageArray)
*/
/*!\fn static void SgFunctionParameterList::clearMemoryPool()
*/
/*!\fn static void SgFunctionParameterList::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgFunctionParameterList::resetValidFreepointers()
*/
/*!\fn std::vector < SgInitializedName * , std::allocator< SgInitializedName * > > ::iterator SgFunctionParameterList::append_arg(SgInitializedName *element)
*/
/*!\fn std::vector < SgInitializedName * , std::allocator< SgInitializedName * > > ::iterator SgFunctionParameterList::insert_arg(const std::vector < SgInitializedName * , std::allocator< SgInitializedName * > > ::iterator &list,SgInitializedName *element)
*/
/*!\fn std::vector < SgInitializedName * , std::allocator< SgInitializedName * > > ::iterator SgFunctionParameterList::prepend_arg(SgInitializedName *element)
*/
/*!\fn virtual RTIReturnType SgFunctionParameterList::roseRTI()
*/
/*!\fn virtual SgFunctionParameterList::~SgFunctionParameterList()
*/
/*!\fn virtual SgNode *SgFunctionParameterList::copy(SgCopyHelp &help) const
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgFunctionParameterList::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgFunctionParameterList::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgFunctionParameterList::cfgIndexForEnd() const
*/
/*!\fn virtual void SgFunctionParameterList::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgFunctionParameterList::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgFunctionParameterList::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgFunctionParameterList::post_construction_initialization()
*/
/*!
\fn SgInitializedNamePtrList &SgFunctionParameterList::get_args()
\brief Access function for p_args.
See  &SgFunctionParameterList::args for documentation \return Returns reference to SgInitializedNamePtrList.
*/
/*!
\fn const SgInitializedNamePtrList &SgFunctionParameterList::get_args() const
\brief Access function for p_args.
See  const
args for documentation \return Returns a const reference to SgInitializedNamePtrList.
*/
/*!\fn virtual SgName SgFunctionParameterList::get_mangled_name() const
\description See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgFunctionParameterList::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgFunctionParameterList::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgFunctionParameterList::get_numberOfTraversalSuccessors()
\description See  SgFunctionParameterList::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgFunctionParameterList::get_traversalSuccessorContainer()
\description See  SgFunctionParameterList::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgFunctionParameterList::get_traversalSuccessorNamesContainer()
\description See  SgFunctionParameterList::traversalSuccessorNamesContainer for documentation */
/*!\fn SgFunctionParameterList::SgFunctionParameterList()
*/
//@}
int SAGE_Doxygen_Dummy_901555327666;
