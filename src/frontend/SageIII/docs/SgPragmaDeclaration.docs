/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgPragmaDeclaration
//////////////////////////////////////////////////////////////////////////
/*!
\class SgPragmaDeclaration
\brief This class represents the concept of a C Assembler statement (untested).
\sa
\ref SgPragmaDeclaration_usage  "Example of using a SgPragmaDeclaration object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgPragmaDeclaration data members
/////////////////////////////////////////////////////////////////////////
/*! \var SgPragmaDeclaration::p_expr_root
\brief This pointer points to the assember expression. 
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgPragmaDeclaration member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgPragmaDeclaration_create "Example:create an SgPragmaDeclaration object"
*/
/*!
\fn SgPragmaDeclaration::~SgPragmaDeclaration()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgPragmaDeclaration::isSgPragmaDeclaration (SgNode *s)
\brief Cast function (from derived class to SgPragmaDeclaration pointer).
   This functions returns a SgPragmaDeclaration pointer for any input of a 
pointer to an object derived from a SgPragmaDeclaration.
\return Returns valid pointer to SgPragmaDeclaration if input is derived from a SgLocatedNode.
*/
/*!
\fn SgPragmaDeclaration::isSgPragmaDeclaration (const SgNode *s)
\brief Cast function (from derived class to SgPragmaDeclaration pointer).
   This functions returns a SgPragmaDeclaration pointer for any input of a 
pointer to an object derived from a SgPragmaDeclaration.
\return Returns valid pointer to SgPragmaDeclaration if input is derived from a SgLocatedNode.
*/
/*!
\fn SgPragmaDeclaration::get_expr() const
\brief Returns pointer to SgExpression for asm statement.
\return Returns pointer to SgExpression.
*/
/*!
\fn SgPragmaDeclaration::set_expr(SgExpression* expr)
\brief Access function for p_expr_root.
\return Returns void.
*/
/*! \name Class Members*/
//@{
/*!\var SgPragma *SgPragmaDeclaration::p_pragma
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgPragmaDeclaration::SgPragmaDeclaration(Sg_File_Info *startOfConstruct,SgPragma *pragma=(0))
\brief This is the constructor.
   This constructor builds the SgPragmaDeclaration base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn SgPragmaDeclaration::SgPragmaDeclaration(const SgPragmaDeclarationStorageClass &source)
*/
/*!\fn inline static void SgPragmaDeclaration::operator delete(void *pointer)
*/
/*!\fn static SgPragmaDeclaration *SgPragmaDeclaration::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgPragmaDeclaration::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgPragmaDeclaration::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgPragmaDeclaration::initializeStorageClassArray(SgPragmaDeclarationStorageClass *storageArray)
*/
/*!\fn static void SgPragmaDeclaration::clearMemoryPool()
*/
/*!\fn static void SgPragmaDeclaration::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgPragmaDeclaration::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgPragmaDeclaration::roseRTI()
*/
/*!\fn virtual SgNode *SgPragmaDeclaration::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgPragmaDeclaration::~SgPragmaDeclaration()
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgPragmaDeclaration::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgPragmaDeclaration::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgPragmaDeclaration::cfgIndexForEnd() const
*/
/*!\fn virtual void SgPragmaDeclaration::post_construction_initialization()
*/
/*!\fn void SgPragmaDeclaration::set_pragma(SgPragma *pragma)
\description See  *pragma)
pragma for documentation */
/*!\fn SgPragma *SgPragmaDeclaration::get_pragma() const
\description See  const
pragma for documentation */
/*!\fn virtual SgName SgPragmaDeclaration::get_mangled_name() const
\description See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgPragmaDeclaration::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgPragmaDeclaration::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgPragmaDeclaration::get_numberOfTraversalSuccessors()
\description See  SgPragmaDeclaration::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgPragmaDeclaration::get_traversalSuccessorContainer()
\description See  SgPragmaDeclaration::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgPragmaDeclaration::get_traversalSuccessorNamesContainer()
\description See  SgPragmaDeclaration::traversalSuccessorNamesContainer for documentation */
/*!\fn SgPragmaDeclaration::SgPragmaDeclaration(SgPragma *pragma)
*/
//@}
int SAGE_Doxygen_Dummy_26579107813518;
