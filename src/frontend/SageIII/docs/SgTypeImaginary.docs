/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTypeImaginary
//////////////////////////////////////////////////////////////////////////
/*!
\class SgTypeImaginary
\brief This class represents a C99 complex type.
   This type can be used in only C and C99 codes, the syntax is "_Imaginary".
This is added to support C and C99 complex support.
\sa
\ref SgTypeImaginary_usage  "Example of using a SgTypeImaginary object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTypeImaginary data members
/////////////////////////////////////////////////////////////////////////
/* Not variables here */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTypeImaginary member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgTypeImaginary::~SgTypeImaginary()
\brief This is the destructor.
   There is nothing to delete in this object.
*/
/*!
\fn SgTypeImaginary::isSgTypeImaginary (SgNode *s)
\brief Cast function (from derived class to SgTypeImaginary pointer).
   This functions returns a SgTypeImaginary pointer for any input of a 
pointer to an object derived from a SgTypeImaginary.
\return Returns valid pointer to SgTypeImaginary if input is derived from a SgLocatedNode.
*/
/*!
\fn SgTypeImaginary::isSgTypeImaginary (const SgNode *s)
\brief Cast function (from derived class to SgTypeImaginary pointer).
   This functions returns a SgTypeImaginary pointer for any input of a 
pointer to an object derived from a SgTypeImaginary.
\return Returns valid pointer to SgTypeImaginary if input is derived from a SgTypeImaginary node.
*/
/*! \name Class Members*/
//@{
/*!\var static SgTypeImaginary *SgTypeImaginary::p_builtin_double_complex
*/
/*!\var static SgTypeImaginary *SgTypeImaginary::p_builtin_float_complex
*/
/*!\var static SgTypeImaginary *SgTypeImaginary::p_builtin_long_double_complex
*/
/*!\var enum SgTypeImaginary::floating_point_precision_enum SgTypeImaginary::p_precision
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgTypeImaginary::SgTypeImaginary(const SgTypeImaginaryStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgTypeImaginary base class.
\sa 
\ref SgTypeImaginary_create "Example:create an SgTypeImaginary object"
*/
/*!\fn inline static void SgTypeImaginary::operator delete(void *pointer)
*/
/*!\fn static SgTypeImaginary *SgTypeImaginary::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgTypeImaginary::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgTypeImaginary::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgTypeImaginary::initializeStorageClassArray(SgTypeImaginaryStorageClass *storageArray)
*/
/*!\fn static void SgTypeImaginary::clearMemoryPool()
*/
/*!\fn static void SgTypeImaginary::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgTypeImaginary::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgTypeImaginary::roseRTI()
*/
/*!\fn virtual SgNode *SgTypeImaginary::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgTypeImaginary::~SgTypeImaginary()
*/
/*!\fn void SgTypeImaginary::set_precision(enum SgTypeImaginary::floating_point_precision_enum precision)
\brief \brief See  precision)
precision for documentation */
/*!\fn enum SgTypeImaginary::floating_point_precision_enum SgTypeImaginary::get_precision() const
\brief \brief See  const
precision for documentation */
/*!\fn virtual SgNode *SgTypeImaginary::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgTypeImaginary::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgTypeImaginary::get_numberOfTraversalSuccessors()
\brief \brief See  SgTypeImaginary::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgTypeImaginary::get_traversalSuccessorContainer()
\brief \brief See  SgTypeImaginary::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgTypeImaginary::get_traversalSuccessorNamesContainer()
\brief \brief See  SgTypeImaginary::traversalSuccessorNamesContainer for documentation */
/*!\fn SgTypeImaginary::SgTypeImaginary(enum SgTypeImaginary::floating_point_precision_enum precision=SgTypeImaginary::e_errorPrecision)
*/
//@}
int SAGE_Doxygen_Dummy_15048313668841;
