/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionDefinition
//////////////////////////////////////////////////////////////////////////
/*!
\class SgFunctionDefinition
\brief This class represents the concept of a scope in C++ (e.g. global scope, fuction scope, etc.).
    Scopes are an important aspect of language design. They allow
declarations to have a local context and so promote good programming style.
Scope statments in C++ include a number of different kinds of statements;
the SgFunctionDefinition is a base class for these. Each scope statement contains
a symbol table and the SgFunctionDefinitions role is mostly to provide this
symbol table and an interface to accessing it.
\internal This is a base class for scope statements.
*/
/*
\sa
\ref SgFunctionDefinition_usage  "Example of using a SgFunctionDefinition object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionDefinition data members
/////////////////////////////////////////////////////////////////////////
/*! \var SgFunctionDefinition::p_par_flag
\brief This is a bool value left over from CC++. 
\internal This can be removed at some point.
\deprecated This variable is left over from CC++ and can be removed.
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionDefinition member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgFunctionDefinition_create "Example:create an SgFunctionDefinition object"
*/
/*!
\fn SgFunctionDefinition::~SgFunctionDefinition()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgFunctionDefinition::isSgFunctionDefinition (SgNode *s)
\brief Cast function (from derived class to SgFunctionDefinition pointer).
   This functions returns a SgFunctionDefinition pointer for any input of a 
pointer to an object derived from a SgFunctionDefinition.
\return Returns valid pointer to SgFunctionDefinition if input is derived from a SgLocatedNode.
*/
/*!
\fn SgFunctionDefinition::isSgFunctionDefinition (const SgNode *s)
\brief Cast function (from derived class to SgFunctionDefinition pointer).
   This functions returns a SgFunctionDefinition pointer for any input of a 
pointer to an object derived from a SgFunctionDefinition.
\return Returns valid pointer to SgFunctionDefinition if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgBasicBlock *SgFunctionDefinition::p_body
\brief This pointer is always valid and points to a SgBasicBlock holding all the
    statements in the function.
\internal 
*/
/*!\var std::map< SgNode * , int  , std::less< SgNode * >  , std::allocator< std::pair< SgNode *const  , int  >  >  > SgFunctionDefinition::p_scope_number_list
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgFunctionDefinition::SgFunctionDefinition(SgFunctionDeclaration *d,SgBasicBlock *body)
*/
/*!\fn SgFunctionDefinition::SgFunctionDefinition(Sg_File_Info *f,SgFunctionDeclaration *d,SgBasicBlock *body=(0))
*/
/*!
\fn SgFunctionDefinition::SgFunctionDefinition(Sg_File_Info *startOfConstruct,SgBasicBlock *body=(0))
\brief This is the constructor.
   This constructor builds the SgFunctionDefinition base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn SgFunctionDefinition::SgFunctionDefinition(const SgFunctionDefinitionStorageClass &source)
*/
/*!\fn inline static void SgFunctionDefinition::operator delete(void *pointer)
*/
/*!\fn static SgFunctionDefinition *SgFunctionDefinition::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgFunctionDefinition::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgFunctionDefinition::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgFunctionDefinition::initializeStorageClassArray(SgFunctionDefinitionStorageClass *storageArray)
*/
/*!\fn static void SgFunctionDefinition::clearMemoryPool()
*/
/*!\fn static void SgFunctionDefinition::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgFunctionDefinition::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgFunctionDefinition::roseRTI()
*/
/*!\fn virtual SgFunctionDefinition::~SgFunctionDefinition()
*/
/*!
\fn virtual SgNode *SgFunctionDefinition::copy(SgCopyHelp &help) const
\brief Makes a copy (deap of shallow depending on SgCopyHelp).
\return Returns pointer to copy of SgFunctionDefinition.
*/
/*!\fn virtual bool SgFunctionDefinition::cfgIsIndexInteresting(unsigned int ) const
*/
/*!\fn virtual bool SgFunctionDefinition::replace_child(SgStatement *,SgStatement *,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgFunctionDefinition::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgFunctionDefinition::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgFunctionDefinition::cfgFindChildIndex(SgNode *n)
*/
/*!\fn virtual unsigned int SgFunctionDefinition::cfgIndexForEnd() const
*/
/*!\fn virtual void SgFunctionDefinition::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgFunctionDefinition::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgFunctionDefinition::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgFunctionDefinition::post_construction_initialization()
*/
/*!\fn void SgFunctionDefinition::append_statement(SgStatement *what)
*/
/*!\fn void SgFunctionDefinition::clearScopeNumbers()
*/
/*!\fn void SgFunctionDefinition::prepend_statement(SgStatement *what)
*/
/*!\fn void SgFunctionDefinition::resetScopeNumbers()
*/
/*!
\fn void SgFunctionDefinition::set_body(SgBasicBlock *body)
\brief Access function for p_body.
See  *body)
body for documentation \param body SgBasicBlock pointer
\return Returns void.
*/
/*!\fn void SgFunctionDefinition::set_declaration(SgFunctionDeclaration *new_val)
\description See  *new_val)
declaration for documentation */
/*!
\fn SgBasicBlock *SgFunctionDefinition::get_body() const
\brief Access function for p_body.
See  const
body for documentation \return Returns a pointer to a SgBasicBlock.
*/
/*!\fn SgFunctionDeclaration *SgFunctionDefinition::get_declaration() const
\description See  const
declaration for documentation */
/*!\fn int SgFunctionDefinition::get_scope_number(const SgNode *scope) const
\description See  const
scope_number for documentation */
/*!\fn std::map< SgNode * , int  , std::less< SgNode * >  , std::allocator< std::pair< SgNode *const  , int  >  >  > &SgFunctionDefinition::get_scope_number_list()
\description See  &SgFunctionDefinition::scope_number_list for documentation */
/*!\fn virtual SgName SgFunctionDefinition::get_mangled_name() const
\description See  const
mangled_name for documentation */
/*!
\fn virtual SgName SgFunctionDefinition::get_qualified_name() const
\brief Returns SgName (a string) representing the name of the current scope.
   See discussion of mangled names in the documentation.
See  const
qualified_name for documentation \return Returns SgName (a string).
*/
/*!\fn virtual SgNode *SgFunctionDefinition::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgFunctionDefinition::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgFunctionDefinition::get_numberOfTraversalSuccessors()
\description See  SgFunctionDefinition::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgFunctionDefinition::get_traversalSuccessorContainer()
\description See  SgFunctionDefinition::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgFunctionDefinition::get_traversalSuccessorNamesContainer()
\description See  SgFunctionDefinition::traversalSuccessorNamesContainer for documentation */
/*!\fn SgFunctionDefinition::SgFunctionDefinition(SgBasicBlock *body)
*/
//@}
int SAGE_Doxygen_Dummy_9831235872010;
