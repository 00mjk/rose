/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgMemberFunctionRefExp
//////////////////////////////////////////////////////////////////////////
/*!
\class SgMemberFunctionRefExp
\brief This class represents the member function being called and must be assembled in the
    SgFunctionCall with the function arguments.
\internal 
\sa
\ref SgMemberFunctionRefExp_usage  "Example of using a SgMemberFunctionRefExp object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgMemberFunctionRefExp data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgMemberFunctionRefExp member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
      NOT IMPELEMENTED IN C++ SOURCE CODE
\fn SgMemberFunctionRefExp::SgMemberFunctionRefExp (const SgMemberFunctionRefExp &X)
\brief Copy constructor (made private to prevent being called by accident).
*/
/*!
\fn SgMemberFunctionRefExp::~SgMemberFunctionRefExp()
\brief This is the destructor.
   Only the Sg_File_Info object can be deleted in this object.
*/
/*!
\fn SgMemberFunctionRefExp::isSgMemberFunctionRefExp (SgNode *s)
\brief Cast function (from derived class to SgMemberFunctionRefExp pointer).
   This functions returns a SgMemberFunctionRefExp pointer for any input of a 
pointer to an object derived from a SgMemberFunctionRefExp.
\return Returns valid pointer to SgMemberFunctionRefExp if input is derived from a SgMemberFunctionRefExp.
*/
/*!
\fn SgMemberFunctionRefExp::isSgMemberFunctionRefExp (const SgNode *s)
\brief Cast function (from derived class to SgMemberFunctionRefExp pointer).
   This functions returns a SgMemberFunctionRefExp pointer for any input of a 
pointer to an object derived from a SgMemberFunctionRefExp.
\return Returns valid pointer to SgMemberFunctionRefExp if input is derived from a SgMemberFunctionRefExp.
*/
/*!
\fn SgMemberFunctionRefExp::set_type()
\brief Set the type associated with this expression
   This is an internally called function, it sets up the type of the expression 
based upon the types of the subexpressions (if any). Thus it takes no 
arguments.
\return Returns void
*/
/*! \name Class Members*/
//@{
/*!
\var SgFunctionType *SgMemberFunctionRefExp::p_function_type
\brief This is a pointer to the SgFunctionType associated with this member function reference.
\internal Notice that it can be a SgFunctionType or any thing derived from that class.
*/
/*!
\var SgMemberFunctionSymbol *SgMemberFunctionRefExp::p_symbol_i
\brief This is the SgMemberFunctionSymbol.
     This binds the function reference to the member function declaration.
Note that all SgSymbol objects are shared (just like SgType objects)
*/
/*!
\var int SgMemberFunctionRefExp::p_virtual_call
\brief This boolean value marks if the function reference is a virtual function.
*/
/*!
\var int SgMemberFunctionRefExp::p_need_qualifier
\brief This boolean value marks if name qualification is required.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgMemberFunctionRefExp::SgMemberFunctionRefExp(Sg_File_Info *startOfConstruct,SgMemberFunctionSymbol *symbol_i=(0),int virtual_call=0,SgFunctionType *function_type=(0),int need_qualifier=(true))
*/
/*!
\fn SgMemberFunctionRefExp::SgMemberFunctionRefExp(const SgMemberFunctionRefExpStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgMemberFunctionRefExp base class.
\param startOfConstruct represents the position in the source code
\sa 
\ref SgMemberFunctionRefExp_create "Example:create an SgMemberFunctionRefExp object"
*/
/*!\fn inline static void SgMemberFunctionRefExp::operator delete(void *pointer)
*/
/*!\fn static SgMemberFunctionRefExp *SgMemberFunctionRefExp::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgMemberFunctionRefExp::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgMemberFunctionRefExp::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgMemberFunctionRefExp::initializeStorageClassArray(SgMemberFunctionRefExpStorageClass *storageArray)
*/
/*!\fn static void SgMemberFunctionRefExp::clearMemoryPool()
*/
/*!\fn static void SgMemberFunctionRefExp::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgMemberFunctionRefExp::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgMemberFunctionRefExp::roseRTI()
*/
/*!\fn virtual SgMemberFunctionRefExp::~SgMemberFunctionRefExp()
*/
/*!\fn virtual SgNode *SgMemberFunctionRefExp::copy(SgCopyHelp &help) const
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgMemberFunctionRefExp::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgMemberFunctionRefExp::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgMemberFunctionRefExp::cfgIndexForEnd() const
*/
/*!\fn virtual void SgMemberFunctionRefExp::post_construction_initialization()
*/
/*!\fn void SgMemberFunctionRefExp::set_need_qualifier(int need_qualifier)
\description See  need_qualifier)
need_qualifier for documentation */
/*!\fn void SgMemberFunctionRefExp::set_symbol(SgMemberFunctionSymbol *symbol)
\description See  *symbol)
symbol for documentation */
/*!\fn void SgMemberFunctionRefExp::set_symbol_i(SgMemberFunctionSymbol *symbol_i)
\description See  *symbol_i)
symbol_i for documentation */
/*!\fn void SgMemberFunctionRefExp::set_virtual_call(int virtual_call)
\description See  virtual_call)
virtual_call for documentation */
/*!\fn SgMemberFunctionSymbol *SgMemberFunctionRefExp::get_symbol() const
\description See  const
symbol for documentation */
/*!\fn SgMemberFunctionSymbol *SgMemberFunctionRefExp::get_symbol_i() const
\description See  const
symbol_i for documentation */
/*!\fn int SgMemberFunctionRefExp::get_need_qualifier() const
\description See  const
need_qualifier for documentation */
/*!\fn int SgMemberFunctionRefExp::get_virtual_call() const
\description See  const
virtual_call for documentation */
/*!\fn virtual SgNode *SgMemberFunctionRefExp::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!
\fn virtual SgType *SgMemberFunctionRefExp::get_type() const
\brief Get the type associated with this expression
     Note that the return value is either:
   -# SgFunctionType : normal function call
   -# SgMemberFunctionType : normal member function call
   -# SgTypedefType : in the case of a function call from a pointer
   It should always be a vailid pointer.  These details are verified in the AST
   Consistancy Tests.
See  const
type for documentation \return Returns SgType (but not any SgType).
*/
/*!\fn virtual size_t SgMemberFunctionRefExp::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgMemberFunctionRefExp::get_numberOfTraversalSuccessors()
\description See  SgMemberFunctionRefExp::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgMemberFunctionRefExp::get_traversalSuccessorContainer()
\description See  SgMemberFunctionRefExp::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgMemberFunctionRefExp::get_traversalSuccessorNamesContainer()
\description See  SgMemberFunctionRefExp::traversalSuccessorNamesContainer for documentation */
/*!\fn SgMemberFunctionRefExp::SgMemberFunctionRefExp(SgMemberFunctionSymbol *symbol_i,int virtual_call,SgFunctionType *function_type,int need_qualifier)
*/
//@}
int SAGE_Doxygen_Dummy_22271623519195;
