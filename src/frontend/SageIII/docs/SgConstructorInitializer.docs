/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConstructorInitializer
//////////////////////////////////////////////////////////////////////////
/*!
\class SgConstructorInitializer
\brief This class represents the notion of an initializer for a variable declaration or
    expression in a function call argument list.
    There are no direct uses of this IR node anywhere.  All initializers
are derived from this IR node to build derived classes such as SgConstructorInitializer,
SgAssignInitializer, and SgAggregateInitializer.
\internal This is a base class for all initializers.
\sa
\ref SgConstructorInitializer_usage  "Example of using a SgConstructorInitializer object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConstructorInitializer data members
/////////////////////////////////////////////////////////////////////////
/*
// DQ (8/5/2006): This data member has been removed to make this class more general
//                (e.g. construcotrs of primative types).
\var SgConstructorInitializer::p_class_decl
\brief This points to the associated class declaration for this constructor.
\internal This can at times be a NULL pointer, e.g. calls to unimplemented default constructors, if so then the bool valued variable
    "p_associated_class_unknown" is always true.
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConstructorInitializer member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\fn SgConstructorInitializer::SgConstructorInitializer (const SgConstructorInitializer &X)
\brief Copy constructor (made private to prevent being called by accident).
*/
/*!
\fn SgConstructorInitializer::~SgConstructorInitializer()
\brief This is the destructor.
   Only the Sg_File_Info object can be deleted in this object.
*/
/*!
\fn SgConstructorInitializer::isSgConstructorInitializer (SgNode *s)
\brief Cast function (from derived class to SgConstructorInitializer pointer).
   This functions returns a SgConstructorInitializer pointer for any input of a 
pointer to an object derived from a SgConstructorInitializer.
\return Returns valid pointer to SgConstructorInitializer if input is derived from a SgConstructorInitializer.
*/
/*!
\fn SgConstructorInitializer::isSgConstructorInitializer (const SgNode *s)
\brief Cast function (from derived class to SgConstructorInitializer pointer).
   This functions returns a SgConstructorInitializer pointer for any input of a 
pointer to an object derived from a SgConstructorInitializer.
\return Returns valid pointer to SgConstructorInitializer if input is derived from a SgConstructorInitializer.
*/
/*! \name Class Members*/
//@{
/*!
\var SgExprListExp *SgConstructorInitializer::p_args
\brief This points to the argument list of the associated constructor call.
\internal Note that this pointer is always a valid pointer, even if the constructor and class
    declaration pointers are NULL.  This list can also be empty, but the poitner to the
    list is always valid.
*/
/*!
\var SgMemberFunctionDeclaration *SgConstructorInitializer::p_declaration
\brief This points to the associated member function declaration (a constructor).
   Note that this pointer can be NULL if no such constructor is defined (e.g. compiler
generated default constructor).
\internal Constructors not explicit in the source code are not presently generated in ROSE
    if there were to be generated in the future they will be marked as compiler generated
    and likely we can then enforce that this be a valid pointer.  This variable is an
    exception to the general rule that we have no NULL pointes within the AST.
*/
/*!
\var SgType *SgConstructorInitializer::p_expression_type
\brief This points to the associated type for this constructor.
\internal This pointer should always be valid,
    "p_associated_class_unknown" is true iff "p_expression_type" is not a SgClassType.
*/
/*!
\var bool SgConstructorInitializer::p_need_name
\brief This bool value controls the output of the class name.
   This might be somewhat redundant with the explicit vs. implement representation in the
    source code (recorded in another flag of the SgExpression base class).
*/
/*!
\var bool SgConstructorInitializer::p_need_parenthesis_after_name
\brief This bool value controls the output of "()" after the class name.
    The controls the output at "class X x;" or "class X x();".
*/
/*!
\var bool SgConstructorInitializer::p_need_qualifier
\brief This bool value controls the output of the class names qualifier.
\internal The qualifier is currently always output. This variable is not used.
*/
/*!
\var bool SgConstructorInitializer::p_associated_class_unknown
\brief This bool value indicates when p_declaration should be a valid pointer.
    If true, then p_declaration is NULL, else if false, then p_declaration should 
be a valid pointer.
\todo Enforce p_declaration is valid pointer when p_associated_class_unknown is false 
    within AST consistency tests.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgConstructorInitializer::SgConstructorInitializer(Sg_File_Info *startOfConstruct,SgMemberFunctionDeclaration *declaration=(0),SgExprListExp *args=(0),SgType *expression_type=(0),bool need_name=false,bool need_qualifier=false,bool need_parenthesis_after_name=false,bool associated_class_unknown=false)
*/
/*!
\fn SgConstructorInitializer::SgConstructorInitializer(const SgConstructorInitializerStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgConstructorInitializer base class.
\param startOfConstruct represents the position in the source code
\sa 
\ref SgConstructorInitializer_create "Example:create an SgConstructorInitializer object"
*/
/*!\fn inline static void SgConstructorInitializer::operator delete(void *pointer)
*/
/*!\fn static SgConstructorInitializer *SgConstructorInitializer::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgConstructorInitializer::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgConstructorInitializer::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgConstructorInitializer::initializeStorageClassArray(SgConstructorInitializerStorageClass *storageArray)
*/
/*!\fn static void SgConstructorInitializer::clearMemoryPool()
*/
/*!\fn static void SgConstructorInitializer::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgConstructorInitializer::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgConstructorInitializer::roseRTI()
*/
/*!\fn virtual SgConstructorInitializer::~SgConstructorInitializer()
*/
/*!\fn virtual SgNode *SgConstructorInitializer::copy(SgCopyHelp &help) const
*/
/*!\fn virtual int SgConstructorInitializer::replace_expression(SgExpression *,SgExpression *)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgConstructorInitializer::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgConstructorInitializer::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual void SgConstructorInitializer::post_construction_initialization()
*/
/*!\fn void SgConstructorInitializer::set_args(SgExprListExp *args)
\brief \brief See  *args)
args for documentation */
/*!\fn void SgConstructorInitializer::set_associated_class_unknown(bool associated_class_unknown)
\brief \brief See  associated_class_unknown)
associated_class_unknown for documentation */
/*!\fn void SgConstructorInitializer::set_declaration(SgMemberFunctionDeclaration *declaration)
\brief \brief See  *declaration)
declaration for documentation */
/*!
\fn void SgConstructorInitializer::set_expression_type(SgType *expression_type)
\brief Access function for p_expression_type.See  *expression_type)
expression_type for documentation 
\param required - sets value of internal p_expression_type.
\return Returns void.
*/
/*!
\fn void SgConstructorInitializer::set_need_name(bool need_name)
\brief This function allows the p_need_name flag to be set (used internally).See  need_name)
need_name for documentation 
\param required - sets value of internal p_need_name flag.
\return Returns void.
*/
/*!\fn void SgConstructorInitializer::set_need_parenthesis_after_name(bool need_parenthesis_after_name)
\brief \brief See  need_parenthesis_after_name)
need_parenthesis_after_name for documentation */
/*!\fn void SgConstructorInitializer::set_need_qualifier(bool need_qualifier)
\brief \brief See  need_qualifier)
need_qualifier for documentation */
/*!\fn SgExprListExp *SgConstructorInitializer::get_args() const
\brief \brief See  const
args for documentation */
/*!\fn SgExpression *SgConstructorInitializer::get_next(int &n) const
\brief \brief See  const
next for documentation */
/*!\fn SgMemberFunctionDeclaration *SgConstructorInitializer::get_declaration() const
\brief \brief See  const
declaration for documentation */
/*!
\fn SgType *SgConstructorInitializer::get_expression_type() const
\brief Access function for p_expression_type, returns pointer to SgType associated with constructor.See  const
expression_type for documentation 
   This is usually a SgClassType, but it can also be a primative type
(typically in association with a new operator).
\return Returns pointer to SgType.
*/
/*!\fn bool SgConstructorInitializer::get_associated_class_unknown() const
\brief \brief See  const
associated_class_unknown for documentation */
/*!
\fn bool SgConstructorInitializer::get_need_name() const
\brief returns bool value if name is required in code generation then return true.See  const
need_name for documentation 
\return Returns bool value.
*/
/*!\fn bool SgConstructorInitializer::get_need_parenthesis_after_name() const
\brief \brief See  const
need_parenthesis_after_name for documentation */
/*!\fn bool SgConstructorInitializer::get_need_qualifier() const
\brief \brief See  const
need_qualifier for documentation */
/*!\fn virtual SgNode *SgConstructorInitializer::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual SgType *SgConstructorInitializer::get_type() const
\brief \brief See  const
type for documentation */
/*!\fn virtual size_t SgConstructorInitializer::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgConstructorInitializer::get_numberOfTraversalSuccessors()
\brief \brief See  SgConstructorInitializer::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgConstructorInitializer::get_traversalSuccessorContainer()
\brief \brief See  SgConstructorInitializer::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgConstructorInitializer::get_traversalSuccessorNamesContainer()
\brief \brief See  SgConstructorInitializer::traversalSuccessorNamesContainer for documentation */
/*!\fn SgConstructorInitializer::SgConstructorInitializer(SgMemberFunctionDeclaration *declaration,SgExprListExp *args,SgType *expression_type,bool need_name,bool need_qualifier,bool need_parenthesis_after_name,bool associated_class_unknown)
*/
//@}
int SAGE_Doxygen_Dummy_152882245117150;
