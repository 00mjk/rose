/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionCallExp
//////////////////////////////////////////////////////////////////////////
/*!
\class SgFunctionCallExp
\brief This class represents the concept of a C++ function call (which is an expression).
    Note that a function call is assembled from a function expression and arguments.
The two are bound together in a function call, function expressions are never called
directly (the function call argument list can be empty).
\internal When overloaded operators are used the function name becomes the name of the
    operator (e.g. "operator+").  In these cases the precedence of the operator is that
    of the operator being overloaded and is different from a normal function call.  Most
    of this detail is hidden since operands in the expression tree are represented by functions
    with parameter lists (represented by a SgExprListExp), and not simple expression trees.
\sa
\ref SgFunctionCallExp_usage  "Example of using a SgFunctionCallExp object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionCallExp data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionCallExp member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgFunctionCallExp_create "Example:create an SgFunctionCallExp object"
*/
/*!
\fn SgFunctionCallExp::~SgFunctionCallExp()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgFunctionCallExp::isSgFunctionCallExp (SgNode *s)
\brief Cast function (from derived class to SgFunctionCallExp pointer).
   This functions returns a SgFunctionCallExp pointer for any input of a 
pointer to an object derived from a SgFunctionCallExp.
\return Returns valid pointer to SgFunctionCallExp if input is derived from a SgLocatedNode.
*/
/*!
\fn SgFunctionCallExp::isSgFunctionCallExp (const SgNode *s)
\brief Cast function (from derived class to SgFunctionCallExp pointer).
   This functions returns a SgFunctionCallExp pointer for any input of a 
pointer to an object derived from a SgFunctionCallExp.
\return Returns valid pointer to SgFunctionCallExp if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgExprListExp *SgFunctionCallExp::p_args
\brief This is a pointer to a SgExprListExp (list of function arguments)
*/
/*! \var SgExpression *SgFunctionCallExp::p_function
\brief This pointer points to the expression being assembled with argments for be a
    function call.
    Note that this is not always a SgFunctionRefExp or a SgMemberFunctionRefExp
and can be quite complex where pointers are referenced and function calls assembled using
pointers to functions and member functions.
\internal The list of acceptable types of IR nodes here is listed and tested in the AST
    consistency tests (see src/midend/astDiagnostics/AstConsistencyTests.C for details).
*/
/*! \var SgType *SgFunctionCallExp::p_expression_type
\brief This is the type of the return value of the function.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgFunctionCallExp::SgFunctionCallExp(Sg_File_Info *startOfConstruct,SgExpression *function=(0),SgExprListExp *args=(0),SgType *expression_type=(0))
*/
/*!
\fn SgFunctionCallExp::SgFunctionCallExp(const SgFunctionCallExpStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgFunctionCallExp base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn inline static void SgFunctionCallExp::operator delete(void *pointer)
*/
/*!\fn static SgFunctionCallExp *SgFunctionCallExp::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgFunctionCallExp::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgFunctionCallExp::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgFunctionCallExp::initializeStorageClassArray(SgFunctionCallExpStorageClass *storageArray)
*/
/*!\fn static void SgFunctionCallExp::clearMemoryPool()
*/
/*!\fn static void SgFunctionCallExp::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgFunctionCallExp::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgFunctionCallExp::roseRTI()
*/
/*!\fn virtual SgFunctionCallExp::~SgFunctionCallExp()
*/
/*!\fn virtual SgNode *SgFunctionCallExp::copy(SgCopyHelp &help) const
*/
/*!\fn virtual int SgFunctionCallExp::replace_expression(SgExpression *,SgExpression *)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgFunctionCallExp::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgFunctionCallExp::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgFunctionCallExp::cfgIndexForEnd() const
*/
/*!\fn virtual void SgFunctionCallExp::post_construction_initialization()
*/
/*!\fn void SgFunctionCallExp::append_arg(SgExpression *what)
*/
/*!\fn void SgFunctionCallExp::insert_arg(const std::vector < SgExpression * , std::allocator< SgExpression * > > ::iterator &where,SgExpression *what)
*/
/*!\fn void SgFunctionCallExp::set_args(SgExprListExp *args)
\description See  *args)
args for documentation */
/*!\fn void SgFunctionCallExp::set_function(SgExpression *function)
\description See  *function)
function for documentation */
/*!\fn SgExprListExp *SgFunctionCallExp::get_args() const
\description See  const
args for documentation */
/*!\fn SgExpression *SgFunctionCallExp::get_function() const
\description See  const
function for documentation */
/*!\fn SgExpression *SgFunctionCallExp::get_next(int &n) const
\description See  const
next for documentation */
/*!\fn virtual SgNode *SgFunctionCallExp::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual SgType *SgFunctionCallExp::get_type() const
\description See  const
type for documentation */
/*!\fn virtual size_t SgFunctionCallExp::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgFunctionCallExp::get_numberOfTraversalSuccessors()
\description See  SgFunctionCallExp::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgFunctionCallExp::get_traversalSuccessorContainer()
\description See  SgFunctionCallExp::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgFunctionCallExp::get_traversalSuccessorNamesContainer()
\description See  SgFunctionCallExp::traversalSuccessorNamesContainer for documentation */
/*!\fn SgFunctionCallExp::SgFunctionCallExp(SgExpression *function,SgExprListExp *args,SgType *expression_type)
*/
//@}
int SAGE_Doxygen_Dummy_93881419416748;
