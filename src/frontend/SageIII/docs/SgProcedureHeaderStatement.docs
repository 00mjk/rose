/* GENERATED FILE - DO NOT MODIFY */
/*!\class SgProcedureHeaderStatement
*/
/*! \name Class Members*/
//@{
/*!\var SgLabelRefExp *SgProcedureHeaderStatement::p_end_numeric_label
*/
/*!\var enum SgProcedureHeaderStatement::subprogram_kind_enum SgProcedureHeaderStatement::p_subprogram_kind
*/
/*!\var SgInitializedName *SgProcedureHeaderStatement::p_result_name
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgProcedureHeaderStatement::SgProcedureHeaderStatement(Sg_File_Info *startOfConstruct,SgName name=(""),SgFunctionType *type=(0),SgFunctionDefinition *definition=(0))
*/
/*!\fn SgProcedureHeaderStatement::SgProcedureHeaderStatement(const SgProcedureHeaderStatementStorageClass &source)
*/
/*!\fn bool SgProcedureHeaderStatement::isBlockData() const
*/
/*!\fn bool SgProcedureHeaderStatement::isFunction() const
*/
/*!\fn bool SgProcedureHeaderStatement::isSubroutine() const
*/
/*!\fn inline static void SgProcedureHeaderStatement::operator delete(void *pointer)
*/
/*!\fn static SgProcedureHeaderStatement *SgProcedureHeaderStatement::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgProcedureHeaderStatement::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgProcedureHeaderStatement::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgProcedureHeaderStatement::initializeStorageClassArray(SgProcedureHeaderStatementStorageClass *storageArray)
*/
/*!\fn static void SgProcedureHeaderStatement::clearMemoryPool()
*/
/*!\fn static void SgProcedureHeaderStatement::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgProcedureHeaderStatement::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgProcedureHeaderStatement::roseRTI()
*/
/*!\fn virtual SgNode *SgProcedureHeaderStatement::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgProcedureHeaderStatement::~SgProcedureHeaderStatement()
*/
/*!\fn virtual void SgProcedureHeaderStatement::post_construction_initialization()
*/
/*!\fn virtual void SgProcedureHeaderStatement::set_end_numeric_label(SgLabelRefExp *end_numeric_label)
\brief \brief See  *end_numeric_label)
end_numeric_label for documentation */
/*!\fn void SgProcedureHeaderStatement::set_result_name(SgInitializedName *result_name)
\brief \brief See  *result_name)
result_name for documentation */
/*!\fn void SgProcedureHeaderStatement::set_subprogram_kind(enum SgProcedureHeaderStatement::subprogram_kind_enum subprogram_kind)
\brief \brief See  subprogram_kind)
subprogram_kind for documentation */
/*!\fn SgInitializedName *SgProcedureHeaderStatement::get_result_name() const
\brief \brief See  const
result_name for documentation */
/*!\fn SgLabelRefExp *SgProcedureHeaderStatement::get_end_numeric_label() const
\brief \brief See  const
end_numeric_label for documentation */
/*!\fn enum SgProcedureHeaderStatement::subprogram_kind_enum SgProcedureHeaderStatement::get_subprogram_kind() const
\brief \brief See  const
subprogram_kind for documentation */
/*!\fn virtual SgName SgProcedureHeaderStatement::get_mangled_name() const
\brief \brief See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgProcedureHeaderStatement::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgProcedureHeaderStatement::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgProcedureHeaderStatement::get_numberOfTraversalSuccessors()
\brief \brief See  SgProcedureHeaderStatement::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgProcedureHeaderStatement::get_traversalSuccessorContainer()
\brief \brief See  SgProcedureHeaderStatement::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgProcedureHeaderStatement::get_traversalSuccessorNamesContainer()
\brief \brief See  SgProcedureHeaderStatement::traversalSuccessorNamesContainer for documentation */
/*!\fn SgProcedureHeaderStatement::SgProcedureHeaderStatement(SgName name,SgFunctionType *type,SgFunctionDefinition *definition)
*/
//@}
extern int SAGE_Doxygen_Dummy_1158090683;
