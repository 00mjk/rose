/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationDecl
//////////////////////////////////////////////////////////////////////////
/*!
\class SgTemplateInstantiationDecl
\brief This class represents the concept of an instantiated class template.
\internal Objects of this class are marked as compiler-generated if they are instantiated
    by the compiler, but not if they are generated from a specialization (where the user
    has in effect generated it).  A few details:
       - Currently multple declaration have a valid pointer to the
    SgTemplateInstantiationDefn object even though there is only one defining
    declaration.  This is different from functions declarations where only one declaration
    has a valid pointer to the SgFunctionDefinition.  This needs to be made consistant at
    some point.
\todo Make the "*PtrList" typed objects non-pointer data members (lists) instead of
    pointer to lists.
\sa
\ref SgTemplateInstantiationDecl_usage  "Example of using a SgTemplateInstantiationDecl object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationDecl data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationDecl member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgTemplateInstantiationDecl::~SgTemplateInstantiationDecl()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgTemplateInstantiationDecl::isSgTemplateInstantiationDecl (SgNode *s)
\brief Cast function (from derived class to SgTemplateInstantiationDecl pointer).
   This functions returns a SgTemplateInstantiationDecl pointer for any input of a 
pointer to an object derived from a SgTemplateInstantiationDecl.
\return Returns valid pointer to SgTemplateInstantiationDecl if input is derived from a SgLocatedNode.
*/
/*!
\fn SgTemplateInstantiationDecl::isSgTemplateInstantiationDecl (const SgNode *s)
\brief Cast function (from derived class to SgTemplateInstantiationDecl pointer).
   This functions returns a SgTemplateInstantiationDecl pointer for any input of a 
pointer to an object derived from a SgTemplateInstantiationDecl.
\return Returns valid pointer to SgTemplateInstantiationDecl if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*!
\var SgName SgTemplateInstantiationDecl::p_templateHeader
\brief This data field is not used (or is used internally).
   I forget what this name includes.
*/
/*!
\var SgName SgTemplateInstantiationDecl::p_templateName
\brief This is the name of the templated class (excludes template arguments)
\internal This name is computed internally (in AST post-processing) and stored 
    explicitly.  It can be reset by calling resetTemplateName(SgTemplateInstantiationDecl).
*/
/*!
\var SgTemplateArgumentPtrListPtr SgTemplateInstantiationDecl::p_templateArguments
\brief This is a pointer to a list of pointers to SgTemplateArgument objects (used with
    the SgTemplateDeclaration to construct this instantiation).
   The template arguments are used to generate the full template name recorded in
   p_templateName.  All arguments are saved into the argument list, but not all
   arguments are output in the generated code (see SgTemplateArgument for details).
\note Template arguments are found in the instantiations, and template parameters are found
    in the SgTemplateDeclaration (arguments are not the same a parameters, same as for
    descriptions for functions).
*/
/*!
\var SgTemplateDeclaration *SgTemplateInstantiationDecl::p_templateDeclaration
\brief This is the template declarations (SgTemplateDeclaration) from which this template
    instantiation is constructed.  This can be NULL, as I recall, for nested classes.
*/
/*!
\var bool SgTemplateInstantiationDecl::p_nameResetFromMangledForm
\brief This bool value is set to false at construction and later reset to true 
   within post-processing as each instantiated template name is reset from EDG
   names (e.g. "A____L42") to ROSE generated names (e.g. "A<int>").  Either names
   would work as well for some purposes, but for source to source translation purposes
   we wanted the original names to be used (also avoids/simplifies linking issues 
   using generated code with non-generated code).
\internal This variable is set/reset internally and there is no need for it to be set by the user!
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgTemplateInstantiationDecl::SgTemplateInstantiationDecl(Sg_File_Info *startOfConstruct,SgName name=(""),enum SgClassDeclaration::class_types class_type=SgClassDeclaration::e_class,SgClassType *type=(0),SgClassDefinition *definition=(0),SgTemplateDeclaration *templateDeclaration=(0),SgTemplateArgumentPtrListPtr templateArguments=(0))
*/
/*!
\fn SgTemplateInstantiationDecl::SgTemplateInstantiationDecl(const SgTemplateInstantiationDeclStorageClass &source)
\brief This is the only constructor.
   This constructor builds the SgTemplateInstantiationDecl base class. but has some specific
side-effects (some of which have been removed in the latest work).  It is however
still that case that if the definition is provided then it's declaration will be changed
to the declaration being constructed (a warning message it output if this happens and
this side-effect will be removed soon).
\param startOfConstruct represents the position in the source code
\sa 
\ref SgTemplateInstantiationDecl_create "Example:create an SgTemplateInstantiationDecl object"
*/
/*!\fn inline static void SgTemplateInstantiationDecl::operator delete(void *pointer)
*/
/*!\fn static SgTemplateInstantiationDecl *SgTemplateInstantiationDecl::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgTemplateInstantiationDecl::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgTemplateInstantiationDecl::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgTemplateInstantiationDecl::initializeStorageClassArray(SgTemplateInstantiationDeclStorageClass *storageArray)
*/
/*!\fn static void SgTemplateInstantiationDecl::clearMemoryPool()
*/
/*!\fn static void SgTemplateInstantiationDecl::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgTemplateInstantiationDecl::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgTemplateInstantiationDecl::roseRTI()
*/
/*!\fn virtual SgNode *SgTemplateInstantiationDecl::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgTemplateInstantiationDecl::~SgTemplateInstantiationDecl()
*/
/*!\fn virtual void SgTemplateInstantiationDecl::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateInstantiationDecl::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateInstantiationDecl::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateInstantiationDecl::post_construction_initialization()
*/
/*!\fn void SgTemplateInstantiationDecl::set_definition(SgTemplateInstantiationDefn *definition)
\brief \brief See  *definition)
definition for documentation */
/*! 
\fn void SgTemplateInstantiationDecl::set_nameResetFromMangledForm(bool nameResetFromMangledForm)
\brief Access function for p_nameResetFromMangledForm.See  nameResetFromMangledForm)
nameResetFromMangledForm for documentation 
\return returns void.
*/
/*! 
\fn void SgTemplateInstantiationDecl::set_templateArguments(SgTemplateArgumentPtrListPtr templateArguments)
\brief Access function for p_templateArguments.See  templateArguments)
templateArguments for documentation 
\return returns void.
*/
/*! 
\fn void SgTemplateInstantiationDecl::set_templateDeclaration(SgTemplateDeclaration *templateDeclaration)
\brief Access function for p_templateDeclaration.See  *templateDeclaration)
templateDeclaration for documentation 
\return returns void.
*/
/*!\fn void SgTemplateInstantiationDecl::set_templateHeader(SgName templateHeader)
\brief \brief See  templateHeader)
templateHeader for documentation */
/*! 
\fn void SgTemplateInstantiationDecl::set_templateName(SgName templateName)
\brief sets name of instantiated class template, name excludes template arguments.See  templateName)
templateName for documentation 
\return returns void.
*/
/*!\fn SgName SgTemplateInstantiationDecl::get_templateHeader() const
\brief \brief See  const
templateHeader for documentation */
/*! 
\fn SgName SgTemplateInstantiationDecl::get_templateName() const
\brief Returns name of class template, the name excludes template arguments.See  const
templateName for documentation 
For the template name with arguments, e.g. "class_template<int>" the user should call 
get_name() (defined in the SgClassDeclaration base class).
\note The SgClassSymbol used to hold a reference to this declaration in the symbol table
      is placed into the symbol table using the get_name(); includes template arguments.
\internal There are cases where the arguments should not be unparse and then
    this version of the name is required. Also in generating mangled names, this
    is a more useful name to have separately from the name which inclused arguments.
    However in these case it still seems that we could get it from the template
    declaration (if it is available, member fucntions of a templated class may not
    have an explicit or separate template declaration).
\return returns SgName by value.
*/
/*!
\fn SgTemplateArgumentPtrListPtr SgTemplateInstantiationDecl::get_templateArguments() const
\brief Returns pointer to STL list of pointers to SgTemplateArgument objects.See  const
templateArguments for documentation 
\return Returns pointer to STL list of pointers to SgTemplateArgument objects.
*/
/*! 
\fn SgTemplateDeclaration *SgTemplateInstantiationDecl::get_templateDeclaration() const
\brief Returns pointer to SgTemplateDeclaration from which instantiation is generated.See  const
templateDeclaration for documentation 
\return returns pointer to SgTemplateDeclaration.
*/
/*! 
\fn bool SgTemplateInstantiationDecl::get_nameResetFromMangledForm() const
\brief Returns pointer to SgTemplateDeclaration from which instantiation is generated.See  const
nameResetFromMangledForm for documentation 
\return returns pointer to SgTemplateDeclaration.
*/
/*!\fn virtual SgName SgTemplateInstantiationDecl::get_mangled_name() const
\brief \brief See  const
mangled_name for documentation */
/*!\fn virtual SgName SgTemplateInstantiationDecl::get_qualified_name() const
\brief \brief See  const
qualified_name for documentation */
/*!\fn virtual SgNode *SgTemplateInstantiationDecl::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual SgSymbol *SgTemplateInstantiationDecl::get_symbol_from_symbol_table() const
\brief \brief See  const
symbol_from_symbol_table for documentation */
/*!\fn virtual size_t SgTemplateInstantiationDecl::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgTemplateInstantiationDecl::get_numberOfTraversalSuccessors()
\brief \brief See  SgTemplateInstantiationDecl::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgTemplateInstantiationDecl::get_traversalSuccessorContainer()
\brief \brief See  SgTemplateInstantiationDecl::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgTemplateInstantiationDecl::get_traversalSuccessorNamesContainer()
\brief \brief See  SgTemplateInstantiationDecl::traversalSuccessorNamesContainer for documentation */
/*!\fn SgTemplateInstantiationDecl::SgTemplateInstantiationDecl(SgName name,enum SgClassDeclaration::class_types class_type,SgClassType *type,SgClassDefinition *definition,SgTemplateDeclaration *templateDeclaration,SgTemplateArgumentPtrListPtr templateArguments)
*/
//@}
int SAGE_Doxygen_Dummy_82962692614634;
