/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBasicBlock
//////////////////////////////////////////////////////////////////////////
/*!
\class SgBasicBlock
\brief This class represents the concept of a block (not a basic block from control flow analysis).
    SgBasicBlocks are used in other IR nodes where a list of statements is
required.  However, if you need a list of statements we suggest you use an
STL list instead of borrowing and extending the semantics of SgBasicBlock.
\internal 
*/
/*
\sa
\ref SgBasicBlock_usage  "Example of using a SgBasicBlock object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBasicBlock data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBasicBlock member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgBasicBlock_create "Example:create an SgBasicBlock object"
*/
/*!
\fn SgBasicBlock::~SgBasicBlock()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgBasicBlock::isSgBasicBlock (SgNode *s)
\brief Cast function (from derived class to SgBasicBlock pointer).
   This functions returns a SgBasicBlock pointer for any input of a 
pointer to an object derived from a SgBasicBlock.
\return Returns valid pointer to SgBasicBlock if input is derived from a SgLocatedNode.
*/
/*!
\fn SgBasicBlock::isSgBasicBlock (const SgNode *s)
\brief Cast function (from derived class to SgBasicBlock pointer).
   This functions returns a SgBasicBlock pointer for any input of a 
pointer to an object derived from a SgBasicBlock.
\return Returns valid pointer to SgBasicBlock if input is derived from a SgLocatedNode.
*/
/*!
\fn SgBasicBlock::get_symbol_table()
\brief Returns a pointer to the locally strored SgSymbolTable.
\return Returns a pointer.
*/
/*!
\fn SgBasicBlock::set_symbol_table(SgSymbolTable *symbolTable)
\brief Sets the pointer to the locally strored SgSymbolTable.
\return Returns void.
*/
/*! \name Class Members*/
//@{
/*! \var SgStatementPtrList SgBasicBlock::p_statements
\brief This pointer an STL list of pointers to SgStatement objects.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgBasicBlock::SgBasicBlock(SgStatement *stmt)
*/
/*!
\fn SgBasicBlock::SgBasicBlock(Sg_File_Info *info=(0),SgStatement *stmt=(0))
\brief This is the constructor.
   This constructor builds the SgBasicBlock base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn SgBasicBlock::SgBasicBlock(const SgBasicBlockStorageClass &source)
*/
/*!\fn inline static void SgBasicBlock::operator delete(void *pointer)
*/
/*!\fn static SgBasicBlock *SgBasicBlock::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgBasicBlock::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgBasicBlock::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgBasicBlock::initializeStorageClassArray(SgBasicBlockStorageClass *storageArray)
*/
/*!\fn static void SgBasicBlock::clearMemoryPool()
*/
/*!\fn static void SgBasicBlock::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgBasicBlock::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgBasicBlock::roseRTI()
*/
/*!
\fn virtual SgNode *SgBasicBlock::copy(SgCopyHelp &help) const
\brief Makes a copy (deap of shallow depending on SgCopyHelp).
\return Returns pointer to copy of SgBasicBlock.
*/
/*!\fn virtual bool SgBasicBlock::cfgIsIndexInteresting(unsigned int ) const
*/
/*!\fn virtual bool SgBasicBlock::insert_child(SgStatement *,SgStatement *,bool inFront=true,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual bool SgBasicBlock::replace_child(SgStatement *,SgStatement *,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgBasicBlock::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgBasicBlock::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgBasicBlock::cfgIndexForEnd() const
*/
/*!\fn virtual void SgBasicBlock::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgBasicBlock::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgBasicBlock::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgBasicBlock::post_construction_initialization()
*/
/*!\fn void SgBasicBlock::append_statement(SgStatement *element)
*/
/*!\fn void SgBasicBlock::append_statement(const std::vector < SgStatement * , std::allocator< SgStatement * > > ::iterator &where,SgStatement *what)
*/
/*!\fn void SgBasicBlock::insert_statement(const std::vector < SgStatement * , std::allocator< SgStatement * > > ::iterator &list,SgStatement *element)
*/
/*!\fn void SgBasicBlock::prepend_statement(SgStatement *element)
*/
/*!\fn void SgBasicBlock::prepend_statement(const std::vector < SgStatement * , std::allocator< SgStatement * > > ::iterator &where,SgStatement *what)
*/
/*!
\fn SgStatementPtrList &SgBasicBlock::get_statements()
\brief Returns a non-const STL list by reference.
See  &SgBasicBlock::statements for documentation \return Returns non-const SgStatementPtrList (STL list) by reference.
*/
/*!
\fn const SgStatementPtrList &SgBasicBlock::get_statements() const
\brief Returns a const STL list by reference.
See  const
statements for documentation \return Returns const SgStatementPtrList (STL list) by reference.
*/
/*!\fn virtual SgName SgBasicBlock::get_mangled_name() const
\description See  const
mangled_name for documentation */
/*!
\fn virtual SgName SgBasicBlock::get_qualified_name() const
\brief Returns SgName (a string) representing the name of the current scope.
   See discussion of mangled names in the documentation.
See  const
qualified_name for documentation \return Returns SgName (a string).
*/
/*!\fn virtual SgNode *SgBasicBlock::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgBasicBlock::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgBasicBlock::get_numberOfTraversalSuccessors()
\description See  SgBasicBlock::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgBasicBlock::get_traversalSuccessorContainer()
\description See  SgBasicBlock::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgBasicBlock::get_traversalSuccessorNamesContainer()
\description See  SgBasicBlock::traversalSuccessorNamesContainer for documentation */
/*!\fn virtual SgBasicBlock::~SgBasicBlock()
*/
//@}
int SAGE_Doxygen_Dummy_17485720826887;
