/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgLocatedNode
//////////////////////////////////////////////////////////////////////////
/*!
\class SgLocatedNode
\brief This class represents the notion of an expression or statement which 
has a position within the source code.
    There are no uses of this IR node anywhere.  All expressions and statements
are derived from this IR node to build either SgExpression or SgStatement 
derived classes.
\note SgLocatedNode objects have a set_startOfConstruct() and a set_endOfConstruct()
    these must be set explicitly to define a proper AST.  The set_startOfConstruct()
    will be called if the constructor taking a Sg_File_Info object is called (depreicated)
    but the set_endOfConstruct() should be called explicitly.
\internal The AttachedPreprocessingInfoType *p_attachedPreprocessingInfoPtr
    and the AstAttributeMechanism *p_attribute are implemented as pointers
    because they would take up 12 bytes each as STL lists and that would be
    wasteful when we have 20 million IR nodes held in memory.  This is a
    violation of  general rule in the IR design that we have STL containers as
    data member instead of pointers to data members (the file I/O handles this
    as a special case).
\todo The AstAttributeMechanism type should be handed as other IR nodes with it's own
    memory pool, except that in all cases where it would be used, it would be a base class
    to a user-defined derived type and thus would not fix in our memory pool.
\todo Consider name change of "SgLocatedNode" to "SgSourceNode".  
\todo Consider moving some of the IR nodes currently in SgSupport to this IR node.
      IR nodes that might be moved would include:
      -# SgFile
      -# SgDirectory (questionable)
      -# SgInitializedName
      -# SgBaseClass
      -# SgTemplateArgument
      -# SgTemplateParameter
\internal This is a base class for all expressions and statements.
\sa
\ref SgLocatedNode_usage  "Example of using a SgLocatedNode object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgLocatedNode data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgLocatedNode member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgLocatedNode::~SgLocatedNode()
\brief This is the destructor.
   Only the Sg_File_Info object can be deleted in this object.
*/
/*!
\fn SgLocatedNode::getFileName()
\brief Access function for "get_file_info()->get_filename()".
   This function is just a simpler access function which retrives the
filename from the Sg_File_Info object at the current IR node.  This
is only a convience function an as a result not a great idea.
\internal This function should likely be removed from the SAGEIII interface.
\deprecated This function should be removed because it is only an interface 
function of rather minor significance. Alternatively if we want to implement 
it, we should consider placing it at the SgNode object. If we do preserve the 
function then we should have it return a string instead of char*.
*/
/*!
\fn SgLocatedNode::isSgLocatedNode (SgNode *s)
\brief Cast function (from derived class to SgLocatedNode pointer).
   This functions returns a SgLocatedNode pointer for any input of a 
pointer to an object derived from a SgLocatedNode.
\return Returns valid pointer to SgLocatedNode if input is derived from a SgLocatedNode.
*/
/*!
\fn SgLocatedNode::isSgLocatedNode (const SgNode *s)
\brief Cast function (from derived class to SgLocatedNode pointer).
   This functions returns a SgLocatedNode pointer for any input of a 
pointer to an object derived from a SgLocatedNode.
\return Returns valid pointer to SgLocatedNode if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*!
\var AttachedPreprocessingInfoType *SgLocatedNode::p_attachedPreprocessingInfoPtr
\brief Holds comments and/or preprocessor directives located before or after the 
current statement of expression.
*/
/*!
\var Sg_File_Info *SgLocatedNode::p_endOfConstruct
\brief This pointer is always valid and stores the source position of the end of the
current construct.
*/
/*!
\var Sg_File_Info *SgLocatedNode::p_startOfConstruct
\brief This pointer is always valid and stores the source position of the start of the
current construct.
*/
/*!\var AstAttributeMechanism *SgLocatedNode::p_attributeMechanism
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn AttachedPreprocessingInfoType *&SgLocatedNode::getAttachedPreprocessingInfo()
\brief This function gets the adds comment or CPP directives to the current IR node.
\param prepInfoPtr - This parameter is a pointer to the container for the comment/directive.
\param locationInList - adds container before or after the current IR node.
\return Returns void.
*/
/*!
\fn SgLocatedNode::SgLocatedNode(const SgLocatedNode &X)
\brief Copy constructor (made private to prevent being called by accident).
*/
/*!\fn SgLocatedNode::SgLocatedNode(const SgLocatedNodeStorageClass &source)
*/
/*!\fn inline static void SgLocatedNode::operator delete(void *pointer)
*/
/*!\fn static SgLocatedNode *SgLocatedNode::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgLocatedNode::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgLocatedNode::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgLocatedNode::initializeStorageClassArray(SgLocatedNodeStorageClass *storageArray)
*/
/*!\fn static void SgLocatedNode::clearMemoryPool()
*/
/*!\fn static void SgLocatedNode::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgLocatedNode::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgLocatedNode::roseRTI()
*/
/*!\fn virtual SgLocatedNode::~SgLocatedNode()
*/
/*!\fn virtual SgNode *SgLocatedNode::copy(SgCopyHelp &help) const
*/
/*!\fn virtual void SgLocatedNode::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgLocatedNode::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgLocatedNode::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgLocatedNode::post_construction_initialization()
*/
/*!
\fn void SgLocatedNode::addToAttachedPreprocessingInfo(PreprocessingInfo *prepInfoPtr,enum PreprocessingInfo::RelativePositionType locationInList=PreprocessingInfo::after)
\brief This function adds comment or CPP directives to the current IR node.
\param prepInfoPtr - This parameter is a pointer to the container for the comment/directive.
\param locationInList - adds container before or after the current IR node.
\return Returns void.
*/
/*!\fn void SgLocatedNode::unsetCompilerGenerated()
*/
/*!\fn void SgLocatedNode::unsetFrontendSpecific()
*/
/*!\fn void SgLocatedNode::unsetOutputInCodeGeneration()
*/
/*!\fn void SgLocatedNode::unsetSourcePositionUnavailableInFrontend()
*/
/*!\fn virtual void SgLocatedNode::set_attributeMechanism(AstAttributeMechanism *attributeMechanism)
\brief \brief See  *attributeMechanism)
attributeMechanism for documentation */
/*!\fn void SgLocatedNode::set_attachedPreprocessingInfoPtr(AttachedPreprocessingInfoType *attachedPreprocessingInfoPtr)
\brief \brief See  *attachedPreprocessingInfoPtr)
attachedPreprocessingInfoPtr for documentation */
/*!
\fn void SgLocatedNode::set_endOfConstruct(Sg_File_Info *endOfConstruct)
\brief This function sets the current source location position of the end
of the current construct.See  *endOfConstruct)
endOfConstruct for documentation 
\param endOfConstruct - Pointer to Sg_File_Info object containing source location information.
\return Returns void.
*/
/*!
\fn void SgLocatedNode::set_startOfConstruct(Sg_File_Info *startOfConstruct)
\brief This function sets the current source location position of the start 
of the current construct.See  *startOfConstruct)
startOfConstruct for documentation 
\param startOfConstruct - Pointer to Sg_File_Info object containing source location information.
\return Returns void.
*/
/*!\fn AttachedPreprocessingInfoType *SgLocatedNode::get_attachedPreprocessingInfoPtr() const
\brief \brief See  const
attachedPreprocessingInfoPtr for documentation */
/*!\fn virtual AstAttributeMechanism *SgLocatedNode::get_attributeMechanism() const
\brief \brief See  const
attributeMechanism for documentation */
/*!\fn virtual SgNode *SgLocatedNode::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual Sg_File_Info *SgLocatedNode::get_endOfConstruct() const
\brief \brief See  const
endOfConstruct for documentation */
/*!\fn virtual Sg_File_Info *SgLocatedNode::get_startOfConstruct() const
\brief \brief See  const
startOfConstruct for documentation */
/*!\fn virtual size_t SgLocatedNode::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgLocatedNode::get_numberOfTraversalSuccessors()
\brief \brief See  SgLocatedNode::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgLocatedNode::get_traversalSuccessorContainer()
\brief \brief See  SgLocatedNode::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgLocatedNode::get_traversalSuccessorNamesContainer()
\brief \brief See  SgLocatedNode::traversalSuccessorNamesContainer for documentation */
/*!
\fn SgLocatedNode::SgLocatedNode(Sg_File_Info *startOfConstruct=(0))
\brief This is the constructor.
   This constructor builds the SgLocatedNode base class.
\param startOfConstruct represents the position in the source code
\sa 
\ref SgLocatedNode_create "Example:create an SgLocatedNode object"
*/
//@}
int SAGE_Doxygen_Dummy_3004617179344;
