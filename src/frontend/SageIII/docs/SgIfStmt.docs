/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgIfStmt
//////////////////////////////////////////////////////////////////////////
/*!
\class SgIfStmt
\brief This class represents the concept of an "if" construct.
\internal 
\todo The unparse function "unparseIfStmt" associated with this IR node
      is implemented using a loop.  I think this should be changed to be more
      conventional and structural (consistant with the design of the rest of 
      the unparsing).
*/
/*
\sa
\ref SgIfStmt_usage  "Example of using a SgIfStmt object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgIfStmt data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgIfStmt member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgIfStmt_create "Example:create an SgIfStmt object"
*/
/*!
\fn SgIfStmt::~SgIfStmt()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgIfStmt::isSgIfStmt (SgNode *s)
\brief Cast function (from derived class to SgIfStmt pointer).
   This functions returns a SgIfStmt pointer for any input of a 
pointer to an object derived from a SgIfStmt.
\return Returns valid pointer to SgIfStmt if input is derived from a SgLocatedNode.
*/
/*!
\fn SgIfStmt::isSgIfStmt (const SgNode *s)
\brief Cast function (from derived class to SgIfStmt pointer).
   This functions returns a SgIfStmt pointer for any input of a 
pointer to an object derived from a SgIfStmt.
\return Returns valid pointer to SgIfStmt if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgBasicBlock *SgIfStmt::p_false_body
\brief This pointer a SgBasicBlock, and holds the statements in the "false" body of if statement.
*/
/*! \var SgBasicBlock *SgIfStmt::p_true_body
\brief This pointer a SgBasicBlock, and holds the statements in the "true" body of if statement.
*/
/*! \var SgStatement *SgIfStmt::p_conditional
\brief This pointer a SgStatement.
*/
/*!\var int SgIfStmt::p_end_numeric_label
*/
/*!\var std::string SgIfStmt::p_string_label
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgIfStmt::SgIfStmt(Sg_File_Info *startOfConstruct,SgStatement *conditional=(0),SgBasicBlock *true_body=(0),SgBasicBlock *false_body=(0))
*/
/*!
\fn SgIfStmt::SgIfStmt(const SgIfStmtStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgIfStmt base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn inline static void SgIfStmt::operator delete(void *pointer)
*/
/*!\fn static SgIfStmt *SgIfStmt::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgIfStmt::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgIfStmt::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgIfStmt::initializeStorageClassArray(SgIfStmtStorageClass *storageArray)
*/
/*!\fn static void SgIfStmt::clearMemoryPool()
*/
/*!\fn static void SgIfStmt::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgIfStmt::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgIfStmt::roseRTI()
*/
/*!\fn virtual SgIfStmt::~SgIfStmt()
*/
/*!
\fn virtual SgNode *SgIfStmt::copy(SgCopyHelp &help) const
\brief Makes a copy (deap of shallow depending on SgCopyHelp).
\return Returns pointer to copy of SgIfStmt.
*/
/*!\fn virtual bool SgIfStmt::cfgIsIndexInteresting(unsigned int ) const
*/
/*!\fn virtual bool SgIfStmt::replace_child(SgStatement *,SgStatement *,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgIfStmt::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgIfStmt::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgIfStmt::cfgFindChildIndex(SgNode *n)
*/
/*!\fn virtual unsigned int SgIfStmt::cfgIndexForEnd() const
*/
/*!\fn virtual void SgIfStmt::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgIfStmt::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgIfStmt::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgIfStmt::post_construction_initialization()
*/
/*!
\fn void SgIfStmt::set_conditional(SgStatement *conditional)
\brief Access function for p_conditional.
See  *conditional)
conditional for documentation \param conditional SgStatement pointer
\return Returns void.
*/
/*!\fn void SgIfStmt::set_end_numeric_label(int end_numeric_label)
\description See  end_numeric_label)
end_numeric_label for documentation */
/*!
\fn void SgIfStmt::set_false_body(SgBasicBlock *false_body)
\brief Access function for p_false_body.
See  *false_body)
false_body for documentation \param false_body SgBasicBlock pointer
\return Returns void.
*/
/*!\fn void SgIfStmt::set_string_label(std::string string_label)
\description See  string_label)
string_label for documentation */
/*!
\fn void SgIfStmt::set_true_body(SgBasicBlock *true_body)
\brief Access function for p_true_body.
See  *true_body)
true_body for documentation \param true_body SgBasicBlock pointer
\return Returns void.
*/
/*!
\fn SgBasicBlock *SgIfStmt::get_false_body() const
\brief Access function for p_false_body.
See  const
false_body for documentation \return Returns a pointer to a SgBasicBlock.
*/
/*!
\fn SgBasicBlock *SgIfStmt::get_true_body() const
\brief Access function for p_true_body.
See  const
true_body for documentation \return Returns a pointer to a SgBasicBlock.
*/
/*!
\fn SgStatement *SgIfStmt::get_conditional() const
\brief Access function for p_conditional.
See  const
conditional for documentation \return Returns a pointer to a SgStatement.
*/
/*!\fn int SgIfStmt::get_end_numeric_label() const
\description See  const
end_numeric_label for documentation */
/*!\fn std::string SgIfStmt::get_string_label() const
\description See  const
string_label for documentation */
/*!\fn virtual SgName SgIfStmt::get_mangled_name() const
\description See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgIfStmt::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgIfStmt::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgIfStmt::get_numberOfTraversalSuccessors()
\description See  SgIfStmt::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgIfStmt::get_traversalSuccessorContainer()
\description See  SgIfStmt::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgIfStmt::get_traversalSuccessorNamesContainer()
\description See  SgIfStmt::traversalSuccessorNamesContainer for documentation */
/*!\fn SgIfStmt::SgIfStmt(SgStatement *conditional,SgBasicBlock *true_body,SgBasicBlock *false_body)
*/
//@}
int SAGE_Doxygen_Dummy_184212389329986;
