/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionTypeTable
//////////////////////////////////////////////////////////////////////////
/*!
\class SgFunctionTypeTable
\brief This class represents the function type table (stores all function types so that
    they can be shared internally).
    This class is a wrapper for the SgSymbolTable and is resticted to the handling of
function type symbols.  There is one (global) object of this type used in the compilation
of any project using ROSE.
\internal The global function type symbol table is a static data member (a pointer to a
    SgFunctionTypeTable), (i.e. SgFunctionTypeTable* SgNode::p_globalFunctionTypeTable;).
    The static data member (pointer) is generated by ROSETTA in
    ROSE/src/frontend/SageIII/Cxx_Grammar.C, but the access function are specially built
    (not by ROSETTA).
\todo Evaluate if this should be derived from SgSupport (consistant with SgSymbolTable).
\todo Evaluate if we might like to have the p_function_type_table be a SgSymbolTable rather than
    a pointer to a SgSymbolTable (see implementation note).
\sa
\ref SgFunctionTypeTable_usage  "Example of using a SgFunctionTypeTable object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionTypeTable data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionTypeTable member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgFunctionTypeTable_create "Example:create an SgFunctionTypeTable object"
*/
/*!
\fn SgFunctionTypeTable::~SgFunctionTypeTable()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgFunctionTypeTable::isSgFunctionTypeTable (SgNode *s)
\brief Cast function (from derived class to SgFunctionTypeTable pointer).
   This functions returns a SgFunctionTypeTable pointer for any input of a 
pointer to an object derived from a SgFunctionTypeTable.
\return Returns valid pointer to SgFunctionTypeTable if input is derived from a SgLocatedNode.
*/
/*!
\fn SgFunctionTypeTable::isSgFunctionTypeTable (const SgNode *s)
\brief Cast function (from derived class to SgFunctionTypeTable pointer).
   This functions returns a SgFunctionTypeTable pointer for any input of a 
pointer to an object derived from a SgFunctionTypeTable.
\return Returns valid pointer to SgFunctionTypeTable if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgSymbolTable *SgFunctionTypeTable::p_function_type_table
\brief This pointer points to SgSymbolTable used to store function type symbols only.
\internal The p_function_type_table could alternatively be a data member of SgSymbolTable rather than
    a pointer to a SgSymbolTable.  However this would require that the class definition
    for SgSymbolTable be seen ahead of that for this class and the desing of the code
    generator for the IR (ROSETTA) tries to remove such ordering dependence.  This iw why
    it is implemented the current way.  It might at some point be worth changing.
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgFunctionTypeTable::SgFunctionTypeTable()
\brief This is the constructor.
   This constructor builds the SgFunctionTypeTable base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn SgFunctionTypeTable::SgFunctionTypeTable(const SgFunctionTypeTableStorageClass &source)
*/
/*!\fn SgType *SgFunctionTypeTable::lookup_function_type(const SgName &)
*/
/*!\fn inline static void SgFunctionTypeTable::operator delete(void *pointer)
*/
/*!\fn static SgFunctionTypeTable *SgFunctionTypeTable::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgFunctionTypeTable::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgFunctionTypeTable::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgFunctionTypeTable::initializeStorageClassArray(SgFunctionTypeTableStorageClass *storageArray)
*/
/*!\fn static void SgFunctionTypeTable::clearMemoryPool()
*/
/*!\fn static void SgFunctionTypeTable::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgFunctionTypeTable::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgFunctionTypeTable::roseRTI()
*/
/*!\fn virtual SgNode *SgFunctionTypeTable::copy(SgCopyHelp &help) const
*/
/*!\fn virtual void SgFunctionTypeTable::post_construction_initialization()
*/
/*!\fn void SgFunctionTypeTable::insert_function_type(const SgName &,SgType *)
*/
/*!\fn void SgFunctionTypeTable::print_functypetable(std::ostream &os=std::cout)
*/
/*!\fn void SgFunctionTypeTable::remove_function_type(const SgName &)
*/
/*!
\fn void SgFunctionTypeTable::set_function_type_table(SgSymbolTable *function_type_table)
\brief Access function for p_function_type_table.See  *function_type_table)
function_type_table for documentation 
\return Returns void.
*/
/*!
\fn SgSymbolTable *SgFunctionTypeTable::get_function_type_table() const
\brief Returns pointer to SgSymbolTable used for function type symbols only.See  const
function_type_table for documentation 
\return Returns pointer to SgSymbolTable.
*/
/*!\fn virtual SgNode *SgFunctionTypeTable::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgFunctionTypeTable::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgFunctionTypeTable::get_numberOfTraversalSuccessors()
\brief \brief See  SgFunctionTypeTable::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgFunctionTypeTable::get_traversalSuccessorContainer()
\brief \brief See  SgFunctionTypeTable::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgFunctionTypeTable::get_traversalSuccessorNamesContainer()
\brief \brief See  SgFunctionTypeTable::traversalSuccessorNamesContainer for documentation */
/*!\fn virtual SgFunctionTypeTable::~SgFunctionTypeTable()
*/
//@}
int SAGE_Doxygen_Dummy_325261022727;
