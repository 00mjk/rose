/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgClassNameRefExp
//////////////////////////////////////////////////////////////////////////
/*!
\class SgClassNameRefExp
\brief This class represents the concept of a C++ expression built from a class name.
   This IR node does not appear within any AST's that I have built, but it is
part of the EDG/Sage III translation, and I recall that it is part of the 
support for the AST associated with template declarations (SgTemplateDeclaration)
but that is currently a string while we debug the support for template declarations 
as a more meaningful AST.
\todo Need to figure out some examples of whare this is used.
\sa
\ref SgClassNameRefExp_usage  "Example of using a SgClassNameRefExp object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgClassNameRefExp data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgClassNameRefExp member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgClassNameRefExp_create "Example:create an SgClassNameRefExp object"
*/
/*!
\fn SgClassNameRefExp::~SgClassNameRefExp()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgClassNameRefExp::isSgClassNameRefExp (SgNode *s)
\brief Cast function (from derived class to SgClassNameRefExp pointer).
   This functions returns a SgClassNameRefExp pointer for any input of a 
pointer to an object derived from a SgClassNameRefExp.
\return Returns valid pointer to SgClassNameRefExp if input is derived from a SgLocatedNode.
*/
/*!
\fn SgClassNameRefExp::isSgClassNameRefExp (const SgNode *s)
\brief Cast function (from derived class to SgClassNameRefExp pointer).
   This functions returns a SgClassNameRefExp pointer for any input of a 
pointer to an object derived from a SgClassNameRefExp.
\return Returns valid pointer to SgClassNameRefExp if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgClassSymbol *SgClassNameRefExp::p_symbol
\brief This pointer points to a SgClassSymbol.
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgClassNameRefExp::SgClassNameRefExp(Sg_File_Info *startOfConstruct,SgClassSymbol *symbol=(0))
\brief This is the constructor.
   This constructor builds the SgClassNameRefExp base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn SgClassNameRefExp::SgClassNameRefExp(const SgClassNameRefExpStorageClass &source)
*/
/*!\fn inline static void SgClassNameRefExp::operator delete(void *pointer)
*/
/*!\fn static SgClassNameRefExp *SgClassNameRefExp::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgClassNameRefExp::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgClassNameRefExp::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgClassNameRefExp::initializeStorageClassArray(SgClassNameRefExpStorageClass *storageArray)
*/
/*!\fn static void SgClassNameRefExp::clearMemoryPool()
*/
/*!\fn static void SgClassNameRefExp::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgClassNameRefExp::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgClassNameRefExp::roseRTI()
*/
/*!\fn virtual SgClassNameRefExp::~SgClassNameRefExp()
*/
/*!\fn virtual SgNode *SgClassNameRefExp::copy(SgCopyHelp &help) const
*/
/*!\fn virtual void SgClassNameRefExp::post_construction_initialization()
*/
/*!
\fn void SgClassNameRefExp::set_symbol(SgClassSymbol *symbol)
\brief Access function for p_symbol.See  *symbol)
symbol for documentation 
\return Returns void.
*/
/*!
\fn SgClassSymbol *SgClassNameRefExp::get_symbol() const
\brief Returns pointer to SgSymbol.See  const
symbol for documentation 
\return Returns pointer to SgSymbol.
*/
/*!\fn virtual SgNode *SgClassNameRefExp::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgClassNameRefExp::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgClassNameRefExp::get_numberOfTraversalSuccessors()
\brief \brief See  SgClassNameRefExp::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgClassNameRefExp::get_traversalSuccessorContainer()
\brief \brief See  SgClassNameRefExp::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgClassNameRefExp::get_traversalSuccessorNamesContainer()
\brief \brief See  SgClassNameRefExp::traversalSuccessorNamesContainer for documentation */
/*!\fn SgClassNameRefExp::SgClassNameRefExp(SgClassSymbol *symbol)
*/
//@}
int SAGE_Doxygen_Dummy_145143015110016;
