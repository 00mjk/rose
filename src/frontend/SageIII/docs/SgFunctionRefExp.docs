/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionRefExp
//////////////////////////////////////////////////////////////////////////
/*!
\class SgFunctionRefExp
\brief This class represents the function being called and must be assembled in the
    SgFunctionCall with the function arguments.
\internal  When used in a SgFunctionCallExp (most common, or typical case (and maybe the
    only case)) the SgExpression is one of the following:
       - SgDotExp
       - SgDotStarOp
       - SgArrowExp
       - SgArrowStarOp
       - SgPointerDerefExp
       - SgFunctionRefExp
       - SgMemberFunctionRefExp
\todo Figure out why SgMemberFunctionRefExp is required instead of just SgFunctionRefExp.
      
\todo Make the use of a SgMemberFunctionSymbol in a SgFunctionRefExp an error. The result
      will not unparse correctly (suggested by Jeremiah).
\sa
\ref SgFunctionRefExp_usage  "Example of using a SgFunctionRefExp object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionRefExp data members
/////////////////////////////////////////////////////////////////////////
/*!
\var SgFunctionRefExp::p_lvalue
\brief This boolean variable marks the current expression as a 
left hand side value (lvalue).
*/
/*!
\var SgFunctionRefExp::p_need_paren
\brief This boolean value marks the current expression as requiring parenthises.
This boolean value marks the current expression as requiring parenthises (the
information comes from the frontend's interpretation of the requirement and is 
almost always overly conservative.  The unparser currently backs out more
accurate rules based on operator precedence and removed then where they
are not truely required.  Thus the purpose of this variable is to capture the
interpritation of the frontend regarding the use of parenthesis.
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionRefExp member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
      NOT IMPELEMENTED IN C++ SOURCE CODE
\fn SgFunctionRefExp::SgFunctionRefExp (const SgFunctionRefExp &X)
\brief Copy constructor (made private to prevent being called by accident).
*/
/*!
\fn SgFunctionRefExp::~SgFunctionRefExp()
\brief This is the destructor.
   Only the Sg_File_Info object can be deleted in this object.
*/
/*!
\fn SgFunctionRefExp::isSgFunctionRefExp (SgNode *s)
\brief Cast function (from derived class to SgFunctionRefExp pointer).
   This functions returns a SgFunctionRefExp pointer for any input of a 
pointer to an object derived from a SgFunctionRefExp.
\return Returns valid pointer to SgFunctionRefExp if input is derived from a SgFunctionRefExp.
*/
/*!
\fn SgFunctionRefExp::isSgFunctionRefExp (const SgNode *s)
\brief Cast function (from derived class to SgFunctionRefExp pointer).
   This functions returns a SgFunctionRefExp pointer for any input of a 
pointer to an object derived from a SgFunctionRefExp.
\return Returns valid pointer to SgFunctionRefExp if input is derived from a SgFunctionRefExp.
*/
/*!
\fn SgFunctionRefExp::set_type()
\brief Set the type associated with this expression
   This is an internally called function, it sets up the type of the expression 
based upon the types of the subexpressions (if any). Thus it takes no 
arguments.
\return Returns void
*/
/*! \name Class Members*/
//@{
/*!\var SgFunctionSymbol *SgFunctionRefExp::p_symbol_i
*/
/*!\var SgFunctionType *SgFunctionRefExp::p_function_type
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgFunctionRefExp::SgFunctionRefExp(Sg_File_Info *startOfConstruct,SgFunctionSymbol *symbol_i=(0),SgFunctionType *function_type=(0))
*/
/*!
\fn SgFunctionRefExp::SgFunctionRefExp(const SgFunctionRefExpStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgFunctionRefExp base class.
\param startOfConstruct represents the position in the source code
\sa 
\ref SgFunctionRefExp_create "Example:create an SgFunctionRefExp object"
*/
/*!\fn inline static void SgFunctionRefExp::operator delete(void *pointer)
*/
/*!\fn static SgFunctionRefExp *SgFunctionRefExp::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgFunctionRefExp::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgFunctionRefExp::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgFunctionRefExp::initializeStorageClassArray(SgFunctionRefExpStorageClass *storageArray)
*/
/*!\fn static void SgFunctionRefExp::clearMemoryPool()
*/
/*!\fn static void SgFunctionRefExp::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgFunctionRefExp::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgFunctionRefExp::roseRTI()
*/
/*!\fn virtual SgFunctionRefExp::~SgFunctionRefExp()
*/
/*!\fn virtual SgNode *SgFunctionRefExp::copy(SgCopyHelp &help) const
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgFunctionRefExp::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgFunctionRefExp::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgFunctionRefExp::cfgIndexForEnd() const
*/
/*!\fn virtual void SgFunctionRefExp::post_construction_initialization()
*/
/*!\fn void SgFunctionRefExp::set_symbol(SgFunctionSymbol *symbol)
\brief \brief See  *symbol)
symbol for documentation */
/*!\fn void SgFunctionRefExp::set_symbol_i(SgFunctionSymbol *symbol_i)
\brief \brief See  *symbol_i)
symbol_i for documentation */
/*!\fn SgFunctionSymbol *SgFunctionRefExp::get_symbol() const
\brief \brief See  const
symbol for documentation */
/*!\fn SgFunctionSymbol *SgFunctionRefExp::get_symbol_i() const
\brief \brief See  const
symbol_i for documentation */
/*!\fn virtual SgNode *SgFunctionRefExp::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!
\fn virtual SgType *SgFunctionRefExp::get_type() const
\brief Get the type associated with this expressionSee  const
type for documentation 
     Note that the return value is either:
   -# SgFunctionType : normal function call
   -# SgMemberFunctionType : normal member function call
   -# SgTypedefType : in teh case of a function call from a pointer
   It should always be a vailid pointer.  These details are verified in the AST
   Consistancy Tests.
\return Returns SgType (but not any SgType).
*/
/*!\fn virtual size_t SgFunctionRefExp::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgFunctionRefExp::get_numberOfTraversalSuccessors()
\brief \brief See  SgFunctionRefExp::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgFunctionRefExp::get_traversalSuccessorContainer()
\brief \brief See  SgFunctionRefExp::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgFunctionRefExp::get_traversalSuccessorNamesContainer()
\brief \brief See  SgFunctionRefExp::traversalSuccessorNamesContainer for documentation */
/*!\fn SgFunctionRefExp::SgFunctionRefExp(SgFunctionSymbol *symbol_i,SgFunctionType *function_type)
*/
//@}
int SAGE_Doxygen_Dummy_13746971927522;
