/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgClassDefinition
//////////////////////////////////////////////////////////////////////////
/*!
\class SgClassDefinition
\brief This class represents the concept of a class definition in C++.
    Class definitions are distinquished from class declaration by the
definition of the member data and specification of inheritance (if any).
Where class declarations can appear multiple times withouth a class definition (forward
class declarations), the class definition may appear only once in an application.
Within C++ there is the "One Time Definition Rule" which requires that within multiple
compilation usints (typically separately compiled files), the definition of all
classes of the name qualified name must be identical.  Thus the class is considered to
be defined only once.
\internal This is a base class for the SgTemplateInstantiationDefn statements.
*/
/*
\sa
\ref SgClassDefinition_usage  "Example of using a SgClassDefinition object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgClassDefinition data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgClassDefinition member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgClassDefinition_create "Example:create an SgClassDefinition object"
*/
/*!
\fn SgClassDefinition::~SgClassDefinition()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgClassDefinition::isSgClassDefinition (SgNode *s)
\brief Cast function (from derived class to SgClassDefinition pointer).
   This functions returns a SgClassDefinition pointer for any input of a 
pointer to an object derived from a SgClassDefinition.
\return Returns valid pointer to SgClassDefinition if input is derived from a SgLocatedNode.
*/
/*!
\fn SgClassDefinition::isSgClassDefinition (const SgNode *s)
\brief Cast function (from derived class to SgClassDefinition pointer).
   This functions returns a SgClassDefinition pointer for any input of a 
pointer to an object derived from a SgClassDefinition.
\return Returns valid pointer to SgClassDefinition if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgBaseClassPtrList SgClassDefinition::p_inheritances
\brief This the list of base classes specificed in the class definition.
\internal The order of base classes can be important.
*/
/*! \var SgDeclarationStatementPtrList SgClassDefinition::p_members
\brief This the list of member declarations in the class.
\internal The order of declarations within this list is unimportant in C++.
*/
/*!\var bool SgClassDefinition::p_isSequence
*/
/*!\var unsigned int SgClassDefinition::p_packingAlignment
*/
/*!\var bool SgClassDefinition::p_isPrivate
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgClassDefinition::SgClassDefinition(SgClassDeclaration *d)
*/
/*!\fn SgClassDefinition::SgClassDefinition(Sg_File_Info *f,SgClassDeclaration *d)
*/
/*!
\fn SgClassDefinition::SgClassDefinition(Sg_File_Info *startOfConstruct)
\brief This is the constructor.
   This constructor builds the SgClassDefinition base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn SgClassDefinition::SgClassDefinition(const SgClassDefinitionStorageClass &source)
*/
/*!\fn inline static void SgClassDefinition::operator delete(void *pointer)
*/
/*!\fn static SgClassDefinition *SgClassDefinition::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgClassDefinition::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgClassDefinition::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgClassDefinition::initializeStorageClassArray(SgClassDefinitionStorageClass *storageArray)
*/
/*!\fn static void SgClassDefinition::clearMemoryPool()
*/
/*!\fn static void SgClassDefinition::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgClassDefinition::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgClassDefinition::roseRTI()
*/
/*!\fn virtual SgClassDefinition::~SgClassDefinition()
*/
/*!
\fn virtual SgNode *SgClassDefinition::copy(SgCopyHelp &help) const
\brief Makes a copy (deap of shallow depending on SgCopyHelp).
\return Returns pointer to copy of SgClassDefinition.
*/
/*!\fn virtual bool SgClassDefinition::insert_child(SgStatement *,SgStatement *,bool inFront=true,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual bool SgClassDefinition::replace_child(SgStatement *,SgStatement *,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual void SgClassDefinition::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgClassDefinition::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgClassDefinition::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgClassDefinition::post_construction_initialization()
*/
/*!\fn void SgClassDefinition::append_inheritance(SgBaseClass *element)
*/
/*!\fn void SgClassDefinition::append_member(SgDeclarationStatement *element)
*/
/*!\fn void SgClassDefinition::insert_inheritance(const std::vector < SgBaseClass * , std::allocator< SgBaseClass * > > ::iterator &list,SgBaseClass *element)
*/
/*!\fn void SgClassDefinition::insert_member(const std::vector < SgDeclarationStatement * , std::allocator< SgDeclarationStatement * > > ::iterator &list,SgDeclarationStatement *element)
*/
/*!\fn void SgClassDefinition::prepend_inheritance(SgBaseClass *element)
*/
/*!\fn void SgClassDefinition::prepend_member(SgDeclarationStatement *element)
*/
/*!\fn void SgClassDefinition::set_declaration(SgClassDeclaration *new_val)
\brief \brief See  *new_val)
declaration for documentation */
/*!\fn void SgClassDefinition::set_isPrivate(bool isPrivate)
\brief \brief See  isPrivate)
isPrivate for documentation */
/*!\fn void SgClassDefinition::set_isSequence(bool isSequence)
\brief \brief See  isSequence)
isSequence for documentation */
/*!\fn void SgClassDefinition::set_packingAlignment(unsigned int packingAlignment)
\brief \brief See  packingAlignment)
packingAlignment for documentation */
/*!
\fn SgBaseClassPtrList &SgClassDefinition::get_inheritances()
\brief Returns a list to the base classes.See  &SgClassDefinition::inheritances for documentation 
\return Returns an STL list by reference.
*/
/*!
\fn SgClassDeclaration *SgClassDefinition::get_declaration() const
\brief returns the class declaration associated with this class decinition.See  const
declaration for documentation 
\return Returns SgClassDeclaration pointer.
*/
/*!
\fn SgDeclarationStatementPtrList &SgClassDefinition::get_members()
\brief Returns a list to the data member declarations.See  &SgClassDefinition::members for documentation 
\return Returns an STL list by reference.
*/
/*!
\fn SgName SgClassDefinition::get_mangled_qualified_name(int &i)
\brief Returns SgName (a string) representing the mangled name of the current scope.See  &i)
mangled_qualified_name for documentation 
   See discussion of mangled names in the documentation.
\return Returns SgName (a string).
*/
/*!\fn bool SgClassDefinition::get_isPrivate() const
\brief \brief See  const
isPrivate for documentation */
/*!\fn bool SgClassDefinition::get_isSequence() const
\brief \brief See  const
isSequence for documentation */
/*!
\fn const SgBaseClassPtrList &SgClassDefinition::get_inheritances() const
\brief Returns a const list to the base classes.See  const
inheritances for documentation 
\return Returns a const STL list by reference.
*/
/*!
\fn const SgDeclarationStatementPtrList &SgClassDefinition::get_members() const
\brief Returns a const list to the data member declarations.See  const
members for documentation 
\return Returns a const STL list by reference.
*/
/*!\fn unsigned int SgClassDefinition::get_packingAlignment() const
\brief \brief See  const
packingAlignment for documentation */
/*!\fn virtual SgName SgClassDefinition::get_mangled_name() const
\brief \brief See  const
mangled_name for documentation */
/*!
\fn virtual SgName SgClassDefinition::get_qualified_name() const
\brief Returns SgName (a string) representing the name of the current scope.See  const
qualified_name for documentation 
   See discussion of qualified names in the documentation.
\return Returns SgName (a string).
*/
/*!\fn virtual SgNode *SgClassDefinition::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgClassDefinition::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgClassDefinition::get_numberOfTraversalSuccessors()
\brief \brief See  SgClassDefinition::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgClassDefinition::get_traversalSuccessorContainer()
\brief \brief See  SgClassDefinition::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgClassDefinition::get_traversalSuccessorNamesContainer()
\brief \brief See  SgClassDefinition::traversalSuccessorNamesContainer for documentation */
/*!\fn SgClassDefinition::SgClassDefinition()
*/
//@}
int SAGE_Doxygen_Dummy_50242647226498;
