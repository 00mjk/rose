/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUsingDeclarationStatement
//////////////////////////////////////////////////////////////////////////
/*!
\class SgUsingDeclarationStatement
\brief This class represents the concept of a C++ using declaration.
   The using declaration permits named declaration or declarations within the named
namespace to be used in the scope of the using declaration without name qualification.
\sa
\ref SgUsingDeclarationStatement_usage  "Example of using a SgUsingDeclarationStatement object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUsingDeclarationStatement data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUsingDeclarationStatement member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgUsingDeclarationStatement_create "Example:create an SgUsingDeclarationStatement object"
*/
/*!
\fn SgUsingDeclarationStatement::~SgUsingDeclarationStatement()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgUsingDeclarationStatement::isSgUsingDeclarationStatement (SgNode *s)
\brief Cast function (from derived class to SgUsingDeclarationStatement pointer).
   This functions returns a SgUsingDeclarationStatement pointer for any input of a 
pointer to an object derived from a SgUsingDeclarationStatement.
\return Returns valid pointer to SgUsingDeclarationStatement if input is derived from a SgLocatedNode.
*/
/*!
\fn SgUsingDeclarationStatement::isSgUsingDeclarationStatement (const SgNode *s)
\brief Cast function (from derived class to SgUsingDeclarationStatement pointer).
   This functions returns a SgUsingDeclarationStatement pointer for any input of a 
pointer to an object derived from a SgUsingDeclarationStatement.
\return Returns valid pointer to SgUsingDeclarationStatement if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgDeclarationStatement *SgUsingDeclarationStatement::p_declaration
\brief This pointer points to a SgDeclarationStatement whose declaration(s) are available
    for use in the scope containing this using declaration.
\internal this is a valid pointer if the IR nodes specified using a declaration (else
    p_initializedName is valid).  Only one of p_declaration and p_initializedName are
    valid pointers.
*/
/*! \var SgInitializedName *SgUsingDeclarationStatement::p_initializedName
\brief This pointer points to a SgDeclarationStatement whose declaration(s) are available
    for use in the scope containing this using declaration.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgUsingDeclarationStatement::SgUsingDeclarationStatement(Sg_File_Info *startOfConstruct,SgDeclarationStatement *declaration=(0),SgInitializedName *initializedName=(0))
*/
/*!
\fn SgUsingDeclarationStatement::SgUsingDeclarationStatement(const SgUsingDeclarationStatementStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgUsingDeclarationStatement base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn inline static void SgUsingDeclarationStatement::operator delete(void *pointer)
*/
/*!\fn static SgUsingDeclarationStatement *SgUsingDeclarationStatement::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgUsingDeclarationStatement::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgUsingDeclarationStatement::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgUsingDeclarationStatement::initializeStorageClassArray(SgUsingDeclarationStatementStorageClass *storageArray)
*/
/*!\fn static void SgUsingDeclarationStatement::clearMemoryPool()
*/
/*!\fn static void SgUsingDeclarationStatement::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgUsingDeclarationStatement::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgUsingDeclarationStatement::roseRTI()
*/
/*!\fn virtual SgNode *SgUsingDeclarationStatement::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgUsingDeclarationStatement::~SgUsingDeclarationStatement()
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgUsingDeclarationStatement::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgUsingDeclarationStatement::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgUsingDeclarationStatement::cfgIndexForEnd() const
*/
/*!\fn virtual void SgUsingDeclarationStatement::post_construction_initialization()
*/
/*!
\fn void SgUsingDeclarationStatement::set_declaration(SgDeclarationStatement *declaration)
\brief Access function for p_declaration.See  *declaration)
declaration for documentation 
\return Returns void.
*/
/*!
\fn void SgUsingDeclarationStatement::set_initializedName(SgInitializedName *initializedName)
\brief Access function for p_initializedName.See  *initializedName)
initializedName for documentation 
\return Returns void.
*/
/*!
\fn SgDeclarationStatement *SgUsingDeclarationStatement::get_declaration() const
\brief Access function for p_declaration.See  const
declaration for documentation 
    This is a valid pointer if the using declaration references 
a declaration, else it is null and p_initializedName is a valid pointer.
One or the other is a valid pointer, but not both.
\return Returns pointer to SgDeclaration.
*/
/*!
\fn SgInitializedName *SgUsingDeclarationStatement::get_initializedName() const
\brief Access function for p_initializedName.See  const
initializedName for documentation 
    This is a valid pointer if the using declaration references 
a variable name, else it is null and p_declaration is a valid pointer.
One or the other is a valid pointer, but not both.
\return Returns pointer to SgInitializedName.
*/
/*!\fn virtual SgName SgUsingDeclarationStatement::get_mangled_name() const
\brief \brief See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgUsingDeclarationStatement::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgUsingDeclarationStatement::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgUsingDeclarationStatement::get_numberOfTraversalSuccessors()
\brief \brief See  SgUsingDeclarationStatement::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgUsingDeclarationStatement::get_traversalSuccessorContainer()
\brief \brief See  SgUsingDeclarationStatement::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgUsingDeclarationStatement::get_traversalSuccessorNamesContainer()
\brief \brief See  SgUsingDeclarationStatement::traversalSuccessorNamesContainer for documentation */
/*!\fn SgUsingDeclarationStatement::SgUsingDeclarationStatement(SgDeclarationStatement *declaration,SgInitializedName *initializedName)
*/
//@}
int SAGE_Doxygen_Dummy_22250138302844;
