/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgName
//////////////////////////////////////////////////////////////////////////
/*!
\class SgName
\brief This class represents strings within the IR nodes.
   It contains a number of operators that make it similar to the C++ string class.
\internal This class internally contains a "char*" C style string.
\todo Define a string conversion operator so that we can handle 
   "SgName name; string s = name;"  This would start the process of 
   internally having SgName contain a C++ style string.
\todo Change SgName to store a C++ style std::string, instead of a C style char*.
\todo Some of the member functions defined in this class will be removed 
   (head(), tail(), etc.) because they represent low level string handling which is best
    done on a C++ style string more directly using C++ string operators.
\sa
\ref SgName_usage  "Example of using a SgName object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgName data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgName member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgName::~SgName()
\brief This is the destructor.
   There is nothing to delete in this object.
*/
/*!
\fn SgName::isSgName (SgNode *s)
\brief Cast function (from derived class to SgName pointer).
   This functions returns a SgName pointer for any input of a 
pointer to an object derived from a SgName.
\return Returns valid pointer to SgName if input is derived from a SgLocatedNode.
*/
/*!
\fn SgName::isSgName (const SgNode *s)
\brief Cast function (from derived class to SgName pointer).
   This functions returns a SgName pointer for any input of a 
pointer to an object derived from a SgName.
\return Returns valid pointer to SgName if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var std::string SgName::p_char
\brief This pointer points to an internal C style string.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgName &SgName::head(int n)
*/
/*!\fn SgName &SgName::operator+=(const SgName &n1)
*/
/*!\fn SgName &SgName::operator<<(const std::string &str)
*/
/*!\fn SgName &SgName::operator<<(int val)
*/
/*!\fn SgName &SgName::operator=(const SgName &n1)
*/
/*!\fn SgName &SgName::tail(int n)
*/
/*!
\fn SgName::SgName()
\brief This is the constructor.
   This constructor builds the SgName base class.
\sa 
\ref SgName_create "Example:create an SgName object"
*/
/*!\fn SgName::SgName(const SgName &n)
*/
/*!\fn SgName::SgName(const SgNameStorageClass &source)
*/
/*!\fn SgName::SgName(const char *str)
*/
/*!\fn SgName::SgName(const std::string &str)
*/
/*!\fn SgName::operator std::string() const
*/
/*!\fn const char *SgName::str() const
*/
/*!\fn const std::string &SgName::getString() const
*/
/*!\fn inline bool SgName::operator==(const int i) const
*/
/*!\fn inline static void SgName::operator delete(void *pointer)
*/
/*!\fn int SgName::is_null() const
*/
/*!\fn int SgName::operator!=(const SgName &n1) const
*/
/*!\fn int SgName::operator<(const SgName &n1) const
*/
/*!\fn int SgName::operator==(const SgName &n1) const
*/
/*!\fn static SgName *SgName::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static SgName SgName::assembleQualifiedName(const SgName &scopeQualifiedName,const SgName &localName)
*/
/*!\fn static SgName SgName::itoname(int val)
*/
/*!\fn static unsigned long SgName::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgName::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgName::initializeStorageClassArray(SgNameStorageClass *storageArray)
*/
/*!\fn static void SgName::clearMemoryPool()
*/
/*!\fn static void SgName::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgName::resetValidFreepointers()
*/
/*!\fn std::string &SgName::getString()
*/
/*!\fn virtual RTIReturnType SgName::roseRTI()
*/
/*!\fn virtual SgNode *SgName::copy(SgCopyHelp &help) const
*/
/*!\fn void SgName::display(const std::string &label=("")) const
*/
/*!\fn void SgName::replace_space(char t)
*/
/*!\fn unsigned int SgName::get_length() const
\description See  const
length for documentation */
/*!\fn virtual SgNode *SgName::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgName::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgName::get_numberOfTraversalSuccessors()
\description See  SgName::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgName::get_traversalSuccessorContainer()
\description See  SgName::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgName::get_traversalSuccessorNamesContainer()
\description See  SgName::traversalSuccessorNamesContainer for documentation */
/*!\fn virtual SgName::~SgName()
*/
//@}
int SAGE_Doxygen_Dummy_1415384734136;
