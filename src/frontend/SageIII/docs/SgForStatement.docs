/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgForStatement
//////////////////////////////////////////////////////////////////////////
/*!
\class SgForStatement
\brief This class represents the concept of a for loop.
\internal 
\todo The conditional in this test is currently an expression, but should be a
    SgConditional or a SgStatement (e.g. so that it can be a variable declaration).
\todo Now that the test is a SgStatement, perhaps the name of the field should be 
      "test" instead of "test_expr".
*/
/*
\sa
\ref SgForStatement_usage  "Example of using a SgForStatement object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgForStatement data members
/////////////////////////////////////////////////////////////////////////
/*! \var SgForStatement::p_test_expr_root
\brief This pointer a SgExpression (a list of pointers to statements (SgStatement objects) ).
\note I think this is a poor name for this variable.
\todo This should be changed to be a SgStatement (to follow the C++ standard).
    this way it could be an expression (via an expression statement) or a variable
    declaration with initializer (via a SgVariableDeclaration).
    We also have the condition specified before the body within the ROSETTA
    specification and this causes the traversal to travers the condition and body in the
    wrong order (for do-while, the traversal should be body forst and condition second).
    See test2005_114.C for more details and example code (example of strange loops).
*/
/*! \var SgForStatement::p_increment_expr_root
\brief This pointer a SgExpression (a list of pointers to statements (SgStatement objects) ).
\note I think this is a poor name for this variable.
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgForStatement member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgForStatement_create "Example:create an SgForStatement object"
*/
/*!
\fn SgForStatement::~SgForStatement()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgForStatement::isSgForStatement (SgNode *s)
\brief Cast function (from derived class to SgForStatement pointer).
   This functions returns a SgForStatement pointer for any input of a 
pointer to an object derived from a SgForStatement.
\return Returns valid pointer to SgForStatement if input is derived from a SgLocatedNode.
*/
/*!
\fn SgForStatement::isSgForStatement (const SgNode *s)
\brief Cast function (from derived class to SgForStatement pointer).
   This functions returns a SgForStatement pointer for any input of a 
pointer to an object derived from a SgForStatement.
\return Returns valid pointer to SgForStatement if input is derived from a SgLocatedNode.
*/
/*!
\fn SgForStatement::get_increment_expr() const
\brief Access function for p_increment_expr.
\return Returns a pointer to a SgExpression.
*/
/*!
\fn SgForStatement::set_increment_expr(SgExpression* increment_expr)
\brief Access function for p_increment_expr.
\param increment_expr SgExpression pointer
\return Returns void.
*/
/*! \name Class Members*/
//@{
/*! \var SgBasicBlock *SgForStatement::p_loop_body
\brief This pointer a SgBasicBlock, and holds the statements in the body of the loop.
\note I think this is a poor name for this variable (should be "body" to match other IR
      nodes).
\todo Change "loop_body" to "body" to be consistant with other scopes that contain a SgBasicBlock.
*/
/*!\var SgExpression *SgForStatement::p_increment
*/
/*! \var SgForInitStatement *SgForStatement::p_for_init_stmt
\brief This pointer a SgForInitStatement (a list of pointers to statements (SgStatement objects) ).
\note I think this is a poor name for this variable.
*/
/*!\var SgStatement *SgForStatement::p_test
*/
/*!\var std::string SgForStatement::p_string_label
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgForStatement::SgForStatement(Sg_File_Info *startOfConstruct,SgStatement *test=(0),SgExpression *increment=(0),SgBasicBlock *loop_body=(0))
*/
/*!
\fn SgForStatement::SgForStatement(const SgForStatementStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgForStatement base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn inline static void SgForStatement::operator delete(void *pointer)
*/
/*!\fn static SgForStatement *SgForStatement::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgForStatement::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgForStatement::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgForStatement::initializeStorageClassArray(SgForStatementStorageClass *storageArray)
*/
/*!\fn static void SgForStatement::clearMemoryPool()
*/
/*!\fn static void SgForStatement::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgForStatement::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgForStatement::roseRTI()
*/
/*!\fn virtual SgForStatement::~SgForStatement()
*/
/*!
\fn virtual SgNode *SgForStatement::copy(SgCopyHelp &help) const
\brief Makes a copy (deap of shallow depending on SgCopyHelp).
\return Returns pointer to copy of SgForStatement.
*/
/*!\fn virtual bool SgForStatement::cfgIsIndexInteresting(unsigned int ) const
*/
/*!\fn virtual bool SgForStatement::replace_child(SgStatement *,SgStatement *,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual int SgForStatement::replace_expression(SgExpression *original_expression,SgExpression *new_expression)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgForStatement::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgForStatement::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgForStatement::cfgFindChildIndex(SgNode *n)
*/
/*!\fn virtual unsigned int SgForStatement::cfgFindNextChildIndex(SgNode *n)
*/
/*!\fn virtual unsigned int SgForStatement::cfgIndexForEnd() const
*/
/*!\fn virtual void SgForStatement::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgForStatement::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgForStatement::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgForStatement::post_construction_initialization()
*/
/*!\fn void SgForStatement::append_init_stmt(SgStatement *element)
*/
/*!\fn void SgForStatement::insert_init_stmt(const std::vector < SgStatement * , std::allocator< SgStatement * > > ::iterator &list,SgStatement *element)
*/
/*!\fn void SgForStatement::prepend_init_stmt(SgStatement *element)
*/
/*!
\fn void SgForStatement::set_for_init_stmt(SgForInitStatement *for_init_stmt)
\brief Access function for p_for_init_stmt.See  *for_init_stmt)
for_init_stmt for documentation 
\param for_init_stmt SgForInitStatement pointer
\return Returns void.
*/
/*!\fn void SgForStatement::set_increment(SgExpression *increment)
\brief \brief See  *increment)
increment for documentation */
/*!
\fn void SgForStatement::set_loop_body(SgBasicBlock *loop_body)
\brief Access function for p_loop_body.See  *loop_body)
loop_body for documentation 
\param loop_body SgBasicBlock pointer
\return Returns void.
*/
/*!\fn void SgForStatement::set_string_label(std::string string_label)
\brief \brief See  string_label)
string_label for documentation */
/*!\fn void SgForStatement::set_test(SgStatement *test)
\brief \brief See  *test)
test for documentation */
/*!
\fn void SgForStatement::set_test_expr(SgExpression *expression)
\brief Access function for p_test_expr_root.See  *expression)
test_expr for documentation 
\param test_expr SgExpression pointer
\return Returns void.
*/
/*!
\fn SgBasicBlock *SgForStatement::get_loop_body() const
\brief Access function for p_loop_body.See  const
loop_body for documentation 
\return Returns a pointer to a SgBasicBlock.
*/
/*!\fn SgExpression *SgForStatement::get_increment() const
\brief \brief See  const
increment for documentation */
/*!
\fn SgExpression *SgForStatement::get_test_expr() const
\brief Access function for p_test_expr_root.See  const
test_expr for documentation 
\return Returns a pointer to a SgExpression.
*/
/*!
\fn SgForInitStatement *SgForStatement::get_for_init_stmt() const
\brief Access function for p_for_init_stmt.See  const
for_init_stmt for documentation 
\return Returns a pointer to a SgForInitStatement.
*/
/*!\fn SgStatement *SgForStatement::get_test() const
\brief \brief See  const
test for documentation */
/*!\fn SgStatementPtrList &SgForStatement::get_init_stmt()
\brief \brief See  &SgForStatement::init_stmt for documentation */
/*!\fn const SgStatementPtrList &SgForStatement::get_init_stmt() const
\brief \brief See  const
init_stmt for documentation */
/*!\fn std::string SgForStatement::get_string_label() const
\brief \brief See  const
string_label for documentation */
/*!\fn virtual SgName SgForStatement::get_mangled_name() const
\brief \brief See  const
mangled_name for documentation */
/*!\fn virtual SgNode *SgForStatement::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgForStatement::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgForStatement::get_numberOfTraversalSuccessors()
\brief \brief See  SgForStatement::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgForStatement::get_traversalSuccessorContainer()
\brief \brief See  SgForStatement::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgForStatement::get_traversalSuccessorNamesContainer()
\brief \brief See  SgForStatement::traversalSuccessorNamesContainer for documentation */
/*!\fn SgForStatement::SgForStatement(SgStatement *test,SgExpression *increment,SgBasicBlock *loop_body)
*/
//@}
int SAGE_Doxygen_Dummy_185522895426960;
