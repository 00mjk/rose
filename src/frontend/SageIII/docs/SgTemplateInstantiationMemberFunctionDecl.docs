/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationMemberFunctionDecl
//////////////////////////////////////////////////////////////////////////
/*!
\class SgTemplateInstantiationMemberFunctionDecl
\brief This class represents the concept of an instantiation of member function template
    or a member function of an instantiation of a template class.
\internal 
\todo Make the "*PtrList" typed objects non-pointer data members (lists) instead of
    pointer to lists.
*/
/*
\sa
\ref SgTemplateInstantiationMemberFunctionDecl_usage  "Example of using a SgTemplateInstantiationMemberFunctionDecl object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationMemberFunctionDecl data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationMemberFunctionDecl member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgTemplateInstantiationMemberFunctionDecl_create "Example:create an SgTemplateInstantiationMemberFunctionDecl object"
*/
/*!
\fn SgTemplateInstantiationMemberFunctionDecl::~SgTemplateInstantiationMemberFunctionDecl()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgTemplateInstantiationMemberFunctionDecl::isSgTemplateInstantiationMemberFunctionDecl (SgNode *s)
\brief Cast function (from derived class to SgTemplateInstantiationMemberFunctionDecl pointer).
   This functions returns a SgTemplateInstantiationMemberFunctionDecl pointer for any input of a 
pointer to an object derived from a SgTemplateInstantiationMemberFunctionDecl.
\return Returns valid pointer to SgTemplateInstantiationMemberFunctionDecl if input is derived from a SgLocatedNode.
*/
/*!
\fn SgTemplateInstantiationMemberFunctionDecl::isSgTemplateInstantiationMemberFunctionDecl (const SgNode *s)
\brief Cast function (from derived class to SgTemplateInstantiationMemberFunctionDecl pointer).
   This functions returns a SgTemplateInstantiationMemberFunctionDecl pointer for any input of a 
pointer to an object derived from a SgTemplateInstantiationMemberFunctionDecl.
\return Returns valid pointer to SgTemplateInstantiationMemberFunctionDecl if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*!
\var SgName SgTemplateInstantiationMemberFunctionDecl::p_templateName
\brief This is the name of the templated class (in the form "name<args>")
\internal This name is computed internally (in AST post-processing) and stored 
    explicitly.  It can be reset by calling resetTemplateName(SgTemplateInstantiationDecl).
*/
/*!
\var SgTemplateArgumentPtrListPtr SgTemplateInstantiationMemberFunctionDecl::p_templateArguments
\brief This is a pointer to a list of pointers to SgTemplateArgument objects (used with
    the SgTemplateDeclaration to construct this instantiation).
   The template arguments are used to generate the full template name recorded in
   p_templateName.  All arguments are saved into the argument list, but not all
   arguments are output in the generated code (see SgTemplateArgument for details).
\note Template arguments are found in the instantiations, and template parameters are found
    in the SgTemplateDeclaration (arguments are not the same a parameters, same as for
    descriptions for functions).
*/
/*!
\var SgTemplateDeclaration *SgTemplateInstantiationMemberFunctionDecl::p_templateDeclaration
\brief This is the template declarations (SgTemplateDeclaration) from which this template
    instantiation is constructed.  This can be NULL, as I recall, for nested classes.
*/
/*!
\var bool SgTemplateInstantiationMemberFunctionDecl::p_nameResetFromMangledForm
\brief This bool value is set to false at construction and later reset to true 
   within post-processing as each instantiated template name is reset from EDG
   names (e.g. "A____L42") to ROSE generated names (e.g. "A<int>").  Either names
   would work as well for some purposes, but for source to source translation purposes
   we wanted the original names to be used (also avoids/simplifies linking issues 
   using generated code with non-generated code).
\internal This variable is set/reset internally and there is no need for it to be set by the user!
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgTemplateInstantiationMemberFunctionDecl::SgTemplateInstantiationMemberFunctionDecl(Sg_File_Info *startOfConstruct,SgName name=(""),SgFunctionType *type=(0),SgFunctionDefinition *definition=(0),SgTemplateDeclaration *templateDeclaration=(0),SgTemplateArgumentPtrListPtr templateArguments=(0))
*/
/*!
\fn SgTemplateInstantiationMemberFunctionDecl::SgTemplateInstantiationMemberFunctionDecl(const SgTemplateInstantiationMemberFunctionDeclStorageClass &source)
\brief This is the constructor.
   This constructor builds the SgTemplateInstantiationMemberFunctionDecl base class.
\param startOfConstruct represents the position in the source code
*/
/*!\fn inline static void SgTemplateInstantiationMemberFunctionDecl::operator delete(void *pointer)
*/
/*!\fn static SgTemplateInstantiationMemberFunctionDecl *SgTemplateInstantiationMemberFunctionDecl::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgTemplateInstantiationMemberFunctionDecl::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgTemplateInstantiationMemberFunctionDecl::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgTemplateInstantiationMemberFunctionDecl::initializeStorageClassArray(SgTemplateInstantiationMemberFunctionDeclStorageClass *storageArray)
*/
/*!\fn static void SgTemplateInstantiationMemberFunctionDecl::clearMemoryPool()
*/
/*!\fn static void SgTemplateInstantiationMemberFunctionDecl::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgTemplateInstantiationMemberFunctionDecl::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgTemplateInstantiationMemberFunctionDecl::roseRTI()
*/
/*!\fn virtual SgNode *SgTemplateInstantiationMemberFunctionDecl::copy(SgCopyHelp &help) const
*/
/*!\fn virtual SgTemplateInstantiationMemberFunctionDecl::~SgTemplateInstantiationMemberFunctionDecl()
*/
/*!\fn virtual void SgTemplateInstantiationMemberFunctionDecl::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateInstantiationMemberFunctionDecl::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateInstantiationMemberFunctionDecl::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgTemplateInstantiationMemberFunctionDecl::post_construction_initialization()
*/
/*! 
See  nameResetFromMangledForm)
nameResetFromMangledForm for documentation \fn void SgTemplateInstantiationMemberFunctionDecl::set_nameResetFromMangledForm(bool nameResetFromMangledForm)
\brief Access function for p_nameResetFromMangledForm.
\return returns void.
*/
/*! 
See  templateArguments)
templateArguments for documentation \fn void SgTemplateInstantiationMemberFunctionDecl::set_templateArguments(SgTemplateArgumentPtrListPtr templateArguments)
\brief Access function for p_templateArguments.
\return returns void.
*/
/*! 
See  *templateDeclaration)
templateDeclaration for documentation \fn void SgTemplateInstantiationMemberFunctionDecl::set_templateDeclaration(SgTemplateDeclaration *templateDeclaration)
\brief Access function for p_templateDeclaration.
\return returns void.
*/
/*! 
See  templateName)
templateName for documentation \fn void SgTemplateInstantiationMemberFunctionDecl::set_templateName(SgName templateName)
\brief sets name of instantiated function template, name includes template arguments.
\return returns void.
*/
/*! 
See  const
templateName for documentation \fn SgName SgTemplateInstantiationMemberFunctionDecl::get_templateName() const
\brief Returns name of instantiated function template, name includes template arguments.
\return returns SgName by value.
*/
/*! 
See  const
templateArguments for documentation \fn SgTemplateArgumentPtrListPtr SgTemplateInstantiationMemberFunctionDecl::get_templateArguments() const
\brief Returns pointer to STL list of pointers to SgTemplateArgument objects.
\return Returns pointer to STL list of pointers to SgTemplateArgument objects.
*/
/*! 
See  const
templateDeclaration for documentation \fn SgTemplateDeclaration *SgTemplateInstantiationMemberFunctionDecl::get_templateDeclaration() const
\brief Returns pointer to SgTemplateDeclaration from which instantiation is generated.
\return returns pointer to SgTemplateDeclaration.
*/
/*! 
See  const
nameResetFromMangledForm for documentation \fn bool SgTemplateInstantiationMemberFunctionDecl::get_nameResetFromMangledForm() const
\brief Returns pointer to SgTemplateDeclaration from which instantiation is generated.
\return returns pointer to SgTemplateDeclaration.
*/
/*!\fn virtual SgNode *SgTemplateInstantiationMemberFunctionDecl::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual SgSymbol *SgTemplateInstantiationMemberFunctionDecl::get_symbol_from_symbol_table() const
\description See  const
symbol_from_symbol_table for documentation */
/*!\fn virtual size_t SgTemplateInstantiationMemberFunctionDecl::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgTemplateInstantiationMemberFunctionDecl::get_numberOfTraversalSuccessors()
\description See  SgTemplateInstantiationMemberFunctionDecl::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgTemplateInstantiationMemberFunctionDecl::get_traversalSuccessorContainer()
\description See  SgTemplateInstantiationMemberFunctionDecl::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgTemplateInstantiationMemberFunctionDecl::get_traversalSuccessorNamesContainer()
\description See  SgTemplateInstantiationMemberFunctionDecl::traversalSuccessorNamesContainer for documentation */
/*!\fn SgTemplateInstantiationMemberFunctionDecl::SgTemplateInstantiationMemberFunctionDecl(SgName name,SgFunctionType *type,SgFunctionDefinition *definition,SgTemplateDeclaration *templateDeclaration,SgTemplateArgumentPtrListPtr templateArguments)
*/
//@}
int SAGE_Doxygen_Dummy_27976858119085;
