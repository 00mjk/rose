/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgEnumDeclaration
//////////////////////////////////////////////////////////////////////////
/*!
\class SgEnumDeclaration
\brief This class represents the concept of an enum declaration.
\sa
\ref SgEnumDeclaration_usage  "Example of using a SgEnumDeclaration object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgEnumDeclaration data members
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgEnumDeclaration member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgEnumDeclaration_create "Example:create an SgEnumDeclaration object"
*/
/*!
\fn SgEnumDeclaration::~SgEnumDeclaration()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgEnumDeclaration::isSgEnumDeclaration (SgNode *s)
\brief Cast function (from derived class to SgEnumDeclaration pointer).
   This functions returns a SgEnumDeclaration pointer for any input of a 
pointer to an object derived from a SgEnumDeclaration.
\return Returns valid pointer to SgEnumDeclaration if input is derived from a SgLocatedNode.
*/
/*!
\fn SgEnumDeclaration::isSgEnumDeclaration (const SgNode *s)
\brief Cast function (from derived class to SgEnumDeclaration pointer).
   This functions returns a SgEnumDeclaration pointer for any input of a 
pointer to an object derived from a SgEnumDeclaration.
\return Returns valid pointer to SgEnumDeclaration if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*! \var SgEnumType *SgEnumDeclaration::p_type
\brief SgEnumType generated by this enum declaration.
*/
/*! \var SgInitializedNamePtrList SgEnumDeclaration::p_enumerators
\brief STL list of pointers to SgInitializedName object (used for enum variables).
*/
/*! \var SgName SgEnumDeclaration::p_name
\brief Name of enum type (empty if not named).
*/
/*! \var SgScopeStatement *SgEnumDeclaration::p_scope
\brief Scope of enum declaration. 
    Note that the scope of the enum must be stored explicitly since it can be declared in
    a namespace and defined outside the namespace (note that forward declarations of
    enum types.
*/
/*! \var bool SgEnumDeclaration::p_embedded
\brief Boolean value true if embedded in a typedef declaration (might not be used).
*/
/*!\var bool SgEnumDeclaration::p_isUnNamed
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgEnumDeclaration::SgEnumDeclaration(Sg_File_Info *startOfConstruct,SgName name=(""),SgEnumType *type=(0))
*/
/*!\fn SgEnumDeclaration::SgEnumDeclaration(const SgEnumDeclarationStorageClass &source)
*/
/*!\fn inline static void SgEnumDeclaration::operator delete(void *pointer)
*/
/*!\fn static SgEnumDeclaration *SgEnumDeclaration::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgEnumDeclaration::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgEnumDeclaration::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgEnumDeclaration::initializeStorageClassArray(SgEnumDeclarationStorageClass *storageArray)
*/
/*!\fn static void SgEnumDeclaration::clearMemoryPool()
*/
/*!\fn static void SgEnumDeclaration::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgEnumDeclaration::resetValidFreepointers()
*/
/*!\fn std::vector < SgInitializedName * , std::allocator< SgInitializedName * > > ::iterator SgEnumDeclaration::append_enumerator(SgInitializedName *element)
*/
/*!\fn std::vector < SgInitializedName * , std::allocator< SgInitializedName * > > ::iterator SgEnumDeclaration::insert_enumerator(const std::vector < SgInitializedName * , std::allocator< SgInitializedName * > > ::iterator &list,SgInitializedName *element)
*/
/*!\fn std::vector < SgInitializedName * , std::allocator< SgInitializedName * > > ::iterator SgEnumDeclaration::prepend_enumerator(SgInitializedName *element)
*/
/*!\fn virtual RTIReturnType SgEnumDeclaration::roseRTI()
*/
/*!\fn virtual SgEnumDeclaration::~SgEnumDeclaration()
*/
/*!\fn virtual SgNode *SgEnumDeclaration::copy(SgCopyHelp &help) const
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgEnumDeclaration::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgEnumDeclaration::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgEnumDeclaration::cfgIndexForEnd() const
*/
/*!\fn virtual void SgEnumDeclaration::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgEnumDeclaration::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgEnumDeclaration::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgEnumDeclaration::post_construction_initialization()
*/
/*!
\fn virtual void SgEnumDeclaration::set_scope(SgScopeStatement *scope)
\brief Access function for p_scope.See  *scope)
scope for documentation 
\return Returns void.
*/
/*!
\fn void SgEnumDeclaration::set_embedded(bool embedded)
\brief Access function for p_embedded.See  embedded)
embedded for documentation 
\return Returns void.
*/
/*!\fn void SgEnumDeclaration::set_isUnNamed(bool isUnNamed)
\brief \brief See  isUnNamed)
isUnNamed for documentation */
/*!
\fn void SgEnumDeclaration::set_name(SgName name)
\brief Access function for p_name.See  name)
name for documentation 
\return Returns void.
*/
/*!
\fn void SgEnumDeclaration::set_type(SgEnumType *type)
\brief Access function for p_type.See  *type)
type for documentation 
\return Returns void.
*/
/*!
\fn SgEnumType *SgEnumDeclaration::get_type() const
\brief Access function for p_type.See  const
type for documentation 
\return Returns pointer to SgType.
*/
/*!
\fn SgInitializedNamePtrList &SgEnumDeclaration::get_enumerators()
\brief Access function for p_enumerators.See  &SgEnumDeclaration::enumerators for documentation 
\return Returns reference to SgInitializedNamePtrList.
*/
/*!
\fn SgName SgEnumDeclaration::get_name() const
\brief Access function for p_name.See  const
name for documentation 
\return Returns SgName by value.
*/
/*!
\fn bool SgEnumDeclaration::get_embedded() const
\brief Access function for p_embedded.See  const
embedded for documentation 
\return Returns bool by value.
*/
/*!\fn bool SgEnumDeclaration::get_isUnNamed() const
\brief \brief See  const
isUnNamed for documentation */
/*!
\fn const SgInitializedNamePtrList &SgEnumDeclaration::get_enumerators() const
\brief Access function for p_enumerators.See  const
enumerators for documentation 
\return Returns a const reference to SgInitializedNamePtrList.
*/
/*!\fn virtual SgName SgEnumDeclaration::get_mangled_name() const
\brief \brief See  const
mangled_name for documentation */
/*!\fn virtual SgName SgEnumDeclaration::get_qualified_name() const
\brief \brief See  const
qualified_name for documentation */
/*!\fn virtual SgNode *SgEnumDeclaration::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!
\fn virtual SgScopeStatement *SgEnumDeclaration::get_scope() const
\brief Access function for p_scope.See  const
scope for documentation 
\return Returns pointer to SgScopeStatement.
*/
/*!\fn virtual SgSymbol *SgEnumDeclaration::get_symbol_from_symbol_table() const
\brief \brief See  const
symbol_from_symbol_table for documentation */
/*!\fn virtual size_t SgEnumDeclaration::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgEnumDeclaration::get_numberOfTraversalSuccessors()
\brief \brief See  SgEnumDeclaration::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgEnumDeclaration::get_traversalSuccessorContainer()
\brief \brief See  SgEnumDeclaration::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgEnumDeclaration::get_traversalSuccessorNamesContainer()
\brief \brief See  SgEnumDeclaration::traversalSuccessorNamesContainer for documentation */
/*!
\fn SgEnumDeclaration::SgEnumDeclaration(SgName name,SgEnumType *type)
\brief This is the constructor.
   This constructor builds the SgEnumDeclaration base class.
\param startOfConstruct represents the position in the source code
*/
//@}
int SAGE_Doxygen_Dummy_99371673531283;
