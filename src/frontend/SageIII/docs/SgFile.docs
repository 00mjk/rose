/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFile
//////////////////////////////////////////////////////////////////////////
/*!
\class SgFile
\brief This class represents a source file for a project (which may contian 
       many source files and or directories).
    This IR node contains information specific to this file and references the 
project for more project (global) information.  The dominately useful data in 
this IR node is the pointer to the global scope for this file (structurally
global scope, but actually file scope and global scope by C++ scoping rules).
\internal This IR node does not appear many times in an AST.  Also it is current
rather bizzar that we keep all the file names instead of just the single relavant 
one!   This should be fixed as it is confusing.
\todo The ROSEAttributesListContainerPtr p_preprocessorDirectivesAndCommentsList
    should be implemented a list instead of a pointer to a list.  This might require
    a list copy in the internal hand,ing, but would simplify the design and there is
    not the same memory constraint of having a pointer to a list vs. a list here because 
    the list is almost always valid (most source code incluses at least one comment or
    CPP directive) and there is only one SgFile object per source file (so there are
    relatively few SgFile nodes in even a very large AST).
\todo This IR nodes now has a Sg_File_Info pointer, however it needs to be made consistant
    with the filename that is returned from SgFile::get_fileName().
\todo The default constructor for SgFile sets the SgGlobal pointer to NULL and perhaps it
    would be better if it set it to a valid SgGlobal object then we would have a better
    defined empty list of declarations.
\todo Yarden has suggested we provide a way to modify the link line that would be 
    generated to support the backend compilation.  I think we should have a list 
    of strings that could be added to the link line (appended to the end would be 
    the simplist).  Else we need a virtual function that could be overloaded to 
    customize the control over the link command generation (however we want to 
    discourage the derivation of user defined IR nodes from existing IR nodes 
    since this would break some of the internal mechanisms that use the memory pools).
\sa
\ref SgFile_usage  "Example of using a SgFile object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFile data members
/////////////////////////////////////////////////////////////////////////
/*!
\var SgFile::p_file_info
\brief This object permits the file name map mechanism to be used on SgFile objects.
    This Sg_File_Info object encapsulates the file id mechanism which maps file ids
    (integers) to filenames (strings). This permist us to save significant storage
    by holding string names only once in memory and associating integers with them
    saving memory and simplify matching file names.  The memory saving is because there 
    would otherwise be a LOT of redundant filename strings, 2 per IR node in many cases.
    the performance advantage is that integer comparisons are significantly than string
    comparisions and there are a lot of these (one per IR node) in the traversal
    mechanisms.
\internal The filename is not currently correct, I think.
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFile member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgFile::~SgFile()
\brief This is the destructor.
   There is nothing to delete in this object.
*/
/*!
\fn SgFile::isSgFile (SgNode *s)
\brief Cast function (from derived class to SgFile pointer).
   This functions returns a SgFile pointer for any input of a 
pointer to an object derived from a SgFile.
\return Returns valid pointer to SgFile if input is derived from a SgLocatedNode.
*/
/*!
\fn SgFile::isSgFile (const SgNode *s)
\brief Cast function (from derived class to SgFile pointer).
   This functions returns a SgFile pointer for any input of a 
pointer to an object derived from a SgFile.
\return Returns valid pointer to SgFile if input is derived from a SgLocatedNode.
*/
/*! \name Class Members*/
//@{
/*!\var AstAttributeMechanism *SgFile::p_attributeMechanism
*/
/*!
\var ROSEAttributesListContainerPtr SgFile::p_preprocessorDirectivesAndCommentsList
\brief This is the container of comments and preprocessor control statements that was
    extracted from the file and which has been woven back into the AST (using heuristics).
   This information is extracted from the file using a lex based parser.  Within AST post
   processing the comments and preprocessor control statements are woven back into the 
   AST using simple heuristics.  They are attached to the IR nodes as attributes
   (see AST attribute Mechanism).  They are unparsed as part of the code generation 
   phase.
*/
/*!
\var SgGlobal *SgFile::p_root
\brief This is the global scope.
    Note that the global scope contains the file scope as the two are not structurally
    differentiated within the source code.
\internal  This name will be changed to "globalScope" at some point.
*/
/*!
\var SgStringList SgFile::p_originalCommandLineArgumentList
\brief Copy of original argc and argv command line passed to ROSE translator (converted to
    STL list of strings).
\internal This is a deep copy.
*/
/*!\var Sg_File_Info *SgFile::p_startOfConstruct
*/
/*!\var bool SgFile::p_C99_only
*/
/*!\var bool SgFile::p_C_only
*/
/*!\var bool SgFile::p_Cxx_only
*/
/*!\var bool SgFile::p_F2003_only
*/
/*!\var bool SgFile::p_F77_only
*/
/*!\var bool SgFile::p_F90_only
*/
/*!\var bool SgFile::p_F95_only
*/
/*!\var bool SgFile::p_Fortran_only
*/
/*!\var bool SgFile::p_KCC_frontend
*/
/*!\var bool SgFile::p_binary_only
*/
/*!\var bool SgFile::p_collectAllCommentsAndDirectives
*/
/*!\var bool SgFile::p_compileOnly
*/
/*!\var bool SgFile::p_cray_pointer_support
*/
/*!\var bool SgFile::p_disable_edg_backend
*/
/*!\var bool SgFile::p_disable_sage_backend
*/
/*!\var bool SgFile::p_enable_cp_backend
*/
/*!\var bool SgFile::p_exit_after_parser
*/
/*!\var bool SgFile::p_fortran_implicit_none
*/
/*!\var bool SgFile::p_fortran_openmp
*/
/*!\var bool SgFile::p_markGeneratedFiles
*/
/*!\var bool SgFile::p_negative_test
*/
/*!\var bool SgFile::p_new_frontend
*/
/*!
\var bool SgFile::p_no_implicit_inline_templates
\brief This is a reference to the GNU g++ command line option (same name).
    If the option "-no_implicit_inline_templates" is seen on the command line then this is true.
    Else it may be manipulated directly within the ROSE command line processing.
    This option controls if instantiated templates for inline functions should be output where they are
    not specified explicitly via explicit template instatiation directives (see
    SgTemplateInstatiationDirectiveStatement, formally part of C++).
\internal  We need to see this option since it effects how template instantiations are
    generated.  Other backend compilers may force this to be recognized in other ways so that
    we map other vendor's equivalent compiler options to this one.
*/
/*!
\var bool SgFile::p_no_implicit_templates
\brief This is a reference to the GNU g++ command line option (same name).
    If the option "-no_implicit_templates" is seen on the command line then this is true.
    Else it may be manipulated directly within the ROSE command line processing.
    This option controls if instantiated templates should be output where they are
    not specified explicitly via explicit template instatiation directives (see
    SgTemplateInstatiationDirectiveStatement, formally part of C++).
\internal  We need to see this option since it effects how template instantiations are
    generated. Other backend compilers may force this to be recognized in other ways so that
    we map other vendor's equivalent compiler options to this one.
*/
/*!\var bool SgFile::p_outputGrammarTreeFiles
*/
/*!\var bool SgFile::p_outputGrammarTreeFilesForEDG
*/
/*!\var bool SgFile::p_outputGrammarTreeFilesForHeaderFiles
*/
/*!\var bool SgFile::p_output_parser_actions
*/
/*!\var bool SgFile::p_output_warnings
*/
/*!\var bool SgFile::p_preinit_il
*/
/*!\var bool SgFile::p_skip_commentsAndDirectives
*/
/*!\var bool SgFile::p_skip_syntax_check
*/
/*!\var bool SgFile::p_skip_transformation
*/
/*!\var bool SgFile::p_skip_unparse
*/
/*!\var bool SgFile::p_skipfinalCompileStep
*/
/*!\var bool SgFile::p_sourceFileUsesBinaryFileExtension
*/
/*!\var bool SgFile::p_sourceFileUsesCppFileExtension
*/
/*!\var bool SgFile::p_sourceFileUsesFortran2003FileExtension
*/
/*!\var bool SgFile::p_sourceFileUsesFortran77FileExtension
*/
/*!\var bool SgFile::p_sourceFileUsesFortran90FileExtension
*/
/*!\var bool SgFile::p_sourceFileUsesFortran95FileExtension
*/
/*!\var bool SgFile::p_sourceFileUsesFortranFileExtension
*/
/*!\var bool SgFile::p_strict_language_handling
*/
/*!\var bool SgFile::p_travTraceToDOT
*/
/*!\var bool SgFile::p_unparse_includes
*/
/*!\var bool SgFile::p_unparse_line_directives
*/
/*!\var bool SgFile::p_useBackendOnly
*/
/*!\var enum SgFile::outputFormatOption_enum SgFile::p_backendCompileFormat
*/
/*!\var enum SgFile::outputFormatOption_enum SgFile::p_inputFormat
*/
/*!\var enum SgFile::outputFormatOption_enum SgFile::p_outputFormat
*/
/*!\var enum SgFile::outputLanguageOption_enum SgFile::p_outputLanguage
*/
/*!\var int SgFile::p_embedColorCodesInGeneratedCode
*/
/*!\var int SgFile::p_generateSourcePositionCodes
*/
/*!\var int SgFile::p_testingLevel
*/
/*!\var int SgFile::p_verbose
*/
/*!\var std::string SgFile::p_savedEdgCommandLine
*/
/*!\var std::string SgFile::p_sourceFileNameWithPath
*/
/*!\var std::string SgFile::p_sourceFileNameWithoutPath
*/
/*!\var std::string SgFile::p_unparse_output_filename
*/
/*!\var SgAsmFile *SgFile::p_binaryFile
*/
//@}
/*! \name User Interface*/
//@{
/*!
\fn SgFile::SgFile()
\brief This is the constructor.
   This constructor builds the SgFile base class.
\sa 
\ref SgFile_create "Example:create an SgFile object"
*/
/*!\fn SgFile::SgFile(const SgFile &X)
*/
/*!\fn SgFile::SgFile(const SgFileStorageClass &source)
*/
/*!\fn SgFile::SgFile(std::vector< std::string  , std::allocator< std::string  >  > &argv,int &errorCode,int fileNameIndex=0,SgProject *project=(0))
*/
/*!\fn inline static void SgFile::operator delete(void *pointer)
*/
/*!\fn int SgFile::compileOutput(std::vector< std::string  , std::allocator< std::string  >  > &argv,int fileNameIndex,const std::string &compilerName)
*/
/*!\fn static SgFile *SgFile::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgFile::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgFile::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgFile::initializeStorageClassArray(SgFileStorageClass *storageArray)
*/
/*!\fn static void SgFile::clearMemoryPool()
*/
/*!\fn static void SgFile::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgFile::resetValidFreepointers()
*/
/*!\fn std::string SgFile::buildCompilerCommandLineOptions(std::vector< std::string  , std::allocator< std::string  >  > &argv,int fileNameIndex,const std::string &compilerName)
*/
/*!\fn std::string SgFile::getSourceDirectory()
*/
/*!\fn virtual RTIReturnType SgFile::roseRTI()
*/
/*!\fn virtual SgNode *SgFile::copy(SgCopyHelp &help) const
*/
/*!\fn virtual void SgFile::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgFile::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgFile::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn void SgFile::build_EDG_CommandLine(std::vector< std::string  , std::allocator< std::string  >  > &inputCommandLine,std::vector< std::string  , std::allocator< std::string  >  > &argv,int fileNameIndex)
*/
/*!\fn void SgFile::display(const std::string &label) const
*/
/*!\fn void SgFile::doSetupForConstructor(const std::vector< std::string  , std::allocator< std::string  >  > &argv,int &errorCode,int fileNameIndex,SgProject *project)
*/
/*!\fn void SgFile::processBackendSpecificCommandLineOptions(const std::vector< std::string  , std::allocator< std::string  >  > &argv)
*/
/*!\fn virtual void SgFile::set_attributeMechanism(AstAttributeMechanism *attributeMechanism)
\brief \brief See  *attributeMechanism)
attributeMechanism for documentation */
/*!\fn void SgFile::set_C99_only(bool C99_only)
\brief \brief See  C99_only)
C99_only for documentation */
/*!\fn void SgFile::set_C_only(bool C_only)
\brief \brief See  C_only)
C_only for documentation */
/*!\fn void SgFile::set_Cxx_only(bool Cxx_only)
\brief \brief See  Cxx_only)
Cxx_only for documentation */
/*!\fn void SgFile::set_F2003_only(bool F2003_only)
\brief \brief See  F2003_only)
F2003_only for documentation */
/*!\fn void SgFile::set_F77_only(bool F77_only)
\brief \brief See  F77_only)
F77_only for documentation */
/*!\fn void SgFile::set_F90_only(bool F90_only)
\brief \brief See  F90_only)
F90_only for documentation */
/*!\fn void SgFile::set_F95_only(bool F95_only)
\brief \brief See  F95_only)
F95_only for documentation */
/*!\fn void SgFile::set_Fortran_only(bool Fortran_only)
\brief \brief See  Fortran_only)
Fortran_only for documentation */
/*!\fn void SgFile::set_KCC_frontend(bool KCC_frontend)
\brief \brief See  KCC_frontend)
KCC_frontend for documentation */
/*!\fn void SgFile::set_backendCompileFormat(enum SgFile::outputFormatOption_enum backendCompileFormat)
\brief \brief See  backendCompileFormat)
backendCompileFormat for documentation */
/*!\fn void SgFile::set_binaryFile(SgAsmFile *binaryFile)
\brief \brief See  *binaryFile)
binaryFile for documentation */
/*!\fn void SgFile::set_binary_only(bool binary_only)
\brief \brief See  binary_only)
binary_only for documentation */
/*!\fn void SgFile::set_collectAllCommentsAndDirectives(bool collectAllCommentsAndDirectives)
\brief \brief See  collectAllCommentsAndDirectives)
collectAllCommentsAndDirectives for documentation */
/*!\fn void SgFile::set_compileOnly(bool compileOnly)
\brief \brief See  compileOnly)
compileOnly for documentation */
/*!\fn void SgFile::set_cray_pointer_support(bool cray_pointer_support)
\brief \brief See  cray_pointer_support)
cray_pointer_support for documentation */
/*!\fn void SgFile::set_disable_edg_backend(bool disable_edg_backend)
\brief \brief See  disable_edg_backend)
disable_edg_backend for documentation */
/*!\fn void SgFile::set_disable_sage_backend(bool disable_sage_backend)
\brief \brief See  disable_sage_backend)
disable_sage_backend for documentation */
/*!\fn void SgFile::set_embedColorCodesInGeneratedCode(int embedColorCodesInGeneratedCode)
\brief \brief See  embedColorCodesInGeneratedCode)
embedColorCodesInGeneratedCode for documentation */
/*!\fn void SgFile::set_enable_cp_backend(bool enable_cp_backend)
\brief \brief See  enable_cp_backend)
enable_cp_backend for documentation */
/*!\fn void SgFile::set_exit_after_parser(bool exit_after_parser)
\brief \brief See  exit_after_parser)
exit_after_parser for documentation */
/*!\fn void SgFile::set_fortran_implicit_none(bool fortran_implicit_none)
\brief \brief See  fortran_implicit_none)
fortran_implicit_none for documentation */
/*!\fn void SgFile::set_fortran_openmp(bool fortran_openmp)
\brief \brief See  fortran_openmp)
fortran_openmp for documentation */
/*!\fn void SgFile::set_generateSourcePositionCodes(int generateSourcePositionCodes)
\brief \brief See  generateSourcePositionCodes)
generateSourcePositionCodes for documentation */
/*!\fn void SgFile::set_inputFormat(enum SgFile::outputFormatOption_enum inputFormat)
\brief \brief See  inputFormat)
inputFormat for documentation */
/*!\fn void SgFile::set_markGeneratedFiles(bool markGeneratedFiles)
\brief \brief See  markGeneratedFiles)
markGeneratedFiles for documentation */
/*!\fn void SgFile::set_negative_test(bool negative_test)
\brief \brief See  negative_test)
negative_test for documentation */
/*!\fn void SgFile::set_new_frontend(bool new_frontend)
\brief \brief See  new_frontend)
new_frontend for documentation */
/*!\fn void SgFile::set_no_implicit_inline_templates(bool no_implicit_inline_templates)
\brief \brief See  no_implicit_inline_templates)
no_implicit_inline_templates for documentation */
/*!\fn void SgFile::set_no_implicit_templates(bool no_implicit_templates)
\brief \brief See  no_implicit_templates)
no_implicit_templates for documentation */
/*!
\fn void SgFile::set_originalCommandLineArgumentList(SgStringList originalCommandLineArgumentList)
\brief Sets the list of strings representing the original command-line.See  originalCommandLineArgumentList)
originalCommandLineArgumentList for documentation 
*/
/*!\fn void SgFile::set_outputFormat(enum SgFile::outputFormatOption_enum outputFormat)
\brief \brief See  outputFormat)
outputFormat for documentation */
/*!\fn void SgFile::set_outputGrammarTreeFiles(bool outputGrammarTreeFiles)
\brief \brief See  outputGrammarTreeFiles)
outputGrammarTreeFiles for documentation */
/*!\fn void SgFile::set_outputGrammarTreeFilesForEDG(bool outputGrammarTreeFilesForEDG)
\brief \brief See  outputGrammarTreeFilesForEDG)
outputGrammarTreeFilesForEDG for documentation */
/*!\fn void SgFile::set_outputGrammarTreeFilesForHeaderFiles(bool outputGrammarTreeFilesForHeaderFiles)
\brief \brief See  outputGrammarTreeFilesForHeaderFiles)
outputGrammarTreeFilesForHeaderFiles for documentation */
/*!\fn void SgFile::set_outputLanguage(enum SgFile::outputLanguageOption_enum outputLanguage)
\brief \brief See  outputLanguage)
outputLanguage for documentation */
/*!\fn void SgFile::set_output_parser_actions(bool output_parser_actions)
\brief \brief See  output_parser_actions)
output_parser_actions for documentation */
/*!\fn void SgFile::set_output_warnings(bool output_warnings)
\brief \brief See  output_warnings)
output_warnings for documentation */
/*!\fn void SgFile::set_preinit_il(bool preinit_il)
\brief \brief See  preinit_il)
preinit_il for documentation */
/*!\fn void SgFile::set_preprocessorDirectivesAndCommentsList(ROSEAttributesListContainerPtr preprocessorDirectivesAndCommentsList)
\brief \brief See  preprocessorDirectivesAndCommentsList)
preprocessorDirectivesAndCommentsList for documentation */
/*!\fn void SgFile::set_root(SgGlobal *root)
\brief \brief See  *root)
root for documentation */
/*!\fn void SgFile::set_savedEdgCommandLine(std::string savedEdgCommandLine)
\brief \brief See  savedEdgCommandLine)
savedEdgCommandLine for documentation */
/*!\fn void SgFile::set_skip_commentsAndDirectives(bool skip_commentsAndDirectives)
\brief \brief See  skip_commentsAndDirectives)
skip_commentsAndDirectives for documentation */
/*!\fn void SgFile::set_skip_syntax_check(bool skip_syntax_check)
\brief \brief See  skip_syntax_check)
skip_syntax_check for documentation */
/*!\fn void SgFile::set_skip_transformation(bool skip_transformation)
\brief \brief See  skip_transformation)
skip_transformation for documentation */
/*!\fn void SgFile::set_skip_unparse(bool skip_unparse)
\brief \brief See  skip_unparse)
skip_unparse for documentation */
/*!\fn void SgFile::set_skipfinalCompileStep(bool skipfinalCompileStep)
\brief \brief See  skipfinalCompileStep)
skipfinalCompileStep for documentation */
/*!\fn void SgFile::set_sourceFileNameWithPath(std::string sourceFileNameWithPath)
\brief \brief See  sourceFileNameWithPath)
sourceFileNameWithPath for documentation */
/*!\fn void SgFile::set_sourceFileNameWithoutPath(std::string sourceFileNameWithoutPath)
\brief \brief See  sourceFileNameWithoutPath)
sourceFileNameWithoutPath for documentation */
/*!\fn void SgFile::set_sourceFileUsesBinaryFileExtension(bool sourceFileUsesBinaryFileExtension)
\brief \brief See  sourceFileUsesBinaryFileExtension)
sourceFileUsesBinaryFileExtension for documentation */
/*!\fn void SgFile::set_sourceFileUsesCppFileExtension(bool sourceFileUsesCppFileExtension)
\brief \brief See  sourceFileUsesCppFileExtension)
sourceFileUsesCppFileExtension for documentation */
/*!\fn void SgFile::set_sourceFileUsesFortran2003FileExtension(bool sourceFileUsesFortran2003FileExtension)
\brief \brief See  sourceFileUsesFortran2003FileExtension)
sourceFileUsesFortran2003FileExtension for documentation */
/*!\fn void SgFile::set_sourceFileUsesFortran77FileExtension(bool sourceFileUsesFortran77FileExtension)
\brief \brief See  sourceFileUsesFortran77FileExtension)
sourceFileUsesFortran77FileExtension for documentation */
/*!\fn void SgFile::set_sourceFileUsesFortran90FileExtension(bool sourceFileUsesFortran90FileExtension)
\brief \brief See  sourceFileUsesFortran90FileExtension)
sourceFileUsesFortran90FileExtension for documentation */
/*!\fn void SgFile::set_sourceFileUsesFortran95FileExtension(bool sourceFileUsesFortran95FileExtension)
\brief \brief See  sourceFileUsesFortran95FileExtension)
sourceFileUsesFortran95FileExtension for documentation */
/*!\fn void SgFile::set_sourceFileUsesFortranFileExtension(bool sourceFileUsesFortranFileExtension)
\brief \brief See  sourceFileUsesFortranFileExtension)
sourceFileUsesFortranFileExtension for documentation */
/*!\fn void SgFile::set_startOfConstruct(Sg_File_Info *startOfConstruct)
\brief \brief See  *startOfConstruct)
startOfConstruct for documentation */
/*!\fn void SgFile::set_strict_language_handling(bool strict_language_handling)
\brief \brief See  strict_language_handling)
strict_language_handling for documentation */
/*!\fn void SgFile::set_testingLevel(int testingLevel)
\brief \brief See  testingLevel)
testingLevel for documentation */
/*!\fn void SgFile::set_travTraceToDOT(bool travTraceToDOT)
\brief \brief See  travTraceToDOT)
travTraceToDOT for documentation */
/*!\fn void SgFile::set_unparse_includes(bool unparse_includes)
\brief \brief See  unparse_includes)
unparse_includes for documentation */
/*!\fn void SgFile::set_unparse_line_directives(bool unparse_line_directives)
\brief \brief See  unparse_line_directives)
unparse_line_directives for documentation */
/*!\fn void SgFile::set_unparse_output_filename(std::string unparse_output_filename)
\brief \brief See  unparse_output_filename)
unparse_output_filename for documentation */
/*!\fn void SgFile::set_useBackendOnly(bool useBackendOnly)
\brief \brief See  useBackendOnly)
useBackendOnly for documentation */
/*!\fn void SgFile::set_verbose(int verbose)
\brief \brief See  verbose)
verbose for documentation */
/*!\fn ROSEAttributesListContainerPtr SgFile::get_preprocessorDirectivesAndCommentsList() const
\brief \brief See  const
preprocessorDirectivesAndCommentsList for documentation */
/*!\fn SgAsmFile *SgFile::get_binaryFile() const
\brief \brief See  const
binaryFile for documentation */
/*!
\fn SgGlobal *SgFile::get_globalScope() const
\brief Function to return global scope (list of declaration statments, SgGlobal).See  const
globalScope for documentation 
   This functions returns a SgGlobal pointer.
\return Returns valid pointer to SgGlobal.
\internal This return value is never NULL, but could be a SgGlobal containing
    an empty list.
*/
/*!\fn SgGlobal *SgFile::get_root() const
\brief \brief See  const
root for documentation */
/*!
\fn SgStringList SgFile::get_originalCommandLineArgumentList() const
\brief Returns a list of strings representing the original command-line.See  const
originalCommandLineArgumentList for documentation 
*/
/*!\fn bool SgFile::get_C99_only() const
\brief \brief See  const
C99_only for documentation */
/*!\fn bool SgFile::get_C_only() const
\brief \brief See  const
C_only for documentation */
/*!\fn bool SgFile::get_Cxx_only() const
\brief \brief See  const
Cxx_only for documentation */
/*!\fn bool SgFile::get_F2003_only() const
\brief \brief See  const
F2003_only for documentation */
/*!\fn bool SgFile::get_F77_only() const
\brief \brief See  const
F77_only for documentation */
/*!\fn bool SgFile::get_F90_only() const
\brief \brief See  const
F90_only for documentation */
/*!\fn bool SgFile::get_F95_only() const
\brief \brief See  const
F95_only for documentation */
/*!\fn bool SgFile::get_Fortran_only() const
\brief \brief See  const
Fortran_only for documentation */
/*!\fn bool SgFile::get_KCC_frontend() const
\brief \brief See  const
KCC_frontend for documentation */
/*!\fn bool SgFile::get_binary_only() const
\brief \brief See  const
binary_only for documentation */
/*!\fn bool SgFile::get_collectAllCommentsAndDirectives() const
\brief \brief See  const
collectAllCommentsAndDirectives for documentation */
/*!\fn bool SgFile::get_compileOnly() const
\brief \brief See  const
compileOnly for documentation */
/*!\fn bool SgFile::get_cray_pointer_support() const
\brief \brief See  const
cray_pointer_support for documentation */
/*!\fn bool SgFile::get_disable_edg_backend() const
\brief \brief See  const
disable_edg_backend for documentation */
/*!\fn bool SgFile::get_disable_sage_backend() const
\brief \brief See  const
disable_sage_backend for documentation */
/*!\fn bool SgFile::get_enable_cp_backend() const
\brief \brief See  const
enable_cp_backend for documentation */
/*!\fn bool SgFile::get_exit_after_parser() const
\brief \brief See  const
exit_after_parser for documentation */
/*!\fn bool SgFile::get_fortran_implicit_none() const
\brief \brief See  const
fortran_implicit_none for documentation */
/*!\fn bool SgFile::get_fortran_openmp() const
\brief \brief See  const
fortran_openmp for documentation */
/*!\fn bool SgFile::get_markGeneratedFiles() const
\brief \brief See  const
markGeneratedFiles for documentation */
/*!\fn bool SgFile::get_negative_test() const
\brief \brief See  const
negative_test for documentation */
/*!\fn bool SgFile::get_new_frontend() const
\brief \brief See  const
new_frontend for documentation */
/*!\fn bool SgFile::get_no_implicit_inline_templates() const
\brief \brief See  const
no_implicit_inline_templates for documentation */
/*!\fn bool SgFile::get_no_implicit_templates() const
\brief \brief See  const
no_implicit_templates for documentation */
/*!\fn bool SgFile::get_outputGrammarTreeFiles() const
\brief \brief See  const
outputGrammarTreeFiles for documentation */
/*!\fn bool SgFile::get_outputGrammarTreeFilesForEDG() const
\brief \brief See  const
outputGrammarTreeFilesForEDG for documentation */
/*!\fn bool SgFile::get_outputGrammarTreeFilesForHeaderFiles() const
\brief \brief See  const
outputGrammarTreeFilesForHeaderFiles for documentation */
/*!\fn bool SgFile::get_output_parser_actions() const
\brief \brief See  const
output_parser_actions for documentation */
/*!\fn bool SgFile::get_output_warnings() const
\brief \brief See  const
output_warnings for documentation */
/*!\fn bool SgFile::get_preinit_il() const
\brief \brief See  const
preinit_il for documentation */
/*!\fn bool SgFile::get_skip_commentsAndDirectives() const
\brief \brief See  const
skip_commentsAndDirectives for documentation */
/*!\fn bool SgFile::get_skip_syntax_check() const
\brief \brief See  const
skip_syntax_check for documentation */
/*!\fn bool SgFile::get_skip_transformation() const
\brief \brief See  const
skip_transformation for documentation */
/*!\fn bool SgFile::get_skip_unparse() const
\brief \brief See  const
skip_unparse for documentation */
/*!\fn bool SgFile::get_skipfinalCompileStep() const
\brief \brief See  const
skipfinalCompileStep for documentation */
/*!\fn bool SgFile::get_sourceFileUsesBinaryFileExtension() const
\brief \brief See  const
sourceFileUsesBinaryFileExtension for documentation */
/*!\fn bool SgFile::get_sourceFileUsesCppFileExtension() const
\brief \brief See  const
sourceFileUsesCppFileExtension for documentation */
/*!\fn bool SgFile::get_sourceFileUsesFortran2003FileExtension() const
\brief \brief See  const
sourceFileUsesFortran2003FileExtension for documentation */
/*!\fn bool SgFile::get_sourceFileUsesFortran77FileExtension() const
\brief \brief See  const
sourceFileUsesFortran77FileExtension for documentation */
/*!\fn bool SgFile::get_sourceFileUsesFortran90FileExtension() const
\brief \brief See  const
sourceFileUsesFortran90FileExtension for documentation */
/*!\fn bool SgFile::get_sourceFileUsesFortran95FileExtension() const
\brief \brief See  const
sourceFileUsesFortran95FileExtension for documentation */
/*!\fn bool SgFile::get_sourceFileUsesFortranFileExtension() const
\brief \brief See  const
sourceFileUsesFortranFileExtension for documentation */
/*!\fn bool SgFile::get_strict_language_handling() const
\brief \brief See  const
strict_language_handling for documentation */
/*!\fn bool SgFile::get_travTraceToDOT() const
\brief \brief See  const
travTraceToDOT for documentation */
/*!\fn bool SgFile::get_unparse_includes() const
\brief \brief See  const
unparse_includes for documentation */
/*!\fn bool SgFile::get_unparse_line_directives() const
\brief \brief See  const
unparse_line_directives for documentation */
/*!\fn bool SgFile::get_useBackendOnly() const
\brief \brief See  const
useBackendOnly for documentation */
/*!\fn enum SgFile::outputFormatOption_enum SgFile::get_backendCompileFormat() const
\brief \brief See  const
backendCompileFormat for documentation */
/*!\fn enum SgFile::outputFormatOption_enum SgFile::get_inputFormat() const
\brief \brief See  const
inputFormat for documentation */
/*!\fn enum SgFile::outputFormatOption_enum SgFile::get_outputFormat() const
\brief \brief See  const
outputFormat for documentation */
/*!\fn enum SgFile::outputLanguageOption_enum SgFile::get_outputLanguage() const
\brief \brief See  const
outputLanguage for documentation */
/*!\fn int SgFile::get_embedColorCodesInGeneratedCode() const
\brief \brief See  const
embedColorCodesInGeneratedCode for documentation */
/*!\fn int SgFile::get_generateSourcePositionCodes() const
\brief \brief See  const
generateSourcePositionCodes for documentation */
/*!\fn int SgFile::get_testingLevel() const
\brief \brief See  const
testingLevel for documentation */
/*!\fn int SgFile::get_verbose() const
\brief \brief See  const
verbose for documentation */
/*!\fn std::string SgFile::get_savedEdgCommandLine() const
\brief \brief See  const
savedEdgCommandLine for documentation */
/*!\fn std::string SgFile::get_sourceFileNameWithPath() const
\brief \brief See  const
sourceFileNameWithPath for documentation */
/*!\fn std::string SgFile::get_sourceFileNameWithoutPath() const
\brief \brief See  const
sourceFileNameWithoutPath for documentation */
/*!\fn std::string SgFile::get_unparse_output_filename() const
\brief \brief See  const
unparse_output_filename for documentation */
/*!\fn virtual AstAttributeMechanism *SgFile::get_attributeMechanism() const
\brief \brief See  const
attributeMechanism for documentation */
/*!\fn virtual SgNode *SgFile::get_traversalSuccessorByIndex(size_t idx)
\brief \brief See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual Sg_File_Info *SgFile::get_startOfConstruct() const
\brief \brief See  const
startOfConstruct for documentation */
/*!\fn virtual size_t SgFile::get_childIndex(SgNode *child)
\brief \brief See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgFile::get_numberOfTraversalSuccessors()
\brief \brief See  SgFile::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgFile::get_traversalSuccessorContainer()
\brief \brief See  SgFile::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgFile::get_traversalSuccessorNamesContainer()
\brief \brief See  SgFile::traversalSuccessorNamesContainer for documentation */
/*!\fn virtual SgFile::~SgFile()
*/
//@}
int SAGE_Doxygen_Dummy_262881801728730;
