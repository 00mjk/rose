/* GENERATED FILE - DO NOT MODIFY */
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCaseOptionStmt
//////////////////////////////////////////////////////////////////////////
/*!
\class SgCaseOptionStmt
\brief This class represents the concept of a C and C++ case option (used within a switch statement).
\sa
\ref SgCaseOptionStmt_usage  "Example of using a SgCaseOptionStmt object"
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCaseOptionStmt data members
/////////////////////////////////////////////////////////////////////////
/*! \var SgCaseOptionStmt::p_key_root
\brief This pointer points to a SgExpressionRoot object.
\todo Evaluate if this should really be a SgExpressionRoot or just a SgExpression.
      It should perhaps really be a SgValue (but check the C++ grammar to be sure).
      then make the p_key_range_end the same type to be consistant.
*/
//////////////////////////////////////////////////////////////////////////
// Documentation for class SgCaseOptionStmt member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\sa 
\ref SgCaseOptionStmt_create "Example:create an SgCaseOptionStmt object"
*/
/*!
\fn SgCaseOptionStmt::~SgCaseOptionStmt()
\brief This is the destructor.
   There are a lot of things to delete, but nothing is deleted in this destructor.
*/
/*!
\fn SgCaseOptionStmt::isSgCaseOptionStmt (SgNode *s)
\brief Cast function (from derived class to SgCaseOptionStmt pointer).
   This functions returns a SgCaseOptionStmt pointer for any input of a 
pointer to an object derived from a SgCaseOptionStmt.
\return Returns valid pointer to SgCaseOptionStmt if input is derived from a SgLocatedNode.
*/
/*!
\fn SgCaseOptionStmt::isSgCaseOptionStmt (const SgNode *s)
\brief Cast function (from derived class to SgCaseOptionStmt pointer).
   This functions returns a SgCaseOptionStmt pointer for any input of a 
pointer to an object derived from a SgCaseOptionStmt.
\return Returns valid pointer to SgCaseOptionStmt if input is derived from a SgLocatedNode.
*/
/*!
\fn SgCaseOptionStmt::get_key_root() const
\brief Returns pointer to a SgExpressionRoot object.
\internal This should always be a valid pointer.
\return Returns pointer to SgExpressionRoot.
*/
/*!
\fn SgCaseOptionStmt::set_key_root(SgExpressionRoot* key_root)
\brief Access function for p_key_root.
\return Returns void.
*/
/*! \name Class Members*/
//@{
/*! \var SgBasicBlock *SgCaseOptionStmt::p_body
\brief This pointer points to a SgBasicBlock object.
*/
/*!\var SgExpression *SgCaseOptionStmt::p_key
*/
/*! \var SgExpression *SgCaseOptionStmt::p_key_range_end
\brief This pointer points to the last constant in the range when a gnu range 
case label is used.
\internal We can't represent the range a ... b as an expression in C or C++ so we need to
    explicitly store the start and end of the range where it is used as a case label.
    The p_key_root is the start of the range.
*/
//@}
/*! \name User Interface*/
//@{
/*!\fn SgCaseOptionStmt::SgCaseOptionStmt(Sg_File_Info *startOfConstruct,SgExpression *key=(0),SgBasicBlock *body=(0))
*/
/*!\fn SgCaseOptionStmt::SgCaseOptionStmt(const SgCaseOptionStmtStorageClass &source)
*/
/*!\fn inline static void SgCaseOptionStmt::operator delete(void *pointer)
*/
/*!\fn static SgCaseOptionStmt *SgCaseOptionStmt::getPointerFromGlobalIndex(AstSpecificDataManagingClass *astInPool,unsigned long globalIndex)
*/
/*!\fn static unsigned long SgCaseOptionStmt::getNumberOfLastValidPointer()
*/
/*!\fn static unsigned long SgCaseOptionStmt::getNumberOfValidNodesAndSetGlobalIndexInFreepointer(unsigned long )
*/
/*!\fn static unsigned long SgCaseOptionStmt::initializeStorageClassArray(SgCaseOptionStmtStorageClass *storageArray)
*/
/*!\fn static void SgCaseOptionStmt::clearMemoryPool()
*/
/*!\fn static void SgCaseOptionStmt::extendMemoryPoolForFileIO()
*/
/*!\fn static void SgCaseOptionStmt::resetValidFreepointers()
*/
/*!\fn virtual RTIReturnType SgCaseOptionStmt::roseRTI()
*/
/*!\fn virtual SgCaseOptionStmt::~SgCaseOptionStmt()
*/
/*!\fn virtual SgNode *SgCaseOptionStmt::copy(SgCopyHelp &help) const
*/
/*!\fn virtual bool SgCaseOptionStmt::cfgIsIndexInteresting(unsigned int ) const
*/
/*!\fn virtual bool SgCaseOptionStmt::replace_child(SgStatement *,SgStatement *,bool extractListFromBasicBlock=false)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgCaseOptionStmt::cfgInEdges(unsigned int index)
*/
/*!\fn virtual std::vector< VirtualCFG::CFGEdge  , std::allocator< VirtualCFG::CFGEdge  >  > SgCaseOptionStmt::cfgOutEdges(unsigned int index)
*/
/*!\fn virtual unsigned int SgCaseOptionStmt::cfgFindChildIndex(SgNode *n)
*/
/*!\fn virtual unsigned int SgCaseOptionStmt::cfgIndexForEnd() const
*/
/*!\fn virtual void SgCaseOptionStmt::fixupCopy_references(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCaseOptionStmt::fixupCopy_scopes(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCaseOptionStmt::fixupCopy_symbols(SgNode *copy,SgCopyHelp &help) const
*/
/*!\fn virtual void SgCaseOptionStmt::post_construction_initialization()
*/
/*!
\fn void SgCaseOptionStmt::set_body(SgBasicBlock *body)
\brief Access function for p_body.
See  *body)
body for documentation \return Returns void.
*/
/*!
\fn void SgCaseOptionStmt::set_key(SgExpression *key)
\brief Access function for pointer to SgExpression object wrapped by SgExpressionRoot in p_key_root.
See  *key)
key for documentation \return Returns void.
*/
/*!\fn void SgCaseOptionStmt::set_key_range_end(SgExpression *key_range_end)
\description See  *key_range_end)
key_range_end for documentation */
/*!
\fn SgBasicBlock *SgCaseOptionStmt::get_body() const
\brief Returns pointer to a SgBasicBlock object.
\internal This should always be a valid pointer.
See  const
body for documentation \return Returns pointer to SgBasicBlock.
*/
/*!
\fn SgExpression *SgCaseOptionStmt::get_key() const
\brief Returns pointer to a SgExpression object wrapped by SgExpressionRoot in p_key_root.
\internal This should always be a valid pointer.
See  const
key for documentation \return Returns pointer to SgExpression.
*/
/*!\fn SgExpression *SgCaseOptionStmt::get_key_range_end() const
\description See  const
key_range_end for documentation */
/*!\fn virtual SgNode *SgCaseOptionStmt::get_traversalSuccessorByIndex(size_t idx)
\description See  idx)
traversalSuccessorByIndex for documentation */
/*!\fn virtual size_t SgCaseOptionStmt::get_childIndex(SgNode *child)
\description See  *child)
childIndex for documentation */
/*!\fn virtual size_t SgCaseOptionStmt::get_numberOfTraversalSuccessors()
\description See  SgCaseOptionStmt::numberOfTraversalSuccessors for documentation */
/*!\fn virtual std::vector< SgNode * , std::allocator< SgNode * >  > SgCaseOptionStmt::get_traversalSuccessorContainer()
\description See  SgCaseOptionStmt::traversalSuccessorContainer for documentation */
/*!\fn virtual std::vector< std::string  , std::allocator< std::string  >  > SgCaseOptionStmt::get_traversalSuccessorNamesContainer()
\description See  SgCaseOptionStmt::traversalSuccessorNamesContainer for documentation */
/*!
\fn SgCaseOptionStmt::SgCaseOptionStmt(SgExpression *key,SgBasicBlock *body)
\brief This is the constructor.
   This constructor builds the SgCaseOptionStmt base class.
\param startOfConstruct represents the position in the source code
*/
//@}
int SAGE_Doxygen_Dummy_2359623978141;
