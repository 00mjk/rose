
#include "KLT/Sequential/generator.hpp"
#include "KLT/Sequential/kernel.hpp"

#include "sage3basic.h"

#include <cassert>

namespace KLT {

namespace Sequential {

Kernel * Generator::makeKernel() const {
  return new Kernel();
}

void Generator::doCodeGeneration(Core::Kernel * kernel_, const Core::CG_Config & cg_config) {
  Kernel * kernel = dynamic_cast<Kernel *>(kernel_);
  assert(kernel != NULL);

  assert(kernel->isDataflowDone());
  assert(kernel->isArgumentDone());
  assert(kernel->isContentDone());

  SgClassSymbol * arguments_packer = NULL;

  // TODO

  assert(arguments_packer != NULL);
  kernel->setArgumentPacker(arguments_packer);

  SgFunctionSymbol * kernel_symbol = NULL;

  // TODO

  assert(kernel_symbol != NULL);
  kernel->setKernelSymbol(kernel_symbol);
}

Generator::Generator(SgProject * project, std::string filename_) :
  Core::Generator(project),
  p_decl_file(NULL),
  p_defn_file(NULL)
{
  if (!CommandlineProcessing::isCppFileNameSuffix("hpp"))
    CommandlineProcessing::extraCppSourceFileSuffixes.push_back("hpp");

  std::string filename;

  filename = filename_ + ".hpp";
  p_decl_file = isSgSourceFile(SageBuilder::buildFile(filename, filename, p_project));
  SageInterface::attachComment(p_decl_file, "File generated by KLT::Sequential::Generator");

  filename = filename_ + ".cpp";
  p_defn_file = isSgSourceFile(SageBuilder::buildFile(filename, filename, p_project));
  SageInterface::attachComment(p_defn_file, "File generated by KLT::Sequential::Generator");
  SageInterface::insertHeader(p_defn_file, filename_ + ".hpp");
}

Generator::~Generator() {}

void Generator::unparse() {
  assert(p_decl_file != NULL && p_defn_file != NULL);

  p_decl_file->unparse();
  p_defn_file->unparse();
}

}

}

