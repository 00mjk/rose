/******************************************************************************
 *
 * ROSE Global Database Connection
 *
 * class handling the DB connection to MySQL
 *
 *****************************************************************************/

#include <iostream>

#include "GlobalDatabaseConnectionMYSQL.h"

using namespace std;
using namespace mysqlpp;

//-----------------------------------------------------------------------------
// constructor
GlobalDatabaseConnection::GlobalDatabaseConnection( void ) :
	connection( false )
{
	connected = false;

       unsigned int myPort = 3306;
       bool myCompress = 0;
       unsigned int myTimeout = 60;
       bool myTe = true;
       const char *mySock = "";
       unsigned int myFlag = 0;

	// set default database access params
	// setDatabaseParameters("localhost" , "root" , "rose", "rosedb");
   // DQ & NT (10/23/2003): Added support for configuration of MySQL
	setDatabaseParameters("@MySQL_server@" , "@MySQL_username@" , "@MySQL_password@", "@MySQL_database_name@",&myPort,&myCompress,&myTimeout,&myTe,mySock,&myFlag);
}

	
//-----------------------------------------------------------------------------
// init contructors 
GlobalDatabaseConnection::GlobalDatabaseConnection(char *host, char *username, char *pwd, char *dbname) :
	connection( false )
{
	unsigned int myPort = 3306;
	bool myCompress = 0;
	unsigned int myTimeout = 60;
	bool myTe = true;
	const char *mySock = "";
	unsigned int myFlag = 0;	

	connected = false;
	setDatabaseParameters(host,username,pwd,dbname,&myPort,&myCompress,&myTimeout,&myTe,mySock,&myFlag);
}

GlobalDatabaseConnection::GlobalDatabaseConnection(char *host, char *username, char *pwd, char *dbname, unsigned int port, bool compress, unsigned int connect_timeout, bool te, const char *socket_name, unsigned int client_flag) : 
	connection( false )
{
	unsigned int myPort = port;
	bool myCompress = compress;
	unsigned int myTimeout = connect_timeout;
	bool myTe = te;
	const char *mySock = socket_name;
	unsigned int myFlag = client_flag;	

	connected = false;
	setDatabaseParameters(host,username,pwd,dbname,&myPort,&myCompress,&myTimeout,&myTe,mySock,&myFlag);
}

//-----------------------------------------------------------------------------
// destructor
GlobalDatabaseConnection::~GlobalDatabaseConnection( )
{
}
	

//-----------------------------------------------------------------------------
// set parameters for database connection, pass NULL for any to leave it unchanged
void GlobalDatabaseConnection::setDatabaseParameters(char *host, char *username, char *pwd, char *dbname)
{
	if(host)			dbHost = host;
	if(username)	dbUsername = username;
	if(pwd)				dbPwd = pwd;
	if(dbname) 		dbName = dbname;
}

void GlobalDatabaseConnection::setDatabaseParameters(char *host, char *username, char *pwd, char *dbname, unsigned int *port, bool *compress, unsigned int *connect_timeout, bool *te, const char *socket_name, unsigned int *client_flag) 
{
  if (host)             dbHost = host; 
  if (username)         dbUsername = username; 
  if (pwd)              dbPwd = pwd; 
  if (dbname)           dbName = dbname; 
  if (port)            dbPort = *port;
  if (compress)        dbCompress = *compress;
  if (connect_timeout) dbTimeout = *connect_timeout;
  if (te)              dbTe = *te;
  if (socket_name)     dbSock = socket_name;

  // client_flag is deprecated in MySQL 5.0+
  //if (client_flag)     dbFlag = *client_flag;
}

//-----------------------------------------------------------------------------
// output all tables + data
void GlobalDatabaseConnection::DEBUG_dump( void ) {
	cout << "Dumping contents of all tables: " <<endl ;

	if(connected) {
		Query query = connection.query();
		StoreQueryResult *tables = select("SHOW TABLES;");
		for(StoreQueryResult::iterator i= tables->begin(); i!=tables->end(); i++ ) {
			Row row = *i;
		//for(int j=0;j<DB_NUMREQTABLES;j++) {
			//cout << endl << "Table: '" << reqTables[j] << "' " << endl;
			//query << "SELECT * FROM " << reqTables[j] <<";" ;
			cout << endl << "Table: '" << row[0].c_str() << "' " << endl;
			query << "SELECT * FROM " << row[0].c_str() <<";" ;
			//cout << " EXE " << query.preview() << endl; // debug
			StoreQueryResult res = query.store();
			if(! res ) {
				cout << "Error insert peojectId 1: " << query.error() << endl; // debug
				exit(-1);
			}
			

			int rowCount = 0;
			for(StoreQueryResult::iterator i= res.begin(); i!=res.end(); i++ ) {
				Row row = *i;
				cout << rowCount <<") ";
				for(int l=0;l<(int)row.size();l++) {
					cout << " '"<< row[l] <<"' ";
				}
				cout << endl;
				rowCount++;
			}
			if(rowCount==0) cout << "<empty>" << endl;
		}
		cout << endl << "Contents dumped! " <<endl;
	} else {
		cout << "Not connected... " <<endl;
	}
}


	
//-----------------------------------------------------------------------------
// assume default name
int GlobalDatabaseConnection::initialize( int drop ) {

  // milki (06/29/2010) Options must be set before connection
  // established
   if(! dbCompress && ! connection.set_option( new mysqlpp::CompressOption() ) ) {
       cout << " con fail setting compression option " << connection.error() << endl;
       return 1;
   }
   if(! dbTimeout && ! connection.set_option( new mysqlpp::ConnectTimeoutOption(dbTimeout) ) ) {
       cout << " con fail setting timeout option " << connection.error() << endl;
       return 1;
   }

	// dont supply DB name to connect, it will fail if DB doesnt exist
    if(! dbHost.empty() && ! connection.connect( "", dbHost.c_str(), dbUsername.c_str(), dbPwd.c_str(), dbPort) ) {
        cout << " con fail for host: " << connection.error() << endl;
        return 1;
    }
    else if(! dbSock.empty() && ! connection.connect( "", dbSock.c_str(), dbUsername.c_str(), dbPwd.c_str(), dbPort) ) {
            cout << " con fail for sock" << connection.error() << endl;
            return 1;
        }
    else if(! connection.connected() ) {
        cout << " con fail. Missing credentials " << connection.error() << endl;
        return 1;
    }
#if DB_DROPDATABASE==1
	connection.drop_db( dbName );
#else
	if (drop) connection.drop_db( dbName );
#endif

	if(! connection.select_db( dbName ) ) {
		// try again after creating the DB
		cout << " creating db " << dbName << endl; // debug
		connection.create_db( dbName );
		if(! connection.select_db( dbName ) ) {
			cout << " create fail " << connection.error() << endl; // debug
			return 2;
		}
	}
	//cout << " weve selecetd " << endl; // debug

	connected = true;
	//DEBUG_dump();
	return 0;
}


//-----------------------------------------------------------------------------
// close connection to datbase
int GlobalDatabaseConnection::shutdown( void )
{ if(connected) {
		// disconnect from db
		connection.disconnect();
	}
	return 0;
}

//-----------------------------------------------------------------------------
// execute a SQL query and check for success
int GlobalDatabaseConnection::execute(const char *command)
{
	Query query = connection.query();
	query << command;
    SimpleResult res = query.execute();
	if(! res ) {
		cout << "SQL execute failed: " << query.error() << endl << "Original query: " << command << endl; // debug
		assert( false );
		return -1;
	}

	// everything ok
	return 0;
}
	
	
//-----------------------------------------------------------------------------
// execute a SQL query and check for success, returning the resulting rows
StoreQueryResult *GlobalDatabaseConnection::select(const char *command)
{
	Query query = connection.query();
	query << command;
	StoreQueryResult *res = new StoreQueryResult();
    *res = query.store();
	if(! res ) {
		cout << "SQL execute failed: " << query.error() << endl << "Original query: " << command << endl; // debug
		assert( false );
		return NULL;
	}

	// everything ok
	return res;
}
	


