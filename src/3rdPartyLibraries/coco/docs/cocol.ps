%!PS-Adobe-3.0
%%Title: cocol
%%For: Markus Schordan
%%Creator: a2ps version 4.13
%%CreationDate: Thu May 29 18:23:33 2003
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 11
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 792 def
/sw 612 def
/llx 24 def
/urx 588 def
/ury 768 def
/lly 24 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 11.547912 def
/cw 6.928747 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   689.410325 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(The compiler description language Cocol/R) p n
(=========================================) N
() N
( \(This is a modified version of parts of Professor Moessenboeck's 1990 paper) N
(  to allow for the fact that this implementation is for C/C++.  The full) N
(  version of the paper should be consulted by serious users.\)) N
() N
(A compiler description can be viewed as a module consisting of imports,) N
(declarations and grammar rules that describe the lexical and syntactical) N
(structure of a language as well as its translation into a target language.) N
(The vocabulary of Cocol/R uses identifiers, strings and numbers in the usual) N
(way:) N
() N
(   CHARACTERS) N
(     cntl     = CHR\(0\)..CHR\(31\).) N
(     back     = CHR\(92\) .) N
(     noQuote1 = ANY - '"' - cntl - back .) N
(     noQuote2 = ANY - "'" - cntl - back .) N
(     graphic  = ANY - cntl .) N
(   TOKENS) N
(     ident  = letter { letter | digit } .) N
(     number = digit { digit } .) N
(     string =   '"' {noQuote1 | back graphic } '"') N
(              | "'" {noQuote2 | back graphic } "'" .) N
() N
(Upper case letters are distinct from lower case letters.  Strings must not) N
(cross line borders.  Coco/R keywords are) N
() N
(    ANY  CASE  CHARACTERS  CHR  COMMENTS  COMPILER  CONTEXT  END  EOF FROM) N
(    IGNORE  NAMES  NESTED  PRAGMAS  PRODUCTIONS  SYNC  TO  TOKENS  WEAK) N
() N
(\(NAMES is an extension over the original Oberon implementation.\)) N
() N
(The following metasymbols are used to form EBNF expressions:) N
() N
(      \(    \)       for grouping) N
(      {    }       for iterations) N
(      [    ]       for options) N
(      <    >       for attributes) N
(      \(.  .\)       for semantic parts) N
(      = . | + -    as explained below) N
() N
(Comments are enclosed in "/*" and "*/" brackets, and may be nested.  The) N
(semantic parts may contain declarations or statements in a general purpose) N
(programming language \(in this case, C or C++\).) N
() N
(The Oberon, Modula-2 and Pascal implementations use "\(*" and "*\)" for) N
(comments; the C/C++ versions use C like comments because "\(*" can cause) N
(problems in semantic actions, for example: \(. while \(*s\) do *s++ .\)) N
(where "\(*" clearly is not intended to begin a comment.) N
() N
() N
(Overall Structure) N
(=================) N
() N
(A compiler description is made up of the following parts) N
() N
(   Cocol =   "COMPILER" GoalIdentifier) N
(                 ArbitraryText ) N
(cocol) (Page 1/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (1/11) (Thursday May 29, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                 ScannerSpecification ) p n
(                 ParserSpecification ) N
(             "END" GoalIdentifier "." . ) N
() N
(The name after the keyword COMPILER is the grammar name and must match the) N
(name after the keyword END.  The grammar name also denotes the topmost) N
(non-terminal \(the start symbol\).) N
() N
(After the grammar name, arbitrary C/C++ text may follow; this is not checked) N
(by Coco/R.  It usually contains C/C++ declarations of global objects) N
(\(constants, types, variables, or procedures\) that are needed in the semantic) N
(actions later on.) N
() N
(The remaining parts of the compiler description specify the lexical and) N
(syntactical structure of the language to be processed.  Effectively two) N
(grammars are specified - one for the lexical analyser or scanner, and the) N
(other for the syntax analyser or parser.  The non-terminals \(token classes\)) N
(recognized by the scanner are regarded as terminals by the parser.) N
() N
() N
(Scanner Specification) N
(=====================) N
() N
(A scanner has to read source text, skip meaningless characters, and recognize ) N
(tokens that have to be passed to the parser.  Tokens may be classified as) N
(literals or as token classes.  Literals \(like "END" and "!="\) may be) N
(introduced directly into productions as strings, and do not need to be named.) N
(Token classes \(such as identifiers or numbers\) must be named, and have) N
(structures that are specified by regular expressions, defined in EBNF.) N
() N
(In Cocol, a scanner specification consists of six optional parts, that may, in) N
(fact, be introduced in arbitrary order. ) N
() N
(   ScannerSpecification =  {  CharacterSets ) N
(                             | Ignorable ) N
(                             | Comments ) N
(                             | Tokens ) N
(                             | Pragmas ) N
(                             | UserNames ) N
(                            } . ) N
() N
(CHARACTERS) N
(----------) N
() N
(The CharacterSets component allows for the declaration of names for character) N
(sets like letters or digits, and defines the characters that may occur as) N
(members of these sets.  These names then may be used in the other sections of) N
(the scanner specification \(but not, it should be noted, in the parser) N
(specification\).) N
() N
(   CharacterSets   =  "CHARACTERS" { NamedCharSet } . ) N
(   NamedCharSet    =  SetIdent "=" CharacterSet "." . ) N
(   CharacterSet    =  SimpleSet { \( "+" | "-" \) SimpleSet } . ) N
(   SimpleSet       =    SetIdent | string | "ANY") N
(                      | SingleChar [ ".." SingleChar ] .) N
(   SingleChar      =  "CHR" "\(" number | string "\)" .) N
(   SetIdent        =  identifier . ) N
() N
(Simple character sets are denoted by one of ) N
(cocol) (Page 2/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (Thursday May 29, 2003) (2/11) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(   SetIdent           a previously declared character set with that name ) N
(   string             a set consisting of all characters in the string ) N
(   CHR\(i\)             a set of one character with ordinal value i) N
(   CHR\("x"\)           a set of one character "x") N
(   CHR\(i\) .. CHR\(j\)   a set consisting of all characters whose ordinal) N
(                      values are in the range i ... j.) N
(   ANY                the set of all characters acceptable to the) N
(                      implementation) N
() N
(Simple sets may then be combined by the union \(+\) and difference operators) N
(\(-\). ) N
() N
(The ability to specify a range like CHR\(7\) .. CHR\(31\) or CHR\("A"\) .. CHR\("Z"\)) N
(is an extension over the original Oberon implementation.) N
() N
(   EXAMPLES:) N
(      digit = "0123456789" .           The set of all digits) N
(      hexdigit = digit + "ABCDEF" .    The set of all hexadecimal digits) N
(      eol = CHR\(13\) .                  End-of-line character) N
(      noDigit = ANY - digit .          Any character that is not a digit) N
(      ctrlChars = CHR\(1\) .. CHR\(31\) .  The ascii control characters) N
() N
() N
(COMMENTS AND IGNORABLE CHARACTERS) N
(---------------------------------) N
() N
(Usually spaces within the source text of a program are irrelevant, and in) N
(scanning for the start of a token, a Coco/R generated scanner will simply) N
(ignore them.  Other separators like tabs, line ends, and form feeds may also) N
(be declared irrelevant, and some applications may prefer to ignore the) N
(distinction between upper and lower case input.) N
() N
(Comments are difficult to specify with the regular expressions used to denote) N
(tokens - indeed, nested comments may not be specified at all in this way.) N
(Since comments are usually discarded by a parsing process, and may typically) N
(appear in arbitrary places in source code, it makes sense to have a special) N
(construct to express their structure.) N
() N
(Ignorable aspects of the scanning process are defined in Cocol by ) N
() N
(   Comments  = "COMMENTS" "FROM" TokenExpr "TO" TokenExpr [ "NESTED" ] . ) N
(   Ignorable = "IGNORE" \( "CASE" | CharacterSet \) . ) N
() N
(where the optional keyword NESTED should have an obvious meaning.  A practical) N
(restriction is that comment brackets must not be longer than 2 characters.  It) N
(is possible to declare several kinds of comments within a single grammar, for) N
(example, for C++:) N
() N
(      COMMENTS FROM "/*" TO "*/" ) N
(      COMMENTS FROM "//" TO eol ) N
(      IGNORE CHR\(9\) .. CHR\(13\) ) N
() N
(The set of ignorable characters in this example is that which includes the) N
(standard white space separators in ASCII files.  The null character CHR\(0\)) N
(should not be included in any ignorable set.  It is used internally by Coco/R) N
(to mark the end of the input file.) N
() N
() N
(cocol) (Page 3/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (3/11) (Thursday May 29, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(TOKENS) p n
(------) N
() N
(A very important part of the scanner specification declares the form of) N
(terminal tokens: ) N
() N
(   Tokens       =  "TOKENS" { Token } . ) N
(   Token        =  TokenSymbol [ "=" TokenExpr "." ] . ) N
(   TokenExpr    =  TokenTerm { "|" TokenTerm } . ) N
(   TokenTerm    =  TokenFactor { TokenFactor } [ "CONTEXT" "\(" TokenExpr "\)" ] .) N
( ) N
(   TokenFactor  =  SetIdent | string ) N
(                     | "\(" TokenExpr "\)" ) N
(                     | "[" TokenExpr "]" ) N
(                     | "{" TokenExpr "}" . ) N
(   TokenSymbol  =  TokenIdent | string . ) N
(   TokenIdent   =  identifier . ) N
() N
(Tokens may be declared in any order.  A token declaration defines a) N
(TokenSymbol together with its structure. Usually the symbol on the left-hand) N
(side of the declaration is an identifier, which is then used in other parts of) N
(the grammar to denote the structure described on the right-hand side of the) N
(declaration by a regular expression \(expressed in EBNF\).  This expression may) N
(contain literals denoting themselves \(for example "END"\), or the names of) N
(character sets \(for example letter\), denoting an arbitrary character from such) N
(sets.  The restriction to regular expressions means that it may not contain) N
(the names of any other tokens.) N
() N
(While token specification is usually straightforward, there are a number of) N
(subtleties that may need emphasizing: ) N
() N
( - There is one predeclared token EOF that can be used in productions where) N
(   it is necessary to check explicitly that the end of the source has been) N
(   reached.  When the Scanner detects that the end of the source has been) N
(   reached further attempts to obtain a token return only this one.) N
() N
( - Since spaces are deemed to be irrelevant when they come between tokens in) N
(   the input for most languages, one should not attempt to declare literal) N
(   tokens that have spaces within them.) N
() N
( - The grammar for tokens allows for empty right-hand sides.  This may seem) N
(   strange, especially as no scanner is generated if the right-hand side of a) N
(   declaration is missing.  This facility is used if the user wishes to supply) N
(   a hand-crafted scanner, rather than the one generated by Coco/R.  In this) N
(   case, the symbol on the left-hand side of a token declaration may also) N
(   simply be specified by a string, with no right-hand side.) N
() N
( - Tokens specified without right-hand sides are numbered consecutively) N
(   starting from 0, and the hand-crafted scanner has to return token codes) N
(   according to this numbering scheme.) N
() N
( - The CONTEXT phrase in a TokenTerm means that the term is only recognized) N
(   when its right hand context in the input stream is the TokenExpr specified) N
(   in brackets.) N
() N
(   EXAMPLES:) N
(      ident   =   letter { letter | digit } .) N
(      real    =   digit { digit } "." { digit }) N
(                   [ "E" [ "+" | "-" ] digit { digit } ] .) N
(cocol) (Page 4/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (Thursday May 29, 2003) (4/11) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 5
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      number  =   digit { digit }) p n
(                | digit { digit } CONTEXT \( ".." \) .) N
(      and     =   "&".) N
() N
(The CONTEXT phrase in the above example allows a distinction between reals) N
(\(e.g. 1.23\) and range constructs \(e.g. 1..2\) that could otherwise not be) N
(scanned with a single character lookahead.) N
() N
() N
(PRAGMAS) N
(-------) N
() N
(A pragma, like a comment, is a token that may occur anywhere in the input) N
(stream, but, unlike a comment, it cannot be ignored.  Pragmas are often used) N
(to allow programmers to select compiler switches dynamically.  Since it) N
(becomes impractical to modify the phrase structure grammar to handle this, a) N
(special mechanism is provided for the recognition and treatment of pragmas.) N
(In Cocol they are declared like tokens, but may have an associated semantic) N
(action that is executed whenever they are recognized by the scanner.) N
() N
(   Pragmas     =  "PRAGMAS" { Pragma } . ) N
(   Pragma      =  Token [ Action ] . ) N
(   Action      =  "\(." arbitraryText ".\)" . ) N
() N
(   EXAMPLE:) N
(     option = "$" { letter } .) N
(         \(. char str[50]; int i;) N
(            S_GetString\(S_Pos, S_Len, str\);) N
(            i = 0;) N
(            while \(i < S_Len\) {) N
(              switch \(str[i]\) {) N
(              ...) N
(              }) N
(              i++;) N
(            } .\)) N
() N
() N
(USER NAMES) N
(----------) N
() N
(Coco/R, by default, generates symbolic names for token symbols, sometimes) N
(having a rather stereotyped form.  The UserNames section may be used to prefer) N
(user-defined names, or to help resolve name clashes \(for example, between the) N
(default names that would be chosen for "point" and "."\).) N
() N
(   UserNames  = "NAMES" { UserName } . ) N
(   UserName   = TokenIdent  "=" \( identifier | string \) "." . ) N
() N
(   EXAMPLES:) N
(      NAMES ) N
(        period   = "." . ) N
(        ellipsis = "..." . ) N
() N
(For special purposes the symbol on the left-hand side may also be a string,) N
(in which case no right-hand side may be specified; this is used if the user) N
(wishes to supply a hand-crafted scanner.  Indeed, if the right-hand side) N
(of a declaration is missing, no scanner is generated.) N
() N
(The ability to use names is an extension over the original Oberon) N
(cocol) (Page 5/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (5/11) (Thursday May 29, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (6) 6
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(implementation.) p n
() N
() N
(Parser Specification) N
(====================) N
() N
(The parser specification is the main part of the input to Coco/R.  It contains) N
(the productions of an attributed grammar specifying the syntax of the language) N
(to be recognized, as well as the action to be taken as each phrase or token is) N
(recognized.) N
() N
(The form of the parser specification may itself be described in EBNF as) N
(follows.  For the Modula-2 and Pascal versions we have:) N
() N
(   ParserSpecification =  "PRODUCTIONS" { Production } . ) N
(   Production          =  NonTerminal [ FormalAttributes ] ) N
(                            [ LocalDeclarations ]     \(* Modula-2 and Pascal *\)) N
(                            "=" Expression "." . ) N
(   FormalAttributes    =  "<"  arbitraryText ">" | "<."  arbitraryText ".>" .) N
(   LocalDeclarations   =  "\(." arbitraryText ".\)" . ) N
(   NonTerminal         =  identifier . ) N
() N
(For the C and C++ versions the LocalDeclarations follow the "=" instead: ) N
() N
(   Production          =  NonTerminal [ FormalAttributes ] ) N
(                            "=" [ LocalDeclarations ] /* C and C++ */) N
(                            Expression "." . ) N
() N
(Any identifier appearing in a production that was not previously declared as a) N
(terminal token is considered to be the name of a NonTerminal, and there must) N
(be exactly one production for each NonTerminal that is used in the) N
(specification \(this may, of course, specify a list of alternative right) N
(sides\).) N
() N
(A production may be considered as a specification for creating a routine that) N
(parses the NonTerminal.  This routine will constitute its own scope for) N
(parameters and other local components like variables and constants.  The) N
(left-hand side of a Production specifies the name of the NonTerminal as well) N
(as its FormalAttributes \(which effectively specify the formal parameters of) N
(the routine\).  In the Modula-2 and Pascal versions the optional) N
(LocalDeclarations allow the declaration of local components to precede the) N
(block of statements that follow.  The C and C++ versions define their local) N
(components within this statement block, as required by the host language.) N
() N
(As in the case of tokens, some subtleties in the specification of productions) N
(should be emphasized: ) N
() N
( - The productions may be given in any order.) N
() N
( - A production must be given for a GoalIdentifier that matches the name used) N
(   for the grammar.) N
() N
( - The formal attributes enclosed in angle brackets "<" and ">" or "<." and) N
(   ".>" simply consist of parameter declarations in C/C++.  Similarly, where) N
(   they are required and permitted, local declarations take the form of C/C++) N
(   declarations enclosed in "\(." and ".\)" brackets.  However, the syntax of) N
(   these components is not checked by Coco/R; this is left to the) N
(   responsibility of the compiler that will actually compile the generated) N
(   application.) N
(cocol) (Page 6/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (Thursday May 29, 2003) (6/11) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 7
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
( - Allowing formal attribute to be enclosed in angle brackets "<." and ".>" is) N
(   an extension over the original implementation, but allows for a > character) N
(   to appear as part of an actual parameter expression.) N
() N
( - All routines give rise to "regular procedures" \(in Modula-2 terminology\) or) N
(   "void functions" \(in C++ terminology\).  Coco/R cannot construct true) N
(   functions that can be called from within other expressions; any return) N
(   values must be transmitted using reference parameter mechanisms.) N
() N
( - The goal symbol may not have any FormalAttributes.  Any information that) N
(   the parser is required to pass back to the calling driver program must be) N
(   handled in other ways.  At times this may prove slightly awkward.) N
() N
( - While a production constitutes a scope for its formal attributes and its) N
(   locally declared objects, terminals and non-terminals, globally declared) N
(   objects, and imported modules are visible in any production.) N
() N
( - It may happen that an identifier chosen as the name of a NonTerminal may) N
(   clash with one of the internal names used in the rest of the system.  Such) N
(   clashes will only become apparent when the application is compiled and) N
(   linked, and may require the user to redefine the grammar to use other) N
(   identifiers.) N
() N
(   EXAMPLE:) N
(      Expression <int *Item> =                  /* parameters */) N
(                 \(. int y;) N
(                    int operator.\)              /* local variables */) N
(      /* definition of Expression */ .) N
() N
() N
(EXPRESSIONS) N
(-----------) N
() N
(The Expression on the right-hand-side of each Production defines the) N
(context-free structure of some part of the source language, together with the) N
(attributes and semantic actions that specify how the parser must react to the) N
(recognition of each component.  The syntax of an Expression may itself be) N
(described in EBNF \(albeit not in LL\(1\) form\) as) N
() N
(   Expression   =  Term { "|" Term } . ) N
(   Term         =  Factor { Factor }  . ) N
(   Factor       =     [ "WEAK" ] TokenSymbol ) N
(                   |  NonTerminal [ Attributes ] ) N
(                   |  Action ) N
(                   |  "ANY" ) N
(                   |  "SYNC" ) N
(                   |  "\(" Expression "\)" ) N
(                   |  "[" Expression "]" ) N
(                   |  "{" Expression "}" . ) N
(   Attributes   =  "<"  arbitraryText ">"  | "<."  arbitraryText ".>" .) N
(   Action       =  "\(." arbitraryText ".\)" . ) N
() N
(The Attributes enclosed in angle brackets that may follow a NonTerminal) N
(effectively denote the actual parameters that will be used in calling the) N
(corresponding routine.  If a NonTerminal is defined on the left-hand side of a) N
(Production to have FormalAttributes, then every occurrence of that NonTerminal) N
(in a right-hand side Expression must have a list of actual attributes that) N
(correspond to the FormalAttributes according to the parameter compatibility) N
(cocol) (Page 7/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (7/11) (Thursday May 29, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (8) 8
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(rules of C/C++.  However, the conformance is only checked when the generated) p n
(parser module is compiled.) N
() N
(Allowing formal attribute to be enclosed in angle brackets "<." and ".>" is an) N
(extension over the original implementation, but allows for a > character to) N
(appear as part of an actual parameter expression.) N
() N
(An Action is an arbitrary sequence of C/C++ statements enclosed in "\(." and) N
(".\)".  These are simply incorporated into the generated parser in situ; once) N
(again, no syntax is checked at that stage.  To prevent hard-to-find errors) N
(resulting from the accidental omission of a closing ".\)", the digraph "\(.") N
(is not allowed within the arbitrary text comprising an action.  Nor is an) N
(unterminated string literal allowed within such text.) N
() N
() N
(The symbol ANY denotes any terminal that is not an alternative of this ANY) N
(symbol.  It can conveniently be used to parse structures that contain) N
(arbitrary text.  For example, the translation of a Cocol/R attribute list) N
(is essentially as follows:) N
() N
(    Attributes <long *pos, long *len> =) N
(        "<"               \(. *pos = S_Pos + 1 .\)) N
(        { ANY }) N
(        ">"               \(. *len = S_Pos - *pos .\) .) N
() N
(In this example the closing angle bracket is an implicit alternative of the) N
(ANY symbol in curly brackets.  The meaning is that ANY matches any terminal) N
(except ">".  S_pos is the source text position of the most recently) N
(recognized terminal.  It is exported by the generated scanner.) N
() N
() N
(Error Handling) N
(==============) N
() N
(Good and efficient error recovery is difficult in recursive descent parsers,) N
(since little information about the parsing process is available when an error) N
(occurs.  What has to be done in case of an error:) N
() N
(1.  Find all symbols with which parsing can be resumed at a certain location) N
(    in the grammar reachable from the error location \(recovery symbols\).) N
() N
(2.  Skip the input up to the first symbol that is in the recovery set.) N
() N
(3.  Drive the parser to the location where the recovery symbol can be ) N
(    recognised.) N
() N
(4.  Resume parsing from there.) N
() N
(In recursive descent parsers, information about the parsing location and about) N
(the expected symbols is only implicitly contained in the parser code \(and in) N
(the procedure call stack\) and cannot be exploited for error recovery.  One) N
(method to overcome this is to compute the recovery set dynamically during) N
(parsing.  Then, when an error occurs, the recovery symbols are already known) N
(and all that one has to do is to skip erroneous input and to "unroll" the) N
(procedure stack up to a legal continuation point [Wirth 76].  This technique,) N
(although systematically applicable, slows down error-free parsing and inflates) N
(the parser code.) N
() N
(Another technique has therefore been suggested in [Wirth 86].  Recovery takes) N
(cocol) (Page 8/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (Thursday May 29, 2003) (8/11) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9) 9
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(place only at certain synchronization points in the grammar.  Errors at other) p n
(points are reported but cause no recovery.  Parsing simply continues up to the) N
(next synchronization point where the grammar and the input are synchronized) N
(again.  This requires the designer of the grammar to specify synchronization) N
(points explicitly - not a very difficult task if one thinks for a moment.  The) N
(advantage is that no recovery sets have to be computed at run time.  This) N
(makes the parser small and fast.) N
() N
(The programmer has to give some hints in order to allow Coco/R to generate) N
(good and efficient error-handling.) N
() N
(First, synchronization points have to be specified.  A synchronization point) N
(is a location in the grammar where especially safe terminals are expected that) N
(are hardly ever missing or mistyped.  When the generated parser reaches such a) N
(point, it adjusts the input to the next symbol that is expected at this point.) N
(In most languages good candidates for synchronization points are the beginning) N
(of a statement \(where IF, WHILE, etc are expected\), the beginning of a) N
(declaration sequence \(where CONST, VAR, etc are expected\), and the beginning) N
(of a type \(where RECORD, ARRAY, etc. are expected\).  The end-of-file symbol is) N
(always among the synchronization symbols, guaranteeing that synchronization) N
(terminates at least at the end of the source text.  A synchronization point is) N
(specified by the symbol SYNC.) N
() N
(A synchronization point is translated into a loop that skips all symbols not) N
(expected at this point \(except end-of-file\).  The set of these symbols can be) N
(precomputed at parser generation time.  The following example shows two) N
(synchronization points and their counterparts in the generated parser.) N
() N
(PRODUCTION                          SPIRIT OF GENERATED PARSING PROCEDURE) N
() N
(Declarations =) N
(   SYNC                             while \(!\(IN\(sym{const, type, var, proc,) N
(                                                     begin, end, eof}\)\) {) N
(                                       Error\(...\); Get\(\);) N
(                                    };) N
({                                   while \(IN\(sym,{const, type, var, proc}\)\) {) N
(  \( "CONST" { ConstDecl ";" }         if \(sym == const\) { Get\(\);...) N
(  | "TYPE" { TypeDecl ";" }           else if \(sym == type\) { Get\(\);...) N
(  | "VAR" { VarDecl ";" }             else if \(sym == var\) { Get\(\);...) N
(  | ProcDecl                          else ProcDecl\(\)) N
(  \)                                 }) N
(  SYNC                              while \(!IN\(sym,{const, type, var, proc,) N
(                                                    begin, end, eof}\)\) {) N
(                                       Error\(...\); Get\(\);) N
(                                    }) N
(}) N
() N
(To avoid spurious error messages, an error is only reported when a certain) N
(amount of text has been correctly parsed since the last error.) N
() N
() N
(WEAK SYMBOLS) N
(------------) N
() N
(Error-handling can further be improved by specifying which terminals are) N
("weak" in a certain context.  A weak terminal is a symbol that is often) N
(mistyped or missing, such as the semicolon between statements.  A weak) N
(terminal is denoted by preceding it with the keyword WEAK.  When the generated) N
(parser does not find a terminal specified as weak, it adjusts the input to the) N
(cocol) (Page 9/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (9/11) (Thursday May 29, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (10) 10
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(next symbol that is either a legal successor of the weak symbol or a symbol) p n
(expected at any synchronization point \(symbols expected at synchronization) N
(points are considered to be very "strong", so that it makes sense that they) N
(never be skipped\).) N
() N
(   EXAMPLE:) N
(      StatementSeq = Statement { WEAK ";" Statement } .) N
() N
(If the parser tries to recognize a weak symbol and finds it missing, it) N
(reports an error and skips the input until a legal successor of the symbol is) N
(found \(or a symbol that is expected at any synchronization point;  this is a) N
(useful heuristic that avoids skipping safe symbols\).  The following example) N
(shows the translation of a weak symbol.) N
() N
(                       SPIRIT OF GENERATED PARSING CODE) N
(Statement =) N
(   ident                Expect\(ident\);) N
(   WEAK ":="            ExpectWeak\(becomes, {start symbols of Expression}\);) N
(   Expression           Expression\(\)) N
() N
() N
(The procedure ExpectWeak is implemented roughly as follows:) N
() N
(  int ExpectWeak \(int s; Set expected\);) N
(  { if \(sym == s\) Get\(\);) N
(    else {) N
(      Error\(s\);) N
(      while \(!IN\(sym,expected + {symbols expected at) N
(                                 synchronization points}\)\) {) N
(        Get\(\);) N
(      }) N
(    }) N
(  }) N
() N
(Weak symbols give the parser another chance to synchronize in case of an) N
(error.  Again, the set of expected symbols can be precomputed at parser) N
(generation time and cause no run time overhead in error-free parsing.) N
() N
(When an iteration starts with a weak symbol, this symbol is called a weak) N
(separator and is handled in a special way.  If it cannot be recognized, the) N
(input is skipped until a symbol that is contained in one of the following) N
(three sets is found:) N
() N
(      symbols that may follow the weak separator) N
(      symbols that may follow the iteration) N
(      symbols expected at any synchronization point \(including eof\)) N
() N
(The following example shows the translation of a weak separator) N
() N
(                           GENERATED PARSING PROCEDURE) N
(  StatSequence =) N
(     Stat                  Stat;) N
(     { WEAK ";" Stat }.    while \(WeakSeparator\(semicolon, A, B\)\) { Stat; }) N
() N
(In this example, A is the set of start symbols of a statement \(ident, IF,) N
(WHILE, etc.\) and B is the set of successors of a statement sequence \(END,) N
(ELSE, UNTIL, etc.\).  Both sets can be precomputed at parser generation time.) N
() N
(WeakSeparator is implemented on the following lines:) N
(cocol) (Page 10/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (Thursday May 29, 2003) (10/11) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11) 11
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(   int WeakSeparator \(int s; Set sySucc, Set iterSucc\)) N
(   { if \(sym == s\) { Get\(\); return 1; }) N
(       else if \(IN\(sym, iterSucc\)\) return 0;) N
(       else {) N
(         Error\(s\);) N
(         while \(!IN\(sym, sySucc + iterSucc + eof\)\) Get\(\);) N
(         return IN\(sym, sySucc\); /* 1 means 's inserted' */) N
(       }) N
(   }) N
() N
(The observant reader may have noticed that the set B contains the successors) N
(of a statement sequence in any possible context.  This set may be too large.) N
(If the statement sequence occurs within a REPEAT statement, only UNTIL is a) N
(legal successor, but not END or ELSE.  We accept this fault, since it allows) N
(us to precompute the set B at parser generation time.  The occurrence of END) N
(or ELSE is very unlikely in this context and can only lead to incorrect) N
(synchronization, causing the parser to synchronize again.) N
() N
() N
(LL\(1\) REQUIREMENTS) N
(==================) N
() N
(Recursive descent parsing requires that the grammar of the parsed language) N
(satisfies the LL\(1\) property.  This means that at any point in the grammar the) N
(parser must be able to decide on the bases of a single lookahead symbol which) N
(of several possible alternatives have to be selected.  For example, the) N
(following production is not LL\(1\):) N
() N
(   Statement = ident ":=" Expression) N
(             | ident [ "\(" ExpressionList "\)" ] .) N
() N
(Both alternatives start with the symbol ident, and the parser cannot) N
(distinguish between them if it comes across a statement, and finds an ident as) N
(the next input symbol.  However, the production can easily be transformed into) N
() N
(   Statement = ident \(   ":=" Expression) N
(                      |  [ "\(" ExpressionList "\)"  ]) N
(                     \) .) N
() N
(where all alternatives start with distinct symbols.  There are LL\(1\) conflicts) N
(that are not as easy to detect as in the above example.  For a programmer, it) N
(can be hard to find them if he has no tool to check the grammar.  The result) N
(would be a parser that in some situations selects a wrong alternative.  Coco/R) N
(checks if the grammar satisfies the LL\(1\) property and gives appropriate error) N
(messages that show how to correct any violations.) N
() N
(=END=) N
() N
(cocol) (Page 11/11) (May 20, 03 12:18) title
border
grestore
(Printed by Markus Schordan) rhead
() (11/11) (Thursday May 29, 2003) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
