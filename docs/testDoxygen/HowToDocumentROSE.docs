// -*- c++ -*-

/** @page how_to_document Documenting the code
 *
 *  How to document ROSE library source code.
 *
 *  This page specifies how we would like to have the ROSE library source code documented. The style enumerated here does not
 *  necessarily need to be used for projects, tests, the tutorial, etc.  Each item is also presented along with our motivation
 *  for doing it this way.
 *
 *  @todo The doxygen style guide has not been reviewed by rose-core yet. [Robb P. Matzke 2015-05-15]
 *
 *  @section doxygen Doxygen
 *
 *  ROSE uses Doxygen to document the API.
 *
 *  @subsection doxy_general General doxygen style
 *
 *  + <b>Comment style:</b> Whether to use C-style multi-line comments or C++ single-line comments is up to the author. I tend
 *    to use C-style comments for doxygen and C++ "//" comments for other commentary, that way it's obvious what purpose a
 *    comment is serving. I also use "*" down the left column so that @c grep output can be filtered if I'm searching only for
 *    code. It helps to have a capable IDE. [Robb P. Matzke 2015-05-15]
 *
 *  + <b>Use javadoc style:</b> Javadoc style uses the at-sign ("@") rather than the backslash ("\") to introduce doxygen
 *    key words. The backslash style comes from the much less common Qt documentation system. IDEs tend to have fewer problems
 *    recognizing the javadoc style due to popularity and the fact that "@" is relatively uncommon in C++ code.  Similarly,
 *    the presence of "!" to mark the start of a doxygen comment is a Qt-ism.
 *
 *  + <b>Explicit references:</b> Although doxygen will often automatically create cross references to any word that has
 *    strange capitalization or underscores, using an explicit @c @@ref will cause doxygen to emit an error if the referent's
 *    name changes and breaks the link.
 *
 *  + <b>Capitalization:</b> Use the Wikipedia style of capitalization for pages, sections, and subsections. Namely, the first
 *    word is capitalized and all other words except proper names and abbreviations are lower-case.
 *
 *  + <b>"ROSE":</b> The name of this project is "ROSE", not "Rose" and not "rose".  However, within the documentation
 *    itself it's seldom necessary to mention ROSE by name.
 *
 *  @subsection doxy_api Doxygen documentation for API entities
 *
 *  The original purpose of doxygen is to document the files, name spaces, classes, functions, and other types that compose an
 *  API.
 *
 *  + <b>Co-location:</b> The doxygen comment should be near the thing it documents.  Some people claim this unnecessarily
 *    clutters the header file and that the comment should be in a separate file, but the counter argument is that by having
 *    documentation near the declaration it is more likely to be updated if the declaration changes.  Also, the cluttering-up
 *    claim is made moot by any reasonably capable IDE.
 *
 *  + <b>Auto brief:</b> The doxygen configuration is set up so that the first sentence of documentation gets used as the @c
 *    @@brief value without having to specify @c @@brief. Therefore the first line should be a very short summary that will
 *    appear, among other places, in the right-hand column of an index, such as the index of class members. It can help to
 *    insert a blank line between the brief and the rest of the description to help remind authors of this feature, but that's
 *    entirely optional. The brief line is the absolute minimum documentation; most entities should also have a description.
 *
 *  + <b>Public API:</b> All public and protected parts of the API must be documented. Eventually we will disable the switches
 *    that allow doxygen to generate stub documentation for non-documented parts of the API.  Using doxygen to document private
 *    parts of the library is optional, but that documentation will generally not appear in our published documents. Parts of
 *    the ROSE source tree that are not strictly the library itself (e.g., EDG, ROSETTA, 3rd party libraries, projects, tests
 *    and their inputs) do not need to be documented with doxygen.
 *
 *  + <b>Description:</b> All API entities should have a clear description, including an example if the entity is sufficiently
 *    complex or could be tricky to use.  It is not necessary to start the documentation with "This function", "This class",
 *    etc. since that information is provided by doxygen. Type information is also not necessary except when it makes the
 *    description clearer.  For instance, instead of writing "This function returns a list of strings by splitting the input
 *    string at semicolons", write "Returns a list of strings by splitting the input string at semicolons."
 *
 *  + <b>%Function parameters:</b> %Function parameters need to be documented when their type and/or name is not
 *    sufficient. They can be documented in list format or as part of the function's description.  Use the @c @@p tag when
 *    referring to a parameter.
 *
 *  + <b>To-do lists:</b> If you need to mark documentation that should be fixed, use the @c @@todo tag and include a
 *    description of what needs to be fixed and where. Also include @em your name (i.e., the person who thinks there's a
 *    problem) and the date.
 *
 *  + <b>Proofread:</b> Proofread your documentation in a web browser after doxygen runs.  One common error is for doxygen to
 *    make a link to a capitalized word (like Function, at least as this is being written) that happens to also be an entity in
 *    the API. Prefix such words with a percent sign when the link is unintended.  Likewise, authors should try to avoid class
 *    and namespace names that are also common words.
 *
 *  @subsection doxy_noncode Doxygen documentation for non-API
 *
 *  + <b>File name extension:</b> Documentation that is not attached to any particular piece of source code (such as this page
 *    itself) should be placed into a file whose name ends with ".dox" (preferable) or ".docs" (acceptable) but not ".doc" or
 *    ".docx" since they're taken already by some other word processing format.  We do not use C/C++ file extensions for this
 *    type of documentation because we don't want these files listed in the documentation as source code.
 *
 *  + <b>File type marker:</b> These ".dox" (or ".docs") files are actually C++ code, therefore we should notify IDEs of that
 *    fact in order to get C/C++ editing features.  For instance, as I'm typing this, Emacs is formatting this comment to use a
 *    particular style. Each such file should start with a comment containing at least "-*- c++ -*-".
 */
