#!/bin/bash  
#####  !/bin/bash -x
#
# This script does a fresh checkout of ROSE and conducts a series tests.
#
# Please modify the following before using it:
#
# 1. The path to the source and build directories of ROSE
# 2. The configuration options
# 3. Others in the Configuration section and Preparation section
#
# Liao, 2/7/2008
# Last Modified: 4/22/2008
#------------------------------------------------------
# Configuration Section
#------------------------------------------------------
MAILADDRS="liaoch@llnl.gov"

# using a time stamp to avoid overwriting previous tests
TIMESTAMP=$(date +%Y%m%d_%H%M%S) 
ROSE_TOP=/home/liao6/daily-test-rose/${TIMESTAMP}
ROSE_SRC=${ROSE_TOP}/sourcetree
ROSE_BUILD=${ROSE_TOP}/build
ROSE_INSTALL=${ROSE_TOP}/install
ROSE_LOG=${ROSE_TOP}/buildlog
# check out the revision of the past 11:00pm PDT (06:00am UTC)
SVN_REVISION="`date -d '06:00Z' -u '+%FT%H:%M:%SZ'`"
BOOST_INSTALL=/home/liao6/opt/boost_1_35_0

# the right version of subversion is required!!
SVN=/nfs/apps/subversion/1.4.5/bin/svn
ROSE_SVNROOT=file:///usr/casc/overture/ROSE/svn/ROSE/trunk/ROSE

# store configuration options into an array ()
# $@ means the optional parameters provided with the command line running current script 
CONFIGURE_FLAGS=(--with-edg_source_code=true --enable-dq-developer-tests --with-ROSE_LONG_MAKE_CHECK_RULE=yes --enable-rosehpct --with-Java=/usr/apps/java/jdk1.5.0_11 --with-JavaJVM=/usr/apps/java/jdk1.5.0_11/jre/lib/i386/server --with-openFortranParser=/home/dquinlan/ROSE/OpenFortranParser/ofp_install --with-CXX_DEBUG=-g --with-C_DEBUG=-g --with-CXX_WARNINGS=-Wall --with-CXXFLAGS=-fPIC -with-CFLAGS=-fPIC --with-boost=${BOOST_INSTALL} --prefix=${ROSE_INSTALL} "$@")

# enable wave
#CONFIGURE_FLAGS=(--without-binary_analysis --with-edg_source_code=true --enable-dq-developer-tests --with-ROSE_LONG_MAKE_CHECK_RULE=yes --enable-rosehpct --with-Java=/usr/apps/java/jdk1.5.0_11 --with-JavaJVM=/usr/apps/java/jdk1.5.0_11/jre/lib/i386/server --with-openFortranParser=/home/dquinlan/ROSE/OpenFortranParser/ofp_install --with-CXX_DEBUG=-g --with-C_DEBUG=-g --with-CXX_WARNINGS=-Wall --with-CXXFLAGS=-fPIC -with-CFLAGS=-fPIC --with-boost=${BOOST_INSTALL} --with-boost-wave=yes --prefix=${ROSE_INSTALL} "$@")

# make using multiple processes
MAKEFLAGS="-j4"
#------------------------------------------------------
#  Preparation Section
#------------------------------------------------------
set -o pipefail
set -e
mkdir -p ${ROSE_TOP}
touch ${ROSE_LOG}
# need a fresh check out
rm -rf ${ROSE_SRC}
cd ${ROSE_TOP}

set +e
source /usr/apps/graphviz/2.6/setup.sh
source /usr/apps/python/2.5/setup.sh
source /usr/apps/gcc/4.2.2/setup.sh

export BOOST_ROOT=${BOOST_INSTALL}
export PATH="/usr/apps/java/jdk1.5.0_11/bin:$PATH"
export PATH="/usr/apps/automake/1.9.6/bin:$PATH"

export LD_LIBRARY_PATH="${BOOST_ROOT}/lib:/usr/apps/java/jdk1.5.0_11/lib:/usr/apps/java/jdk1.5.0_11/jre/lib/i386/client:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="/home/dquinlan/ROSE/OpenFortranParser/ofp_install/lib/:$LD_LIBRARY_PATH"

export JAVA_HOME=/usr/apps/java/jdk1.5.0_11
export CLASSPATH="/home/liao6/opt/antlr-3.0.1/lib/antlr-2.7.7.jar:/home/liao6/opt/antlr-3.0.1/lib/antlr-3.0.1.jar:/home/liao6/opt/antlr-3.0.1/lib/antlr-runtime-3.0.1.jar:/home/liao6/opt/antlr-3.0.1/lib/stringtemplate-3.1b1.jar:/home/dquinlan/ROSE/OpenFortranParser/ofp_install/lib/OpenFortranParser.jar:."

# grab the revision number
svnversioninfo="`${SVN} -q -r{${SVN_REVISION}} log ${ROSE_SVNROOT} | sed -n 2p`"
svnversion=`echo "${svnversioninfo}" | cut -f1 -d \  | tr -d r`

#------------------------------------------------------
# Starting Section
#------------------------------------------------------
#Exit immediately if a command fails
set -e
(
  echo "Subject: Starting ROSE test ${TIMESTAMP}" > mailtext1
  echo "" >> mailtext1
  echo "See build log in ${ROSE_LOG} for status" >> mailtext1
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext1
  echo "" >> mailtext1
  echo "SVN repository version no is ${svnversion}" >> mailtext1
  echo "Make flags = ${MAKEFLAGS}" >> mailtext1
  echo "" >> mailtext1
  echo "> Command versions" >> mailtext1
  automake --version | head -1 >> mailtext1
  autoconf --version | head -1 >> mailtext1
  make --version | head -1 >> mailtext1
  g++ --version | head -1 >> mailtext1
  gcc --version | head -1 >> mailtext1
  bison --version | head -1 >> mailtext1
  echo -n "doxygen " >> mailtext1
  doxygen --version >> mailtext1
  dot -V >> mailtext1 2>&1
  libtool --version | sed '2,$d' >> mailtext1 # head -1 crashes
  latex --version | head -1 >> mailtext1
  latex2html -v | grep -w LaTeX2HTML >> mailtext1
#swig -version | grep -w SWIG >> mailtext1
) || echo "Command version check failed"

/usr/sbin/sendmail -i $MAILADDRS < mailtext1
#------------------------------------------------------
#  Building and Making Section
#------------------------------------------------------
buildstatus=0
(
  set -e
  set -x
# check out a fresh copy for testing
#  $SVN co -q ${ROSE_SVNROOT} ${ROSE_SRC}
#  $SVN co -r {2008-04-22} -q ${ROSE_SVNROOT} ${ROSE_SRC}
  $SVN co -r {${SVN_REVISION}} -q ${ROSE_SVNROOT} ${ROSE_SRC}
# $SVN export -q ${ROSE_SVNROOT} sourcetree

# rebuild the Makefile in the source tree
  echo "Build configuration and Makefile.in in the source tree...."
  cd ${ROSE_SRC}
  ./build
  cd ..

# prepare a fresh build tree
  echo "Making a temporary build directory:... "
  mkdir ${ROSE_BUILD}

# configure ROSE
  cd ${ROSE_BUILD}
  ${ROSE_SRC}/configure "${CONFIGURE_FLAGS[@]}"

# make and check
  make $MAKEFLAGS && \
  make $MAKEFLAGS docs && \
  make $MAKEFLAGS check && \
  make $MAKEFLAGS install && \
  make $MAKEFLAGS installcheck && \
  make $MAKEFLAGS dist && \
  make $MAKEFLAGS distcheck
) >${ROSE_LOG} 2>&1 || buildstatus=1

#------------------------------------------------------
# Report Section
#------------------------------------------------------
if [ $buildstatus == 0 ]; then
# update rosecompiler.org
  echo "Subject: ROSE test ${TIMESTAMP} results (pass)" > mailtext
  echo "SVN repository version no is ${svnversion}" >> mailtext
  echo "" >> mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext
  echo "Make flags = ${MAKEFLAGS}" >> mailtext

  /usr/sbin/sendmail -i $MAILADDRS < mailtext
# SSH now have restrictions, tolerate the failure here
  cd ${ROSE_BUILD}/docs/Rose
  make copyWebPages
else
  echo "Subject: ROSE test ${TIMESTAMP} results (fail)" > mailtext
  echo "SVN repository version no is ${svnversion}" >> mailtext
  echo "" >> mailtext
  echo "-------------------- Error summary --------------------" >> mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext
  echo "Make flags = ${MAKEFLAGS}" >> mailtext
  echo "" >> mailtext
  tail -100 ${ROSE_LOG} >> mailtext
  echo "" >> mailtext
  /usr/sbin/sendmail -i $MAILADDRS < mailtext
fi
# Delete test directories if the test passed
#if [ $buildstatus == 0 ]; then rm -rf "${ROSE_TOP}" ; fi 

