#!/bin/sh -ex

export LD_LIBRARY_PATH="${ROSE_TEST_BOOST_PATH}/lib:$LD_LIBRARY_PATH"

echo "*******************************************************************"
echo "         Output variables required by Hudson runTest script."
echo "*******************************************************************"
echo "LD_LIBRARY_PATH                   = $LD_LIBRARY_PATH"
echo "ROSE_TEST_BUILD_SKIP_BUILD_SCRIPT = ${ROSE_TEST_BUILD_SKIP_BUILD_SCRIPT}"
echo "ROSE_TEST_BUILD_STYLE             = ${ROSE_TEST_BUILD_STYLE}"
echo "ROSE_TEST_BOOST_PATH              = ${ROSE_TEST_BOOST_PATH}"
echo "ROSE_TEST_JAVA_PATH               = ${ROSE_TEST_JAVA_PATH}"

echo "Environment variables required for ROSE_TEST_BUILD_STYLE = full"
echo "ROSE_TEST_QT_PATH                 = ${ROSE_TEST_QT_PATH}"
echo "ROSE_TEST_SQLITE_PATH             = ${ROSE_TEST_SQLITE_PATH}"
echo "ROSE_TEST_RTED_PATH               = ${ROSE_TEST_RTED_PATH}"
echo "*******************************************************************"


if test $ROSE_TEST_GCC_VERSION != 4.1.2 ; then
	GCCROOT=/usr/apps/gcc/$ROSE_TEST_GCC_VERSION
	if test -e $GCCROOT/setup.sh ; then
		set +ex
		. $GCCROOT/setup.sh
		set -ex
	else
		export PATH="$GCCROOT/bin:$PATH"
		export LD_LIBRARY_PATH="$GCCROOT/lib:$LD_LIBRARY_PATH"
	fi
fi

if test $ROSE_TEST_BUILD_STYLE = cmake ; then
	rm -rf ROSE-build-cmake
	mkdir ROSE-build-cmake
	cd ROSE-build-cmake
	cmake .. -DBOOST_ROOT=${ROSE_TEST_BOOST_PATH}
	make -j8
	exit 0
fi

CONFIGURE_FLAGS="--with-boost=${ROSE_TEST_BOOST_PATH} --with-boost-libdir=${ROSE_TEST_BOOST_PATH}/lib --with-java=${ROSE_TEST_JAVA_PATH} --with-ROSE_LONG_MAKE_CHECK_RULE=yes --enable-dq-developer-tests"

if test $ROSE_TEST_BUILD_STYLE = full ; then
	CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-qt=${ROSE_TEST_QT_PATH} --with-roseQt --with-sqlite3=${ROSE_TEST_SQLITE_PATH} --with-rted=${ROSE_TEST_RTED_PATH}"
	if test $ROSE_TEST_GCC_VERSION = 4.1.2 ; then
		CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-pch"
	fi
fi

echo "CONFIGURE_FLAGS = ${CONFIGURE_FLAGS}"

# Skip this for now but uncomment before checkin!
if test $ROSE_TEST_BUILD_SKIP_BUILD_SCRIPT = yes ; then
   echo "Skipping build at part of testing from makefile rule."
else
   echo "Hudson tests on a new branch must run the ROSE build script."
   ./build
fi

if test -e ROSE-build ; then chmod -R u+w ROSE-build ; fi
rm -rf ROSE-build
mkdir ROSE-build
cd ROSE-build
echo "Starting configure step"
../configure ${CONFIGURE_FLAGS}
echo "Done with configure step"

if test $ROSE_TEST_BUILD_STYLE = edg ; then
	make -j8 upload_edg_binary
	make -Csrc/frontend/CxxFrontend deploy_tarballs
	exit 0
fi

# Save the output of make for later processing (e.g. similar to makeCheckLineCount.pl)
# Make sure that stderr is written to stdout (using bash syntax "2>&1").
# make -j8 1>&2 | tee make_output.txt
echo "Starting compile step"
make -j8 2>&1 | tee make_output.txt
echo "Done with compile step"

# This is not as useful so instead we want do measurements of spew on filtered output.
# grep -n "Making all in " make_output.txt | ../scripts/checkMakeSpew.pl | tee makeSpewLineCount.txt

# Filter out the legitimate lines specific to compilation and linking (filter compile, links, and Qt specific tools).
echo "Building the filtered_make_output.txt file"
grep -v "Entering directory" make_output.txt | grep -v "Leaving directory" | grep -v "COMPILE" | grep -v "LINK" | grep -v "Qt-MOC" | grep -v "Qt-RCC" | grep -v "Qt-UIC" > filtered_make_output.txt
echo "Built filtered_make_output.txt"

# Now process to count the number of lines of spew.
echo "Computing compile time spew"
grep -n "Making all in " filtered_make_output.txt | ../scripts/checkMakeSpew.pl | tee makeSpewLineCount.txt
echo "Done with compile time spew"

# GCC 4.3 and 4.4 do not currently pass make check
# Known unresolved issues:
#  - RTED test failures due to obsolete STL headers used in test suite
#  - Unparser generates (C++ and Fortran) code that is incompatible with these compilers
if test \! \( $ROSE_TEST_GCC_VERSION = 4.3.2 -o $ROSE_TEST_GCC_VERSION = 4.4.1 \) ; then
 # DQ (12/9/2009): Save output from "make check" rule and measure the test spew.
 # make -j8 check
   echo "Starting make check step"
	make -j8 check 2>&1 | tee make_check_output.txt;
   echo "Done with make check step"
   grep -n "Making check in " make_check_output.txt | ../scripts/checkMakeSpew.pl | tee makeCheckSpewLineCount.txt

 # The distcheck rule builds a distribution and reruns all the tests; including the rules: install, installcheck
   echo "Starting make distcheck step"
	make -j8 distcheck
   echo "Done with make distcheck step"
fi

# Finally run the "make docs" test (on just the 4.1.2 version of gcc).
if test \( $ROSE_TEST_GCC_VERSION = 4.1.2 \) ; then
   echo "Starting make docs step (exit normally even if it fails so that we can debug the docs rule)"
 # Exit normally even if it fails so that we can debug the docs rule.
   make -j8 docs || exit 0
   echo "Done with make docs step"
fi
