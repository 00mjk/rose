#!/bin/sh -ex
#
#
#
#########################################################################################
source scripts/hudson/runBuildStep.sh

machine=`uname -m`
machine_name=`uname -n`
start_time=`date`
hudson_start_time_seconds="$(date +%s)"

#########################################################################################
#
#  Install tree 
#
#  Define the platform specific install directory for this ROSE build.
#  This directory will be built into the Hudson home directory.
#
#########################################################################################
if test "$machine" = "i686" ; then
  OS_MACHINE_LABEL=i686-linux
else
  OS_MACHINE_LABEL=amd64-linux
fi

CONFIGURE_PREFIX_DIR="${HOME}/MasterInstallTree/ROSE-matrix/ROSE_TEST_BUILD_STYLE/$ROSE_TEST_BUILD_STYLE/ROSE_TEST_GCC_VERSION/$ROSE_TEST_GCC_VERSION/label/$OS_MACHINE_LABEL/ROSE-install"
# Liao 1/6/2010
# Remove the stale installation tree since the stale headers will be included before updated ones are used.
rm -rf $CONFIGURE_PREFIX_DIR/*

#########################################################################################
#
#  BOOST C++ 
#
#########################################################################################
if test "x$label" = "x64bit-macos-10.6" ; then
  export DYLD_LIBRARY_PATH="$ROSE_TEST_BOOST_PATH/lib:$DYLD_LIBRARY_PATH"
else
  # tps : 04/26/2010 - Added support for OpenGL for 64bit
  export LD_LIBRARY_PATH="${ROSE_TEST_BOOST_PATH}/lib:${ROSE_TEST_OPENGL_PATH}/lib:$LD_LIBRARY_PATH"
fi

#########################################################################################
#
#  UPC
#
#  tps : 11/17/2010 Hudson support for UPC - order matters!
#  tps : 11/16/2010 : Lets add support for UPC
#  tps : 11/22/2010 : The setup.sh has been updated by admin
#
#########################################################################################
UPC_TEST_MACHINE=`uname -m`
if test "x$UPC_TEST_MACHINE" = "xi686" ; then
  echo "UPC is not currently tested on 32-bit machines."
elif test "x$label" = "x64bit-macos-10.6" ; then
  echo "UPC is not currently tested on 64-bit Mac OS X 10.6"
else
# Turn off bash error checking to run source with file that uses "grep" (will return error code if target is not found).
  set +e
  # This causes "symbol lookup error: /usr/libexec/gcc/x86_64-redhat-linux/4.1.2/f951: undefined symbol: __gmpn_sqr_n"
  # on all 4.1.2 compilers (only effects 64 bit tests since we only use this script on 64 bit machines).
  # This UPC support must be thought out more carefully.
  if test "x$ROSE_TEST_GCC_VERSION" != "x4.1.2" ; then
    source /nfs/apps/upc/4.5.1.2/setup.sh
  else
    echo "UPC not tested 64-bit machines using gnu 4.1.2 for now."
  fi
  set -e
fi

#########################################################################################
#
#  GCC 4.1.2
#
#########################################################################################
if test "x$ROSE_TEST_GCC_VERSION" != "x4.1.2" ; then
    GCCROOT=/usr/apps/gcc/$ROSE_TEST_GCC_VERSION
    if test -e $GCCROOT/setup.sh ; then
        set +ex
        . $GCCROOT/setup.sh
        set -ex
    else
    # This is the case for g++ 3.4.6 (since there is no uniform existence of a setup.sh file).
      echo "Handling case of no $GCCROOT/setup.sh file."
		export PATH="$GCCROOT/bin:$PATH"

    # DQ (2/15/2010): For 64-bit this has to be setup to use lib64 explicitly
    # export LD_LIBRARY_PATH="$GCCROOT/lib:$LD_LIBRARY_PATH"
      if test "$MACHINE" = "i686" ; then
         export LD_LIBRARY_PATH="$GCCROOT/lib:$LD_LIBRARY_PATH"
      else
         export LD_LIBRARY_PATH="$GCCROOT/lib64:$GCCROOT/lib:$LD_LIBRARY_PATH"
      fi
    fi
fi

#########################################################################################
#
#  Configure Flags 
#
#########################################################################################
# Note that Boost 1.39 and greater require using "--with-boost-libdir"
CONFIGURE_FLAGS="\
    --with-boost=${ROSE_TEST_BOOST_PATH} \
    --with-boost-libdir=${ROSE_TEST_BOOST_PATH}/lib \
    --with-java=${ROSE_TEST_JAVA_PATH} \
    --with-ROSE_LONG_MAKE_CHECK_RULE=yes \
    --with-CXX_DEBUG=-g --with-C_DEBUG=-g --with-CXX_WARNINGS=-Wall"
#########################################################################################
#  i386 
# 
#  [RPM 2011-02-06]:
#  The "--enable-i386" configure switch was added in commit f5389299 on 2011-02-06.
#  If this switch is present, then configure will try to determine how to generate
#  32-bit x86 executables with the C compiler and will fail if such a capability is not
#  possible.  This is the same behavior as previously, except previously the failure didn't
#  occur until we hit a makefile that actually tried to generate an i386 executable. 
#  If "--disable-i386" switch were specified then tests that require i386 input files will
#  not run (and will not cause a make failure).  If neither --enable-i386 nor --disable-i386
#  are specified then configure will try to determine whether generating i386 is possible
#  and act as if either --enable-i386 or --disable-i386 was specified.
#
#  Since we want the a00-ROSE-from-scratch Hudson tests to fail if configure can't figure out 
#  how to generate i386, we explicitly request that i386 support be present by invoking 
#  configure with "--enable-i386".
#########################################################################################
CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-i386"

#########################################################################################
#
#  Full build 
#
#  tps (10/19/10) : opengl has not been tested for a year and the binary tests in place 
#  are failing because the infrastructure has changed. For now I have disabled openGL
#  testing but the way to turn it on is to specify --enable-openGL
#
#########################################################################################
if test "x$ROSE_TEST_BUILD_STYLE" = "xfull" ; then
  CONFIGURE_FLAGS="\
	${CONFIGURE_FLAGS} \
	--with-qt=${ROSE_TEST_QT_PATH} \
	--with-roseQt \
	--with-sqlite3=${ROSE_TEST_SQLITE_PATH}"

  ########################################################################################
  #  OpenGL
  #
  #  tps : 11/12/10 : Admins are installing openGL on hudson machines. Enabled openGL thereafter. Should pass.
  #  tps : It seems opengl is not properly installed on the hudson-rose node. Skip the test on this node for now.
  #######################################################################################
  if test \! \( "$MACHINE" = "i686" -o \
              "$machine_name" = "hudson-rose.llnl.gov" -o \
              "$machine_name" = "hudson-rose-07.llnl.gov" -o \
              "$machine_name" = "hudson-rose-08.llnl.gov" -o \
              "$machine_name" = "hudson-rose-13.llnl.gov" -o \
              "$machine_name" = "hudson-rose-14.llnl.gov" -o \
              "$machine_name" = "hudson-rose-15.llnl.gov" -o \
              "$machine_name" = "hudson-rose-16.llnl.gov" \)
  then
    CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --enable-rose-openGL"
  fi
  #######################################################################################
  #  PCH
  #
  #  tps : 11/12/10 - OpenGL is not installed on all nodes yet. 
  #######################################################################################
  CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-pch  "

  #######################################################################################
  #  RTED
  #
  #  tps : 11/15/10 - RTED does not work for gcc 4.3.2 and 4.4.1 . This is not a problem of
  #  our implementation but rather a problem with the test suite. For instance we get the 
  #  following error: C_G_4_3_a_d.cpp:48: error: 'cout' was not declared in this scope
  #######################################################################################
  if test \! \( "x$ROSE_TEST_GCC_VERSION" = "x4.3.2" -o \
                "x$ROSE_TEST_GCC_VERSION" = "x4.4.1" \)
  then
    CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-rted=${ROSE_TEST_RTED_PATH}"
  fi
fi

#########################################################################################
#
#  Dump environment
#
#  DQ (1/14/2010): Support for dumping the enviroment so that it 
#   can be easily sourced to permit Hudson tests to be reproduced.
#
#########################################################################################
env_dump_file="$PWD/HudsonEnvironment.log"
#env_dump_file="/tmp/env_dump_file_$hudson_start_time_seconds.$machine_name.hudson"
rm -rf $env_dump_file

echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "*******************************************************************"       >> $env_dump_file
echo "                        Test-environment"                                  >> $env_dump_file
echo "-------------------------------------------------------------------"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "This output is dumped in:"                                                 >> $env_dump_file   
echo ""                                                                          >> $env_dump_file
echo "$env_dump_file"                                                            >> $env_dump_file   
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "-------------------------------------------------------------------"       >> $env_dump_file
echo "                                                          [General]"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "machine                           = $machine"                              >> $env_dump_file
echo "machine_name                      = $machine_name"                         >> $env_dump_file
echo "start_time                        = $start_time"                           >> $env_dump_file
echo "hudson_start_time_seconds         = $hudson_start_time_seconds"            >> $env_dump_file

echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "-------------------------------------------------------------------"       >> $env_dump_file
echo "                                                           [Hudson]"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "ROSE_TEST_BUILD_SKIP_BUILD_SCRIPT = ${ROSE_TEST_BUILD_SKIP_BUILD_SCRIPT}"  >> $env_dump_file
echo "ROSE_TEST_BUILD_STYLE             = ${ROSE_TEST_BUILD_STYLE}"              >> $env_dump_file
echo "ROSE_TEST_BOOST_PATH              = ${ROSE_TEST_BOOST_PATH}"               >> $env_dump_file
echo "ROSE_TEST_JAVA_PATH               = ${ROSE_TEST_JAVA_PATH}"                >> $env_dump_file
set +e
echo "$ROSE_TEST_BUILD_STYLE" | grep --quiet "make.*full"
if test $? = 0 ; then
# echo "Environment variables required for ROSE_TEST_BUILD_STYLE = full"           >> $env_dump_file
 echo "ROSE_TEST_QT_PATH                 = ${ROSE_TEST_QT_PATH}"                  >> $env_dump_file
 echo "ROSE_TEST_SQLITE_PATH             = ${ROSE_TEST_SQLITE_PATH}"              >> $env_dump_file
 echo "ROSE_TEST_RTED_PATH               = ${ROSE_TEST_RTED_PATH}"                >> $env_dump_file
 echo "ROSE_TEST_OPENGL_PATH             = ${ROSE_TEST_OPENGL_PATH}"              >> $env_dump_file
fi
set -e

echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "-------------------------------------------------------------------"       >> $env_dump_file
echo "                                                              [Git]"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
# tps (02/04/2010) : Checking the EDG submodule version
echo "git submodule status (EDG version) ="                                      >> $env_dump_file
echo "  `git submodule status`"                                                  >> $env_dump_file

echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "-------------------------------------------------------------------"       >> $env_dump_file
echo "                                                     [Library Path]"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
if test "x$label" = "x64bit-macos-10.6" ; then
 echo "DYLD_LIBRARY_PATH ="                                                      >> $env_dump_file
 for a_path in `echo $DYLD_LIBRARY_PATH | sed 's/:/ /g'` ; do
   echo "    $a_path"                                                            >> $env_dump_file
 done
echo ""                                                                          >> $env_dump_file
 echo "Copy me: $DYLD_LIBRARY_PATH"                                              >> $env_dump_file
else
 echo "LD_LIBRARY_PATH ="                                                        >> $env_dump_file
 for a_path in `echo $LD_LIBRARY_PATH | sed 's/:/ /g'` ; do
   echo "    $a_path"                                                            >> $env_dump_file
 done
echo ""                                                                          >> $env_dump_file
echo "Copy me: $LD_LIBRARY_PATH"                                                 >> $env_dump_file
fi

echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "-------------------------------------------------------------------"       >> $env_dump_file
echo "                                                  [Executable Path]"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "PATH ="                                                                    >> $env_dump_file
 for a_path in `echo $PATH | sed 's/:/ /g'` ; do
   echo "    $a_path"                                                            >> $env_dump_file
 done
echo ""                                                                          >> $env_dump_file
echo "Copy me: $PATH"                                                            >> $env_dump_file

echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "-------------------------------------------------------------------"       >> $env_dump_file
echo "                                                   [Configure line]"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "./configure"                                                               >> $env_dump_file
 for an_option in ${CONFIGURE_FLAGS} ; do 
   echo "    $an_option"                                                         >> $env_dump_file
 done
echo ""                                                                          >> $env_dump_file
echo "Copy me: ./configure ${CONFIGURE_FLAGS}"                                   >> $env_dump_file

echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "-------------------------------------------------------------------"       >> $env_dump_file
echo "                                                     [Install tree]"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo "CONFIGURE_PREFIX_DIR (--prefix)="                                          >> $env_dump_file 
echo ""                                                                          >> $env_dump_file
echo "    $CONFIGURE_PREFIX_DIR"                                                 >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file

echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"       >> $env_dump_file
echo "                        Test-environment"                                  >> $env_dump_file
echo "*******************************************************************"       >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file
echo ""                                                                          >> $env_dump_file

cat $env_dump_file

#########################################################################################
#
#  ROSE_EXIT_TO_TEST_HUDSON 
#  Force specific failures as part of testing a restricted subset of tests.
#
#########################################################################################
ROSE_EXIT_TO_TEST_HUDSON=no
if test "x$ROSE_EXIT_TO_TEST_HUDSON" = "xyes" ; then
  if test $ROSE_TEST_BUILD_STYLE = edg ; then
   # DQ (1/14/2010): I am debugging the Hudson tests of failures on tux269.
     echo "This test is forced to exit with an error as part of debugging Hudson tests."
     exit 1
  fi

  if test \( "x$ROSE_TEST_GCC_VERSION" = "x4.3.2" \) ; then
   # DQ (1/14/2010): I am debugging the Hudson tests of failures on tux269.
     echo "This test is forced to exit with an error as part of debugging Hudson tests."
     exit 1
  fi

  if test "x$ROSE_TEST_BUILD_STYLE" = "xcmake" ; then
   # DQ (1/14/2010): I am debugging the Hudson tests of failures on tux269.
     echo "This test is forced to exit with an error as part of debugging Hudson tests."
     exit 1
  fi
fi

#########################################################################################
#
#  CMake 
#
#########################################################################################
if test "x$ROSE_TEST_BUILD_STYLE" = "xcmake" ; then
    rm -rf ROSE-build-cmake
    mkdir ROSE-build-cmake
    cd ROSE-build-cmake

    cmake .. -DBOOST_ROOT=${ROSE_TEST_BOOST_PATH} && make -j${NUM_PROCESS}

    if [ $? -ne 0 ]  ; then
      echo "fatal error in cmake build , aborting..."
      exit 3
    else
      exit 0
    fi
fi

#########################################################################################
#
#  ROSE/build
#
#########################################################################################
if test "x$ROSE_TEST_BUILD_SKIP_BUILD_SCRIPT" = "xyes" ; then
   echo "Skipping build at part of testing from makefile rule."
else
   echo "Hudson tests on a new branch must run the ROSE/build script."
   ./build
fi


if test -e ROSE-install ; then 
  chmod -R u+xw ROSE-install
fi
rm -rf ROSE-install

if test -e ROSE-build ; then
  chmod -R u+wx ROSE-build
fi
rm -rf ROSE-build
mkdir ROSE-build
cd ROSE-build

#########################################################################################
#
#  Mac OS X 10.6 
#
#########################################################################################
if test "x$label" = "x64bit-macos-10.6" ; then
  ../configure --prefix=${CONFIGURE_PREFIX_DIR} --with-boost=${ROSE_TEST_BOOST_PATH} --with-boost-lib={$ROSE_TEST_BOOST_PATH}/lib/ --with-CXX_DEBUG=-g --with-CXX_WARNINGS=-Wall

  time make -j8
  if [ $? -ne 0 ]  ; then
    echo "Fatal error in Mac OS X 10.6 build step: make. Aborting..."
    exit 3
  fi
  time make check -j8
  if [ $? -ne 0 ]  ; then
    echo "Fatal error in Mac OS X 10.6 build step: make check. Aborting..."
    exit 3
  else
    exit 0
  fi
fi

#########################################################################################
#
#  ROSE/configure
#
#########################################################################################
TMPFILE=/tmp/hudson_${hudson_start_time_seconds}
echo "*******************************************************************"       >> $TMPFILE
echo "                     Starting configure step..."                           >> $TMPFILE
echo "-------------------------------------------------------------------"       >> $TMPFILE
cat $TMPFILE
rm -rf $TMPFILE
#########################################################################################
../configure --prefix=${CONFIGURE_PREFIX_DIR} ${CONFIGURE_FLAGS}
#########################################################################################
echo "*******************************************************************"       >> $TMPFILE
echo "                     Done with configure step..."                          >> $TMPFILE
echo "-------------------------------------------------------------------"       >> $TMPFILE
cat $TMPFILE
rm -rf $TMPFILE



# TOO (2/24/2011): Requires librose.la
function printRoseTranslatorVersion {
    # DQ (2/12/2010): Added the ROSE version number to the base of the output
    echo "Version numbers of ROSE and the different parts of ROSE."
    make PrintRoseTranslatorVersion
}


#########################################################################################
#
#  ROSE/make
#
#########################################################################################
start_time_make_seconds="$(date +%s)"
ROSE_SPEW_ANALYSIS=yes

case "$ROSE_TEST_BUILD_STYLE" in
"make/check/install-minimal"|"make/check/install-full")

    if test "x$ROSE_SPEW_ANALYSIS" = "xyes" ; then
        makeOutputFile="make_output.txt"
        makeCheckOutputFile="make_check_output.txt"
    fi
    ################################################################################
    # MAKE
    #
    runBuildStep make $makeOutputFile
    ################################################################################
    # MAKE CHECK
    #
    runBuildStep make-check $makeCheckOutputFile
    ################################################################################
    # MAKE INSTALL & INSTALLCHECK
    runBuildStep make-install
    runBuildStep make-installcheck
 ;;

make-distcheck)

    ################################################################################
    # MAKE DISTCHECK
    #
    # Build pre-requisites: stringify.C
    echo "Building prerequisites for make-distcheck..."
    make -j${NUM_PROCESS} -C src/util/stringSupport/ libRoseStringSupport.la
    make -j${NUM_PROCESS} -C src/util/commandlineProcessing/ libRoseCommandlineUtil.la
    make -j${NUM_PROCESS} -C src/util/ libroseutil.la
    make -j${NUM_PROCESS} -C src/ROSETTA/src/
    make -j${NUM_PROCESS} -C src/roseSupport/ stringify.h

    runBuildStep make-distcheck

    # TOO (2/24/2011): Can't printRoseTranslatorVersion: requires librose.la and tests/testAnalysis
    #make -j${NUM_PROCESS} -C src/ 
    #make -j${NUM_PROCESS} -C tests/ testAnalysis
    #printRoseTranslatorVersion
 ;;

make-docs)

    ################################################################################
    # MAKE DOCS 
    #
    # Running with parallelism here does not tend to be very helpful since 
    # doxygen is what has to run and it does not run in parallel.
    echo "Building prerequisites for make-docs..."
    make -j${NUM_PROCESS} -C src/
    make -j${NUM_PROCESS} -C tutorial/
    make -j${NUM_PROCESS} -C projects/UpcTranslation/
    make -j${NUM_PROCESS} -C tests/ testAnalysis

    runBuildStep make-docs

    printRoseTranslatorVersion
 ;;

*)
   echo "ERROR: unrecognized build step = $ROSE_TEST_BUILD_STEP"
   exit 1;
 ;;
esac

####################################################################################
# SUMMARY 
#
hudson_end_time_seconds="$(date +%s)"
elapsed_hudson_time_seconds="$(expr $hudson_end_time_seconds - $hudson_start_time_seconds)"

# Note that this is always over 60 seconds so I think we should keep this.
elapsed_hudson_time_minutes="$(expr $elapsed_hudson_time_seconds / 60)"

# DQ (1/17/2010): This is evaluated as an error if when the result is 0 (when $elapsed_hudson_time_seconds is an even multiple of 60).
#elapsed_hudson_time_modulo_seconds="$(expr $elapsed_hudson_time_seconds % 60)"
echo "***********************************************************************************************"
echo "Elapsed time for Hudson test (total minutes): $elapsed_hudson_time_minutes"
echo "Elapsed time for Hudson test (total seconds): $elapsed_hudson_time_seconds"
# echo "Elapsed time for Hudson test: $elapsed_hudson_time_minutes min $elapsed_hudson_time_modulo_seconds sec"
echo "***********************************************************************************************"

# Output the date and time of day at the end of the test (helpful for debugging).
end_date=`date`
echo ""
echo "********************************************************************"
echo "Executed runParallelizedTest-with-osx (" ${ROSE_TEST_BUILD_STYLE} ")  for ROSE Project on: $machine_name date = $end_date"
echo "********************************************************************"
