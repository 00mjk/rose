## Configuratation directory for rosegit tools							;; -*- shell-script -*-
##
##  	  *****************************************************************************
##  	  *** DO NOT CHANGE THIS FILE; rather augment it with your own config file! ***
##  	  *****************************************************************************
##
## These configuration files are simply shell scripts that get sourced by the tools. The tools
## source these files in a particular order based on the namespace for the user running the tool
## and the branch on which the tool is operating.  For instance, if the running user is Smokey T. Bear
## and the branch is "rpm-new-feature" then the following files are sourced:
##
##    1. defaults.conf              This is always sourced first and must exist
##    2. stb.conf                   Smokey's configuration
##    3. stb.rpm.conf               Smokey's configuration for RPM's branches
##    4. stb.rpm-new-feature.conf   Smokey's configuration for a specific branch
##
## Some commands also take a --config=DIR or --config=FILE command-line switch. The DIR version specifies a directory
## that contains the configuration files (the default is to look in the "config" sibling of the directory containing the
## script being run). The FILE version specifies an additional configuration file that is loaded after all others.
##
## If you copy this defaults.conf file to the more specific names you should not uncomment the variables except
## if you intend to override values that might be set elsewhere.
###############################################################################################################################
BOOST_ROOT=/usr
PIN_ROOT=
DWARF_ROOT=/cleric/work2/brown/installs/dwarf/dwarf-20091118/libdwarf
export QT_ROOT=/usr/local/Trolltech/Qt-4.5.3

## This variable only needs to be set in this defaults.conf file. Its only purpose is so that we can tell if configuration
## information has been loaded.
ROSEGIT_LOADED=yes

##------------------------------------------------------------------------------------------------------------------------
## Name of repository. This is the name of a Git repository for tools that don't take a repository name on their commandline.
## There is no default value.

#ROSEGIT_REPOSITORY=matzke@work:GS-CAD/ROSE/sources


##------------------------------------------------------------------------------------------------------------------------
## Each user is given a name space in which to operate so as not to collide with other users when their changes are pushed
## to a shared location such as the team repository.  In your private clones you may use whatever namespaces you want, including
## the global (null) namespace.  A namespace is typically your three initials, but you can make it whatever you want. If you
## don't specify one then the rosegit system will try to guess something reasonable.
##
## Some of the tools have a --namespace switch that allows you to influence which configuration files are used since the name
## space is part of the configuration file name.

ROSEGIT_NAMESPACE=mcb

##------------------------------------------------------------------------------------------------------------------------
## The name of the test script. Normally you'll want to leave this as the default, but sometimes it's useful to set it to
## something quick for testing.  If the filename is not absolute then it will be searched for in the same directory as the
## test script that's running it. The default is "false", which always fails.

ROSEGIT_TESTER=rat-test

##------------------------------------------------------------------------------------------------------------------------
## The name of the scratch directory where the repository is cloned and tested.

ROSEGIT_WORKDIR=/cleric/work/brown/tmp

##------------------------------------------------------------------------------------------------------------------------
## Variables related to configuring and building source code.  Remember, make no changes in this file--override the settings
## in your own configuration file (where you can even use sed to modify these settings if you like).

# The make command and arguments. You can control parallel builds or even substitute a more capable make, such as makepp.
# The default is to run as many compilations in parallel as possible. You can configure distcc on each machine to restrict
# the number of compilers that are allowed to actually execute in parallel. This method allows the ROSEGIT_MAKE setting to
# be independent of any particular machine.
ROSEGIT_MAKE="make -j"

# The configure command, enclosed in single quotes to prevent expansion until it's invoked.
ROSEGIT_CONFIGURE='$ROSE_SRC/configure \
               --prefix=$(pwd)/installed \
               --with-C_DEBUG=-g       --with-CXX_DEBUG=-g \
               --with-C_WARNINGS=-Wall --with-CXX_WARNINGS=-Wall \
               --with-C_OPTIMIZE=-O0   --with-CXX_OPTIMIZE=-O0 \
               --with-CFLAGS=-fPIC --with-CXXFLAGS=-fPIC\
               --with-ROSE_LONG_MAKE_CHECK_RULE=yes \
               --with-boost=$BOOST_ROOT \
               --with-dwarf=$DWARF_ROOT \
               --with-edg_source_code=true \
               --with-java \
               --with-pch \
               --with-roseQt \
               --with-qt=${QT_ROOT} --with-qt-lib=${QT_ROOT}/lib --with-qt-lib=${QT_ROOT}/include \
               --enable-assembly-semantics \
               --enable-doxygen-developer-docs \
               --enable-edg_union_struct_debugging \
               --enable-rosehpct'


#               --with-sqlite3 \
#               --without-javaport \
#               --with-mysql \
#               --without-ether \
#               --with-binarysql 
#               --enable-dq-developer-tests 
#               --with-ether 

##------------------------------------------------------------------------------------------------------------------------
## Some commands send e-mail to report their progress. There are a number of variables associated with sending e-mail all
## having names like ROSEGIT_MAIL_f_n where "f" is a facility name and "n" is a name (both are upper-case). For instance,
## if a command sends "I'm starting to run" mail then the facility might be START.
##
## The facilities:
##    START   -- mail sent when a potentially long-running script is starting up
##    FAIL    -- mail sent when rose fails a test
##    PASS    -- mail sent when rose passes a test
##    COMMIT  -- mail sent for commits to the subversion repository
##
## A variable having a facility but no name is used to enable or disable the email for that facility. This allows you to
## define the variables in one file and then disable or enable them in another file.  Its value should be empty to disable
## mail, and non-empty to enable. (Values "no" and "false" are also acceptable for disabling.)
##

ROSEGIT_MAIL_START=no
ROSEGIT_MAIL_FAIL=no
ROSEGIT_MAIL_PASS=no
ROSEGIT_MAIL_COMMIT=yes

## The following variables, if empty, will fall back to versions without a facility. In otherwords, if ROSEGIT_MAIL_START_TO
## has no value then we consult ROSEGIT_MAIL_TO.

ROSEGIT_MAIL_TO="$(whoami)@localhost"

## The TO value specifies who the mail will go to.  The default is to send it to the localhost for the user running the test.
## When sending to more then one address separate the addresses with commas and quote the names:

#ROSEGIT_MAIL_facility_TO=matzke@llnl.gov
#ROSEGIT_MAIL_facility_TO='matzke@llnl.gov, dquinlan@llnl.gov'
#ROSEGIT_MAIL_facility_TO='"Robb P. Matzke" <matzke@llnl.gov>'
#ROSEGIT_MAIL_facility_TO='"Robb P. Matzke" <matzke1@llnl.gov>, "Daniel J. Quinlan" <dquinlan@llnl.gov>'

ROSEGIT_MAIL_COMMIT_TO='"Robb P. Matzke" <matzke1@llnl.gov>, "Daniel J. Quinlan" <dquinlan@llnl.gov>, "Chunhua Liao" <liao6@llnl.gov>, "Thomas Panas" <panas2@llnl.gov>, "Matthew C. Brown" <brown223@llnl.gov>'

##------------------------------------------------------------------------------------------------------------------------
## Here's some examples of how to set some miscellaneous stuff. Again, all of this can be overridden in your own config file.

## The default ROSEGIT_CONFIGURE command above uses --with-bost=$BOOST_ROOT. We set BOOST_ROOT here if not already set
## even though it's not a ROSEGIT_* variable.  The "export" is necessary because only ROSEGIT_* variables are automatically
## exported.

export BOOST_ROOT=${BOOST_ROOT:-$HOME/GS-CAD/boost_1_35_0/installed}
export PIN_ROOT=${PIN_ROOT:-$HOME/GS-CAD/pin-2.5-24110-gcc.4.0.0-ia32_intel64-linux}

#export DWARF_ROOT=${DWARF_ROOT:-$HOME/GS-CAD/dwarf-20090217/libdwarf}
export DWARF_ROOT=${DWARF_ROOT:-$HOME/GS-CAD/dwarf-20081013/libdwarf}
eval $(path-adjust --var=LD_LIBRARY_PATH insert $DWARF_ROOT)

# If --with-binarysql is configured then we need to add /usr/include/mysql to the include path.
if (echo "$ROSEGIT_CONFIGURE" |grep -e '--with-binarysql') >/dev/null 2>&1; then
    if (echo $CPPFLAGS | grep -e '-I/usr/include/mysql') >/dev/null 2>&1; then
	: already present
    else
	export CPPFLAGS="$CPPFLAGS -I/usr/include/mysql";
    fi
fi
