## Configuratation directory for rosegit tools							;; -*- shell-script -*-
##
##  	  *****************************************************************************
##  	  *** DO NOT CHANGE THIS FILE; rather augment it with your own config file! ***
##  	  *****************************************************************************
##
## These configuration files are simply shell scripts that get sourced by the tools. The tools
## source these files in a particular order based on the namespace for the user running the tool
## and the branch on which the tool is operating.  For instance, if the running user is Smoky T. Bear
## and the branch is "feature" then the following files are sourced:
##
##    1. defaults.conf              This is always sourced first and must exist
##    2. stb.conf                   Smoky's configuration
##    4. stb.rpm-new-feature.conf   Smoky's configuration for a specific branch
##
## Some commands also take a --config=DIR or --config=FILE command-line switch. The DIR version specifies a directory
## that contains the configuration files (the default is to look in the "config" sibling of the directory containing the
## script being run). The FILE version specifies an additional configuration file that is loaded after all others.
###############################################################################################################################

## This variable only needs to be set in this defaults.conf file. Its only purpose is so that we can tell if configuration
## information has been loaded.
ROSEGIT_LOADED=yes

##------------------------------------------------------------------------------------------------------------------------
## Each user is given a name space in which to operate so as not to collide with other users when their changes are pushed
## to a shared location such as the team repository.  In your private clones you may use whatever namespaces you want, including
## the global (null) namespace.  A namespace is typically your three initials, but you can make it whatever you want. If you
## don't specify one then the rosegit system will try to guess something reasonable.
##
## Some of the tools have a --namespace switch that allows you to influence which configuration files are used since the name
## space is part of the configuration file name.

#ROSEGIT_NAMESPACE=xxx

##------------------------------------------------------------------------------------------------------------------------
## Variables related to configuring and building source code.  Remember, make no changes in this file--override the settings
## in your own configuration file (where you can even use sed to modify these settings if you like).

# The make command and arguments. You can control parallel builds or even substitute a more capable make, such as makepp.
# The default is to run as many compilations in parallel as possible. You can configure distcc on each machine to restrict
# the number of compilers that are allowed to actually execute in parallel. This method allows the ROSEGIT_MAKE setting to
# be independent of any particular machine.
ROSEGIT_MAKE="make -j"

# The configure switches enclosed in single quotes to prevent expansion until it's invoked.
ROSEGIT_CONFIGURE='
    --prefix=$(pwd)/installed \
    --with-C_DEBUG=-g       --with-CXX_DEBUG=-g \
    --with-C_WARNINGS=-Wall --with-CXX_WARNINGS=-Wall \
    --with-C_OPTIMIZE=-O0   --with-CXX_OPTIMIZE=-O0 \
    --with-CFLAGS=-fPIC     --with-CXXFLAGS=-fPIC \
    --with-ROSE_LONG_MAKE_CHECK_RULE=yes \
    --with-binarysql \
    --with-boost \
    --with-dwarf=$DWARF_ROOT \
    --with-edg_source_code=true \
    --with-mysql \
    --with-pch \
    --with-roseQt \
    --with-sqlite3 \
    --with-qt=/usr --with-qt-lib \
    --enable-assembly-semantics \
    --enable-doxygen-developer-docs \
    --enable-dq-developer-tests \
    --enable-edg_union_struct_debugging \
    --enable-rosehpct'

#               --with-ether
#               --with-java
#               --with-javaport

##------------------------------------------------------------------------------------------------------------------------
## Here's some examples of how to set some miscellaneous stuff. Again, all of this can be overridden in your own config file.
## The "export" is necessary since only variables starting with "ROSEGIT" are automatically exported.

# export BOOST_ROOT=${BOOST_ROOT:-$HOME/GS-CAD/boost_1_35_0/installed}
# export PIN_ROOT=${PIN_ROOT:-$HOME/GS-CAD/pin-2.5-24110-gcc.4.0.0-ia32_intel64-linux}
# export DWARF_ROOT=${DWARF_ROOT:-$HOME/GS-CAD/dwarf-20081013/libdwarf}
# eval $(path-adjust --var=LD_LIBRARY_PATH insert $DWARF_ROOT)
# 
# # If --with-binarysql is configured then we need to add /usr/include/mysql to the include path.
# if (echo "$ROSEGIT_CONFIGURE" |grep -e '--with-binarysql') >/dev/null 2>&1; then
#     if (echo $CPPFLAGS | grep -e '-I/usr/include/mysql') >/dev/null 2>&1; then
# 	: already present
#     else
# 	export CPPFLAGS="$CPPFLAGS -I/usr/include/mysql";
#     fi
# fi
