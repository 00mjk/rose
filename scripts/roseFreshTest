#!/bin/bash
# This script does a fresh checkout of ROSE and conducts series tests
# Please provide your customized configurations in a .sh file before using this script:
#
# example .sh file: rose/scripts/roseFreshTestStub-Jeremiah-asmAsEnum.sh, which sets 
#
# 1. Environment variables,
# 2. The path to the source and build directories of ROSE
# 3. The configuration options for building ROSE
# 4. Email notification recipients, etc.  
#
# Usage ------------------
# manual run it:
#      ./roseFreshTest yourConfiguration.sh 
#
# automatically run it as a daily cron job running at 2:30AM
#   $ crontab -e
#   30 2 * * * /home/liao6/rose/scripts/roseFreshTestLeo /path/to/yourconfig.sh
#
# Liao, Jeremiah, 2/7/2008
# Last modified 3/28/2008
#------------------------------------------------------

user_config_file="$1"
shift
. $user_config_file

set -e
rm -rf ${ROSE_TOP}
mkdir -p ${ROSE_TOP}
cd ${ROSE_TOP}

set -e

(
echo "Subject: Starting ROSE test $$" > mailtext1
echo "" >> mailtext1
echo ">>> See build log in ${ROSE_TOP}/buildlog for status" >> mailtext1
echo "SVN root = ${ROSE_SVNROOT}" >> mailtext1
echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext1
echo "Make flags = ${MAKEFLAGS}" >> mailtext1
echo "" >> mailtext1
echo "> Command versions" >> mailtext1
(automake --version | head -1 || echo "automake not found") >> mailtext1
(autoconf --version | head -1 || echo "autoconf not found") >> mailtext1
(make --version | head -1 || echo "make not found") >> mailtext1
(g++ --version | head -1 || echo "g++ not found") >> mailtext1
(gcc --version | head -1 || echo "gcc not found") >> mailtext1
(bison --version | head -1 || echo "bison not found") >> mailtext1
echo -n "doxygen " >> mailtext1
(doxygen --version || echo "not found") >> mailtext1
dot -V >> mailtext1 2>&1 || echo "dot not found" >> mailtext1
(libtool --version | sed '2,$d' || echo "libtool not found") >> mailtext1 # head -1 crashes
(latex --version | head -1 || echo "latex not found") >> mailtext1
(latex2html -v | grep -w LaTeX2HTML || echo "latex2html not found") >> mailtext1
(swig -version | grep -w SWIG || echo "swig not found") >> mailtext1
echo "" >> mailtext1
echo "> Environment:" >> mailtext1
printenv >> mailtext1
)

/usr/sbin/sendmail -i $MAILADDRS < mailtext1

buildstatus=0
(
  set -e
  set -x

#------------------------------------------------------
# check out a fresh copy for testing
  $SVN export -q ${ROSE_SVNROOT} sourcetree

#------------------------------------------------------
# rebuild the Makefile in the source tree
  echo "Build configuration and Makefile.in in the source tree...."
  cd sourcetree
  ./build
  cd ..

#------------------------------------------------------
# prepare a fresh build tree
  echo "Making a temporary build directory:... "
  mkdir build

# Prevent writing to the install tree
  mkdir install
  chmod 000 install

#------------------------------------------------------
# configure ROSE
  cd build
# ROSE_CONFIG_FLAGS="--without-binary_analysis --enable-rosehpct --with-openFortranParser=/home/liao6/download/fortran-parser --with-Java=/usr/apps/java/jdk1.5.0_11 --with-JavaJVM=/usr/apps/java/jdk1.5.0_11/jre/lib/i386/server"
  ../sourcetree/configure "${CONFIGURE_FLAGS[@]}"

#------------------------------------------------------
# make and check
  make $MAKEFLAGS && \
  make $MAKEFLAGS docs && \
  make $MAKEFLAGS check && \
  rmdir ../install && \
  make $MAKEFLAGS install && \
  make $MAKEFLAGS installcheck && \
  make $MAKEFLAGS dist && \
  make $MAKEFLAGS distcheck
) >buildlog 2>&1 || buildstatus=1

if [ $buildstatus == 0 ]; then
  echo "Subject: ROSE test $$ results (pass)" > mailtext
  echo "" >> mailtext
  echo "SVN root = ${ROSE_SVNROOT}" >> mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext
  echo "Make flags = ${MAKEFLAGS}" >> mailtext
  echo "" >> mailtext
  echo "> Environment:" >> mailtext
  printenv >> mailtext
  echo "" >> mailtext
else
  echo "Subject: ROSE test $$ results (fail)" > mailtext
  echo "" >> mailtext
  echo "SVN root = ${ROSE_SVNROOT}" >> mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext
  echo "Make flags = ${MAKEFLAGS}" >> mailtext
  echo "" >> mailtext
  echo "> Environment:" >> mailtext
  printenv >> mailtext
  echo "" >> mailtext
  echo ">>> -------------------- Error summary --------------------" >> mailtext
  tail -100 buildlog >> mailtext
  echo "" >> mailtext
fi
# echo "-------------------- Full log      --------------------" >> mailtext
# cat buildlog >> mailtext (too big)
/usr/sbin/sendmail -i $MAILADDRS < mailtext
if [ $buildstatus == 0 ]; then rm -rf "${ROSE_TOP}"; fi # Only delete if the test passed
