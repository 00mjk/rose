#!/bin/bash
# This script does a fresh checkout of ROSE and conducts series tests
# Please provide your customized configurations in a .sh file before using this script:
#
# example .sh file: rose/scripts/roseFreshTestStub-Jeremiah-asmAsEnum.sh, which sets 
#
# x. Environment variables,
# x. The path to the source and build directories of ROSE
# x. The configuration options for building ROSE
# x. Email notification recipients, etc.  
# x. Enable upload roseCompiler website
# x. Enable load ROSE distribution as vendor drop to the SciDAC repository
#
# Caution: 
#    Be extremely careful when change the directory layout of the test dir.
#    Other scripts may depend on it.     
#    
# Usage ------------------
# manual run it:
#      ./roseFreshTest yourConfiguration.sh 
#
# automatically run it as a daily cron job running at 2:30AM
#   $ crontab -e
#   30 2 * * * /home/liao6/rose/scripts/roseFreshTest /path/to/yourconfigStub.sh
#
# Liao, Jeremiah, 2/7/2008
# Last modified 8/6/2008
#------------------------------------------------------
if [ $# -lt 1 ]
then
  echo This script needs at least one argument
  echo Exampe:$0 your_config_stub.sh
  exit 1
fi

#------------------------------------------------------
# Configuration Section
#------------------------------------------------------
# Obtain the configuration file from the first argument of the script
user_config_file="$1"
shift
. $user_config_file

set -e
rm -rf ${ROSE_TOP}
mkdir -p ${ROSE_TOP}
cd ${ROSE_TOP}
# This is required so that the DESTDIR part of "make distcheck" doesn't fail by
# running out of space on /tmp on tux270
mkdir tmp
TMPDIR=${ROSE_TOP}/tmp/
export TMPDIR

#------------------------------------------------------
# Starting Section
#------------------------------------------------------
#Exit immediately if a command fails
set -e

# SVNVERSIONOPTION is an optional option supplied in the configuration stub
# default is the head reversion.It is one of the -r options in "svn help checkout"
if [ "x$SVNVERSIONOPTION" = "x" ]; then SVNVERSIONOPTION="HEAD"; fi
svnversion=`${SVN} info -r${SVNVERSIONOPTION} ${ROSE_SVNROOT} | grep '^Revision: ' | cut -f 2 -d \ `
svnmodificationdate=`${SVN} info -r${SVNVERSIONOPTION} ${ROSE_SVNROOT} | grep '^Last Changed Date: ' | cut -f 4- -d \ `

(
if [ $TIMESTAMP ]; then
  echo "Subject: Starting ROSE test $TIMESTAMP on `hostname`" > mailtext1
else
  echo "Subject: Starting ROSE test $$ on `hostname`" > mailtext1
fi  
echo "" >> mailtext1
echo ">>> See build log in ${ROSE_TOP}/buildlog on `hostname` for status" >> mailtext1
echo "SVN root = ${ROSE_SVNROOT}" >> mailtext1
echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> mailtext1
echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext1
echo "Make flags = ${MAKEFLAGS}" >> mailtext1
echo "Hostname = `hostname`" >> mailtext1
echo "" >> mailtext1
echo "> Command versions" >> mailtext1
(automake --version | head -1 || echo "automake not found") >> mailtext1
(autoconf --version | head -1 || echo "autoconf not found") >> mailtext1
(make --version | head -1 || echo "make not found") >> mailtext1
(g++ --version | head -1 || echo "g++ not found") >> mailtext1
(gcc --version | head -1 || echo "gcc not found") >> mailtext1
(bison --version | head -1 || echo "bison not found") >> mailtext1
echo -n "doxygen " >> mailtext1
(doxygen --version || echo "not found") >> mailtext1
dot -V >> mailtext1 2>&1 || echo "dot not found" >> mailtext1
(libtool --version | sed '2,$d' || echo "libtool not found") >> mailtext1 # head -1 crashes
(latex --version | head -1 || echo "latex not found") >> mailtext1
(latex2html -v | grep -w LaTeX2HTML || echo "latex2html not found") >> mailtext1
(swig -version | grep -w SWIG || echo "swig not found") >> mailtext1
(grep '#define *BOOST_LIB_VERSION' ${BOOST_ROOTX}/include/*/boost/version.hpp | cut -f 3 -d ' ' | tr -d '"' | tr _ . | sed 's/^/Boost version: /' || echo "Boost not found") >> mailtext1
echo "" >> mailtext1
echo "> Environment:" >> mailtext1
printenv >> mailtext1
)

/usr/sbin/sendmail -i $MAILADDRS < mailtext1

#------------------------------------------------------
#  Building and Making Section
#------------------------------------------------------
buildstatus=0
(
  set -e
  # Print a trace of simple Shell commands  
  set -x

#------------------------------------------------------
# check out a fresh copy for testing
# Two methods: checkout and export (default)
  if [ "x$SVNOP" = "x" ]; then SVNOP=export; fi
  $SVN ${SVNOP} -r${svnversion} -q ${ROSE_SVNROOT} sourcetree

#------------------------------------------------------
# rebuild the Makefile in the source tree
  echo "Build configuration and Makefile.in in the source tree...."
  cd sourcetree
  ./build
  cd ..

#------------------------------------------------------
# prepare a fresh build tree
  echo "Making a temporary build directory:... "
  mkdir build

# Prevent writing to the install tree
  mkdir install
if [ $NORMAL_INSTALL_DIR ] ; then
  echo "Normal file permission for the installation directory"
else  
  chmod 000 install
fi  

#------------------------------------------------------
# configure,make, and test ROSE
  cd build
  ../sourcetree/configure "${CONFIGURE_FLAGS[@]}" &&
  echo "############ configure done" &&
  make $MAKEFLAGS &&
  echo "############ make done" &&
  make $MAKEFLAGS docs &&
  echo "############ make docs done" &&
  make $MAKEFLAGS check &&
  echo "############ make check done" &&
  rmdir ../install &&
  make $MAKEFLAGS install &&
  echo "############ make install done" &&
  make $MAKEFLAGS installcheck &&
  echo "############ make installcheck done" &&
  if test $? -ne 0; then exit 1; fi &&

  # skip the rest if we are testing the head of the SciDAC repository of ROSE
  if [ $SKIP_DIST_TEST ] ; then
    echo "Skipping make dist, distcheck, source_with_binary_edg_dist.." 
  else  
    make $MAKEFLAGS dist &&
    echo "############ make dist done" &&
    make $MAKEFLAGS distcheck &&
    echo "############ make distcheck done" &&
    # Build a binary version of EDG and put it into the source tree
    if [ $ENABLE_BUILD_BINARY_EDG ]; then
      cd ${ROSE_TOP}/build &&
      make binary_edg_tarball &&
      ${ROSE_TOP}/sourcetree/scripts/copy_binary_edg_tarball_to_source_tree_svn ${ROSE_SVNROOT} `${ROSE_TOP}/sourcetree/config/config.guess` &&
      ${ROSE_TOP}/sourcetree/scripts/copy_binary_edg_tarball_to_source_tree ${ROSE_TOP}/sourcetree `${ROSE_TOP}/sourcetree/config/config.guess`
    fi &&
    make $MAKEFLAGS source_with_binary_edg_dist DOT_SVNREV=-${svnversion} &&
    echo "############ make source_with_binary_edg_dist done"
  fi
) >buildlog 2>&1 || buildstatus=1

#------------------------------------------------------
# Report Section
#------------------------------------------------------
 mailtext=${ROSE_TOP}/mailtext  # using absolute path to work with changing current dir.
if [ $buildstatus == 0 ]; then  
  if [ $TIMESTAMP ]; then
    echo "Subject: ROSE test $TIMESTAMP on `hostname` results (pass)" > $mailtext
  else
    echo "Subject: ROSE test $$ on `hostname` results (pass)" > $mailtext
  fi
  echo "" >> $mailtext
  echo "SVN root = ${ROSE_SVNROOT}" >> $mailtext
  echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> $mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> $mailtext
  echo "Make flags = ${MAKEFLAGS}" >> $mailtext
  echo "Hostname = `hostname`" >> $mailtext
  echo "" >> $mailtext
  echo "> Environment:" >> $mailtext
  printenv >> $mailtext
  echo "" >> $mailtext
  #------------------------------------------------------
  # Optional uploading Section: for successful tests only
  #------------------------------------------------------
   # documentations to www.roseCompiler.org
  if [ $ENABLE_UPLOAD_WEB ] ; then
    # update the web site
    cd ${ROSE_TOP}/build/docs/Rose
    make copyWebPages
    if [ $? -ne 0 ]; then
      echo "Error: make copyWebPages finishes abnormally!" >>$mailtext
    else
      echo "make copyWebPages finishes normally.">>$mailtext
    fi
  fi
 # upload ROSE sources-with-EDG-binary to the SciDAC Outreach repository 
  if [ $ENABLE_UPLOAD_SVN ] ; then

     ${ROSE_TOP}/sourcetree/scripts/importRoseDistributionToSVN ${ROSE_TOP} >>${ROSE_TOP}/buildlog
    if [ $? -ne 0 ]; then
      echo "Error: importRoseDistributionToSVN finishes abnormally!" >>$mailtext
    else
      echo "importRoseDistributionToSVN finishes normally.">>$mailtext
    fi
  fi
else
  if [ $TIMESTAMP ]; then
    echo "Subject: ROSE test $TIMESTAMP on `hostname` results (fail)" > $mailtext
  else
    echo "Subject: ROSE test $$ on `hostname` results (fail)" > $mailtext
  fi  
  echo "" >> $mailtext
  echo "SVN root = ${ROSE_SVNROOT}" >> $mailtext
  echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> $mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> $mailtext
  echo "Make flags = ${MAKEFLAGS}" >> $mailtext
  echo "Hostname = `hostname`" >> $mailtext
  echo "" >> $mailtext
  echo "> Environment:" >> $mailtext
  printenv >> $mailtext
  echo "" >> $mailtext
  echo ">>> -------------------- Error summary --------------------" >> $mailtext
  tail -100 buildlog >> $mailtext
  echo "" >> $mailtext
fi
# echo "-------------------- Full log      --------------------" >> $mailtext
# cat buildlog >> $mailtext (too big)
/usr/sbin/sendmail -i $MAILADDRS < $mailtext
if [ $KEEP_TEST_DIR ] ; then
  : # echo "Test directory is preserved."
else  
  # echo "Test directory has been removed."
  if [ $buildstatus == 0 ]; then rm -rf "${ROSE_TOP}"; fi # Only delete if the test passed
fi 
