#!/bin/sh
# Prints information about the environment.  Also defines a few functions for use in the test scripts.

echo "Date:              $(date)"
echo "User:              $(whoami) pid=$$"
echo "Machine:           $(hostname --long) [$(hostname --ip-address)]"
echo "Operating system:  $(uname -s) $(uname -r) $(uname -v)"
echo "Architecture:      $(uname -m) $(uname -i) $(uname -p)"
echo "Commit:            $(git rev-parse HEAD)"
echo "Tester script:     $0"
echo "Directory:         $(pwd)"
echo "Uptime:            $(uptime)"
echo "Software:"
echo "    $(make --version |head -n1)"
echo "    $(gcc --version |head -n1)"
echo "    $(g++ --version |head -n1)"
echo "    $(bison --version |head -n1)"
echo "    doxygen $(doxygen --version)"
echo "    $(dot -V 2>&1)"
echo "    $(libtool --version |head -n1)"
echo "    $(tex --version |head -n1)"
echo "    $(latex --version |head -n1)"
echo "    $(swig -version |grep -i version)"
echo
df -h .
echo
echo "Memory usage (MB):"
free -tom

myname="${0##*/}"

# Format elapsed time into a human-readable value like 5d2h20m5s
elapsed_human () {
    local nsec=$1
    local y= x=$((nsec/86400)) nsec=$((nsec%86400))
    [ $x -gt 0 ] && echo -n "${x}d" && y=yes
    x=$((nsec/3600)) nsec=$((nsec%3600))
    [ -n "$y" -o $x -gt 0 ] && echo -n "${x}h" && y=yes
    x=$((nsec/60)) nsec=$((nsec%60))
    [ -n "$y" -o $x -gt 0 ] && echo -n "${x}m" && y=yes
    echo "${nsec}s"
}

# Runs and times a command. Also emits a short progress message to the
# standard output of "rgit test", and if the test is running in an
# xterm then the title of the xterm window is also changed.
run () {
    local name="$1"; shift	# first arg is a short string to output from rgit-test stdout; remaining args are command
    local start_time=$(date +%s)
    echo -n "$name..." >&6	# fd 6 is redirected to rgit-test stdout.
    [ -n "$XTERM" ] && echo -en "\033]0;$myname: $name\007" >&6 # sets title of xterm window
    echo "+" "$@" >&2
    eval "$@"; local status=$?
    local end_time=$(date +%s)
    local elapsed=$(elapsed_human $((end_time - start_time)))
    [ $status -eq 0 ] && echo "OK ($elapsed)" >&6
    [ $status -ne 0 ] && echo "FAIL ($elapsed)" >&6
    [ -n "$XTERM" ] && echo -en "\033]0;$XTERM\007" >&6 # set title of xterm window to something generic
    return $status
}